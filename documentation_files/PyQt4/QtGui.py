class pyqtSignal():
 def connect(self, targetSignal): pass
 def emit(self, *args): pass
from QtCore import *

class QPaintDevice():
    """"""
    # Enum QPaintDevice.PaintDeviceMetric
    PdmWidth = 0
    PdmHeight = 0
    PdmWidthMM = 0
    PdmHeightMM = 0
    PdmNumColors = 0
    PdmDepth = 0
    PdmDpiX = 0
    PdmDpiY = 0
    PdmPhysicalDpiX = 0
    PdmPhysicalDpiY = 0

    def __init__(self):
        '''void QPaintDevice.__init__()'''
    def metric(self, metric):
        '''int QPaintDevice.metric(QPaintDevice.PaintDeviceMetric metric)'''
        return int()
    def colorCount(self):
        '''int QPaintDevice.colorCount()'''
        return int()
    def paintingActive(self):
        '''bool QPaintDevice.paintingActive()'''
        return bool()
    def depth(self):
        '''int QPaintDevice.depth()'''
        return int()
    def numColors(self):
        '''int QPaintDevice.numColors()'''
        return int()
    def physicalDpiY(self):
        '''int QPaintDevice.physicalDpiY()'''
        return int()
    def physicalDpiX(self):
        '''int QPaintDevice.physicalDpiX()'''
        return int()
    def logicalDpiY(self):
        '''int QPaintDevice.logicalDpiY()'''
        return int()
    def logicalDpiX(self):
        '''int QPaintDevice.logicalDpiX()'''
        return int()
    def heightMM(self):
        '''int QPaintDevice.heightMM()'''
        return int()
    def widthMM(self):
        '''int QPaintDevice.widthMM()'''
        return int()
    def height(self):
        '''int QPaintDevice.height()'''
        return int()
    def width(self):
        '''int QPaintDevice.width()'''
        return int()
    def paintEngine(self):
        '''abstract QPaintEngine QPaintDevice.paintEngine()'''
        return QPaintEngine()


class QWidget(QObject, QPaintDevice):
    """"""
    # Enum QWidget.RenderFlag
    DrawWindowBackground = 0
    DrawChildren = 0
    IgnoreMask = 0

    def __init__(self, parent = None, flags = 0):
        '''void QWidget.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def setInputMethodHints(self, hints):
        '''void QWidget.setInputMethodHints(Qt.InputMethodHints hints)'''
    def inputMethodHints(self):
        '''Qt.InputMethodHints QWidget.inputMethodHints()'''
        return Qt.InputMethodHints()
    def previousInFocusChain(self):
        '''QWidget QWidget.previousInFocusChain()'''
        return QWidget()
    def contentsMargins(self):
        '''QMargins QWidget.contentsMargins()'''
        return QMargins()
    def ungrabGesture(self, type):
        '''void QWidget.ungrabGesture(Qt.GestureType type)'''
    def grabGesture(self, type, flags = None):
        '''void QWidget.grabGesture(Qt.GestureType type, Qt.GestureFlags flags = Qt.GestureFlags(0))'''
    def setGraphicsEffect(self, effect):
        '''void QWidget.setGraphicsEffect(QGraphicsEffect effect)'''
    def graphicsEffect(self):
        '''QGraphicsEffect QWidget.graphicsEffect()'''
        return QGraphicsEffect()
    def graphicsProxyWidget(self):
        '''QGraphicsProxyWidget QWidget.graphicsProxyWidget()'''
        return QGraphicsProxyWidget()
    def windowFilePath(self):
        '''QString QWidget.windowFilePath()'''
        return QString()
    def setWindowFilePath(self, filePath):
        '''void QWidget.setWindowFilePath(QString filePath)'''
    def nativeParentWidget(self):
        '''QWidget QWidget.nativeParentWidget()'''
        return QWidget()
    def effectiveWinId(self):
        '''int QWidget.effectiveWinId()'''
        return int()
    def unsetLocale(self):
        '''void QWidget.unsetLocale()'''
    def locale(self):
        '''QLocale QWidget.locale()'''
        return QLocale()
    def setLocale(self, locale):
        '''void QWidget.setLocale(QLocale locale)'''
    def render(self, target, targetOffset = QPoint(), sourceRegion = QRegion(), flags = None):
        '''void QWidget.render(QPaintDevice target, QPoint targetOffset = QPoint(), QRegion sourceRegion = QRegion(), QWidget.RenderFlags flags = QWidget.DrawWindowBackground|QWidget.DrawChildren)'''
    def render(self, painter, targetOffset = QPoint(), sourceRegion = QRegion(), flags = None):
        '''void QWidget.render(QPainter painter, QPoint targetOffset = QPoint(), QRegion sourceRegion = QRegion(), QWidget.RenderFlags flags = QWidget.DrawWindowBackground|QWidget.DrawChildren)'''
    def restoreGeometry(self, geometry):
        '''bool QWidget.restoreGeometry(QByteArray geometry)'''
        return bool()
    def saveGeometry(self):
        '''QByteArray QWidget.saveGeometry()'''
        return QByteArray()
    def setShortcutAutoRepeat(self, id, enabled = True):
        '''void QWidget.setShortcutAutoRepeat(int id, bool enabled = True)'''
    def styleSheet(self):
        '''QString QWidget.styleSheet()'''
        return QString()
    def setStyleSheet(self, styleSheet):
        '''void QWidget.setStyleSheet(QString styleSheet)'''
    def setAutoFillBackground(self, enabled):
        '''void QWidget.setAutoFillBackground(bool enabled)'''
    def autoFillBackground(self):
        '''bool QWidget.autoFillBackground()'''
        return bool()
    def setWindowModality(self, windowModality):
        '''void QWidget.setWindowModality(Qt.WindowModality windowModality)'''
    def windowModality(self):
        '''Qt.WindowModality QWidget.windowModality()'''
        return Qt.WindowModality()
    def testAttribute(self, attribute):
        '''bool QWidget.testAttribute(Qt.WidgetAttribute attribute)'''
        return bool()
    def parentWidget(self):
        '''QWidget QWidget.parentWidget()'''
        return QWidget()
    def height(self):
        '''int QWidget.height()'''
        return int()
    def width(self):
        '''int QWidget.width()'''
        return int()
    def size(self):
        '''QSize QWidget.size()'''
        return QSize()
    def geometry(self):
        '''QRect QWidget.geometry()'''
        return QRect()
    def rect(self):
        '''QRect QWidget.rect()'''
        return QRect()
    def isHidden(self):
        '''bool QWidget.isHidden()'''
        return bool()
    def isVisible(self):
        '''bool QWidget.isVisible()'''
        return bool()
    def updatesEnabled(self):
        '''bool QWidget.updatesEnabled()'''
        return bool()
    def underMouse(self):
        '''bool QWidget.underMouse()'''
        return bool()
    def hasMouseTracking(self):
        '''bool QWidget.hasMouseTracking()'''
        return bool()
    def setMouseTracking(self, enable):
        '''void QWidget.setMouseTracking(bool enable)'''
    def fontInfo(self):
        '''QFontInfo QWidget.fontInfo()'''
        return QFontInfo()
    def fontMetrics(self):
        '''QFontMetrics QWidget.fontMetrics()'''
        return QFontMetrics()
    def font(self):
        '''QFont QWidget.font()'''
        return QFont()
    def maximumHeight(self):
        '''int QWidget.maximumHeight()'''
        return int()
    def maximumWidth(self):
        '''int QWidget.maximumWidth()'''
        return int()
    def minimumHeight(self):
        '''int QWidget.minimumHeight()'''
        return int()
    def minimumWidth(self):
        '''int QWidget.minimumWidth()'''
        return int()
    def isEnabledToTLW(self):
        '''bool QWidget.isEnabledToTLW()'''
        return bool()
    def isModal(self):
        '''bool QWidget.isModal()'''
        return bool()
    def isEnabled(self):
        '''bool QWidget.isEnabled()'''
        return bool()
    def isWindow(self):
        '''bool QWidget.isWindow()'''
        return bool()
    def isTopLevel(self):
        '''bool QWidget.isTopLevel()'''
        return bool()
    def winId(self):
        '''int QWidget.winId()'''
        return int()
    def windowFlags(self):
        '''Qt.WindowFlags QWidget.windowFlags()'''
        return Qt.WindowFlags()
    def windowType(self):
        '''Qt.WindowType QWidget.windowType()'''
        return Qt.WindowType()
    def languageChange(self):
        '''void QWidget.languageChange()'''
    def windowActivationChange(self):
        '''bool QWidget.windowActivationChange()'''
        return bool()
    def fontChange(self):
        '''QFont QWidget.fontChange()'''
        return QFont()
    def paletteChange(self):
        '''QPalette QWidget.paletteChange()'''
        return QPalette()
    def enabledChange(self):
        '''bool QWidget.enabledChange()'''
        return bool()
    def focusPreviousChild(self):
        '''bool QWidget.focusPreviousChild()'''
        return bool()
    def focusNextChild(self):
        '''bool QWidget.focusNextChild()'''
        return bool()
    def focusNextPrevChild(self, next):
        '''bool QWidget.focusNextPrevChild(bool next)'''
        return bool()
    def destroy(self, destroyWindow = True, destroySubWindows = True):
        '''void QWidget.destroy(bool destroyWindow = True, bool destroySubWindows = True)'''
    def create(self, window = 0, initializeWindow = True, destroyOldWindow = True):
        '''void QWidget.create(int window = 0, bool initializeWindow = True, bool destroyOldWindow = True)'''
    def updateMicroFocus(self):
        '''void QWidget.updateMicroFocus()'''
    def resetInputContext(self):
        '''void QWidget.resetInputContext()'''
    def inputMethodQuery(self):
        '''Qt.InputMethodQuery QWidget.inputMethodQuery()'''
        return Qt.InputMethodQuery()
    def inputMethodEvent(self):
        '''QInputMethodEvent QWidget.inputMethodEvent()'''
        return QInputMethodEvent()
    def metric(self):
        '''QPaintDevice.PaintDeviceMetric QWidget.metric()'''
        return QPaintDevice.PaintDeviceMetric()
    def changeEvent(self):
        '''QEvent QWidget.changeEvent()'''
        return QEvent()
    def hideEvent(self):
        '''QHideEvent QWidget.hideEvent()'''
        return QHideEvent()
    def showEvent(self):
        '''QShowEvent QWidget.showEvent()'''
        return QShowEvent()
    def dropEvent(self):
        '''QDropEvent QWidget.dropEvent()'''
        return QDropEvent()
    def dragLeaveEvent(self):
        '''QDragLeaveEvent QWidget.dragLeaveEvent()'''
        return QDragLeaveEvent()
    def dragMoveEvent(self):
        '''QDragMoveEvent QWidget.dragMoveEvent()'''
        return QDragMoveEvent()
    def dragEnterEvent(self):
        '''QDragEnterEvent QWidget.dragEnterEvent()'''
        return QDragEnterEvent()
    def actionEvent(self):
        '''QActionEvent QWidget.actionEvent()'''
        return QActionEvent()
    def tabletEvent(self):
        '''QTabletEvent QWidget.tabletEvent()'''
        return QTabletEvent()
    def contextMenuEvent(self):
        '''QContextMenuEvent QWidget.contextMenuEvent()'''
        return QContextMenuEvent()
    def closeEvent(self):
        '''QCloseEvent QWidget.closeEvent()'''
        return QCloseEvent()
    def resizeEvent(self):
        '''QResizeEvent QWidget.resizeEvent()'''
        return QResizeEvent()
    def moveEvent(self):
        '''QMoveEvent QWidget.moveEvent()'''
        return QMoveEvent()
    def paintEvent(self):
        '''QPaintEvent QWidget.paintEvent()'''
        return QPaintEvent()
    def leaveEvent(self):
        '''QEvent QWidget.leaveEvent()'''
        return QEvent()
    def enterEvent(self):
        '''QEvent QWidget.enterEvent()'''
        return QEvent()
    def focusOutEvent(self):
        '''QFocusEvent QWidget.focusOutEvent()'''
        return QFocusEvent()
    def focusInEvent(self):
        '''QFocusEvent QWidget.focusInEvent()'''
        return QFocusEvent()
    def keyReleaseEvent(self):
        '''QKeyEvent QWidget.keyReleaseEvent()'''
        return QKeyEvent()
    def keyPressEvent(self):
        '''QKeyEvent QWidget.keyPressEvent()'''
        return QKeyEvent()
    def wheelEvent(self):
        '''QWheelEvent QWidget.wheelEvent()'''
        return QWheelEvent()
    def mouseMoveEvent(self):
        '''QMouseEvent QWidget.mouseMoveEvent()'''
        return QMouseEvent()
    def mouseDoubleClickEvent(self):
        '''QMouseEvent QWidget.mouseDoubleClickEvent()'''
        return QMouseEvent()
    def mouseReleaseEvent(self):
        '''QMouseEvent QWidget.mouseReleaseEvent()'''
        return QMouseEvent()
    def mousePressEvent(self):
        '''QMouseEvent QWidget.mousePressEvent()'''
        return QMouseEvent()
    def event(self):
        '''QEvent QWidget.event()'''
        return QEvent()
    customContextMenuRequested = pyqtSignal() # void customContextMenuRequested(const QPointamp;) - signal
    def isAncestorOf(self, child):
        '''bool QWidget.isAncestorOf(QWidget child)'''
        return bool()
    def setInputContext(self):
        '''QInputContext QWidget.setInputContext()'''
        return QInputContext()
    def inputContext(self):
        '''QInputContext QWidget.inputContext()'''
        return QInputContext()
    def ensurePolished(self):
        '''void QWidget.ensurePolished()'''
    def paintEngine(self):
        '''QPaintEngine QWidget.paintEngine()'''
        return QPaintEngine()
    def setAttribute(self, attribute, on = True):
        '''void QWidget.setAttribute(Qt.WidgetAttribute attribute, bool on = True)'''
    def handle(self):
        '''int QWidget.handle()'''
        return int()
    def x11PictureHandle(self):
        '''int QWidget.x11PictureHandle()'''
        return int()
    def x11Info(self):
        '''QX11Info QWidget.x11Info()'''
        return QX11Info()
    def childAt(self, p):
        '''QWidget QWidget.childAt(QPoint p)'''
        return QWidget()
    def childAt(self, ax, ay):
        '''QWidget QWidget.childAt(int ax, int ay)'''
        return QWidget()
    def find(self):
        '''static int QWidget.find()'''
        return int()
    def overrideWindowFlags(self, type):
        '''void QWidget.overrideWindowFlags(Qt.WindowFlags type)'''
    def setWindowFlags(self, type):
        '''void QWidget.setWindowFlags(Qt.WindowFlags type)'''
    def actions(self):
        '''list-of-QAction QWidget.actions()'''
        return [QAction()]
    def removeAction(self, action):
        '''void QWidget.removeAction(QAction action)'''
    def insertActions(self, before, actions):
        '''void QWidget.insertActions(QAction before, list-of-QAction actions)'''
    def insertAction(self, before, action):
        '''void QWidget.insertAction(QAction before, QAction action)'''
    def addActions(self, actions):
        '''void QWidget.addActions(list-of-QAction actions)'''
    def addAction(self, action):
        '''void QWidget.addAction(QAction action)'''
    def setAcceptDrops(self, on):
        '''void QWidget.setAcceptDrops(bool on)'''
    def acceptDrops(self):
        '''bool QWidget.acceptDrops()'''
        return bool()
    def nextInFocusChain(self):
        '''QWidget QWidget.nextInFocusChain()'''
        return QWidget()
    def focusWidget(self):
        '''QWidget QWidget.focusWidget()'''
        return QWidget()
    def scroll(self, dx, dy):
        '''void QWidget.scroll(int dx, int dy)'''
    def scroll(self, dx, dy):
        '''QRect QWidget.scroll(int dx, int dy)'''
        return QRect()
    def setParent(self, parent):
        '''void QWidget.setParent(QWidget parent)'''
    def setParent(self, parent, f):
        '''void QWidget.setParent(QWidget parent, Qt.WindowFlags f)'''
    def updateGeometry(self):
        '''void QWidget.updateGeometry()'''
    def setLayout(self):
        '''QLayout QWidget.setLayout()'''
        return QLayout()
    def layout(self):
        '''QLayout QWidget.layout()'''
        return QLayout()
    def contentsRect(self):
        '''QRect QWidget.contentsRect()'''
        return QRect()
    def getContentsMargins(self, left, top, right, bottom):
        '''void QWidget.getContentsMargins(int left, int top, int right, int bottom)'''
    def setContentsMargins(self, left, top, right, bottom):
        '''void QWidget.setContentsMargins(int left, int top, int right, int bottom)'''
    def setContentsMargins(self, margins):
        '''void QWidget.setContentsMargins(QMargins margins)'''
    def visibleRegion(self):
        '''QRegion QWidget.visibleRegion()'''
        return QRegion()
    def heightForWidth(self):
        '''int QWidget.heightForWidth()'''
        return int()
    def setSizePolicy(self):
        '''QSizePolicy QWidget.setSizePolicy()'''
        return QSizePolicy()
    def setSizePolicy(self, hor, ver):
        '''void QWidget.setSizePolicy(QSizePolicy.Policy hor, QSizePolicy.Policy ver)'''
    def sizePolicy(self):
        '''QSizePolicy QWidget.sizePolicy()'''
        return QSizePolicy()
    def minimumSizeHint(self):
        '''QSize QWidget.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QWidget.sizeHint()'''
        return QSize()
    def overrideWindowState(self, state):
        '''void QWidget.overrideWindowState(Qt.WindowStates state)'''
    def setWindowState(self, state):
        '''void QWidget.setWindowState(Qt.WindowStates state)'''
    def windowState(self):
        '''Qt.WindowStates QWidget.windowState()'''
        return Qt.WindowStates()
    def isFullScreen(self):
        '''bool QWidget.isFullScreen()'''
        return bool()
    def isMaximized(self):
        '''bool QWidget.isMaximized()'''
        return bool()
    def isMinimized(self):
        '''bool QWidget.isMinimized()'''
        return bool()
    def isVisibleTo(self):
        '''QWidget QWidget.isVisibleTo()'''
        return QWidget()
    def adjustSize(self):
        '''void QWidget.adjustSize()'''
    def setGeometry(self):
        '''QRect QWidget.setGeometry()'''
        return QRect()
    def setGeometry(self, ax, ay, aw, ah):
        '''void QWidget.setGeometry(int ax, int ay, int aw, int ah)'''
    def resize(self):
        '''QSize QWidget.resize()'''
        return QSize()
    def resize(self, w, h):
        '''void QWidget.resize(int w, int h)'''
    def move(self):
        '''QPoint QWidget.move()'''
        return QPoint()
    def move(self, ax, ay):
        '''void QWidget.move(int ax, int ay)'''
    def stackUnder(self):
        '''QWidget QWidget.stackUnder()'''
        return QWidget()
    def lower(self):
        '''void QWidget.lower()'''
    def raise_(self):
        '''void QWidget.raise_()'''
    def close(self):
        '''bool QWidget.close()'''
        return bool()
    def showNormal(self):
        '''void QWidget.showNormal()'''
    def showFullScreen(self):
        '''void QWidget.showFullScreen()'''
    def showMaximized(self):
        '''void QWidget.showMaximized()'''
    def showMinimized(self):
        '''void QWidget.showMinimized()'''
    def setShown(self, shown):
        '''void QWidget.setShown(bool shown)'''
    def hide(self):
        '''void QWidget.hide()'''
    def show(self):
        '''void QWidget.show()'''
    def setHidden(self, hidden):
        '''void QWidget.setHidden(bool hidden)'''
    def setVisible(self, visible):
        '''void QWidget.setVisible(bool visible)'''
    def repaint(self):
        '''void QWidget.repaint()'''
    def repaint(self, x, y, w, h):
        '''void QWidget.repaint(int x, int y, int w, int h)'''
    def repaint(self):
        '''QRect QWidget.repaint()'''
        return QRect()
    def repaint(self):
        '''QRegion QWidget.repaint()'''
        return QRegion()
    def update(self):
        '''void QWidget.update()'''
    def update(self):
        '''QRect QWidget.update()'''
        return QRect()
    def update(self):
        '''QRegion QWidget.update()'''
        return QRegion()
    def update(self, ax, ay, aw, ah):
        '''void QWidget.update(int ax, int ay, int aw, int ah)'''
    def setUpdatesEnabled(self, enable):
        '''void QWidget.setUpdatesEnabled(bool enable)'''
    def keyboardGrabber(self):
        '''static QWidget QWidget.keyboardGrabber()'''
        return QWidget()
    def mouseGrabber(self):
        '''static QWidget QWidget.mouseGrabber()'''
        return QWidget()
    def setShortcutEnabled(self, id, enabled = True):
        '''void QWidget.setShortcutEnabled(int id, bool enabled = True)'''
    def releaseShortcut(self, id):
        '''void QWidget.releaseShortcut(int id)'''
    def grabShortcut(self, key, context = None):
        '''int QWidget.grabShortcut(QKeySequence key, Qt.ShortcutContext context = Qt.WindowShortcut)'''
        return int()
    def releaseKeyboard(self):
        '''void QWidget.releaseKeyboard()'''
    def grabKeyboard(self):
        '''void QWidget.grabKeyboard()'''
    def releaseMouse(self):
        '''void QWidget.releaseMouse()'''
    def grabMouse(self):
        '''void QWidget.grabMouse()'''
    def grabMouse(self):
        '''QCursor QWidget.grabMouse()'''
        return QCursor()
    def setContextMenuPolicy(self, policy):
        '''void QWidget.setContextMenuPolicy(Qt.ContextMenuPolicy policy)'''
    def contextMenuPolicy(self):
        '''Qt.ContextMenuPolicy QWidget.contextMenuPolicy()'''
        return Qt.ContextMenuPolicy()
    def focusProxy(self):
        '''QWidget QWidget.focusProxy()'''
        return QWidget()
    def setFocusProxy(self):
        '''QWidget QWidget.setFocusProxy()'''
        return QWidget()
    def setTabOrder(self):
        '''static QWidget QWidget.setTabOrder()'''
        return QWidget()
    def hasFocus(self):
        '''bool QWidget.hasFocus()'''
        return bool()
    def setFocusPolicy(self, policy):
        '''void QWidget.setFocusPolicy(Qt.FocusPolicy policy)'''
    def focusPolicy(self):
        '''Qt.FocusPolicy QWidget.focusPolicy()'''
        return Qt.FocusPolicy()
    def clearFocus(self):
        '''void QWidget.clearFocus()'''
    def activateWindow(self):
        '''void QWidget.activateWindow()'''
    def isActiveWindow(self):
        '''bool QWidget.isActiveWindow()'''
        return bool()
    def setFocus(self):
        '''void QWidget.setFocus()'''
    def setFocus(self, reason):
        '''void QWidget.setFocus(Qt.FocusReason reason)'''
    def isLeftToRight(self):
        '''bool QWidget.isLeftToRight()'''
        return bool()
    def isRightToLeft(self):
        '''bool QWidget.isRightToLeft()'''
        return bool()
    def unsetLayoutDirection(self):
        '''void QWidget.unsetLayoutDirection()'''
    def layoutDirection(self):
        '''Qt.LayoutDirection QWidget.layoutDirection()'''
        return Qt.LayoutDirection()
    def setLayoutDirection(self, direction):
        '''void QWidget.setLayoutDirection(Qt.LayoutDirection direction)'''
    def setAccessibleDescription(self, description):
        '''void QWidget.setAccessibleDescription(QString description)'''
    def accessibleDescription(self):
        '''QString QWidget.accessibleDescription()'''
        return QString()
    def setAccessibleName(self, name):
        '''void QWidget.setAccessibleName(QString name)'''
    def accessibleName(self):
        '''QString QWidget.accessibleName()'''
        return QString()
    def whatsThis(self):
        '''QString QWidget.whatsThis()'''
        return QString()
    def setWhatsThis(self):
        '''QString QWidget.setWhatsThis()'''
        return QString()
    def statusTip(self):
        '''QString QWidget.statusTip()'''
        return QString()
    def setStatusTip(self):
        '''QString QWidget.setStatusTip()'''
        return QString()
    def toolTip(self):
        '''QString QWidget.toolTip()'''
        return QString()
    def setToolTip(self):
        '''QString QWidget.setToolTip()'''
        return QString()
    def isWindowModified(self):
        '''bool QWidget.isWindowModified()'''
        return bool()
    def windowOpacity(self):
        '''float QWidget.windowOpacity()'''
        return float()
    def setWindowOpacity(self, level):
        '''void QWidget.setWindowOpacity(float level)'''
    def windowRole(self):
        '''QString QWidget.windowRole()'''
        return QString()
    def setWindowRole(self):
        '''QString QWidget.setWindowRole()'''
        return QString()
    def windowIconText(self):
        '''QString QWidget.windowIconText()'''
        return QString()
    def setWindowIconText(self):
        '''QString QWidget.setWindowIconText()'''
        return QString()
    def windowIcon(self):
        '''QIcon QWidget.windowIcon()'''
        return QIcon()
    def setWindowIcon(self, icon):
        '''void QWidget.setWindowIcon(QIcon icon)'''
    def windowTitle(self):
        '''QString QWidget.windowTitle()'''
        return QString()
    def setWindowTitle(self):
        '''QString QWidget.setWindowTitle()'''
        return QString()
    def clearMask(self):
        '''void QWidget.clearMask()'''
    def mask(self):
        '''QRegion QWidget.mask()'''
        return QRegion()
    def setMask(self):
        '''QBitmap QWidget.setMask()'''
        return QBitmap()
    def setMask(self):
        '''QRegion QWidget.setMask()'''
        return QRegion()
    def unsetCursor(self):
        '''void QWidget.unsetCursor()'''
    def setCursor(self):
        '''QCursor QWidget.setCursor()'''
        return QCursor()
    def cursor(self):
        '''QCursor QWidget.cursor()'''
        return QCursor()
    def setFont(self):
        '''QFont QWidget.setFont()'''
        return QFont()
    def foregroundRole(self):
        '''QPalette.ColorRole QWidget.foregroundRole()'''
        return QPalette.ColorRole()
    def setForegroundRole(self):
        '''QPalette.ColorRole QWidget.setForegroundRole()'''
        return QPalette.ColorRole()
    def backgroundRole(self):
        '''QPalette.ColorRole QWidget.backgroundRole()'''
        return QPalette.ColorRole()
    def setBackgroundRole(self):
        '''QPalette.ColorRole QWidget.setBackgroundRole()'''
        return QPalette.ColorRole()
    def setPalette(self):
        '''QPalette QWidget.setPalette()'''
        return QPalette()
    def palette(self):
        '''QPalette QWidget.palette()'''
        return QPalette()
    def topLevelWidget(self):
        '''QWidget QWidget.topLevelWidget()'''
        return QWidget()
    def window(self):
        '''QWidget QWidget.window()'''
        return QWidget()
    def mapFrom(self):
        '''QPoint QWidget.mapFrom()'''
        return QPoint()
    def mapTo(self):
        '''QPoint QWidget.mapTo()'''
        return QPoint()
    def mapFromParent(self):
        '''QPoint QWidget.mapFromParent()'''
        return QPoint()
    def mapToParent(self):
        '''QPoint QWidget.mapToParent()'''
        return QPoint()
    def mapFromGlobal(self):
        '''QPoint QWidget.mapFromGlobal()'''
        return QPoint()
    def mapToGlobal(self):
        '''QPoint QWidget.mapToGlobal()'''
        return QPoint()
    def setFixedHeight(self, h):
        '''void QWidget.setFixedHeight(int h)'''
    def setFixedWidth(self, w):
        '''void QWidget.setFixedWidth(int w)'''
    def setFixedSize(self):
        '''QSize QWidget.setFixedSize()'''
        return QSize()
    def setFixedSize(self, w, h):
        '''void QWidget.setFixedSize(int w, int h)'''
    def setBaseSize(self, basew, baseh):
        '''void QWidget.setBaseSize(int basew, int baseh)'''
    def setBaseSize(self, s):
        '''void QWidget.setBaseSize(QSize s)'''
    def baseSize(self):
        '''QSize QWidget.baseSize()'''
        return QSize()
    def setSizeIncrement(self, w, h):
        '''void QWidget.setSizeIncrement(int w, int h)'''
    def setSizeIncrement(self, s):
        '''void QWidget.setSizeIncrement(QSize s)'''
    def sizeIncrement(self):
        '''QSize QWidget.sizeIncrement()'''
        return QSize()
    def setMaximumHeight(self, maxh):
        '''void QWidget.setMaximumHeight(int maxh)'''
    def setMaximumWidth(self, maxw):
        '''void QWidget.setMaximumWidth(int maxw)'''
    def setMinimumHeight(self, minh):
        '''void QWidget.setMinimumHeight(int minh)'''
    def setMinimumWidth(self, minw):
        '''void QWidget.setMinimumWidth(int minw)'''
    def setMaximumSize(self, maxw, maxh):
        '''void QWidget.setMaximumSize(int maxw, int maxh)'''
    def setMaximumSize(self, s):
        '''void QWidget.setMaximumSize(QSize s)'''
    def setMinimumSize(self, minw, minh):
        '''void QWidget.setMinimumSize(int minw, int minh)'''
    def setMinimumSize(self, s):
        '''void QWidget.setMinimumSize(QSize s)'''
    def maximumSize(self):
        '''QSize QWidget.maximumSize()'''
        return QSize()
    def minimumSize(self):
        '''QSize QWidget.minimumSize()'''
        return QSize()
    def childrenRegion(self):
        '''QRegion QWidget.childrenRegion()'''
        return QRegion()
    def childrenRect(self):
        '''QRect QWidget.childrenRect()'''
        return QRect()
    def frameSize(self):
        '''QSize QWidget.frameSize()'''
        return QSize()
    def pos(self):
        '''QPoint QWidget.pos()'''
        return QPoint()
    def y(self):
        '''int QWidget.y()'''
        return int()
    def x(self):
        '''int QWidget.x()'''
        return int()
    def normalGeometry(self):
        '''QRect QWidget.normalGeometry()'''
        return QRect()
    def frameGeometry(self):
        '''QRect QWidget.frameGeometry()'''
        return QRect()
    def setWindowModified(self):
        '''bool QWidget.setWindowModified()'''
        return bool()
    def setDisabled(self):
        '''bool QWidget.setDisabled()'''
        return bool()
    def setEnabled(self):
        '''bool QWidget.setEnabled()'''
        return bool()
    def isEnabledTo(self):
        '''QWidget QWidget.isEnabledTo()'''
        return QWidget()
    def setStyle(self):
        '''QStyle QWidget.setStyle()'''
        return QStyle()
    def style(self):
        '''QStyle QWidget.style()'''
        return QStyle()
    def devType(self):
        '''int QWidget.devType()'''
        return int()
    class RenderFlags():
        """"""
        def __init__(self):
            '''QWidget.RenderFlags QWidget.RenderFlags.__init__()'''
            return QWidget.RenderFlags()
        def __init__(self):
            '''int QWidget.RenderFlags.__init__()'''
            return int()
        def __init__(self):
            '''void QWidget.RenderFlags.__init__()'''
        def __bool__(self):
            '''int QWidget.RenderFlags.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QWidget.RenderFlags.__ne__(QWidget.RenderFlags f)'''
            return bool()
        def __eq__(self, f):
            '''bool QWidget.RenderFlags.__eq__(QWidget.RenderFlags f)'''
            return bool()
        def __invert__(self):
            '''QWidget.RenderFlags QWidget.RenderFlags.__invert__()'''
            return QWidget.RenderFlags()
        def __and__(self, mask):
            '''QWidget.RenderFlags QWidget.RenderFlags.__and__(int mask)'''
            return QWidget.RenderFlags()
        def __xor__(self, f):
            '''QWidget.RenderFlags QWidget.RenderFlags.__xor__(QWidget.RenderFlags f)'''
            return QWidget.RenderFlags()
        def __xor__(self, f):
            '''QWidget.RenderFlags QWidget.RenderFlags.__xor__(int f)'''
            return QWidget.RenderFlags()
        def __or__(self, f):
            '''QWidget.RenderFlags QWidget.RenderFlags.__or__(QWidget.RenderFlags f)'''
            return QWidget.RenderFlags()
        def __or__(self, f):
            '''QWidget.RenderFlags QWidget.RenderFlags.__or__(int f)'''
            return QWidget.RenderFlags()
        def __int__(self):
            '''int QWidget.RenderFlags.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QWidget.RenderFlags QWidget.RenderFlags.__ixor__(QWidget.RenderFlags f)'''
            return QWidget.RenderFlags()
        def __ior__(self, f):
            '''QWidget.RenderFlags QWidget.RenderFlags.__ior__(QWidget.RenderFlags f)'''
            return QWidget.RenderFlags()
        def __iand__(self, mask):
            '''QWidget.RenderFlags QWidget.RenderFlags.__iand__(int mask)'''
            return QWidget.RenderFlags()


class QAbstractButton(QWidget):
    """"""
    def __init__(self, parent = None):
        '''void QAbstractButton.__init__(QWidget parent = None)'''
    def timerEvent(self, e):
        '''void QAbstractButton.timerEvent(QTimerEvent e)'''
    def changeEvent(self, e):
        '''void QAbstractButton.changeEvent(QEvent e)'''
    def focusOutEvent(self, e):
        '''void QAbstractButton.focusOutEvent(QFocusEvent e)'''
    def focusInEvent(self, e):
        '''void QAbstractButton.focusInEvent(QFocusEvent e)'''
    def mouseMoveEvent(self, e):
        '''void QAbstractButton.mouseMoveEvent(QMouseEvent e)'''
    def mouseReleaseEvent(self, e):
        '''void QAbstractButton.mouseReleaseEvent(QMouseEvent e)'''
    def mousePressEvent(self, e):
        '''void QAbstractButton.mousePressEvent(QMouseEvent e)'''
    def keyReleaseEvent(self, e):
        '''void QAbstractButton.keyReleaseEvent(QKeyEvent e)'''
    def keyPressEvent(self, e):
        '''void QAbstractButton.keyPressEvent(QKeyEvent e)'''
    def event(self, e):
        '''bool QAbstractButton.event(QEvent e)'''
        return bool()
    def nextCheckState(self):
        '''void QAbstractButton.nextCheckState()'''
    def checkStateSet(self):
        '''void QAbstractButton.checkStateSet()'''
    def hitButton(self, pos):
        '''bool QAbstractButton.hitButton(QPoint pos)'''
        return bool()
    def paintEvent(self, e):
        '''abstract void QAbstractButton.paintEvent(QPaintEvent e)'''
    toggled = pyqtSignal() # void toggled(bool) - signal
    clicked = pyqtSignal() # void clicked(bool = 0) - signal
    released = pyqtSignal() # void released() - signal
    pressed = pyqtSignal() # void pressed() - signal
    def setChecked(self):
        '''bool QAbstractButton.setChecked()'''
        return bool()
    def toggle(self):
        '''void QAbstractButton.toggle()'''
    def click(self):
        '''void QAbstractButton.click()'''
    def animateClick(self, msecs = 100):
        '''void QAbstractButton.animateClick(int msecs = 100)'''
    def setIconSize(self, size):
        '''void QAbstractButton.setIconSize(QSize size)'''
    def group(self):
        '''QButtonGroup QAbstractButton.group()'''
        return QButtonGroup()
    def autoExclusive(self):
        '''bool QAbstractButton.autoExclusive()'''
        return bool()
    def setAutoExclusive(self):
        '''bool QAbstractButton.setAutoExclusive()'''
        return bool()
    def autoRepeat(self):
        '''bool QAbstractButton.autoRepeat()'''
        return bool()
    def setAutoRepeat(self):
        '''bool QAbstractButton.setAutoRepeat()'''
        return bool()
    def isDown(self):
        '''bool QAbstractButton.isDown()'''
        return bool()
    def setDown(self):
        '''bool QAbstractButton.setDown()'''
        return bool()
    def isChecked(self):
        '''bool QAbstractButton.isChecked()'''
        return bool()
    def isCheckable(self):
        '''bool QAbstractButton.isCheckable()'''
        return bool()
    def setCheckable(self):
        '''bool QAbstractButton.setCheckable()'''
        return bool()
    def shortcut(self):
        '''QKeySequence QAbstractButton.shortcut()'''
        return QKeySequence()
    def setShortcut(self, key):
        '''void QAbstractButton.setShortcut(QKeySequence key)'''
    def iconSize(self):
        '''QSize QAbstractButton.iconSize()'''
        return QSize()
    def icon(self):
        '''QIcon QAbstractButton.icon()'''
        return QIcon()
    def setIcon(self, icon):
        '''void QAbstractButton.setIcon(QIcon icon)'''
    def text(self):
        '''QString QAbstractButton.text()'''
        return QString()
    def setText(self, text):
        '''void QAbstractButton.setText(QString text)'''
    def autoRepeatInterval(self):
        '''int QAbstractButton.autoRepeatInterval()'''
        return int()
    def setAutoRepeatInterval(self):
        '''int QAbstractButton.setAutoRepeatInterval()'''
        return int()
    def autoRepeatDelay(self):
        '''int QAbstractButton.autoRepeatDelay()'''
        return int()
    def setAutoRepeatDelay(self):
        '''int QAbstractButton.setAutoRepeatDelay()'''
        return int()


class QAbstractItemDelegate(QObject):
    """"""
    # Enum QAbstractItemDelegate.EndEditHint
    NoHint = 0
    EditNextItem = 0
    EditPreviousItem = 0
    SubmitModelCache = 0
    RevertModelCache = 0

    def __init__(self, parent = None):
        '''void QAbstractItemDelegate.__init__(QObject parent = None)'''
    sizeHintChanged = pyqtSignal() # void sizeHintChanged(const QModelIndexamp;) - signal
    closeEditor = pyqtSignal() # void closeEditor(QWidget *,QAbstractItemDelegate::EndEditHint = QAbstractItemDelegate.NoHint) - signal
    commitData = pyqtSignal() # void commitData(QWidget *) - signal
    def helpEvent(self, event, view, option, index):
        '''bool QAbstractItemDelegate.helpEvent(QHelpEvent event, QAbstractItemView view, QStyleOptionViewItem option, QModelIndex index)'''
        return bool()
    def elidedText(self, fontMetrics, width, mode, text):
        '''static QString QAbstractItemDelegate.elidedText(QFontMetrics fontMetrics, int width, Qt.TextElideMode mode, QString text)'''
        return QString()
    def editorEvent(self, event, model, option, index):
        '''bool QAbstractItemDelegate.editorEvent(QEvent event, QAbstractItemModel model, QStyleOptionViewItem option, QModelIndex index)'''
        return bool()
    def updateEditorGeometry(self, editor, option, index):
        '''void QAbstractItemDelegate.updateEditorGeometry(QWidget editor, QStyleOptionViewItem option, QModelIndex index)'''
    def setModelData(self, editor, model, index):
        '''void QAbstractItemDelegate.setModelData(QWidget editor, QAbstractItemModel model, QModelIndex index)'''
    def setEditorData(self, editor, index):
        '''void QAbstractItemDelegate.setEditorData(QWidget editor, QModelIndex index)'''
    def createEditor(self, parent, option, index):
        '''QWidget QAbstractItemDelegate.createEditor(QWidget parent, QStyleOptionViewItem option, QModelIndex index)'''
        return QWidget()
    def sizeHint(self, option, index):
        '''abstract QSize QAbstractItemDelegate.sizeHint(QStyleOptionViewItem option, QModelIndex index)'''
        return QSize()
    def paint(self, painter, option, index):
        '''abstract void QAbstractItemDelegate.paint(QPainter painter, QStyleOptionViewItem option, QModelIndex index)'''


class QFrame(QWidget):
    """"""
    # Enum QFrame.StyleMask
    Shadow_Mask = 0
    Shape_Mask = 0

    # Enum QFrame.Shape
    NoFrame = 0
    Box = 0
    Panel = 0
    WinPanel = 0
    HLine = 0
    VLine = 0
    StyledPanel = 0

    # Enum QFrame.Shadow
    Plain = 0
    Raised = 0
    Sunken = 0

    def __init__(self, parent = None, flags = 0):
        '''void QFrame.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def drawFrame(self):
        '''QPainter QFrame.drawFrame()'''
        return QPainter()
    def changeEvent(self):
        '''QEvent QFrame.changeEvent()'''
        return QEvent()
    def paintEvent(self):
        '''QPaintEvent QFrame.paintEvent()'''
        return QPaintEvent()
    def event(self, e):
        '''bool QFrame.event(QEvent e)'''
        return bool()
    def setFrameRect(self):
        '''QRect QFrame.setFrameRect()'''
        return QRect()
    def frameRect(self):
        '''QRect QFrame.frameRect()'''
        return QRect()
    def setMidLineWidth(self):
        '''int QFrame.setMidLineWidth()'''
        return int()
    def midLineWidth(self):
        '''int QFrame.midLineWidth()'''
        return int()
    def setLineWidth(self):
        '''int QFrame.setLineWidth()'''
        return int()
    def lineWidth(self):
        '''int QFrame.lineWidth()'''
        return int()
    def setFrameShadow(self):
        '''QFrame.Shadow QFrame.setFrameShadow()'''
        return QFrame.Shadow()
    def frameShadow(self):
        '''QFrame.Shadow QFrame.frameShadow()'''
        return QFrame.Shadow()
    def setFrameShape(self):
        '''QFrame.Shape QFrame.setFrameShape()'''
        return QFrame.Shape()
    def frameShape(self):
        '''QFrame.Shape QFrame.frameShape()'''
        return QFrame.Shape()
    def sizeHint(self):
        '''QSize QFrame.sizeHint()'''
        return QSize()
    def frameWidth(self):
        '''int QFrame.frameWidth()'''
        return int()
    def setFrameStyle(self):
        '''int QFrame.setFrameStyle()'''
        return int()
    def frameStyle(self):
        '''int QFrame.frameStyle()'''
        return int()


class QAbstractScrollArea(QFrame):
    """"""
    def __init__(self, parent = None):
        '''void QAbstractScrollArea.__init__(QWidget parent = None)'''
    def setupViewport(self, viewport):
        '''void QAbstractScrollArea.setupViewport(QWidget viewport)'''
    def setViewport(self, widget):
        '''void QAbstractScrollArea.setViewport(QWidget widget)'''
    def scrollBarWidgets(self, alignment):
        '''list-of-QWidget QAbstractScrollArea.scrollBarWidgets(Qt.Alignment alignment)'''
        return [QWidget()]
    def addScrollBarWidget(self, widget, alignment):
        '''void QAbstractScrollArea.addScrollBarWidget(QWidget widget, Qt.Alignment alignment)'''
    def setCornerWidget(self, widget):
        '''void QAbstractScrollArea.setCornerWidget(QWidget widget)'''
    def cornerWidget(self):
        '''QWidget QAbstractScrollArea.cornerWidget()'''
        return QWidget()
    def setHorizontalScrollBar(self, scrollbar):
        '''void QAbstractScrollArea.setHorizontalScrollBar(QScrollBar scrollbar)'''
    def setVerticalScrollBar(self, scrollbar):
        '''void QAbstractScrollArea.setVerticalScrollBar(QScrollBar scrollbar)'''
    def scrollContentsBy(self, dx, dy):
        '''void QAbstractScrollArea.scrollContentsBy(int dx, int dy)'''
    def keyPressEvent(self):
        '''QKeyEvent QAbstractScrollArea.keyPressEvent()'''
        return QKeyEvent()
    def dropEvent(self):
        '''QDropEvent QAbstractScrollArea.dropEvent()'''
        return QDropEvent()
    def dragLeaveEvent(self):
        '''QDragLeaveEvent QAbstractScrollArea.dragLeaveEvent()'''
        return QDragLeaveEvent()
    def dragMoveEvent(self):
        '''QDragMoveEvent QAbstractScrollArea.dragMoveEvent()'''
        return QDragMoveEvent()
    def dragEnterEvent(self):
        '''QDragEnterEvent QAbstractScrollArea.dragEnterEvent()'''
        return QDragEnterEvent()
    def contextMenuEvent(self):
        '''QContextMenuEvent QAbstractScrollArea.contextMenuEvent()'''
        return QContextMenuEvent()
    def wheelEvent(self):
        '''QWheelEvent QAbstractScrollArea.wheelEvent()'''
        return QWheelEvent()
    def mouseMoveEvent(self):
        '''QMouseEvent QAbstractScrollArea.mouseMoveEvent()'''
        return QMouseEvent()
    def mouseDoubleClickEvent(self):
        '''QMouseEvent QAbstractScrollArea.mouseDoubleClickEvent()'''
        return QMouseEvent()
    def mouseReleaseEvent(self):
        '''QMouseEvent QAbstractScrollArea.mouseReleaseEvent()'''
        return QMouseEvent()
    def mousePressEvent(self):
        '''QMouseEvent QAbstractScrollArea.mousePressEvent()'''
        return QMouseEvent()
    def paintEvent(self):
        '''QPaintEvent QAbstractScrollArea.paintEvent()'''
        return QPaintEvent()
    def resizeEvent(self):
        '''QResizeEvent QAbstractScrollArea.resizeEvent()'''
        return QResizeEvent()
    def viewportEvent(self):
        '''QEvent QAbstractScrollArea.viewportEvent()'''
        return QEvent()
    def event(self):
        '''QEvent QAbstractScrollArea.event()'''
        return QEvent()
    def setViewportMargins(self, left, top, right, bottom):
        '''void QAbstractScrollArea.setViewportMargins(int left, int top, int right, int bottom)'''
    def setViewportMargins(self, margins):
        '''void QAbstractScrollArea.setViewportMargins(QMargins margins)'''
    def sizeHint(self):
        '''QSize QAbstractScrollArea.sizeHint()'''
        return QSize()
    def minimumSizeHint(self):
        '''QSize QAbstractScrollArea.minimumSizeHint()'''
        return QSize()
    def maximumViewportSize(self):
        '''QSize QAbstractScrollArea.maximumViewportSize()'''
        return QSize()
    def viewport(self):
        '''QWidget QAbstractScrollArea.viewport()'''
        return QWidget()
    def horizontalScrollBar(self):
        '''QScrollBar QAbstractScrollArea.horizontalScrollBar()'''
        return QScrollBar()
    def setHorizontalScrollBarPolicy(self):
        '''Qt.ScrollBarPolicy QAbstractScrollArea.setHorizontalScrollBarPolicy()'''
        return Qt.ScrollBarPolicy()
    def horizontalScrollBarPolicy(self):
        '''Qt.ScrollBarPolicy QAbstractScrollArea.horizontalScrollBarPolicy()'''
        return Qt.ScrollBarPolicy()
    def verticalScrollBar(self):
        '''QScrollBar QAbstractScrollArea.verticalScrollBar()'''
        return QScrollBar()
    def setVerticalScrollBarPolicy(self):
        '''Qt.ScrollBarPolicy QAbstractScrollArea.setVerticalScrollBarPolicy()'''
        return Qt.ScrollBarPolicy()
    def verticalScrollBarPolicy(self):
        '''Qt.ScrollBarPolicy QAbstractScrollArea.verticalScrollBarPolicy()'''
        return Qt.ScrollBarPolicy()


class QAbstractItemView(QAbstractScrollArea):
    """"""
    # Enum QAbstractItemView.DropIndicatorPosition
    OnItem = 0
    AboveItem = 0
    BelowItem = 0
    OnViewport = 0

    # Enum QAbstractItemView.State
    NoState = 0
    DraggingState = 0
    DragSelectingState = 0
    EditingState = 0
    ExpandingState = 0
    CollapsingState = 0
    AnimatingState = 0

    # Enum QAbstractItemView.CursorAction
    MoveUp = 0
    MoveDown = 0
    MoveLeft = 0
    MoveRight = 0
    MoveHome = 0
    MoveEnd = 0
    MovePageUp = 0
    MovePageDown = 0
    MoveNext = 0
    MovePrevious = 0

    # Enum QAbstractItemView.SelectionMode
    NoSelection = 0
    SingleSelection = 0
    MultiSelection = 0
    ExtendedSelection = 0
    ContiguousSelection = 0

    # Enum QAbstractItemView.SelectionBehavior
    SelectItems = 0
    SelectRows = 0
    SelectColumns = 0

    # Enum QAbstractItemView.ScrollMode
    ScrollPerItem = 0
    ScrollPerPixel = 0

    # Enum QAbstractItemView.ScrollHint
    EnsureVisible = 0
    PositionAtTop = 0
    PositionAtBottom = 0
    PositionAtCenter = 0

    # Enum QAbstractItemView.EditTrigger
    NoEditTriggers = 0
    CurrentChanged = 0
    DoubleClicked = 0
    SelectedClicked = 0
    EditKeyPressed = 0
    AnyKeyPressed = 0
    AllEditTriggers = 0

    # Enum QAbstractItemView.DragDropMode
    NoDragDrop = 0
    DragOnly = 0
    DropOnly = 0
    DragDrop = 0
    InternalMove = 0

    def __init__(self, parent = None):
        '''void QAbstractItemView.__init__(QWidget parent = None)'''
    def defaultDropAction(self):
        '''Qt.DropAction QAbstractItemView.defaultDropAction()'''
        return Qt.DropAction()
    def setDefaultDropAction(self, dropAction):
        '''void QAbstractItemView.setDefaultDropAction(Qt.DropAction dropAction)'''
    def inputMethodEvent(self, event):
        '''void QAbstractItemView.inputMethodEvent(QInputMethodEvent event)'''
    def focusNextPrevChild(self, next):
        '''bool QAbstractItemView.focusNextPrevChild(bool next)'''
        return bool()
    def autoScrollMargin(self):
        '''int QAbstractItemView.autoScrollMargin()'''
        return int()
    def setAutoScrollMargin(self, margin):
        '''void QAbstractItemView.setAutoScrollMargin(int margin)'''
    def inputMethodQuery(self, query):
        '''QVariant QAbstractItemView.inputMethodQuery(Qt.InputMethodQuery query)'''
        return QVariant()
    def itemDelegateForColumn(self, column):
        '''QAbstractItemDelegate QAbstractItemView.itemDelegateForColumn(int column)'''
        return QAbstractItemDelegate()
    def setItemDelegateForColumn(self, column, delegate):
        '''void QAbstractItemView.setItemDelegateForColumn(int column, QAbstractItemDelegate delegate)'''
    def itemDelegateForRow(self, row):
        '''QAbstractItemDelegate QAbstractItemView.itemDelegateForRow(int row)'''
        return QAbstractItemDelegate()
    def setItemDelegateForRow(self, row, delegate):
        '''void QAbstractItemView.setItemDelegateForRow(int row, QAbstractItemDelegate delegate)'''
    def dragDropMode(self):
        '''QAbstractItemView.DragDropMode QAbstractItemView.dragDropMode()'''
        return QAbstractItemView.DragDropMode()
    def setDragDropMode(self, behavior):
        '''void QAbstractItemView.setDragDropMode(QAbstractItemView.DragDropMode behavior)'''
    def dragDropOverwriteMode(self):
        '''bool QAbstractItemView.dragDropOverwriteMode()'''
        return bool()
    def setDragDropOverwriteMode(self, overwrite):
        '''void QAbstractItemView.setDragDropOverwriteMode(bool overwrite)'''
    def horizontalScrollMode(self):
        '''QAbstractItemView.ScrollMode QAbstractItemView.horizontalScrollMode()'''
        return QAbstractItemView.ScrollMode()
    def setHorizontalScrollMode(self, mode):
        '''void QAbstractItemView.setHorizontalScrollMode(QAbstractItemView.ScrollMode mode)'''
    def verticalScrollMode(self):
        '''QAbstractItemView.ScrollMode QAbstractItemView.verticalScrollMode()'''
        return QAbstractItemView.ScrollMode()
    def setVerticalScrollMode(self, mode):
        '''void QAbstractItemView.setVerticalScrollMode(QAbstractItemView.ScrollMode mode)'''
    def dropIndicatorPosition(self):
        '''QAbstractItemView.DropIndicatorPosition QAbstractItemView.dropIndicatorPosition()'''
        return QAbstractItemView.DropIndicatorPosition()
    def timerEvent(self, e):
        '''void QAbstractItemView.timerEvent(QTimerEvent e)'''
    def resizeEvent(self, e):
        '''void QAbstractItemView.resizeEvent(QResizeEvent e)'''
    def keyPressEvent(self, e):
        '''void QAbstractItemView.keyPressEvent(QKeyEvent e)'''
    def focusOutEvent(self, e):
        '''void QAbstractItemView.focusOutEvent(QFocusEvent e)'''
    def focusInEvent(self, e):
        '''void QAbstractItemView.focusInEvent(QFocusEvent e)'''
    def dropEvent(self, e):
        '''void QAbstractItemView.dropEvent(QDropEvent e)'''
    def dragLeaveEvent(self, e):
        '''void QAbstractItemView.dragLeaveEvent(QDragLeaveEvent e)'''
    def dragMoveEvent(self, e):
        '''void QAbstractItemView.dragMoveEvent(QDragMoveEvent e)'''
    def dragEnterEvent(self, e):
        '''void QAbstractItemView.dragEnterEvent(QDragEnterEvent e)'''
    def mouseDoubleClickEvent(self, e):
        '''void QAbstractItemView.mouseDoubleClickEvent(QMouseEvent e)'''
    def mouseReleaseEvent(self, e):
        '''void QAbstractItemView.mouseReleaseEvent(QMouseEvent e)'''
    def mouseMoveEvent(self, e):
        '''void QAbstractItemView.mouseMoveEvent(QMouseEvent e)'''
    def mousePressEvent(self, e):
        '''void QAbstractItemView.mousePressEvent(QMouseEvent e)'''
    def viewportEvent(self, e):
        '''bool QAbstractItemView.viewportEvent(QEvent e)'''
        return bool()
    def event(self, event):
        '''bool QAbstractItemView.event(QEvent event)'''
        return bool()
    def dirtyRegionOffset(self):
        '''QPoint QAbstractItemView.dirtyRegionOffset()'''
        return QPoint()
    def setDirtyRegion(self, region):
        '''void QAbstractItemView.setDirtyRegion(QRegion region)'''
    def scrollDirtyRegion(self, dx, dy):
        '''void QAbstractItemView.scrollDirtyRegion(int dx, int dy)'''
    def executeDelayedItemsLayout(self):
        '''void QAbstractItemView.executeDelayedItemsLayout()'''
    def scheduleDelayedItemsLayout(self):
        '''void QAbstractItemView.scheduleDelayedItemsLayout()'''
    def setState(self, state):
        '''void QAbstractItemView.setState(QAbstractItemView.State state)'''
    def state(self):
        '''QAbstractItemView.State QAbstractItemView.state()'''
        return QAbstractItemView.State()
    def viewOptions(self):
        '''QStyleOptionViewItem QAbstractItemView.viewOptions()'''
        return QStyleOptionViewItem()
    def startDrag(self, supportedActions):
        '''void QAbstractItemView.startDrag(Qt.DropActions supportedActions)'''
    def selectionCommand(self, index, event = None):
        '''QItemSelectionModel.SelectionFlags QAbstractItemView.selectionCommand(QModelIndex index, QEvent event = None)'''
        return QItemSelectionModel.SelectionFlags()
    def selectedIndexes(self):
        '''list-of-QModelIndex QAbstractItemView.selectedIndexes()'''
        return [QModelIndex()]
    def visualRegionForSelection(self, selection):
        '''abstract QRegion QAbstractItemView.visualRegionForSelection(QItemSelection selection)'''
        return QRegion()
    def setSelection(self, rect, command):
        '''abstract void QAbstractItemView.setSelection(QRect rect, QItemSelectionModel.SelectionFlags command)'''
    def isIndexHidden(self, index):
        '''abstract bool QAbstractItemView.isIndexHidden(QModelIndex index)'''
        return bool()
    def verticalOffset(self):
        '''abstract int QAbstractItemView.verticalOffset()'''
        return int()
    def horizontalOffset(self):
        '''abstract int QAbstractItemView.horizontalOffset()'''
        return int()
    def moveCursor(self, cursorAction, modifiers):
        '''abstract QModelIndex QAbstractItemView.moveCursor(QAbstractItemView.CursorAction cursorAction, Qt.KeyboardModifiers modifiers)'''
        return QModelIndex()
    def verticalStepsPerItem(self):
        '''int QAbstractItemView.verticalStepsPerItem()'''
        return int()
    def setVerticalStepsPerItem(self, steps):
        '''void QAbstractItemView.setVerticalStepsPerItem(int steps)'''
    def horizontalStepsPerItem(self):
        '''int QAbstractItemView.horizontalStepsPerItem()'''
        return int()
    def setHorizontalStepsPerItem(self, steps):
        '''void QAbstractItemView.setHorizontalStepsPerItem(int steps)'''
    viewportEntered = pyqtSignal() # void viewportEntered() - signal
    entered = pyqtSignal() # void entered(const QModelIndexamp;) - signal
    activated = pyqtSignal() # void activated(const QModelIndexamp;) - signal
    doubleClicked = pyqtSignal() # void doubleClicked(const QModelIndexamp;) - signal
    clicked = pyqtSignal() # void clicked(const QModelIndexamp;) - signal
    pressed = pyqtSignal() # void pressed(const QModelIndexamp;) - signal
    def editorDestroyed(self, editor):
        '''void QAbstractItemView.editorDestroyed(QObject editor)'''
    def commitData(self, editor):
        '''void QAbstractItemView.commitData(QWidget editor)'''
    def closeEditor(self, editor, hint):
        '''void QAbstractItemView.closeEditor(QWidget editor, QAbstractItemDelegate.EndEditHint hint)'''
    def horizontalScrollbarValueChanged(self, value):
        '''void QAbstractItemView.horizontalScrollbarValueChanged(int value)'''
    def verticalScrollbarValueChanged(self, value):
        '''void QAbstractItemView.verticalScrollbarValueChanged(int value)'''
    def horizontalScrollbarAction(self, action):
        '''void QAbstractItemView.horizontalScrollbarAction(int action)'''
    def verticalScrollbarAction(self, action):
        '''void QAbstractItemView.verticalScrollbarAction(int action)'''
    def updateGeometries(self):
        '''void QAbstractItemView.updateGeometries()'''
    def updateEditorGeometries(self):
        '''void QAbstractItemView.updateEditorGeometries()'''
    def updateEditorData(self):
        '''void QAbstractItemView.updateEditorData()'''
    def currentChanged(self, current, previous):
        '''void QAbstractItemView.currentChanged(QModelIndex current, QModelIndex previous)'''
    def selectionChanged(self, selected, deselected):
        '''void QAbstractItemView.selectionChanged(QItemSelection selected, QItemSelection deselected)'''
    def rowsAboutToBeRemoved(self, parent, start, end):
        '''void QAbstractItemView.rowsAboutToBeRemoved(QModelIndex parent, int start, int end)'''
    def rowsInserted(self, parent, start, end):
        '''void QAbstractItemView.rowsInserted(QModelIndex parent, int start, int end)'''
    def dataChanged(self, topLeft, bottomRight):
        '''void QAbstractItemView.dataChanged(QModelIndex topLeft, QModelIndex bottomRight)'''
    def update(self):
        '''void QAbstractItemView.update()'''
    def update(self, index):
        '''void QAbstractItemView.update(QModelIndex index)'''
    def scrollToBottom(self):
        '''void QAbstractItemView.scrollToBottom()'''
    def scrollToTop(self):
        '''void QAbstractItemView.scrollToTop()'''
    def setCurrentIndex(self, index):
        '''void QAbstractItemView.setCurrentIndex(QModelIndex index)'''
    def clearSelection(self):
        '''void QAbstractItemView.clearSelection()'''
    def edit(self, index):
        '''void QAbstractItemView.edit(QModelIndex index)'''
    def edit(self, index, trigger, event):
        '''bool QAbstractItemView.edit(QModelIndex index, QAbstractItemView.EditTrigger trigger, QEvent event)'''
        return bool()
    def selectAll(self):
        '''void QAbstractItemView.selectAll()'''
    def setRootIndex(self, index):
        '''void QAbstractItemView.setRootIndex(QModelIndex index)'''
    def reset(self):
        '''void QAbstractItemView.reset()'''
    def indexWidget(self, index):
        '''QWidget QAbstractItemView.indexWidget(QModelIndex index)'''
        return QWidget()
    def setIndexWidget(self, index, widget):
        '''void QAbstractItemView.setIndexWidget(QModelIndex index, QWidget widget)'''
    def closePersistentEditor(self, index):
        '''void QAbstractItemView.closePersistentEditor(QModelIndex index)'''
    def openPersistentEditor(self, index):
        '''void QAbstractItemView.openPersistentEditor(QModelIndex index)'''
    def sizeHintForColumn(self, column):
        '''int QAbstractItemView.sizeHintForColumn(int column)'''
        return int()
    def sizeHintForRow(self, row):
        '''int QAbstractItemView.sizeHintForRow(int row)'''
        return int()
    def sizeHintForIndex(self, index):
        '''QSize QAbstractItemView.sizeHintForIndex(QModelIndex index)'''
        return QSize()
    def indexAt(self, p):
        '''abstract QModelIndex QAbstractItemView.indexAt(QPoint p)'''
        return QModelIndex()
    def scrollTo(self, index, hint = None):
        '''abstract void QAbstractItemView.scrollTo(QModelIndex index, QAbstractItemView.ScrollHint hint = QAbstractItemView.EnsureVisible)'''
    def visualRect(self, index):
        '''abstract QRect QAbstractItemView.visualRect(QModelIndex index)'''
        return QRect()
    def keyboardSearch(self, search):
        '''void QAbstractItemView.keyboardSearch(QString search)'''
    def textElideMode(self):
        '''Qt.TextElideMode QAbstractItemView.textElideMode()'''
        return Qt.TextElideMode()
    def setTextElideMode(self, mode):
        '''void QAbstractItemView.setTextElideMode(Qt.TextElideMode mode)'''
    def iconSize(self):
        '''QSize QAbstractItemView.iconSize()'''
        return QSize()
    def setIconSize(self, size):
        '''void QAbstractItemView.setIconSize(QSize size)'''
    def alternatingRowColors(self):
        '''bool QAbstractItemView.alternatingRowColors()'''
        return bool()
    def setAlternatingRowColors(self, enable):
        '''void QAbstractItemView.setAlternatingRowColors(bool enable)'''
    def dragEnabled(self):
        '''bool QAbstractItemView.dragEnabled()'''
        return bool()
    def setDragEnabled(self, enable):
        '''void QAbstractItemView.setDragEnabled(bool enable)'''
    def showDropIndicator(self):
        '''bool QAbstractItemView.showDropIndicator()'''
        return bool()
    def setDropIndicatorShown(self, enable):
        '''void QAbstractItemView.setDropIndicatorShown(bool enable)'''
    def tabKeyNavigation(self):
        '''bool QAbstractItemView.tabKeyNavigation()'''
        return bool()
    def setTabKeyNavigation(self, enable):
        '''void QAbstractItemView.setTabKeyNavigation(bool enable)'''
    def hasAutoScroll(self):
        '''bool QAbstractItemView.hasAutoScroll()'''
        return bool()
    def setAutoScroll(self, enable):
        '''void QAbstractItemView.setAutoScroll(bool enable)'''
    def editTriggers(self):
        '''QAbstractItemView.EditTriggers QAbstractItemView.editTriggers()'''
        return QAbstractItemView.EditTriggers()
    def setEditTriggers(self, triggers):
        '''void QAbstractItemView.setEditTriggers(QAbstractItemView.EditTriggers triggers)'''
    def rootIndex(self):
        '''QModelIndex QAbstractItemView.rootIndex()'''
        return QModelIndex()
    def currentIndex(self):
        '''QModelIndex QAbstractItemView.currentIndex()'''
        return QModelIndex()
    def selectionBehavior(self):
        '''QAbstractItemView.SelectionBehavior QAbstractItemView.selectionBehavior()'''
        return QAbstractItemView.SelectionBehavior()
    def setSelectionBehavior(self, behavior):
        '''void QAbstractItemView.setSelectionBehavior(QAbstractItemView.SelectionBehavior behavior)'''
    def selectionMode(self):
        '''QAbstractItemView.SelectionMode QAbstractItemView.selectionMode()'''
        return QAbstractItemView.SelectionMode()
    def setSelectionMode(self, mode):
        '''void QAbstractItemView.setSelectionMode(QAbstractItemView.SelectionMode mode)'''
    def itemDelegate(self):
        '''QAbstractItemDelegate QAbstractItemView.itemDelegate()'''
        return QAbstractItemDelegate()
    def itemDelegate(self, index):
        '''QAbstractItemDelegate QAbstractItemView.itemDelegate(QModelIndex index)'''
        return QAbstractItemDelegate()
    def setItemDelegate(self, delegate):
        '''void QAbstractItemView.setItemDelegate(QAbstractItemDelegate delegate)'''
    def selectionModel(self):
        '''QItemSelectionModel QAbstractItemView.selectionModel()'''
        return QItemSelectionModel()
    def setSelectionModel(self, selectionModel):
        '''void QAbstractItemView.setSelectionModel(QItemSelectionModel selectionModel)'''
    def model(self):
        '''QAbstractItemModel QAbstractItemView.model()'''
        return QAbstractItemModel()
    def setModel(self, model):
        '''void QAbstractItemView.setModel(QAbstractItemModel model)'''
    class EditTriggers():
        """"""
        def __init__(self):
            '''QAbstractItemView.EditTriggers QAbstractItemView.EditTriggers.__init__()'''
            return QAbstractItemView.EditTriggers()
        def __init__(self):
            '''int QAbstractItemView.EditTriggers.__init__()'''
            return int()
        def __init__(self):
            '''void QAbstractItemView.EditTriggers.__init__()'''
        def __bool__(self):
            '''int QAbstractItemView.EditTriggers.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QAbstractItemView.EditTriggers.__ne__(QAbstractItemView.EditTriggers f)'''
            return bool()
        def __eq__(self, f):
            '''bool QAbstractItemView.EditTriggers.__eq__(QAbstractItemView.EditTriggers f)'''
            return bool()
        def __invert__(self):
            '''QAbstractItemView.EditTriggers QAbstractItemView.EditTriggers.__invert__()'''
            return QAbstractItemView.EditTriggers()
        def __and__(self, mask):
            '''QAbstractItemView.EditTriggers QAbstractItemView.EditTriggers.__and__(int mask)'''
            return QAbstractItemView.EditTriggers()
        def __xor__(self, f):
            '''QAbstractItemView.EditTriggers QAbstractItemView.EditTriggers.__xor__(QAbstractItemView.EditTriggers f)'''
            return QAbstractItemView.EditTriggers()
        def __xor__(self, f):
            '''QAbstractItemView.EditTriggers QAbstractItemView.EditTriggers.__xor__(int f)'''
            return QAbstractItemView.EditTriggers()
        def __or__(self, f):
            '''QAbstractItemView.EditTriggers QAbstractItemView.EditTriggers.__or__(QAbstractItemView.EditTriggers f)'''
            return QAbstractItemView.EditTriggers()
        def __or__(self, f):
            '''QAbstractItemView.EditTriggers QAbstractItemView.EditTriggers.__or__(int f)'''
            return QAbstractItemView.EditTriggers()
        def __int__(self):
            '''int QAbstractItemView.EditTriggers.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QAbstractItemView.EditTriggers QAbstractItemView.EditTriggers.__ixor__(QAbstractItemView.EditTriggers f)'''
            return QAbstractItemView.EditTriggers()
        def __ior__(self, f):
            '''QAbstractItemView.EditTriggers QAbstractItemView.EditTriggers.__ior__(QAbstractItemView.EditTriggers f)'''
            return QAbstractItemView.EditTriggers()
        def __iand__(self, mask):
            '''QAbstractItemView.EditTriggers QAbstractItemView.EditTriggers.__iand__(int mask)'''
            return QAbstractItemView.EditTriggers()


class QDialog(QWidget):
    """"""
    # Enum QDialog.DialogCode
    Rejected = 0
    Accepted = 0

    def __init__(self, parent = None, flags = 0):
        '''void QDialog.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def eventFilter(self):
        '''QEvent QDialog.eventFilter()'''
        return QEvent()
    def contextMenuEvent(self):
        '''QContextMenuEvent QDialog.contextMenuEvent()'''
        return QContextMenuEvent()
    def resizeEvent(self):
        '''QResizeEvent QDialog.resizeEvent()'''
        return QResizeEvent()
    def showEvent(self):
        '''QShowEvent QDialog.showEvent()'''
        return QShowEvent()
    def closeEvent(self):
        '''QCloseEvent QDialog.closeEvent()'''
        return QCloseEvent()
    def keyPressEvent(self):
        '''QKeyEvent QDialog.keyPressEvent()'''
        return QKeyEvent()
    rejected = pyqtSignal() # void rejected() - signal
    finished = pyqtSignal() # void finished(int) - signal
    accepted = pyqtSignal() # void accepted() - signal
    def open(self):
        '''void QDialog.open()'''
    def showExtension(self):
        '''bool QDialog.showExtension()'''
        return bool()
    def reject(self):
        '''void QDialog.reject()'''
    def accept(self):
        '''void QDialog.accept()'''
    def done(self):
        '''int QDialog.done()'''
        return int()
    def exec_(self):
        '''int QDialog.exec_()'''
        return int()
    def setResult(self, r):
        '''void QDialog.setResult(int r)'''
    def setModal(self, modal):
        '''void QDialog.setModal(bool modal)'''
    def isSizeGripEnabled(self):
        '''bool QDialog.isSizeGripEnabled()'''
        return bool()
    def setSizeGripEnabled(self):
        '''bool QDialog.setSizeGripEnabled()'''
        return bool()
    def minimumSizeHint(self):
        '''QSize QDialog.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QDialog.sizeHint()'''
        return QSize()
    def extension(self):
        '''QWidget QDialog.extension()'''
        return QWidget()
    def setExtension(self, extension):
        '''void QDialog.setExtension(QWidget extension)'''
    def orientation(self):
        '''Qt.Orientation QDialog.orientation()'''
        return Qt.Orientation()
    def setOrientation(self, orientation):
        '''void QDialog.setOrientation(Qt.Orientation orientation)'''
    def setVisible(self, visible):
        '''void QDialog.setVisible(bool visible)'''
    def result(self):
        '''int QDialog.result()'''
        return int()


class QAbstractPrintDialog(QDialog):
    """"""
    # Enum QAbstractPrintDialog.PrintDialogOption
    __kdevpythondocumentation_builtin_None = 0
    PrintToFile = 0
    PrintSelection = 0
    PrintPageRange = 0
    PrintCollateCopies = 0
    PrintShowPageSize = 0
    DontUseSheet = 0
    PrintCurrentPage = 0

    # Enum QAbstractPrintDialog.PrintRange
    AllPages = 0
    Selection = 0
    PageRange = 0
    CurrentPage = 0

    def __init__(self, printer, parent = None):
        '''void QAbstractPrintDialog.__init__(QPrinter printer, QWidget parent = None)'''
    def setOptionTabs(self, tabs):
        '''void QAbstractPrintDialog.setOptionTabs(list-of-QWidget tabs)'''
    def printer(self):
        '''QPrinter QAbstractPrintDialog.printer()'''
        return QPrinter()
    def toPage(self):
        '''int QAbstractPrintDialog.toPage()'''
        return int()
    def fromPage(self):
        '''int QAbstractPrintDialog.fromPage()'''
        return int()
    def setFromTo(self, fromPage, toPage):
        '''void QAbstractPrintDialog.setFromTo(int fromPage, int toPage)'''
    def maxPage(self):
        '''int QAbstractPrintDialog.maxPage()'''
        return int()
    def minPage(self):
        '''int QAbstractPrintDialog.minPage()'''
        return int()
    def setMinMax(self, min, max):
        '''void QAbstractPrintDialog.setMinMax(int min, int max)'''
    def printRange(self):
        '''QAbstractPrintDialog.PrintRange QAbstractPrintDialog.printRange()'''
        return QAbstractPrintDialog.PrintRange()
    def setPrintRange(self, range):
        '''void QAbstractPrintDialog.setPrintRange(QAbstractPrintDialog.PrintRange range)'''
    def isOptionEnabled(self, option):
        '''bool QAbstractPrintDialog.isOptionEnabled(QAbstractPrintDialog.PrintDialogOption option)'''
        return bool()
    def enabledOptions(self):
        '''QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.enabledOptions()'''
        return QAbstractPrintDialog.PrintDialogOptions()
    def setEnabledOptions(self, options):
        '''void QAbstractPrintDialog.setEnabledOptions(QAbstractPrintDialog.PrintDialogOptions options)'''
    def addEnabledOption(self, option):
        '''void QAbstractPrintDialog.addEnabledOption(QAbstractPrintDialog.PrintDialogOption option)'''
    def exec_(self):
        '''abstract int QAbstractPrintDialog.exec_()'''
        return int()
    class PrintDialogOptions():
        """"""
        def __init__(self):
            '''QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.PrintDialogOptions.__init__()'''
            return QAbstractPrintDialog.PrintDialogOptions()
        def __init__(self):
            '''int QAbstractPrintDialog.PrintDialogOptions.__init__()'''
            return int()
        def __init__(self):
            '''void QAbstractPrintDialog.PrintDialogOptions.__init__()'''
        def __bool__(self):
            '''int QAbstractPrintDialog.PrintDialogOptions.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QAbstractPrintDialog.PrintDialogOptions.__ne__(QAbstractPrintDialog.PrintDialogOptions f)'''
            return bool()
        def __eq__(self, f):
            '''bool QAbstractPrintDialog.PrintDialogOptions.__eq__(QAbstractPrintDialog.PrintDialogOptions f)'''
            return bool()
        def __invert__(self):
            '''QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.PrintDialogOptions.__invert__()'''
            return QAbstractPrintDialog.PrintDialogOptions()
        def __and__(self, mask):
            '''QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.PrintDialogOptions.__and__(int mask)'''
            return QAbstractPrintDialog.PrintDialogOptions()
        def __xor__(self, f):
            '''QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.PrintDialogOptions.__xor__(QAbstractPrintDialog.PrintDialogOptions f)'''
            return QAbstractPrintDialog.PrintDialogOptions()
        def __xor__(self, f):
            '''QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.PrintDialogOptions.__xor__(int f)'''
            return QAbstractPrintDialog.PrintDialogOptions()
        def __or__(self, f):
            '''QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.PrintDialogOptions.__or__(QAbstractPrintDialog.PrintDialogOptions f)'''
            return QAbstractPrintDialog.PrintDialogOptions()
        def __or__(self, f):
            '''QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.PrintDialogOptions.__or__(int f)'''
            return QAbstractPrintDialog.PrintDialogOptions()
        def __int__(self):
            '''int QAbstractPrintDialog.PrintDialogOptions.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.PrintDialogOptions.__ixor__(QAbstractPrintDialog.PrintDialogOptions f)'''
            return QAbstractPrintDialog.PrintDialogOptions()
        def __ior__(self, f):
            '''QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.PrintDialogOptions.__ior__(QAbstractPrintDialog.PrintDialogOptions f)'''
            return QAbstractPrintDialog.PrintDialogOptions()
        def __iand__(self, mask):
            '''QAbstractPrintDialog.PrintDialogOptions QAbstractPrintDialog.PrintDialogOptions.__iand__(int mask)'''
            return QAbstractPrintDialog.PrintDialogOptions()


class QAbstractProxyModel(QAbstractItemModel):
    """"""
    def __init__(self, parent = None):
        '''void QAbstractProxyModel.__init__(QObject parent = None)'''
    def supportedDropActions(self):
        '''Qt.DropActions QAbstractProxyModel.supportedDropActions()'''
        return Qt.DropActions()
    def mimeTypes(self):
        '''QStringList QAbstractProxyModel.mimeTypes()'''
        return QStringList()
    def mimeData(self, indexes):
        '''QMimeData QAbstractProxyModel.mimeData(list-of-QModelIndex indexes)'''
        return QMimeData()
    def hasChildren(self, parent = QModelIndex()):
        '''bool QAbstractProxyModel.hasChildren(QModelIndex parent = QModelIndex())'''
        return bool()
    def span(self, index):
        '''QSize QAbstractProxyModel.span(QModelIndex index)'''
        return QSize()
    def sort(self, column, order = None):
        '''void QAbstractProxyModel.sort(int column, Qt.SortOrder order = Qt.AscendingOrder)'''
    def fetchMore(self, parent):
        '''void QAbstractProxyModel.fetchMore(QModelIndex parent)'''
    def canFetchMore(self, parent):
        '''bool QAbstractProxyModel.canFetchMore(QModelIndex parent)'''
        return bool()
    def buddy(self, index):
        '''QModelIndex QAbstractProxyModel.buddy(QModelIndex index)'''
        return QModelIndex()
    def setItemData(self, index, roles):
        '''bool QAbstractProxyModel.setItemData(QModelIndex index, dict-of-int-QVariant roles)'''
        return bool()
    def flags(self, index):
        '''Qt.ItemFlags QAbstractProxyModel.flags(QModelIndex index)'''
        return Qt.ItemFlags()
    def itemData(self, index):
        '''dict-of-int-QVariant QAbstractProxyModel.itemData(QModelIndex index)'''
        return dict-of-int-QVariant()
    def setHeaderData(self, section, orientation, value, role = None):
        '''bool QAbstractProxyModel.setHeaderData(int section, Qt.Orientation orientation, QVariant value, int role = Qt.EditRole)'''
        return bool()
    def headerData(self, section, orientation, role):
        '''QVariant QAbstractProxyModel.headerData(int section, Qt.Orientation orientation, int role)'''
        return QVariant()
    def setData(self, index, value, role = None):
        '''bool QAbstractProxyModel.setData(QModelIndex index, QVariant value, int role = Qt.EditRole)'''
        return bool()
    def data(self, proxyIndex, role = None):
        '''QVariant QAbstractProxyModel.data(QModelIndex proxyIndex, int role = Qt.DisplayRole)'''
        return QVariant()
    def revert(self):
        '''void QAbstractProxyModel.revert()'''
    def submit(self):
        '''bool QAbstractProxyModel.submit()'''
        return bool()
    def mapSelectionFromSource(self, selection):
        '''QItemSelection QAbstractProxyModel.mapSelectionFromSource(QItemSelection selection)'''
        return QItemSelection()
    def mapSelectionToSource(self, selection):
        '''QItemSelection QAbstractProxyModel.mapSelectionToSource(QItemSelection selection)'''
        return QItemSelection()
    def mapFromSource(self, sourceIndex):
        '''abstract QModelIndex QAbstractProxyModel.mapFromSource(QModelIndex sourceIndex)'''
        return QModelIndex()
    def mapToSource(self, proxyIndex):
        '''abstract QModelIndex QAbstractProxyModel.mapToSource(QModelIndex proxyIndex)'''
        return QModelIndex()
    def sourceModel(self):
        '''QAbstractItemModel QAbstractProxyModel.sourceModel()'''
        return QAbstractItemModel()
    def setSourceModel(self, sourceModel):
        '''void QAbstractProxyModel.setSourceModel(QAbstractItemModel sourceModel)'''


class QAbstractSlider(QWidget):
    """"""
    # Enum QAbstractSlider.SliderChange
    SliderRangeChange = 0
    SliderOrientationChange = 0
    SliderStepsChange = 0
    SliderValueChange = 0

    # Enum QAbstractSlider.SliderAction
    SliderNoAction = 0
    SliderSingleStepAdd = 0
    SliderSingleStepSub = 0
    SliderPageStepAdd = 0
    SliderPageStepSub = 0
    SliderToMinimum = 0
    SliderToMaximum = 0
    SliderMove = 0

    def __init__(self, parent = None):
        '''void QAbstractSlider.__init__(QWidget parent = None)'''
    def changeEvent(self, e):
        '''void QAbstractSlider.changeEvent(QEvent e)'''
    def wheelEvent(self, e):
        '''void QAbstractSlider.wheelEvent(QWheelEvent e)'''
    def timerEvent(self):
        '''QTimerEvent QAbstractSlider.timerEvent()'''
        return QTimerEvent()
    def keyPressEvent(self, ev):
        '''void QAbstractSlider.keyPressEvent(QKeyEvent ev)'''
    def event(self, e):
        '''bool QAbstractSlider.event(QEvent e)'''
        return bool()
    def sliderChange(self, change):
        '''void QAbstractSlider.sliderChange(QAbstractSlider.SliderChange change)'''
    def repeatAction(self):
        '''QAbstractSlider.SliderAction QAbstractSlider.repeatAction()'''
        return QAbstractSlider.SliderAction()
    def setRepeatAction(self, action, thresholdTime = 500, repeatTime = 50):
        '''void QAbstractSlider.setRepeatAction(QAbstractSlider.SliderAction action, int thresholdTime = 500, int repeatTime = 50)'''
    actionTriggered = pyqtSignal() # void actionTriggered(int) - signal
    rangeChanged = pyqtSignal() # void rangeChanged(int,int) - signal
    sliderReleased = pyqtSignal() # void sliderReleased() - signal
    sliderMoved = pyqtSignal() # void sliderMoved(int) - signal
    sliderPressed = pyqtSignal() # void sliderPressed() - signal
    valueChanged = pyqtSignal() # void valueChanged(int) - signal
    def setOrientation(self):
        '''Qt.Orientation QAbstractSlider.setOrientation()'''
        return Qt.Orientation()
    def setValue(self):
        '''int QAbstractSlider.setValue()'''
        return int()
    def triggerAction(self, action):
        '''void QAbstractSlider.triggerAction(QAbstractSlider.SliderAction action)'''
    def value(self):
        '''int QAbstractSlider.value()'''
        return int()
    def invertedControls(self):
        '''bool QAbstractSlider.invertedControls()'''
        return bool()
    def setInvertedControls(self):
        '''bool QAbstractSlider.setInvertedControls()'''
        return bool()
    def invertedAppearance(self):
        '''bool QAbstractSlider.invertedAppearance()'''
        return bool()
    def setInvertedAppearance(self):
        '''bool QAbstractSlider.setInvertedAppearance()'''
        return bool()
    def sliderPosition(self):
        '''int QAbstractSlider.sliderPosition()'''
        return int()
    def setSliderPosition(self):
        '''int QAbstractSlider.setSliderPosition()'''
        return int()
    def isSliderDown(self):
        '''bool QAbstractSlider.isSliderDown()'''
        return bool()
    def setSliderDown(self):
        '''bool QAbstractSlider.setSliderDown()'''
        return bool()
    def hasTracking(self):
        '''bool QAbstractSlider.hasTracking()'''
        return bool()
    def setTracking(self, enable):
        '''void QAbstractSlider.setTracking(bool enable)'''
    def pageStep(self):
        '''int QAbstractSlider.pageStep()'''
        return int()
    def setPageStep(self):
        '''int QAbstractSlider.setPageStep()'''
        return int()
    def singleStep(self):
        '''int QAbstractSlider.singleStep()'''
        return int()
    def setSingleStep(self):
        '''int QAbstractSlider.setSingleStep()'''
        return int()
    def setRange(self, min, max):
        '''void QAbstractSlider.setRange(int min, int max)'''
    def maximum(self):
        '''int QAbstractSlider.maximum()'''
        return int()
    def setMaximum(self):
        '''int QAbstractSlider.setMaximum()'''
        return int()
    def minimum(self):
        '''int QAbstractSlider.minimum()'''
        return int()
    def setMinimum(self):
        '''int QAbstractSlider.setMinimum()'''
        return int()
    def orientation(self):
        '''Qt.Orientation QAbstractSlider.orientation()'''
        return Qt.Orientation()


class QAbstractSpinBox(QWidget):
    """"""
    # Enum QAbstractSpinBox.CorrectionMode
    CorrectToPreviousValue = 0
    CorrectToNearestValue = 0

    # Enum QAbstractSpinBox.ButtonSymbols
    UpDownArrows = 0
    PlusMinus = 0
    NoButtons = 0

    # Enum QAbstractSpinBox.StepEnabledFlag
    StepNone = 0
    StepUpEnabled = 0
    StepDownEnabled = 0

    def __init__(self, parent = None):
        '''void QAbstractSpinBox.__init__(QWidget parent = None)'''
    def inputMethodQuery(self):
        '''Qt.InputMethodQuery QAbstractSpinBox.inputMethodQuery()'''
        return Qt.InputMethodQuery()
    def initStyleOption(self, option):
        '''void QAbstractSpinBox.initStyleOption(QStyleOptionSpinBox option)'''
    def keyboardTracking(self):
        '''bool QAbstractSpinBox.keyboardTracking()'''
        return bool()
    def setKeyboardTracking(self, kt):
        '''void QAbstractSpinBox.setKeyboardTracking(bool kt)'''
    def isAccelerated(self):
        '''bool QAbstractSpinBox.isAccelerated()'''
        return bool()
    def setAccelerated(self, on):
        '''void QAbstractSpinBox.setAccelerated(bool on)'''
    def hasAcceptableInput(self):
        '''bool QAbstractSpinBox.hasAcceptableInput()'''
        return bool()
    def correctionMode(self):
        '''QAbstractSpinBox.CorrectionMode QAbstractSpinBox.correctionMode()'''
        return QAbstractSpinBox.CorrectionMode()
    def setCorrectionMode(self, cm):
        '''void QAbstractSpinBox.setCorrectionMode(QAbstractSpinBox.CorrectionMode cm)'''
    def stepEnabled(self):
        '''QAbstractSpinBox.StepEnabled QAbstractSpinBox.stepEnabled()'''
        return QAbstractSpinBox.StepEnabled()
    def setLineEdit(self, e):
        '''void QAbstractSpinBox.setLineEdit(QLineEdit e)'''
    def lineEdit(self):
        '''QLineEdit QAbstractSpinBox.lineEdit()'''
        return QLineEdit()
    def showEvent(self, e):
        '''void QAbstractSpinBox.showEvent(QShowEvent e)'''
    def paintEvent(self, e):
        '''void QAbstractSpinBox.paintEvent(QPaintEvent e)'''
    def timerEvent(self, e):
        '''void QAbstractSpinBox.timerEvent(QTimerEvent e)'''
    def mouseMoveEvent(self, e):
        '''void QAbstractSpinBox.mouseMoveEvent(QMouseEvent e)'''
    def mouseReleaseEvent(self, e):
        '''void QAbstractSpinBox.mouseReleaseEvent(QMouseEvent e)'''
    def mousePressEvent(self, e):
        '''void QAbstractSpinBox.mousePressEvent(QMouseEvent e)'''
    def hideEvent(self, e):
        '''void QAbstractSpinBox.hideEvent(QHideEvent e)'''
    def closeEvent(self, e):
        '''void QAbstractSpinBox.closeEvent(QCloseEvent e)'''
    def changeEvent(self, e):
        '''void QAbstractSpinBox.changeEvent(QEvent e)'''
    def contextMenuEvent(self, e):
        '''void QAbstractSpinBox.contextMenuEvent(QContextMenuEvent e)'''
    def focusOutEvent(self, e):
        '''void QAbstractSpinBox.focusOutEvent(QFocusEvent e)'''
    def focusInEvent(self, e):
        '''void QAbstractSpinBox.focusInEvent(QFocusEvent e)'''
    def wheelEvent(self, e):
        '''void QAbstractSpinBox.wheelEvent(QWheelEvent e)'''
    def keyReleaseEvent(self, e):
        '''void QAbstractSpinBox.keyReleaseEvent(QKeyEvent e)'''
    def keyPressEvent(self, e):
        '''void QAbstractSpinBox.keyPressEvent(QKeyEvent e)'''
    def resizeEvent(self, e):
        '''void QAbstractSpinBox.resizeEvent(QResizeEvent e)'''
    editingFinished = pyqtSignal() # void editingFinished() - signal
    def clear(self):
        '''void QAbstractSpinBox.clear()'''
    def selectAll(self):
        '''void QAbstractSpinBox.selectAll()'''
    def stepDown(self):
        '''void QAbstractSpinBox.stepDown()'''
    def stepUp(self):
        '''void QAbstractSpinBox.stepUp()'''
    def stepBy(self, steps):
        '''void QAbstractSpinBox.stepBy(int steps)'''
    def fixup(self, input):
        '''void QAbstractSpinBox.fixup(QString input)'''
    def fixup(self, input):
        '''void QAbstractSpinBox.fixup(QString input)'''
    def validate(self, input, pos):
        '''QValidator.State QAbstractSpinBox.validate(QString input, int pos)'''
        return QValidator.State()
    def validate(self, input, pos):
        '''QValidator.State QAbstractSpinBox.validate(QString input, int pos)'''
        return QValidator.State()
    def event(self, event):
        '''bool QAbstractSpinBox.event(QEvent event)'''
        return bool()
    def interpretText(self):
        '''void QAbstractSpinBox.interpretText()'''
    def minimumSizeHint(self):
        '''QSize QAbstractSpinBox.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QAbstractSpinBox.sizeHint()'''
        return QSize()
    def hasFrame(self):
        '''bool QAbstractSpinBox.hasFrame()'''
        return bool()
    def setFrame(self):
        '''bool QAbstractSpinBox.setFrame()'''
        return bool()
    def alignment(self):
        '''Qt.Alignment QAbstractSpinBox.alignment()'''
        return Qt.Alignment()
    def setAlignment(self, flag):
        '''void QAbstractSpinBox.setAlignment(Qt.Alignment flag)'''
    def isReadOnly(self):
        '''bool QAbstractSpinBox.isReadOnly()'''
        return bool()
    def setReadOnly(self, r):
        '''void QAbstractSpinBox.setReadOnly(bool r)'''
    def setWrapping(self, w):
        '''void QAbstractSpinBox.setWrapping(bool w)'''
    def wrapping(self):
        '''bool QAbstractSpinBox.wrapping()'''
        return bool()
    def setSpecialValueText(self, s):
        '''void QAbstractSpinBox.setSpecialValueText(QString s)'''
    def specialValueText(self):
        '''QString QAbstractSpinBox.specialValueText()'''
        return QString()
    def text(self):
        '''QString QAbstractSpinBox.text()'''
        return QString()
    def setButtonSymbols(self, bs):
        '''void QAbstractSpinBox.setButtonSymbols(QAbstractSpinBox.ButtonSymbols bs)'''
    def buttonSymbols(self):
        '''QAbstractSpinBox.ButtonSymbols QAbstractSpinBox.buttonSymbols()'''
        return QAbstractSpinBox.ButtonSymbols()
    class StepEnabled():
        """"""
        def __init__(self):
            '''QAbstractSpinBox.StepEnabled QAbstractSpinBox.StepEnabled.__init__()'''
            return QAbstractSpinBox.StepEnabled()
        def __init__(self):
            '''int QAbstractSpinBox.StepEnabled.__init__()'''
            return int()
        def __init__(self):
            '''void QAbstractSpinBox.StepEnabled.__init__()'''
        def __bool__(self):
            '''int QAbstractSpinBox.StepEnabled.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QAbstractSpinBox.StepEnabled.__ne__(QAbstractSpinBox.StepEnabled f)'''
            return bool()
        def __eq__(self, f):
            '''bool QAbstractSpinBox.StepEnabled.__eq__(QAbstractSpinBox.StepEnabled f)'''
            return bool()
        def __invert__(self):
            '''QAbstractSpinBox.StepEnabled QAbstractSpinBox.StepEnabled.__invert__()'''
            return QAbstractSpinBox.StepEnabled()
        def __and__(self, mask):
            '''QAbstractSpinBox.StepEnabled QAbstractSpinBox.StepEnabled.__and__(int mask)'''
            return QAbstractSpinBox.StepEnabled()
        def __xor__(self, f):
            '''QAbstractSpinBox.StepEnabled QAbstractSpinBox.StepEnabled.__xor__(QAbstractSpinBox.StepEnabled f)'''
            return QAbstractSpinBox.StepEnabled()
        def __xor__(self, f):
            '''QAbstractSpinBox.StepEnabled QAbstractSpinBox.StepEnabled.__xor__(int f)'''
            return QAbstractSpinBox.StepEnabled()
        def __or__(self, f):
            '''QAbstractSpinBox.StepEnabled QAbstractSpinBox.StepEnabled.__or__(QAbstractSpinBox.StepEnabled f)'''
            return QAbstractSpinBox.StepEnabled()
        def __or__(self, f):
            '''QAbstractSpinBox.StepEnabled QAbstractSpinBox.StepEnabled.__or__(int f)'''
            return QAbstractSpinBox.StepEnabled()
        def __int__(self):
            '''int QAbstractSpinBox.StepEnabled.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QAbstractSpinBox.StepEnabled QAbstractSpinBox.StepEnabled.__ixor__(QAbstractSpinBox.StepEnabled f)'''
            return QAbstractSpinBox.StepEnabled()
        def __ior__(self, f):
            '''QAbstractSpinBox.StepEnabled QAbstractSpinBox.StepEnabled.__ior__(QAbstractSpinBox.StepEnabled f)'''
            return QAbstractSpinBox.StepEnabled()
        def __iand__(self, mask):
            '''QAbstractSpinBox.StepEnabled QAbstractSpinBox.StepEnabled.__iand__(int mask)'''
            return QAbstractSpinBox.StepEnabled()


class QAbstractTextDocumentLayout(QObject):
    """"""
    def __init__(self, doc):
        '''void QAbstractTextDocumentLayout.__init__(QTextDocument doc)'''
    def format(self, pos):
        '''QTextCharFormat QAbstractTextDocumentLayout.format(int pos)'''
        return QTextCharFormat()
    def drawInlineObject(self, painter, rect, object, posInDocument, format):
        '''void QAbstractTextDocumentLayout.drawInlineObject(QPainter painter, QRectF rect, QTextInlineObject object, int posInDocument, QTextFormat format)'''
    def positionInlineObject(self, item, posInDocument, format):
        '''void QAbstractTextDocumentLayout.positionInlineObject(QTextInlineObject item, int posInDocument, QTextFormat format)'''
    def resizeInlineObject(self, item, posInDocument, format):
        '''void QAbstractTextDocumentLayout.resizeInlineObject(QTextInlineObject item, int posInDocument, QTextFormat format)'''
    def documentChanged(self, from_, charsRemoved, charsAdded):
        '''abstract void QAbstractTextDocumentLayout.documentChanged(int from, int charsRemoved, int charsAdded)'''
    updateBlock = pyqtSignal() # void updateBlock(const QTextBlockamp;) - signal
    pageCountChanged = pyqtSignal() # void pageCountChanged(int) - signal
    documentSizeChanged = pyqtSignal() # void documentSizeChanged(const QSizeFamp;) - signal
    update = pyqtSignal() # void update(const QRectFamp; = QRectF(0,0,1e+09,1e+09)) - signal
    def handlerForObject(self, objectType):
        '''QTextObjectInterface QAbstractTextDocumentLayout.handlerForObject(int objectType)'''
        return QTextObjectInterface()
    def registerHandler(self, objectType, component):
        '''void QAbstractTextDocumentLayout.registerHandler(int objectType, QObject component)'''
    def document(self):
        '''QTextDocument QAbstractTextDocumentLayout.document()'''
        return QTextDocument()
    def paintDevice(self):
        '''QPaintDevice QAbstractTextDocumentLayout.paintDevice()'''
        return QPaintDevice()
    def setPaintDevice(self, device):
        '''void QAbstractTextDocumentLayout.setPaintDevice(QPaintDevice device)'''
    def blockBoundingRect(self, block):
        '''abstract QRectF QAbstractTextDocumentLayout.blockBoundingRect(QTextBlock block)'''
        return QRectF()
    def frameBoundingRect(self, frame):
        '''abstract QRectF QAbstractTextDocumentLayout.frameBoundingRect(QTextFrame frame)'''
        return QRectF()
    def documentSize(self):
        '''abstract QSizeF QAbstractTextDocumentLayout.documentSize()'''
        return QSizeF()
    def pageCount(self):
        '''abstract int QAbstractTextDocumentLayout.pageCount()'''
        return int()
    def anchorAt(self, pos):
        '''QString QAbstractTextDocumentLayout.anchorAt(QPointF pos)'''
        return QString()
    def hitTest(self, point, accuracy):
        '''abstract int QAbstractTextDocumentLayout.hitTest(QPointF point, Qt.HitTestAccuracy accuracy)'''
        return int()
    def draw(self, painter, context):
        '''abstract void QAbstractTextDocumentLayout.draw(QPainter painter, QAbstractTextDocumentLayout.PaintContext context)'''
    class PaintContext():
        """"""
        clip = None # QRectF - member
        cursorPosition = None # int - member
        palette = None # QPalette - member
        selections = None # list-of-QAbstractTextDocumentLayout.Selection - member
        def __init__(self):
            '''void QAbstractTextDocumentLayout.PaintContext.__init__()'''
        def __init__(self):
            '''QAbstractTextDocumentLayout.PaintContext QAbstractTextDocumentLayout.PaintContext.__init__()'''
            return QAbstractTextDocumentLayout.PaintContext()
    class Selection():
        """"""
        cursor = None # QTextCursor - member
        format = None # QTextCharFormat - member
        def __init__(self):
            '''void QAbstractTextDocumentLayout.Selection.__init__()'''
        def __init__(self):
            '''QAbstractTextDocumentLayout.Selection QAbstractTextDocumentLayout.Selection.__init__()'''
            return QAbstractTextDocumentLayout.Selection()


class QTextObjectInterface():
    """"""
    def __init__(self):
        '''void QTextObjectInterface.__init__()'''
    def __init__(self):
        '''QTextObjectInterface QTextObjectInterface.__init__()'''
        return QTextObjectInterface()
    def drawObject(self, painter, rect, doc, posInDocument, format):
        '''abstract void QTextObjectInterface.drawObject(QPainter painter, QRectF rect, QTextDocument doc, int posInDocument, QTextFormat format)'''
    def intrinsicSize(self, doc, posInDocument, format):
        '''abstract QSizeF QTextObjectInterface.intrinsicSize(QTextDocument doc, int posInDocument, QTextFormat format)'''
        return QSizeF()


class QAction(QObject):
    """"""
    # Enum QAction.Priority
    LowPriority = 0
    NormalPriority = 0
    HighPriority = 0

    # Enum QAction.SoftKeyRole
    NoSoftKey = 0
    PositiveSoftKey = 0
    NegativeSoftKey = 0
    SelectSoftKey = 0

    # Enum QAction.MenuRole
    NoRole = 0
    TextHeuristicRole = 0
    ApplicationSpecificRole = 0
    AboutQtRole = 0
    AboutRole = 0
    PreferencesRole = 0
    QuitRole = 0

    # Enum QAction.ActionEvent
    Trigger = 0
    Hover = 0

    def __init__(self, parent):
        '''void QAction.__init__(QObject parent)'''
    def __init__(self, text, parent):
        '''void QAction.__init__(QString text, QObject parent)'''
    def __init__(self, icon, text, parent):
        '''void QAction.__init__(QIcon icon, QString text, QObject parent)'''
    def softKeyRole(self):
        '''QAction.SoftKeyRole QAction.softKeyRole()'''
        return QAction.SoftKeyRole()
    def setSoftKeyRole(self, softKeyRole):
        '''void QAction.setSoftKeyRole(QAction.SoftKeyRole softKeyRole)'''
    def priority(self):
        '''QAction.Priority QAction.priority()'''
        return QAction.Priority()
    def setPriority(self, priority):
        '''void QAction.setPriority(QAction.Priority priority)'''
    def isIconVisibleInMenu(self):
        '''bool QAction.isIconVisibleInMenu()'''
        return bool()
    def setIconVisibleInMenu(self, visible):
        '''void QAction.setIconVisibleInMenu(bool visible)'''
    def associatedGraphicsWidgets(self):
        '''list-of-QGraphicsWidget QAction.associatedGraphicsWidgets()'''
        return [QGraphicsWidget()]
    def associatedWidgets(self):
        '''list-of-QWidget QAction.associatedWidgets()'''
        return [QWidget()]
    def menuRole(self):
        '''QAction.MenuRole QAction.menuRole()'''
        return QAction.MenuRole()
    def setMenuRole(self, menuRole):
        '''void QAction.setMenuRole(QAction.MenuRole menuRole)'''
    def autoRepeat(self):
        '''bool QAction.autoRepeat()'''
        return bool()
    def setAutoRepeat(self):
        '''bool QAction.setAutoRepeat()'''
        return bool()
    def shortcuts(self):
        '''list-of-QKeySequence QAction.shortcuts()'''
        return [QKeySequence()]
    def setShortcuts(self, shortcuts):
        '''void QAction.setShortcuts(list-of-QKeySequence shortcuts)'''
    def setShortcuts(self):
        '''QKeySequence.StandardKey QAction.setShortcuts()'''
        return QKeySequence.StandardKey()
    toggled = pyqtSignal() # void toggled(bool) - signal
    hovered = pyqtSignal() # void hovered() - signal
    triggered = pyqtSignal() # void triggered(bool = 0) - signal
    changed = pyqtSignal() # void changed() - signal
    def setVisible(self):
        '''bool QAction.setVisible()'''
        return bool()
    def setDisabled(self, b):
        '''void QAction.setDisabled(bool b)'''
    def setEnabled(self):
        '''bool QAction.setEnabled()'''
        return bool()
    def toggle(self):
        '''void QAction.toggle()'''
    def setChecked(self):
        '''bool QAction.setChecked()'''
        return bool()
    def hover(self):
        '''void QAction.hover()'''
    def trigger(self):
        '''void QAction.trigger()'''
    def event(self):
        '''QEvent QAction.event()'''
        return QEvent()
    def parentWidget(self):
        '''QWidget QAction.parentWidget()'''
        return QWidget()
    def showStatusText(self, widget = None):
        '''bool QAction.showStatusText(QWidget widget = None)'''
        return bool()
    def activate(self, event):
        '''void QAction.activate(QAction.ActionEvent event)'''
    def isVisible(self):
        '''bool QAction.isVisible()'''
        return bool()
    def isEnabled(self):
        '''bool QAction.isEnabled()'''
        return bool()
    def isChecked(self):
        '''bool QAction.isChecked()'''
        return bool()
    def setData(self, var):
        '''void QAction.setData(QVariant var)'''
    def data(self):
        '''QVariant QAction.data()'''
        return QVariant()
    def isCheckable(self):
        '''bool QAction.isCheckable()'''
        return bool()
    def setCheckable(self):
        '''bool QAction.setCheckable()'''
        return bool()
    def font(self):
        '''QFont QAction.font()'''
        return QFont()
    def setFont(self, font):
        '''void QAction.setFont(QFont font)'''
    def shortcutContext(self):
        '''Qt.ShortcutContext QAction.shortcutContext()'''
        return Qt.ShortcutContext()
    def setShortcutContext(self, context):
        '''void QAction.setShortcutContext(Qt.ShortcutContext context)'''
    def shortcut(self):
        '''QKeySequence QAction.shortcut()'''
        return QKeySequence()
    def setShortcut(self, shortcut):
        '''void QAction.setShortcut(QKeySequence shortcut)'''
    def isSeparator(self):
        '''bool QAction.isSeparator()'''
        return bool()
    def setSeparator(self, b):
        '''void QAction.setSeparator(bool b)'''
    def setMenu(self, menu):
        '''void QAction.setMenu(QMenu menu)'''
    def menu(self):
        '''QMenu QAction.menu()'''
        return QMenu()
    def whatsThis(self):
        '''QString QAction.whatsThis()'''
        return QString()
    def setWhatsThis(self, what):
        '''void QAction.setWhatsThis(QString what)'''
    def statusTip(self):
        '''QString QAction.statusTip()'''
        return QString()
    def setStatusTip(self, statusTip):
        '''void QAction.setStatusTip(QString statusTip)'''
    def toolTip(self):
        '''QString QAction.toolTip()'''
        return QString()
    def setToolTip(self, tip):
        '''void QAction.setToolTip(QString tip)'''
    def iconText(self):
        '''QString QAction.iconText()'''
        return QString()
    def setIconText(self, text):
        '''void QAction.setIconText(QString text)'''
    def text(self):
        '''QString QAction.text()'''
        return QString()
    def setText(self, text):
        '''void QAction.setText(QString text)'''
    def icon(self):
        '''QIcon QAction.icon()'''
        return QIcon()
    def setIcon(self, icon):
        '''void QAction.setIcon(QIcon icon)'''
    def actionGroup(self):
        '''QActionGroup QAction.actionGroup()'''
        return QActionGroup()
    def setActionGroup(self, group):
        '''void QAction.setActionGroup(QActionGroup group)'''


class QActionGroup(QObject):
    """"""
    def __init__(self, parent):
        '''void QActionGroup.__init__(QObject parent)'''
    hovered = pyqtSignal() # void hovered(QAction *) - signal
    selected = pyqtSignal() # void selected(QAction *) - signal
    triggered = pyqtSignal() # void triggered(QAction *) - signal
    def setExclusive(self):
        '''bool QActionGroup.setExclusive()'''
        return bool()
    def setVisible(self):
        '''bool QActionGroup.setVisible()'''
        return bool()
    def setDisabled(self, b):
        '''void QActionGroup.setDisabled(bool b)'''
    def setEnabled(self):
        '''bool QActionGroup.setEnabled()'''
        return bool()
    def isVisible(self):
        '''bool QActionGroup.isVisible()'''
        return bool()
    def isEnabled(self):
        '''bool QActionGroup.isEnabled()'''
        return bool()
    def isExclusive(self):
        '''bool QActionGroup.isExclusive()'''
        return bool()
    def checkedAction(self):
        '''QAction QActionGroup.checkedAction()'''
        return QAction()
    def actions(self):
        '''list-of-QAction QActionGroup.actions()'''
        return [QAction()]
    def removeAction(self, a):
        '''void QActionGroup.removeAction(QAction a)'''
    def addAction(self, a):
        '''QAction QActionGroup.addAction(QAction a)'''
        return QAction()
    def addAction(self, text):
        '''QAction QActionGroup.addAction(QString text)'''
        return QAction()
    def addAction(self, icon, text):
        '''QAction QActionGroup.addAction(QIcon icon, QString text)'''
        return QAction()


class QApplication(QCoreApplication):
    """"""
    # Enum QApplication.ColorSpec
    NormalColor = 0
    CustomColor = 0
    ManyColor = 0

    # Enum QApplication.Type
    Tty = 0
    GuiClient = 0
    GuiServer = 0

    def __init__(self, argv):
        '''void QApplication.__init__(list-of-str argv)'''
    def __init__(self, argv, GUIenabled):
        '''void QApplication.__init__(list-of-str argv, bool GUIenabled)'''
    def __init__(self, argv):
        '''QApplication.Type QApplication.__init__(list-of-str argv)'''
        return QApplication.Type()
    def __init__(self, display, visual = 0, colormap = 0):
        '''void QApplication.__init__(Display display, int visual = 0, int colormap = 0)'''
    def __init__(self, dpy, argv, visual = 0, cmap = 0):
        '''void QApplication.__init__(Display dpy, list-of-str argv, int visual = 0, int cmap = 0)'''
    def queryKeyboardModifiers(self):
        '''static Qt.KeyboardModifiers QApplication.queryKeyboardModifiers()'''
        return Qt.KeyboardModifiers()
    def autoSipEnabled(self):
        '''bool QApplication.autoSipEnabled()'''
        return bool()
    def setAutoSipEnabled(self, enabled):
        '''void QApplication.setAutoSipEnabled(bool enabled)'''
    def setGraphicsSystem(self):
        '''static QString QApplication.setGraphicsSystem()'''
        return QString()
    def alert(self, widget, msecs = 0):
        '''static void QApplication.alert(QWidget widget, int msecs = 0)'''
    def styleSheet(self):
        '''QString QApplication.styleSheet()'''
        return QString()
    def keyboardInputDirection(self):
        '''static Qt.LayoutDirection QApplication.keyboardInputDirection()'''
        return Qt.LayoutDirection()
    def keyboardInputLocale(self):
        '''static QLocale QApplication.keyboardInputLocale()'''
        return QLocale()
    def font(self):
        '''static QFont QApplication.font()'''
        return QFont()
    def font(self):
        '''static QWidget QApplication.font()'''
        return QWidget()
    def font(self, className):
        '''static QFont QApplication.font(str className)'''
        return QFont()
    def event(self):
        '''QEvent QApplication.event()'''
        return QEvent()
    def setStyleSheet(self, sheet):
        '''void QApplication.setStyleSheet(QString sheet)'''
    def closeAllWindows(self):
        '''static void QApplication.closeAllWindows()'''
    def aboutQt(self):
        '''static void QApplication.aboutQt()'''
    fontDatabaseChanged = pyqtSignal() # void fontDatabaseChanged() - signal
    saveStateRequest = pyqtSignal() # void saveStateRequest(QSessionManageramp;) - signal
    lastWindowClosed = pyqtSignal() # void lastWindowClosed() - signal
    focusChanged = pyqtSignal() # void focusChanged(QWidget *,QWidget *) - signal
    commitDataRequest = pyqtSignal() # void commitDataRequest(QSessionManageramp;) - signal
    def quitOnLastWindowClosed(self):
        '''static bool QApplication.quitOnLastWindowClosed()'''
        return bool()
    def setQuitOnLastWindowClosed(self, quit):
        '''static void QApplication.setQuitOnLastWindowClosed(bool quit)'''
    def notify(self):
        '''QEvent QApplication.notify()'''
        return QEvent()
    def exec_(self):
        '''static int QApplication.exec_()'''
        return int()
    def inputContext(self):
        '''QInputContext QApplication.inputContext()'''
        return QInputContext()
    def setInputContext(self):
        '''QInputContext QApplication.setInputContext()'''
        return QInputContext()
    def saveState(self, sm):
        '''void QApplication.saveState(QSessionManager sm)'''
    def commitData(self, sm):
        '''void QApplication.commitData(QSessionManager sm)'''
    def sessionKey(self):
        '''QString QApplication.sessionKey()'''
        return QString()
    def sessionId(self):
        '''QString QApplication.sessionId()'''
        return QString()
    def isSessionRestored(self):
        '''bool QApplication.isSessionRestored()'''
        return bool()
    def x11ProcessEvent(self):
        '''sip.voidptr QApplication.x11ProcessEvent()'''
        return sip.voidptr()
    def x11EventFilter(self):
        '''sip.voidptr QApplication.x11EventFilter()'''
        return sip.voidptr()
    def setEffectEnabled(self, effect, enabled = True):
        '''static void QApplication.setEffectEnabled(Qt.UIEffect effect, bool enabled = True)'''
    def isEffectEnabled(self):
        '''static Qt.UIEffect QApplication.isEffectEnabled()'''
        return Qt.UIEffect()
    def isLeftToRight(self):
        '''static bool QApplication.isLeftToRight()'''
        return bool()
    def isRightToLeft(self):
        '''static bool QApplication.isRightToLeft()'''
        return bool()
    def layoutDirection(self):
        '''static Qt.LayoutDirection QApplication.layoutDirection()'''
        return Qt.LayoutDirection()
    def setLayoutDirection(self, direction):
        '''static void QApplication.setLayoutDirection(Qt.LayoutDirection direction)'''
    def startDragDistance(self):
        '''static int QApplication.startDragDistance()'''
        return int()
    def setStartDragDistance(self, l):
        '''static void QApplication.setStartDragDistance(int l)'''
    def startDragTime(self):
        '''static int QApplication.startDragTime()'''
        return int()
    def setStartDragTime(self, ms):
        '''static void QApplication.setStartDragTime(int ms)'''
    def globalStrut(self):
        '''static QSize QApplication.globalStrut()'''
        return QSize()
    def setGlobalStrut(self):
        '''static QSize QApplication.setGlobalStrut()'''
        return QSize()
    def wheelScrollLines(self):
        '''static int QApplication.wheelScrollLines()'''
        return int()
    def setWheelScrollLines(self):
        '''static int QApplication.setWheelScrollLines()'''
        return int()
    def keyboardInputInterval(self):
        '''static int QApplication.keyboardInputInterval()'''
        return int()
    def setKeyboardInputInterval(self):
        '''static int QApplication.setKeyboardInputInterval()'''
        return int()
    def doubleClickInterval(self):
        '''static int QApplication.doubleClickInterval()'''
        return int()
    def setDoubleClickInterval(self):
        '''static int QApplication.setDoubleClickInterval()'''
        return int()
    def cursorFlashTime(self):
        '''static int QApplication.cursorFlashTime()'''
        return int()
    def setCursorFlashTime(self):
        '''static int QApplication.setCursorFlashTime()'''
        return int()
    def desktopSettingsAware(self):
        '''static bool QApplication.desktopSettingsAware()'''
        return bool()
    def setDesktopSettingsAware(self):
        '''static bool QApplication.setDesktopSettingsAware()'''
        return bool()
    def mouseButtons(self):
        '''static Qt.MouseButtons QApplication.mouseButtons()'''
        return Qt.MouseButtons()
    def keyboardModifiers(self):
        '''static Qt.KeyboardModifiers QApplication.keyboardModifiers()'''
        return Qt.KeyboardModifiers()
    def beep(self):
        '''static void QApplication.beep()'''
    def syncX(self):
        '''static void QApplication.syncX()'''
    def topLevelAt(self, p):
        '''static QWidget QApplication.topLevelAt(QPoint p)'''
        return QWidget()
    def topLevelAt(self, x, y):
        '''static QWidget QApplication.topLevelAt(int x, int y)'''
        return QWidget()
    def widgetAt(self, p):
        '''static QWidget QApplication.widgetAt(QPoint p)'''
        return QWidget()
    def widgetAt(self, x, y):
        '''static QWidget QApplication.widgetAt(int x, int y)'''
        return QWidget()
    def setActiveWindow(self, act):
        '''static void QApplication.setActiveWindow(QWidget act)'''
    def activeWindow(self):
        '''static QWidget QApplication.activeWindow()'''
        return QWidget()
    def focusWidget(self):
        '''static QWidget QApplication.focusWidget()'''
        return QWidget()
    def clipboard(self):
        '''static QClipboard QApplication.clipboard()'''
        return QClipboard()
    def activeModalWidget(self):
        '''static QWidget QApplication.activeModalWidget()'''
        return QWidget()
    def activePopupWidget(self):
        '''static QWidget QApplication.activePopupWidget()'''
        return QWidget()
    def desktop(self):
        '''static QDesktopWidget QApplication.desktop()'''
        return QDesktopWidget()
    def topLevelWidgets(self):
        '''static list-of-QWidget QApplication.topLevelWidgets()'''
        return [QWidget()]
    def allWidgets(self):
        '''static list-of-QWidget QApplication.allWidgets()'''
        return [QWidget()]
    def windowIcon(self):
        '''static QIcon QApplication.windowIcon()'''
        return QIcon()
    def setWindowIcon(self, icon):
        '''static void QApplication.setWindowIcon(QIcon icon)'''
    def fontMetrics(self):
        '''static QFontMetrics QApplication.fontMetrics()'''
        return QFontMetrics()
    def setFont(self, font, className = None):
        '''static void QApplication.setFont(QFont font, str className = None)'''
    def setPalette(self, palette, className = None):
        '''static void QApplication.setPalette(QPalette palette, str className = None)'''
    def palette(self):
        '''static QPalette QApplication.palette()'''
        return QPalette()
    def palette(self):
        '''static QWidget QApplication.palette()'''
        return QWidget()
    def palette(self, className):
        '''static QPalette QApplication.palette(str className)'''
        return QPalette()
    def restoreOverrideCursor(self):
        '''static void QApplication.restoreOverrideCursor()'''
    def changeOverrideCursor(self):
        '''static QCursor QApplication.changeOverrideCursor()'''
        return QCursor()
    def setOverrideCursor(self):
        '''static QCursor QApplication.setOverrideCursor()'''
        return QCursor()
    def overrideCursor(self):
        '''static QCursor QApplication.overrideCursor()'''
        return QCursor()
    def setColorSpec(self):
        '''static int QApplication.setColorSpec()'''
        return int()
    def colorSpec(self):
        '''static int QApplication.colorSpec()'''
        return int()
    def setStyle(self):
        '''static QStyle QApplication.setStyle()'''
        return QStyle()
    def setStyle(self):
        '''static QString QApplication.setStyle()'''
        return QString()
    def style(self):
        '''static QStyle QApplication.style()'''
        return QStyle()
    def type(self):
        '''static QApplication.Type QApplication.type()'''
        return QApplication.Type()


class QPixmap(QPaintDevice):
    """"""
    # Enum QPixmap.ShareMode
    ImplicitlyShared = 0
    ExplicitlyShared = 0

    def __init__(self):
        '''void QPixmap.__init__()'''
    def __init__(self, w, h):
        '''void QPixmap.__init__(int w, int h)'''
    def __init__(self):
        '''QSize QPixmap.__init__()'''
        return QSize()
    def __init__(self, fileName, format = None, flags = None):
        '''void QPixmap.__init__(QString fileName, str format = None, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
    def __init__(self, xpm):
        '''void QPixmap.__init__(list-of-str xpm)'''
    def __init__(self):
        '''QPixmap QPixmap.__init__()'''
        return QPixmap()
    def __init__(self, variant):
        '''void QPixmap.__init__(QVariant variant)'''
    def swap(self, other):
        '''void QPixmap.swap(QPixmap other)'''
    def scroll(self, dx, dy, rect, exposed):
        '''void QPixmap.scroll(int dx, int dy, QRect rect, QRegion exposed)'''
    def scroll(self, dx, dy, x, y, width, height, exposed):
        '''void QPixmap.scroll(int dx, int dy, int x, int y, int width, int height, QRegion exposed)'''
    def fromX11Pixmap(self, pixmap, mode = None):
        '''static QPixmap QPixmap.fromX11Pixmap(int pixmap, QPixmap.ShareMode mode = QPixmap.ImplicitlyShared)'''
        return QPixmap()
    def cacheKey(self):
        '''int QPixmap.cacheKey()'''
        return int()
    def metric(self):
        '''QPaintDevice.PaintDeviceMetric QPixmap.metric()'''
        return QPaintDevice.PaintDeviceMetric()
    def paintEngine(self):
        '''QPaintEngine QPixmap.paintEngine()'''
        return QPaintEngine()
    def handle(self):
        '''int QPixmap.handle()'''
        return int()
    def x11Info(self):
        '''QX11Info QPixmap.x11Info()'''
        return QX11Info()
    def isQBitmap(self):
        '''bool QPixmap.isQBitmap()'''
        return bool()
    def x11PictureHandle(self):
        '''int QPixmap.x11PictureHandle()'''
        return int()
    def detach(self):
        '''void QPixmap.detach()'''
    def serialNumber(self):
        '''int QPixmap.serialNumber()'''
        return int()
    def copy(self, rect = QRect()):
        '''QPixmap QPixmap.copy(QRect rect = QRect())'''
        return QPixmap()
    def copy(self, ax, ay, awidth, aheight):
        '''QPixmap QPixmap.copy(int ax, int ay, int awidth, int aheight)'''
        return QPixmap()
    def save(self, fileName, format = None, quality = None):
        '''bool QPixmap.save(QString fileName, str format = None, int quality = -1)'''
        return bool()
    def save(self, device, format = None, quality = None):
        '''bool QPixmap.save(QIODevice device, str format = None, int quality = -1)'''
        return bool()
    def loadFromData(self, buf, format = None, flags = None):
        '''bool QPixmap.loadFromData(str buf, str format = None, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
        return bool()
    def loadFromData(self, buf, format = None, flags = None):
        '''bool QPixmap.loadFromData(QByteArray buf, str format = None, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
        return bool()
    def load(self, fileName, format = None, flags = None):
        '''bool QPixmap.load(QString fileName, str format = None, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
        return bool()
    def convertFromImage(self, img, flags = None):
        '''bool QPixmap.convertFromImage(QImage img, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
        return bool()
    def fromImageReader(self, imageReader, flags = None):
        '''static QPixmap QPixmap.fromImageReader(QImageReader imageReader, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
        return QPixmap()
    def fromImage(self, image, flags = None):
        '''static QPixmap QPixmap.fromImage(QImage image, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
        return QPixmap()
    def toImage(self):
        '''QImage QPixmap.toImage()'''
        return QImage()
    def trueMatrix(self, m, w, h):
        '''static QMatrix QPixmap.trueMatrix(QMatrix m, int w, int h)'''
        return QMatrix()
    def trueMatrix(self, m, w, h):
        '''static QTransform QPixmap.trueMatrix(QTransform m, int w, int h)'''
        return QTransform()
    def transformed(self, matrix, mode = None):
        '''QPixmap QPixmap.transformed(QMatrix matrix, Qt.TransformationMode mode = Qt.FastTransformation)'''
        return QPixmap()
    def transformed(self, transform, mode = None):
        '''QPixmap QPixmap.transformed(QTransform transform, Qt.TransformationMode mode = Qt.FastTransformation)'''
        return QPixmap()
    def scaledToHeight(self, height, mode = None):
        '''QPixmap QPixmap.scaledToHeight(int height, Qt.TransformationMode mode = Qt.FastTransformation)'''
        return QPixmap()
    def scaledToWidth(self, width, mode = None):
        '''QPixmap QPixmap.scaledToWidth(int width, Qt.TransformationMode mode = Qt.FastTransformation)'''
        return QPixmap()
    def scaled(self, width, height, aspectRatioMode = None, transformMode = None):
        '''QPixmap QPixmap.scaled(int width, int height, Qt.AspectRatioMode aspectRatioMode = Qt.IgnoreAspectRatio, Qt.TransformationMode transformMode = Qt.FastTransformation)'''
        return QPixmap()
    def scaled(self, size, aspectRatioMode = None, transformMode = None):
        '''QPixmap QPixmap.scaled(QSize size, Qt.AspectRatioMode aspectRatioMode = Qt.IgnoreAspectRatio, Qt.TransformationMode transformMode = Qt.FastTransformation)'''
        return QPixmap()
    def grabWidget(self, widget, rect):
        '''static QPixmap QPixmap.grabWidget(QWidget widget, QRect rect)'''
        return QPixmap()
    def grabWidget(self, widget, x = 0, y = 0, width = None, height = None):
        '''static QPixmap QPixmap.grabWidget(QWidget widget, int x = 0, int y = 0, int width = -1, int height = -1)'''
        return QPixmap()
    def grabWindow(self, window, x = 0, y = 0, width = None, height = None):
        '''static QPixmap QPixmap.grabWindow(int window, int x = 0, int y = 0, int width = -1, int height = -1)'''
        return QPixmap()
    def createMaskFromColor(self, maskColor, mode):
        '''QBitmap QPixmap.createMaskFromColor(QColor maskColor, Qt.MaskMode mode)'''
        return QBitmap()
    def createMaskFromColor(self, maskColor):
        '''QBitmap QPixmap.createMaskFromColor(QColor maskColor)'''
        return QBitmap()
    def createHeuristicMask(self, clipTight = True):
        '''QBitmap QPixmap.createHeuristicMask(bool clipTight = True)'''
        return QBitmap()
    def hasAlphaChannel(self):
        '''bool QPixmap.hasAlphaChannel()'''
        return bool()
    def hasAlpha(self):
        '''bool QPixmap.hasAlpha()'''
        return bool()
    def setAlphaChannel(self):
        '''QPixmap QPixmap.setAlphaChannel()'''
        return QPixmap()
    def alphaChannel(self):
        '''QPixmap QPixmap.alphaChannel()'''
        return QPixmap()
    def setMask(self):
        '''QBitmap QPixmap.setMask()'''
        return QBitmap()
    def mask(self):
        '''QBitmap QPixmap.mask()'''
        return QBitmap()
    def fill(self, color = None):
        '''void QPixmap.fill(QColor color = Qt.white)'''
    def fill(self, widget, ofs):
        '''void QPixmap.fill(QWidget widget, QPoint ofs)'''
    def fill(self, widget, xofs, yofs):
        '''void QPixmap.fill(QWidget widget, int xofs, int yofs)'''
    def defaultDepth(self):
        '''static int QPixmap.defaultDepth()'''
        return int()
    def depth(self):
        '''int QPixmap.depth()'''
        return int()
    def rect(self):
        '''QRect QPixmap.rect()'''
        return QRect()
    def size(self):
        '''QSize QPixmap.size()'''
        return QSize()
    def height(self):
        '''int QPixmap.height()'''
        return int()
    def width(self):
        '''int QPixmap.width()'''
        return int()
    def devType(self):
        '''int QPixmap.devType()'''
        return int()
    def isNull(self):
        '''bool QPixmap.isNull()'''
        return bool()


class QBitmap(QPixmap):
    """"""
    def __init__(self):
        '''void QBitmap.__init__()'''
    def __init__(self):
        '''QPixmap QBitmap.__init__()'''
        return QPixmap()
    def __init__(self, w, h):
        '''void QBitmap.__init__(int w, int h)'''
    def __init__(self):
        '''QSize QBitmap.__init__()'''
        return QSize()
    def __init__(self, fileName, format = None):
        '''void QBitmap.__init__(QString fileName, str format = None)'''
    def __init__(self, variant):
        '''void QBitmap.__init__(QVariant variant)'''
    def __init__(self):
        '''QBitmap QBitmap.__init__()'''
        return QBitmap()
    def swap(self, other):
        '''void QBitmap.swap(QBitmap other)'''
    def transformed(self):
        '''QMatrix QBitmap.transformed()'''
        return QMatrix()
    def transformed(self, matrix):
        '''QBitmap QBitmap.transformed(QTransform matrix)'''
        return QBitmap()
    def fromData(self, size, bits, format = None):
        '''static QBitmap QBitmap.fromData(QSize size, str bits, QImage.Format format = QImage.Format_MonoLSB)'''
        return QBitmap()
    def fromImage(self, image, flags = None):
        '''static QBitmap QBitmap.fromImage(QImage image, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
        return QBitmap()
    def clear(self):
        '''void QBitmap.clear()'''


class QLayoutItem():
    """"""
    def __init__(self, alignment = 0):
        '''void QLayoutItem.__init__(Qt.Alignment alignment = 0)'''
    def __init__(self):
        '''QLayoutItem QLayoutItem.__init__()'''
        return QLayoutItem()
    def controlTypes(self):
        '''QSizePolicy.ControlTypes QLayoutItem.controlTypes()'''
        return QSizePolicy.ControlTypes()
    def setAlignment(self, a):
        '''void QLayoutItem.setAlignment(Qt.Alignment a)'''
    def alignment(self):
        '''Qt.Alignment QLayoutItem.alignment()'''
        return Qt.Alignment()
    def spacerItem(self):
        '''QSpacerItem QLayoutItem.spacerItem()'''
        return QSpacerItem()
    def layout(self):
        '''QLayout QLayoutItem.layout()'''
        return QLayout()
    def widget(self):
        '''QWidget QLayoutItem.widget()'''
        return QWidget()
    def invalidate(self):
        '''void QLayoutItem.invalidate()'''
    def minimumHeightForWidth(self):
        '''int QLayoutItem.minimumHeightForWidth()'''
        return int()
    def heightForWidth(self):
        '''int QLayoutItem.heightForWidth()'''
        return int()
    def hasHeightForWidth(self):
        '''bool QLayoutItem.hasHeightForWidth()'''
        return bool()
    def isEmpty(self):
        '''abstract bool QLayoutItem.isEmpty()'''
        return bool()
    def geometry(self):
        '''abstract QRect QLayoutItem.geometry()'''
        return QRect()
    def setGeometry(self):
        '''abstract QRect QLayoutItem.setGeometry()'''
        return QRect()
    def expandingDirections(self):
        '''abstract Qt.Orientations QLayoutItem.expandingDirections()'''
        return Qt.Orientations()
    def maximumSize(self):
        '''abstract QSize QLayoutItem.maximumSize()'''
        return QSize()
    def minimumSize(self):
        '''abstract QSize QLayoutItem.minimumSize()'''
        return QSize()
    def sizeHint(self):
        '''abstract QSize QLayoutItem.sizeHint()'''
        return QSize()


class QLayout(QObject, QLayoutItem):
    """"""
    # Enum QLayout.SizeConstraint
    SetDefaultConstraint = 0
    SetNoConstraint = 0
    SetMinimumSize = 0
    SetFixedSize = 0
    SetMaximumSize = 0
    SetMinAndMaxSize = 0

    def __init__(self, parent):
        '''void QLayout.__init__(QWidget parent)'''
    def __init__(self):
        '''void QLayout.__init__()'''
    def contentsMargins(self):
        '''QMargins QLayout.contentsMargins()'''
        return QMargins()
    def contentsRect(self):
        '''QRect QLayout.contentsRect()'''
        return QRect()
    def getContentsMargins(self, left, top, right, bottom):
        '''void QLayout.getContentsMargins(int left, int top, int right, int bottom)'''
    def setContentsMargins(self, left, top, right, bottom):
        '''void QLayout.setContentsMargins(int left, int top, int right, int bottom)'''
    def setContentsMargins(self, margins):
        '''void QLayout.setContentsMargins(QMargins margins)'''
    def alignmentRect(self):
        '''QRect QLayout.alignmentRect()'''
        return QRect()
    def addChildWidget(self, w):
        '''void QLayout.addChildWidget(QWidget w)'''
    def addChildLayout(self, l):
        '''void QLayout.addChildLayout(QLayout l)'''
    def childEvent(self, e):
        '''void QLayout.childEvent(QChildEvent e)'''
    def widgetEvent(self):
        '''QEvent QLayout.widgetEvent()'''
        return QEvent()
    def closestAcceptableSize(self, w, s):
        '''static QSize QLayout.closestAcceptableSize(QWidget w, QSize s)'''
        return QSize()
    def isEnabled(self):
        '''bool QLayout.isEnabled()'''
        return bool()
    def setEnabled(self):
        '''bool QLayout.setEnabled()'''
        return bool()
    def layout(self):
        '''QLayout QLayout.layout()'''
        return QLayout()
    def totalSizeHint(self):
        '''QSize QLayout.totalSizeHint()'''
        return QSize()
    def totalMaximumSize(self):
        '''QSize QLayout.totalMaximumSize()'''
        return QSize()
    def totalMinimumSize(self):
        '''QSize QLayout.totalMinimumSize()'''
        return QSize()
    def totalHeightForWidth(self, w):
        '''int QLayout.totalHeightForWidth(int w)'''
        return int()
    def isEmpty(self):
        '''bool QLayout.isEmpty()'''
        return bool()
    def __len__(self):
        '''None QLayout.__len__()'''
        return None()
    def count(self):
        '''abstract int QLayout.count()'''
        return int()
    def indexOf(self):
        '''QWidget QLayout.indexOf()'''
        return QWidget()
    def takeAt(self, index):
        '''abstract QLayoutItem QLayout.takeAt(int index)'''
        return QLayoutItem()
    def itemAt(self, index):
        '''abstract QLayoutItem QLayout.itemAt(int index)'''
        return QLayoutItem()
    def setGeometry(self):
        '''QRect QLayout.setGeometry()'''
        return QRect()
    def maximumSize(self):
        '''QSize QLayout.maximumSize()'''
        return QSize()
    def minimumSize(self):
        '''QSize QLayout.minimumSize()'''
        return QSize()
    def expandingDirections(self):
        '''Qt.Orientations QLayout.expandingDirections()'''
        return Qt.Orientations()
    def removeItem(self):
        '''QLayoutItem QLayout.removeItem()'''
        return QLayoutItem()
    def removeWidget(self, w):
        '''void QLayout.removeWidget(QWidget w)'''
    def addItem(self):
        '''abstract QLayoutItem QLayout.addItem()'''
        return QLayoutItem()
    def addWidget(self, w):
        '''void QLayout.addWidget(QWidget w)'''
    def update(self):
        '''void QLayout.update()'''
    def activate(self):
        '''bool QLayout.activate()'''
        return bool()
    def geometry(self):
        '''QRect QLayout.geometry()'''
        return QRect()
    def invalidate(self):
        '''void QLayout.invalidate()'''
    def parentWidget(self):
        '''QWidget QLayout.parentWidget()'''
        return QWidget()
    def menuBar(self):
        '''QWidget QLayout.menuBar()'''
        return QWidget()
    def setMenuBar(self, w):
        '''void QLayout.setMenuBar(QWidget w)'''
    def sizeConstraint(self):
        '''QLayout.SizeConstraint QLayout.sizeConstraint()'''
        return QLayout.SizeConstraint()
    def setSizeConstraint(self):
        '''QLayout.SizeConstraint QLayout.setSizeConstraint()'''
        return QLayout.SizeConstraint()
    def setAlignment(self, w, alignment):
        '''bool QLayout.setAlignment(QWidget w, Qt.Alignment alignment)'''
        return bool()
    def setAlignment(self, l, alignment):
        '''bool QLayout.setAlignment(QLayout l, Qt.Alignment alignment)'''
        return bool()
    def setAlignment(self, alignment):
        '''void QLayout.setAlignment(Qt.Alignment alignment)'''
    def setSpacing(self):
        '''int QLayout.setSpacing()'''
        return int()
    def setMargin(self):
        '''int QLayout.setMargin()'''
        return int()
    def spacing(self):
        '''int QLayout.spacing()'''
        return int()
    def margin(self):
        '''int QLayout.margin()'''
        return int()


class QBoxLayout(QLayout):
    """"""
    # Enum QBoxLayout.Direction
    LeftToRight = 0
    RightToLeft = 0
    TopToBottom = 0
    BottomToTop = 0
    Down = 0
    Up = 0

    def __init__(self, direction, parent = None):
        '''void QBoxLayout.__init__(QBoxLayout.Direction direction, QWidget parent = None)'''
    def insertItem(self, index):
        '''QLayoutItem QBoxLayout.insertItem(int index)'''
        return QLayoutItem()
    def stretch(self, index):
        '''int QBoxLayout.stretch(int index)'''
        return int()
    def setStretch(self, index, stretch):
        '''void QBoxLayout.setStretch(int index, int stretch)'''
    def insertSpacerItem(self, index, spacerItem):
        '''void QBoxLayout.insertSpacerItem(int index, QSpacerItem spacerItem)'''
    def addSpacerItem(self, spacerItem):
        '''void QBoxLayout.addSpacerItem(QSpacerItem spacerItem)'''
    def setSpacing(self, spacing):
        '''void QBoxLayout.setSpacing(int spacing)'''
    def spacing(self):
        '''int QBoxLayout.spacing()'''
        return int()
    def setGeometry(self):
        '''QRect QBoxLayout.setGeometry()'''
        return QRect()
    def count(self):
        '''int QBoxLayout.count()'''
        return int()
    def takeAt(self):
        '''int QBoxLayout.takeAt()'''
        return int()
    def itemAt(self):
        '''int QBoxLayout.itemAt()'''
        return int()
    def invalidate(self):
        '''void QBoxLayout.invalidate()'''
    def expandingDirections(self):
        '''Qt.Orientations QBoxLayout.expandingDirections()'''
        return Qt.Orientations()
    def minimumHeightForWidth(self):
        '''int QBoxLayout.minimumHeightForWidth()'''
        return int()
    def heightForWidth(self):
        '''int QBoxLayout.heightForWidth()'''
        return int()
    def hasHeightForWidth(self):
        '''bool QBoxLayout.hasHeightForWidth()'''
        return bool()
    def maximumSize(self):
        '''QSize QBoxLayout.maximumSize()'''
        return QSize()
    def minimumSize(self):
        '''QSize QBoxLayout.minimumSize()'''
        return QSize()
    def sizeHint(self):
        '''QSize QBoxLayout.sizeHint()'''
        return QSize()
    def setStretchFactor(self, w, stretch):
        '''bool QBoxLayout.setStretchFactor(QWidget w, int stretch)'''
        return bool()
    def setStretchFactor(self, l, stretch):
        '''bool QBoxLayout.setStretchFactor(QLayout l, int stretch)'''
        return bool()
    def insertLayout(self, index, layout, stretch = 0):
        '''void QBoxLayout.insertLayout(int index, QLayout layout, int stretch = 0)'''
    def insertWidget(self, index, widget, stretch = 0, alignment = 0):
        '''void QBoxLayout.insertWidget(int index, QWidget widget, int stretch = 0, Qt.Alignment alignment = 0)'''
    def insertStretch(self, index, stretch = 0):
        '''void QBoxLayout.insertStretch(int index, int stretch = 0)'''
    def insertSpacing(self, index, size):
        '''void QBoxLayout.insertSpacing(int index, int size)'''
    def addItem(self):
        '''QLayoutItem QBoxLayout.addItem()'''
        return QLayoutItem()
    def addStrut(self):
        '''int QBoxLayout.addStrut()'''
        return int()
    def addLayout(self, layout, stretch = 0):
        '''void QBoxLayout.addLayout(QLayout layout, int stretch = 0)'''
    def addWidget(self, stretch = 0, alignment = 0):
        '''QWidget QBoxLayout.addWidget(int stretch = 0, Qt.Alignment alignment = 0)'''
        return QWidget()
    def addStretch(self, stretch = 0):
        '''void QBoxLayout.addStretch(int stretch = 0)'''
    def addSpacing(self, size):
        '''void QBoxLayout.addSpacing(int size)'''
    def setDirection(self):
        '''QBoxLayout.Direction QBoxLayout.setDirection()'''
        return QBoxLayout.Direction()
    def direction(self):
        '''QBoxLayout.Direction QBoxLayout.direction()'''
        return QBoxLayout.Direction()


class QHBoxLayout(QBoxLayout):
    """"""
    def __init__(self):
        '''void QHBoxLayout.__init__()'''
    def __init__(self, parent):
        '''void QHBoxLayout.__init__(QWidget parent)'''


class QVBoxLayout(QBoxLayout):
    """"""
    def __init__(self):
        '''void QVBoxLayout.__init__()'''
    def __init__(self, parent):
        '''void QVBoxLayout.__init__(QWidget parent)'''


class QColor():
    """"""
    # Enum QColor.Spec
    Invalid = 0
    Rgb = 0
    Hsv = 0
    Cmyk = 0
    Hsl = 0

    def __init__(self, color):
        '''void QColor.__init__(Qt.GlobalColor color)'''
    def __init__(self, rgb):
        '''void QColor.__init__(int rgb)'''
    def __init__(self, variant):
        '''void QColor.__init__(QVariant variant)'''
    def __init__(self):
        '''void QColor.__init__()'''
    def __init__(self, r, g, b, alpha = 255):
        '''void QColor.__init__(int r, int g, int b, int alpha = 255)'''
    def __init__(self, aname):
        '''void QColor.__init__(QString aname)'''
    def __init__(self, acolor):
        '''void QColor.__init__(QColor acolor)'''
    def isValidColor(self, name):
        '''static bool QColor.isValidColor(QString name)'''
        return bool()
    def fromHslF(self, h, s, l, alpha = 1):
        '''static QColor QColor.fromHslF(float h, float s, float l, float alpha = 1)'''
        return QColor()
    def fromHsl(self, h, s, l, alpha = 255):
        '''static QColor QColor.fromHsl(int h, int s, int l, int alpha = 255)'''
        return QColor()
    def toHsl(self):
        '''QColor QColor.toHsl()'''
        return QColor()
    def setHslF(self, h, s, l, alpha = 1):
        '''void QColor.setHslF(float h, float s, float l, float alpha = 1)'''
    def getHslF(self, h, s, l, alpha):
        '''void QColor.getHslF(float h, float s, float l, float alpha)'''
    def setHsl(self, h, s, l, alpha = 255):
        '''void QColor.setHsl(int h, int s, int l, int alpha = 255)'''
    def getHsl(self, h, s, l, alpha):
        '''void QColor.getHsl(int h, int s, int l, int alpha)'''
    def lightnessF(self):
        '''float QColor.lightnessF()'''
        return float()
    def hslSaturationF(self):
        '''float QColor.hslSaturationF()'''
        return float()
    def hslHueF(self):
        '''float QColor.hslHueF()'''
        return float()
    def lightness(self):
        '''int QColor.lightness()'''
        return int()
    def hslSaturation(self):
        '''int QColor.hslSaturation()'''
        return int()
    def hslHue(self):
        '''int QColor.hslHue()'''
        return int()
    def hsvSaturationF(self):
        '''float QColor.hsvSaturationF()'''
        return float()
    def hsvHueF(self):
        '''float QColor.hsvHueF()'''
        return float()
    def hsvSaturation(self):
        '''int QColor.hsvSaturation()'''
        return int()
    def hsvHue(self):
        '''int QColor.hsvHue()'''
        return int()
    def darker(self, factor = 200):
        '''QColor QColor.darker(int factor = 200)'''
        return QColor()
    def lighter(self, factor = 150):
        '''QColor QColor.lighter(int factor = 150)'''
        return QColor()
    def setAllowX11ColorNames(self, enabled):
        '''static void QColor.setAllowX11ColorNames(bool enabled)'''
    def allowX11ColorNames(self):
        '''static bool QColor.allowX11ColorNames()'''
        return bool()
    def isValid(self):
        '''bool QColor.isValid()'''
        return bool()
    def __ne__(self, c):
        '''bool QColor.__ne__(QColor c)'''
        return bool()
    def __eq__(self, c):
        '''bool QColor.__eq__(QColor c)'''
        return bool()
    def dark(self, factor = 200):
        '''QColor QColor.dark(int factor = 200)'''
        return QColor()
    def light(self, factor = 150):
        '''QColor QColor.light(int factor = 150)'''
        return QColor()
    def fromCmykF(self, c, m, y, k, alpha = 1):
        '''static QColor QColor.fromCmykF(float c, float m, float y, float k, float alpha = 1)'''
        return QColor()
    def fromCmyk(self, c, m, y, k, alpha = 255):
        '''static QColor QColor.fromCmyk(int c, int m, int y, int k, int alpha = 255)'''
        return QColor()
    def fromHsvF(self, h, s, v, alpha = 1):
        '''static QColor QColor.fromHsvF(float h, float s, float v, float alpha = 1)'''
        return QColor()
    def fromHsv(self, h, s, v, alpha = 255):
        '''static QColor QColor.fromHsv(int h, int s, int v, int alpha = 255)'''
        return QColor()
    def fromRgbF(self, r, g, b, alpha = 1):
        '''static QColor QColor.fromRgbF(float r, float g, float b, float alpha = 1)'''
        return QColor()
    def fromRgba(self, rgba):
        '''static QColor QColor.fromRgba(int rgba)'''
        return QColor()
    def fromRgb(self, rgb):
        '''static QColor QColor.fromRgb(int rgb)'''
        return QColor()
    def fromRgb(self, r, g, b, alpha = 255):
        '''static QColor QColor.fromRgb(int r, int g, int b, int alpha = 255)'''
        return QColor()
    def convertTo(self, colorSpec):
        '''QColor QColor.convertTo(QColor.Spec colorSpec)'''
        return QColor()
    def toCmyk(self):
        '''QColor QColor.toCmyk()'''
        return QColor()
    def toHsv(self):
        '''QColor QColor.toHsv()'''
        return QColor()
    def toRgb(self):
        '''QColor QColor.toRgb()'''
        return QColor()
    def setCmykF(self, c, m, y, k, alpha = 1):
        '''void QColor.setCmykF(float c, float m, float y, float k, float alpha = 1)'''
    def getCmykF(self, c, m, y, k, alpha):
        '''void QColor.getCmykF(float c, float m, float y, float k, float alpha)'''
    def setCmyk(self, c, m, y, k, alpha = 255):
        '''void QColor.setCmyk(int c, int m, int y, int k, int alpha = 255)'''
    def getCmyk(self, c, m, y, k, alpha):
        '''void QColor.getCmyk(int c, int m, int y, int k, int alpha)'''
    def blackF(self):
        '''float QColor.blackF()'''
        return float()
    def yellowF(self):
        '''float QColor.yellowF()'''
        return float()
    def magentaF(self):
        '''float QColor.magentaF()'''
        return float()
    def cyanF(self):
        '''float QColor.cyanF()'''
        return float()
    def black(self):
        '''int QColor.black()'''
        return int()
    def yellow(self):
        '''int QColor.yellow()'''
        return int()
    def magenta(self):
        '''int QColor.magenta()'''
        return int()
    def cyan(self):
        '''int QColor.cyan()'''
        return int()
    def setHsvF(self, h, s, v, alpha = 1):
        '''void QColor.setHsvF(float h, float s, float v, float alpha = 1)'''
    def getHsvF(self, h, s, v, alpha):
        '''void QColor.getHsvF(float h, float s, float v, float alpha)'''
    def setHsv(self, h, s, v, alpha = 255):
        '''void QColor.setHsv(int h, int s, int v, int alpha = 255)'''
    def getHsv(self, h, s, v, alpha):
        '''void QColor.getHsv(int h, int s, int v, int alpha)'''
    def valueF(self):
        '''float QColor.valueF()'''
        return float()
    def saturationF(self):
        '''float QColor.saturationF()'''
        return float()
    def hueF(self):
        '''float QColor.hueF()'''
        return float()
    def value(self):
        '''int QColor.value()'''
        return int()
    def saturation(self):
        '''int QColor.saturation()'''
        return int()
    def hue(self):
        '''int QColor.hue()'''
        return int()
    def rgb(self):
        '''int QColor.rgb()'''
        return int()
    def setRgba(self, rgba):
        '''void QColor.setRgba(int rgba)'''
    def rgba(self):
        '''int QColor.rgba()'''
        return int()
    def setRgbF(self, r, g, b, alpha = 1):
        '''void QColor.setRgbF(float r, float g, float b, float alpha = 1)'''
    def getRgbF(self, r, g, b, alpha):
        '''void QColor.getRgbF(float r, float g, float b, float alpha)'''
    def setRgb(self, r, g, b, alpha = 255):
        '''void QColor.setRgb(int r, int g, int b, int alpha = 255)'''
    def setRgb(self, rgb):
        '''void QColor.setRgb(int rgb)'''
    def getRgb(self, r, g, b, alpha):
        '''void QColor.getRgb(int r, int g, int b, int alpha)'''
    def setBlueF(self, blue):
        '''void QColor.setBlueF(float blue)'''
    def setGreenF(self, green):
        '''void QColor.setGreenF(float green)'''
    def setRedF(self, red):
        '''void QColor.setRedF(float red)'''
    def blueF(self):
        '''float QColor.blueF()'''
        return float()
    def greenF(self):
        '''float QColor.greenF()'''
        return float()
    def redF(self):
        '''float QColor.redF()'''
        return float()
    def setBlue(self, blue):
        '''void QColor.setBlue(int blue)'''
    def setGreen(self, green):
        '''void QColor.setGreen(int green)'''
    def setRed(self, red):
        '''void QColor.setRed(int red)'''
    def blue(self):
        '''int QColor.blue()'''
        return int()
    def green(self):
        '''int QColor.green()'''
        return int()
    def red(self):
        '''int QColor.red()'''
        return int()
    def setAlphaF(self, alpha):
        '''void QColor.setAlphaF(float alpha)'''
    def alphaF(self):
        '''float QColor.alphaF()'''
        return float()
    def setAlpha(self, alpha):
        '''void QColor.setAlpha(int alpha)'''
    def alpha(self):
        '''int QColor.alpha()'''
        return int()
    def spec(self):
        '''QColor.Spec QColor.spec()'''
        return QColor.Spec()
    def colorNames(self):
        '''static QStringList QColor.colorNames()'''
        return QStringList()
    def setNamedColor(self, name):
        '''void QColor.setNamedColor(QString name)'''
    def name(self):
        '''QString QColor.name()'''
        return QString()


class QPushButton(QAbstractButton):
    """"""
    def __init__(self, parent = None):
        '''void QPushButton.__init__(QWidget parent = None)'''
    def __init__(self, text, parent = None):
        '''void QPushButton.__init__(QString text, QWidget parent = None)'''
    def __init__(self, icon, text, parent = None):
        '''void QPushButton.__init__(QIcon icon, QString text, QWidget parent = None)'''
    def focusOutEvent(self):
        '''QFocusEvent QPushButton.focusOutEvent()'''
        return QFocusEvent()
    def focusInEvent(self):
        '''QFocusEvent QPushButton.focusInEvent()'''
        return QFocusEvent()
    def keyPressEvent(self):
        '''QKeyEvent QPushButton.keyPressEvent()'''
        return QKeyEvent()
    def paintEvent(self):
        '''QPaintEvent QPushButton.paintEvent()'''
        return QPaintEvent()
    def event(self, e):
        '''bool QPushButton.event(QEvent e)'''
        return bool()
    def initStyleOption(self, option):
        '''void QPushButton.initStyleOption(QStyleOptionButton option)'''
    def showMenu(self):
        '''void QPushButton.showMenu()'''
    def isFlat(self):
        '''bool QPushButton.isFlat()'''
        return bool()
    def setFlat(self):
        '''bool QPushButton.setFlat()'''
        return bool()
    def menu(self):
        '''QMenu QPushButton.menu()'''
        return QMenu()
    def setMenu(self, menu):
        '''void QPushButton.setMenu(QMenu menu)'''
    def setDefault(self):
        '''bool QPushButton.setDefault()'''
        return bool()
    def isDefault(self):
        '''bool QPushButton.isDefault()'''
        return bool()
    def setAutoDefault(self):
        '''bool QPushButton.setAutoDefault()'''
        return bool()
    def autoDefault(self):
        '''bool QPushButton.autoDefault()'''
        return bool()
    def minimumSizeHint(self):
        '''QSize QPushButton.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QPushButton.sizeHint()'''
        return QSize()


class QCommandLinkButton(QPushButton):
    """"""
    def __init__(self, parent = None):
        '''void QCommandLinkButton.__init__(QWidget parent = None)'''
    def __init__(self, text, parent = None):
        '''void QCommandLinkButton.__init__(QString text, QWidget parent = None)'''
    def __init__(self, text, description, parent = None):
        '''void QCommandLinkButton.__init__(QString text, QString description, QWidget parent = None)'''
    def paintEvent(self):
        '''QPaintEvent QCommandLinkButton.paintEvent()'''
        return QPaintEvent()
    def event(self, e):
        '''bool QCommandLinkButton.event(QEvent e)'''
        return bool()
    def minimumSizeHint(self):
        '''QSize QCommandLinkButton.minimumSizeHint()'''
        return QSize()
    def heightForWidth(self):
        '''int QCommandLinkButton.heightForWidth()'''
        return int()
    def sizeHint(self):
        '''QSize QCommandLinkButton.sizeHint()'''
        return QSize()
    def setDescription(self, description):
        '''void QCommandLinkButton.setDescription(QString description)'''
    def description(self):
        '''QString QCommandLinkButton.description()'''
        return QString()


class QBrush():
    """"""
    def __init__(self):
        '''void QBrush.__init__()'''
    def __init__(self, bs):
        '''void QBrush.__init__(Qt.BrushStyle bs)'''
    def __init__(self, color, style = None):
        '''void QBrush.__init__(QColor color, Qt.BrushStyle style = Qt.SolidPattern)'''
    def __init__(self, color, style = None):
        '''void QBrush.__init__(Qt.GlobalColor color, Qt.BrushStyle style = Qt.SolidPattern)'''
    def __init__(self, color, pixmap):
        '''void QBrush.__init__(QColor color, QPixmap pixmap)'''
    def __init__(self, color, pixmap):
        '''void QBrush.__init__(Qt.GlobalColor color, QPixmap pixmap)'''
    def __init__(self, pixmap):
        '''void QBrush.__init__(QPixmap pixmap)'''
    def __init__(self, image):
        '''void QBrush.__init__(QImage image)'''
    def __init__(self, gradient):
        '''void QBrush.__init__(QGradient gradient)'''
    def __init__(self, brush):
        '''void QBrush.__init__(QBrush brush)'''
    def __init__(self, variant):
        '''void QBrush.__init__(QVariant variant)'''
    def swap(self, other):
        '''void QBrush.swap(QBrush other)'''
    def transform(self):
        '''QTransform QBrush.transform()'''
        return QTransform()
    def setTransform(self):
        '''QTransform QBrush.setTransform()'''
        return QTransform()
    def textureImage(self):
        '''QImage QBrush.textureImage()'''
        return QImage()
    def setTextureImage(self, image):
        '''void QBrush.setTextureImage(QImage image)'''
    def matrix(self):
        '''QMatrix QBrush.matrix()'''
        return QMatrix()
    def setMatrix(self, mat):
        '''void QBrush.setMatrix(QMatrix mat)'''
    def color(self):
        '''QColor QBrush.color()'''
        return QColor()
    def style(self):
        '''Qt.BrushStyle QBrush.style()'''
        return Qt.BrushStyle()
    def __ne__(self, b):
        '''bool QBrush.__ne__(QBrush b)'''
        return bool()
    def __eq__(self, b):
        '''bool QBrush.__eq__(QBrush b)'''
        return bool()
    def isOpaque(self):
        '''bool QBrush.isOpaque()'''
        return bool()
    def gradient(self):
        '''QGradient QBrush.gradient()'''
        return QGradient()
    def setColor(self, color):
        '''void QBrush.setColor(QColor color)'''
    def setColor(self, acolor):
        '''void QBrush.setColor(Qt.GlobalColor acolor)'''
    def setTexture(self, pixmap):
        '''void QBrush.setTexture(QPixmap pixmap)'''
    def texture(self):
        '''QPixmap QBrush.texture()'''
        return QPixmap()
    def setStyle(self):
        '''Qt.BrushStyle QBrush.setStyle()'''
        return Qt.BrushStyle()


class QGradient():
    """"""
    # Enum QGradient.Spread
    PadSpread = 0
    ReflectSpread = 0
    RepeatSpread = 0

    # Enum QGradient.Type
    LinearGradient = 0
    RadialGradient = 0
    ConicalGradient = 0
    NoGradient = 0

    # Enum QGradient.CoordinateMode
    LogicalMode = 0
    StretchToDeviceMode = 0
    ObjectBoundingMode = 0

    def __init__(self):
        '''void QGradient.__init__()'''
    def __init__(self):
        '''QGradient QGradient.__init__()'''
        return QGradient()
    def setCoordinateMode(self, mode):
        '''void QGradient.setCoordinateMode(QGradient.CoordinateMode mode)'''
    def coordinateMode(self):
        '''QGradient.CoordinateMode QGradient.coordinateMode()'''
        return QGradient.CoordinateMode()
    def setSpread(self, aspread):
        '''void QGradient.setSpread(QGradient.Spread aspread)'''
    def __ne__(self, other):
        '''bool QGradient.__ne__(QGradient other)'''
        return bool()
    def __eq__(self, gradient):
        '''bool QGradient.__eq__(QGradient gradient)'''
        return bool()
    def stops(self):
        '''list-of-tuple-of-float-QColor QGradient.stops()'''
        return [tuple-of-float-QColor()]
    def setStops(self, stops):
        '''void QGradient.setStops(list-of-tuple-of-float-QColor stops)'''
    def setColorAt(self, pos, color):
        '''void QGradient.setColorAt(float pos, QColor color)'''
    def spread(self):
        '''QGradient.Spread QGradient.spread()'''
        return QGradient.Spread()
    def type(self):
        '''QGradient.Type QGradient.type()'''
        return QGradient.Type()


class QLinearGradient(QGradient):
    """"""
    def __init__(self):
        '''void QLinearGradient.__init__()'''
    def __init__(self, start, finalStop):
        '''void QLinearGradient.__init__(QPointF start, QPointF finalStop)'''
    def __init__(self, xStart, yStart, xFinalStop, yFinalStop):
        '''void QLinearGradient.__init__(float xStart, float yStart, float xFinalStop, float yFinalStop)'''
    def __init__(self):
        '''QLinearGradient QLinearGradient.__init__()'''
        return QLinearGradient()
    def setFinalStop(self, stop):
        '''void QLinearGradient.setFinalStop(QPointF stop)'''
    def setFinalStop(self, x, y):
        '''void QLinearGradient.setFinalStop(float x, float y)'''
    def setStart(self, start):
        '''void QLinearGradient.setStart(QPointF start)'''
    def setStart(self, x, y):
        '''void QLinearGradient.setStart(float x, float y)'''
    def finalStop(self):
        '''QPointF QLinearGradient.finalStop()'''
        return QPointF()
    def start(self):
        '''QPointF QLinearGradient.start()'''
        return QPointF()


class QRadialGradient(QGradient):
    """"""
    def __init__(self):
        '''void QRadialGradient.__init__()'''
    def __init__(self, center, radius, focalPoint):
        '''void QRadialGradient.__init__(QPointF center, float radius, QPointF focalPoint)'''
    def __init__(self, center, centerRadius, focalPoint, focalRadius):
        '''void QRadialGradient.__init__(QPointF center, float centerRadius, QPointF focalPoint, float focalRadius)'''
    def __init__(self, center, radius):
        '''void QRadialGradient.__init__(QPointF center, float radius)'''
    def __init__(self, cx, cy, radius, fx, fy):
        '''void QRadialGradient.__init__(float cx, float cy, float radius, float fx, float fy)'''
    def __init__(self, cx, cy, centerRadius, fx, fy, focalRadius):
        '''void QRadialGradient.__init__(float cx, float cy, float centerRadius, float fx, float fy, float focalRadius)'''
    def __init__(self, cx, cy, radius):
        '''void QRadialGradient.__init__(float cx, float cy, float radius)'''
    def __init__(self):
        '''QRadialGradient QRadialGradient.__init__()'''
        return QRadialGradient()
    def setFocalRadius(self, radius):
        '''void QRadialGradient.setFocalRadius(float radius)'''
    def focalRadius(self):
        '''float QRadialGradient.focalRadius()'''
        return float()
    def setCenterRadius(self, radius):
        '''void QRadialGradient.setCenterRadius(float radius)'''
    def centerRadius(self):
        '''float QRadialGradient.centerRadius()'''
        return float()
    def setRadius(self, radius):
        '''void QRadialGradient.setRadius(float radius)'''
    def setFocalPoint(self, focalPoint):
        '''void QRadialGradient.setFocalPoint(QPointF focalPoint)'''
    def setFocalPoint(self, x, y):
        '''void QRadialGradient.setFocalPoint(float x, float y)'''
    def setCenter(self, center):
        '''void QRadialGradient.setCenter(QPointF center)'''
    def setCenter(self, x, y):
        '''void QRadialGradient.setCenter(float x, float y)'''
    def radius(self):
        '''float QRadialGradient.radius()'''
        return float()
    def focalPoint(self):
        '''QPointF QRadialGradient.focalPoint()'''
        return QPointF()
    def center(self):
        '''QPointF QRadialGradient.center()'''
        return QPointF()


class QConicalGradient(QGradient):
    """"""
    def __init__(self):
        '''void QConicalGradient.__init__()'''
    def __init__(self, center, startAngle):
        '''void QConicalGradient.__init__(QPointF center, float startAngle)'''
    def __init__(self, cx, cy, startAngle):
        '''void QConicalGradient.__init__(float cx, float cy, float startAngle)'''
    def __init__(self):
        '''QConicalGradient QConicalGradient.__init__()'''
        return QConicalGradient()
    def setAngle(self, angle):
        '''void QConicalGradient.setAngle(float angle)'''
    def setCenter(self, center):
        '''void QConicalGradient.setCenter(QPointF center)'''
    def setCenter(self, x, y):
        '''void QConicalGradient.setCenter(float x, float y)'''
    def angle(self):
        '''float QConicalGradient.angle()'''
        return float()
    def center(self):
        '''QPointF QConicalGradient.center()'''
        return QPointF()


class QButtonGroup(QObject):
    """"""
    def __init__(self, parent = None):
        '''void QButtonGroup.__init__(QObject parent = None)'''
    buttonReleased = pyqtSignal() # void buttonReleased(QAbstractButton *) - signal
    buttonReleased = pyqtSignal() # void buttonReleased(int) - signal
    buttonPressed = pyqtSignal() # void buttonPressed(QAbstractButton *) - signal
    buttonPressed = pyqtSignal() # void buttonPressed(int) - signal
    buttonClicked = pyqtSignal() # void buttonClicked(QAbstractButton *) - signal
    buttonClicked = pyqtSignal() # void buttonClicked(int) - signal
    def checkedId(self):
        '''int QButtonGroup.checkedId()'''
        return int()
    def id(self, button):
        '''int QButtonGroup.id(QAbstractButton button)'''
        return int()
    def setId(self, button, id):
        '''void QButtonGroup.setId(QAbstractButton button, int id)'''
    def checkedButton(self):
        '''QAbstractButton QButtonGroup.checkedButton()'''
        return QAbstractButton()
    def button(self, id):
        '''QAbstractButton QButtonGroup.button(int id)'''
        return QAbstractButton()
    def buttons(self):
        '''list-of-QAbstractButton QButtonGroup.buttons()'''
        return [QAbstractButton()]
    def removeButton(self):
        '''QAbstractButton QButtonGroup.removeButton()'''
        return QAbstractButton()
    def addButton(self):
        '''QAbstractButton QButtonGroup.addButton()'''
        return QAbstractButton()
    def addButton(self, id):
        '''QAbstractButton QButtonGroup.addButton(int id)'''
        return QAbstractButton()
    def exclusive(self):
        '''bool QButtonGroup.exclusive()'''
        return bool()
    def setExclusive(self):
        '''bool QButtonGroup.setExclusive()'''
        return bool()


class QCalendarWidget(QWidget):
    """"""
    # Enum QCalendarWidget.SelectionMode
    NoSelection = 0
    SingleSelection = 0

    # Enum QCalendarWidget.VerticalHeaderFormat
    NoVerticalHeader = 0
    ISOWeekNumbers = 0

    # Enum QCalendarWidget.HorizontalHeaderFormat
    NoHorizontalHeader = 0
    SingleLetterDayNames = 0
    ShortDayNames = 0
    LongDayNames = 0

    def __init__(self, parent = None):
        '''void QCalendarWidget.__init__(QWidget parent = None)'''
    def setNavigationBarVisible(self, visible):
        '''void QCalendarWidget.setNavigationBarVisible(bool visible)'''
    def setDateEditAcceptDelay(self, delay):
        '''void QCalendarWidget.setDateEditAcceptDelay(int delay)'''
    def dateEditAcceptDelay(self):
        '''int QCalendarWidget.dateEditAcceptDelay()'''
        return int()
    def setDateEditEnabled(self, enable):
        '''void QCalendarWidget.setDateEditEnabled(bool enable)'''
    def isDateEditEnabled(self):
        '''bool QCalendarWidget.isDateEditEnabled()'''
        return bool()
    def isNavigationBarVisible(self):
        '''bool QCalendarWidget.isNavigationBarVisible()'''
        return bool()
    selectionChanged = pyqtSignal() # void selectionChanged() - signal
    currentPageChanged = pyqtSignal() # void currentPageChanged(int,int) - signal
    clicked = pyqtSignal() # void clicked(const QDateamp;) - signal
    activated = pyqtSignal() # void activated(const QDateamp;) - signal
    def showToday(self):
        '''void QCalendarWidget.showToday()'''
    def showSelectedDate(self):
        '''void QCalendarWidget.showSelectedDate()'''
    def showPreviousYear(self):
        '''void QCalendarWidget.showPreviousYear()'''
    def showPreviousMonth(self):
        '''void QCalendarWidget.showPreviousMonth()'''
    def showNextYear(self):
        '''void QCalendarWidget.showNextYear()'''
    def showNextMonth(self):
        '''void QCalendarWidget.showNextMonth()'''
    def setSelectedDate(self, date):
        '''void QCalendarWidget.setSelectedDate(QDate date)'''
    def setDateRange(self, min, max):
        '''void QCalendarWidget.setDateRange(QDate min, QDate max)'''
    def setCurrentPage(self, year, month):
        '''void QCalendarWidget.setCurrentPage(int year, int month)'''
    def paintCell(self, painter, rect, date):
        '''void QCalendarWidget.paintCell(QPainter painter, QRect rect, QDate date)'''
    def keyPressEvent(self, event):
        '''void QCalendarWidget.keyPressEvent(QKeyEvent event)'''
    def resizeEvent(self, event):
        '''void QCalendarWidget.resizeEvent(QResizeEvent event)'''
    def mousePressEvent(self, event):
        '''void QCalendarWidget.mousePressEvent(QMouseEvent event)'''
    def eventFilter(self, watched, event):
        '''bool QCalendarWidget.eventFilter(QObject watched, QEvent event)'''
        return bool()
    def event(self, event):
        '''bool QCalendarWidget.event(QEvent event)'''
        return bool()
    def updateCells(self):
        '''void QCalendarWidget.updateCells()'''
    def updateCell(self, date):
        '''void QCalendarWidget.updateCell(QDate date)'''
    def setDateTextFormat(self, date, color):
        '''void QCalendarWidget.setDateTextFormat(QDate date, QTextCharFormat color)'''
    def dateTextFormat(self):
        '''dict-of-QDate-QTextCharFormat QCalendarWidget.dateTextFormat()'''
        return dict-of-QDate-QTextCharFormat()
    def dateTextFormat(self, date):
        '''QTextCharFormat QCalendarWidget.dateTextFormat(QDate date)'''
        return QTextCharFormat()
    def setWeekdayTextFormat(self, dayOfWeek, format):
        '''void QCalendarWidget.setWeekdayTextFormat(Qt.DayOfWeek dayOfWeek, QTextCharFormat format)'''
    def weekdayTextFormat(self, dayOfWeek):
        '''QTextCharFormat QCalendarWidget.weekdayTextFormat(Qt.DayOfWeek dayOfWeek)'''
        return QTextCharFormat()
    def setHeaderTextFormat(self, format):
        '''void QCalendarWidget.setHeaderTextFormat(QTextCharFormat format)'''
    def headerTextFormat(self):
        '''QTextCharFormat QCalendarWidget.headerTextFormat()'''
        return QTextCharFormat()
    def setVerticalHeaderFormat(self, format):
        '''void QCalendarWidget.setVerticalHeaderFormat(QCalendarWidget.VerticalHeaderFormat format)'''
    def verticalHeaderFormat(self):
        '''QCalendarWidget.VerticalHeaderFormat QCalendarWidget.verticalHeaderFormat()'''
        return QCalendarWidget.VerticalHeaderFormat()
    def setHorizontalHeaderFormat(self, format):
        '''void QCalendarWidget.setHorizontalHeaderFormat(QCalendarWidget.HorizontalHeaderFormat format)'''
    def horizontalHeaderFormat(self):
        '''QCalendarWidget.HorizontalHeaderFormat QCalendarWidget.horizontalHeaderFormat()'''
        return QCalendarWidget.HorizontalHeaderFormat()
    def setSelectionMode(self, mode):
        '''void QCalendarWidget.setSelectionMode(QCalendarWidget.SelectionMode mode)'''
    def selectionMode(self):
        '''QCalendarWidget.SelectionMode QCalendarWidget.selectionMode()'''
        return QCalendarWidget.SelectionMode()
    def setGridVisible(self, show):
        '''void QCalendarWidget.setGridVisible(bool show)'''
    def isGridVisible(self):
        '''bool QCalendarWidget.isGridVisible()'''
        return bool()
    def setHeaderVisible(self, show):
        '''void QCalendarWidget.setHeaderVisible(bool show)'''
    def isHeaderVisible(self):
        '''bool QCalendarWidget.isHeaderVisible()'''
        return bool()
    def setFirstDayOfWeek(self, dayOfWeek):
        '''void QCalendarWidget.setFirstDayOfWeek(Qt.DayOfWeek dayOfWeek)'''
    def firstDayOfWeek(self):
        '''Qt.DayOfWeek QCalendarWidget.firstDayOfWeek()'''
        return Qt.DayOfWeek()
    def setMaximumDate(self, date):
        '''void QCalendarWidget.setMaximumDate(QDate date)'''
    def maximumDate(self):
        '''QDate QCalendarWidget.maximumDate()'''
        return QDate()
    def setMinimumDate(self, date):
        '''void QCalendarWidget.setMinimumDate(QDate date)'''
    def minimumDate(self):
        '''QDate QCalendarWidget.minimumDate()'''
        return QDate()
    def monthShown(self):
        '''int QCalendarWidget.monthShown()'''
        return int()
    def yearShown(self):
        '''int QCalendarWidget.yearShown()'''
        return int()
    def selectedDate(self):
        '''QDate QCalendarWidget.selectedDate()'''
        return QDate()
    def minimumSizeHint(self):
        '''QSize QCalendarWidget.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QCalendarWidget.sizeHint()'''
        return QSize()


class QCheckBox(QAbstractButton):
    """"""
    def __init__(self, parent = None):
        '''void QCheckBox.__init__(QWidget parent = None)'''
    def __init__(self, text, parent = None):
        '''void QCheckBox.__init__(QString text, QWidget parent = None)'''
    def initStyleOption(self, option):
        '''void QCheckBox.initStyleOption(QStyleOptionButton option)'''
    def mouseMoveEvent(self):
        '''QMouseEvent QCheckBox.mouseMoveEvent()'''
        return QMouseEvent()
    def paintEvent(self):
        '''QPaintEvent QCheckBox.paintEvent()'''
        return QPaintEvent()
    def event(self, e):
        '''bool QCheckBox.event(QEvent e)'''
        return bool()
    def nextCheckState(self):
        '''void QCheckBox.nextCheckState()'''
    def checkStateSet(self):
        '''void QCheckBox.checkStateSet()'''
    def hitButton(self, pos):
        '''bool QCheckBox.hitButton(QPoint pos)'''
        return bool()
    stateChanged = pyqtSignal() # void stateChanged(int) - signal
    def minimumSizeHint(self):
        '''QSize QCheckBox.minimumSizeHint()'''
        return QSize()
    def setCheckState(self, state):
        '''void QCheckBox.setCheckState(Qt.CheckState state)'''
    def checkState(self):
        '''Qt.CheckState QCheckBox.checkState()'''
        return Qt.CheckState()
    def isTristate(self):
        '''bool QCheckBox.isTristate()'''
        return bool()
    def setTristate(self, on = True):
        '''void QCheckBox.setTristate(bool on = True)'''
    def sizeHint(self):
        '''QSize QCheckBox.sizeHint()'''
        return QSize()


class QClipboard(QObject):
    """"""
    # Enum QClipboard.Mode
    Clipboard = 0
    Selection = 0
    FindBuffer = 0

    def event(self):
        '''QEvent QClipboard.event()'''
        return QEvent()
    def connectNotify(self):
        '''SIGNAL() QClipboard.connectNotify()'''
        return SIGNAL()()
    selectionChanged = pyqtSignal() # void selectionChanged() - signal
    findBufferChanged = pyqtSignal() # void findBufferChanged() - signal
    dataChanged = pyqtSignal() # void dataChanged() - signal
    changed = pyqtSignal() # void changed(QClipboard::Mode) - signal
    def setPixmap(self, mode = None):
        '''QPixmap QClipboard.setPixmap(QClipboard.Mode mode = QClipboard.Clipboard)'''
        return QPixmap()
    def setImage(self, mode = None):
        '''QImage QClipboard.setImage(QClipboard.Mode mode = QClipboard.Clipboard)'''
        return QImage()
    def pixmap(self, mode = None):
        '''QPixmap QClipboard.pixmap(QClipboard.Mode mode = QClipboard.Clipboard)'''
        return QPixmap()
    def image(self, mode = None):
        '''QImage QClipboard.image(QClipboard.Mode mode = QClipboard.Clipboard)'''
        return QImage()
    def setMimeData(self, data, mode = None):
        '''void QClipboard.setMimeData(QMimeData data, QClipboard.Mode mode = QClipboard.Clipboard)'''
    def mimeData(self, mode = None):
        '''QMimeData QClipboard.mimeData(QClipboard.Mode mode = QClipboard.Clipboard)'''
        return QMimeData()
    def setText(self, mode = None):
        '''QString QClipboard.setText(QClipboard.Mode mode = QClipboard.Clipboard)'''
        return QString()
    def text(self, mode = None):
        '''QString QClipboard.text(QClipboard.Mode mode = QClipboard.Clipboard)'''
        return QString()
    def text(self, subtype, mode = None):
        '''(QString, QString) QClipboard.text(QString subtype, QClipboard.Mode mode = QClipboard.Clipboard)'''
        return (QString, QString)()
    def text(self, subtype, mode = None):
        '''QString QClipboard.text(QString subtype, QClipboard.Mode mode = QClipboard.Clipboard)'''
        return QString()
    def ownsSelection(self):
        '''bool QClipboard.ownsSelection()'''
        return bool()
    def ownsFindBuffer(self):
        '''bool QClipboard.ownsFindBuffer()'''
        return bool()
    def ownsClipboard(self):
        '''bool QClipboard.ownsClipboard()'''
        return bool()
    def supportsSelection(self):
        '''bool QClipboard.supportsSelection()'''
        return bool()
    def supportsFindBuffer(self):
        '''bool QClipboard.supportsFindBuffer()'''
        return bool()
    def clear(self, mode = None):
        '''void QClipboard.clear(QClipboard.Mode mode = QClipboard.Clipboard)'''


class QColumnView(QAbstractItemView):
    """"""
    def __init__(self, parent = None):
        '''void QColumnView.__init__(QWidget parent = None)'''
    def currentChanged(self, current, previous):
        '''void QColumnView.currentChanged(QModelIndex current, QModelIndex previous)'''
    def rowsInserted(self, parent, start, end):
        '''void QColumnView.rowsInserted(QModelIndex parent, int start, int end)'''
    def scrollContentsBy(self, dx, dy):
        '''void QColumnView.scrollContentsBy(int dx, int dy)'''
    def verticalOffset(self):
        '''int QColumnView.verticalOffset()'''
        return int()
    def horizontalOffset(self):
        '''int QColumnView.horizontalOffset()'''
        return int()
    def visualRegionForSelection(self, selection):
        '''QRegion QColumnView.visualRegionForSelection(QItemSelection selection)'''
        return QRegion()
    def setSelection(self, rect, command):
        '''void QColumnView.setSelection(QRect rect, QItemSelectionModel.SelectionFlags command)'''
    def resizeEvent(self, event):
        '''void QColumnView.resizeEvent(QResizeEvent event)'''
    def moveCursor(self, cursorAction, modifiers):
        '''QModelIndex QColumnView.moveCursor(QAbstractItemView.CursorAction cursorAction, Qt.KeyboardModifiers modifiers)'''
        return QModelIndex()
    def isIndexHidden(self, index):
        '''bool QColumnView.isIndexHidden(QModelIndex index)'''
        return bool()
    def initializeColumn(self, column):
        '''void QColumnView.initializeColumn(QAbstractItemView column)'''
    def createColumn(self, rootIndex):
        '''QAbstractItemView QColumnView.createColumn(QModelIndex rootIndex)'''
        return QAbstractItemView()
    updatePreviewWidget = pyqtSignal() # void updatePreviewWidget(const QModelIndexamp;) - signal
    def selectAll(self):
        '''void QColumnView.selectAll()'''
    def setRootIndex(self, index):
        '''void QColumnView.setRootIndex(QModelIndex index)'''
    def setSelectionModel(self, selectionModel):
        '''void QColumnView.setSelectionModel(QItemSelectionModel selectionModel)'''
    def setModel(self, model):
        '''void QColumnView.setModel(QAbstractItemModel model)'''
    def visualRect(self, index):
        '''QRect QColumnView.visualRect(QModelIndex index)'''
        return QRect()
    def sizeHint(self):
        '''QSize QColumnView.sizeHint()'''
        return QSize()
    def scrollTo(self, index, hint = None):
        '''void QColumnView.scrollTo(QModelIndex index, QAbstractItemView.ScrollHint hint = QAbstractItemView.EnsureVisible)'''
    def indexAt(self, point):
        '''QModelIndex QColumnView.indexAt(QPoint point)'''
        return QModelIndex()
    def setResizeGripsVisible(self, visible):
        '''void QColumnView.setResizeGripsVisible(bool visible)'''
    def setPreviewWidget(self, widget):
        '''void QColumnView.setPreviewWidget(QWidget widget)'''
    def setColumnWidths(self, list):
        '''void QColumnView.setColumnWidths(list-of-int list)'''
    def resizeGripsVisible(self):
        '''bool QColumnView.resizeGripsVisible()'''
        return bool()
    def previewWidget(self):
        '''QWidget QColumnView.previewWidget()'''
        return QWidget()
    def columnWidths(self):
        '''list-of-int QColumnView.columnWidths()'''
        return [int()]


class QColorDialog(QDialog):
    """"""
    # Enum QColorDialog.ColorDialogOption
    ShowAlphaChannel = 0
    NoButtons = 0
    DontUseNativeDialog = 0

    def __init__(self, parent = None):
        '''void QColorDialog.__init__(QWidget parent = None)'''
    def __init__(self, initial, parent = None):
        '''void QColorDialog.__init__(QColor initial, QWidget parent = None)'''
    def setVisible(self, visible):
        '''void QColorDialog.setVisible(bool visible)'''
    def open(self):
        '''void QColorDialog.open()'''
    def open(self, receiver, member):
        '''void QColorDialog.open(QObject receiver, SLOT() member)'''
    def open(self, receiver):
        '''void QColorDialog.open(callable receiver)'''
    def options(self):
        '''QColorDialog.ColorDialogOptions QColorDialog.options()'''
        return QColorDialog.ColorDialogOptions()
    def setOptions(self, options):
        '''void QColorDialog.setOptions(QColorDialog.ColorDialogOptions options)'''
    def testOption(self, option):
        '''bool QColorDialog.testOption(QColorDialog.ColorDialogOption option)'''
        return bool()
    def setOption(self, option, on = True):
        '''void QColorDialog.setOption(QColorDialog.ColorDialogOption option, bool on = True)'''
    def selectedColor(self):
        '''QColor QColorDialog.selectedColor()'''
        return QColor()
    def currentColor(self):
        '''QColor QColorDialog.currentColor()'''
        return QColor()
    def setCurrentColor(self, color):
        '''void QColorDialog.setCurrentColor(QColor color)'''
    def done(self, result):
        '''void QColorDialog.done(int result)'''
    def changeEvent(self, e):
        '''void QColorDialog.changeEvent(QEvent e)'''
    currentColorChanged = pyqtSignal() # void currentColorChanged(const QColoramp;) - signal
    colorSelected = pyqtSignal() # void colorSelected(const QColoramp;) - signal
    def setStandardColor(self):
        '''static int QColorDialog.setStandardColor()'''
        return int()
    def setCustomColor(self):
        '''static int QColorDialog.setCustomColor()'''
        return int()
    def customColor(self):
        '''static int QColorDialog.customColor()'''
        return int()
    def customCount(self):
        '''static int QColorDialog.customCount()'''
        return int()
    def getRgba(self, initial = 4294967295, ok = None, parent = None):
        '''static int QColorDialog.getRgba(int initial = 4294967295, bool ok, QWidget parent = None)'''
        return int()
    def getColor(self, initial = None, parent = None):
        '''static QColor QColorDialog.getColor(QColor initial = Qt.white, QWidget parent = None)'''
        return QColor()
    def getColor(self, initial, parent, title, options = 0):
        '''static QColor QColorDialog.getColor(QColor initial, QWidget parent, QString title, QColorDialog.ColorDialogOptions options = 0)'''
        return QColor()
    class ColorDialogOptions():
        """"""
        def __init__(self):
            '''QColorDialog.ColorDialogOptions QColorDialog.ColorDialogOptions.__init__()'''
            return QColorDialog.ColorDialogOptions()
        def __init__(self):
            '''int QColorDialog.ColorDialogOptions.__init__()'''
            return int()
        def __init__(self):
            '''void QColorDialog.ColorDialogOptions.__init__()'''
        def __bool__(self):
            '''int QColorDialog.ColorDialogOptions.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QColorDialog.ColorDialogOptions.__ne__(QColorDialog.ColorDialogOptions f)'''
            return bool()
        def __eq__(self, f):
            '''bool QColorDialog.ColorDialogOptions.__eq__(QColorDialog.ColorDialogOptions f)'''
            return bool()
        def __invert__(self):
            '''QColorDialog.ColorDialogOptions QColorDialog.ColorDialogOptions.__invert__()'''
            return QColorDialog.ColorDialogOptions()
        def __and__(self, mask):
            '''QColorDialog.ColorDialogOptions QColorDialog.ColorDialogOptions.__and__(int mask)'''
            return QColorDialog.ColorDialogOptions()
        def __xor__(self, f):
            '''QColorDialog.ColorDialogOptions QColorDialog.ColorDialogOptions.__xor__(QColorDialog.ColorDialogOptions f)'''
            return QColorDialog.ColorDialogOptions()
        def __xor__(self, f):
            '''QColorDialog.ColorDialogOptions QColorDialog.ColorDialogOptions.__xor__(int f)'''
            return QColorDialog.ColorDialogOptions()
        def __or__(self, f):
            '''QColorDialog.ColorDialogOptions QColorDialog.ColorDialogOptions.__or__(QColorDialog.ColorDialogOptions f)'''
            return QColorDialog.ColorDialogOptions()
        def __or__(self, f):
            '''QColorDialog.ColorDialogOptions QColorDialog.ColorDialogOptions.__or__(int f)'''
            return QColorDialog.ColorDialogOptions()
        def __int__(self):
            '''int QColorDialog.ColorDialogOptions.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QColorDialog.ColorDialogOptions QColorDialog.ColorDialogOptions.__ixor__(QColorDialog.ColorDialogOptions f)'''
            return QColorDialog.ColorDialogOptions()
        def __ior__(self, f):
            '''QColorDialog.ColorDialogOptions QColorDialog.ColorDialogOptions.__ior__(QColorDialog.ColorDialogOptions f)'''
            return QColorDialog.ColorDialogOptions()
        def __iand__(self, mask):
            '''QColorDialog.ColorDialogOptions QColorDialog.ColorDialogOptions.__iand__(int mask)'''
            return QColorDialog.ColorDialogOptions()


class QComboBox(QWidget):
    """"""
    # Enum QComboBox.SizeAdjustPolicy
    AdjustToContents = 0
    AdjustToContentsOnFirstShow = 0
    AdjustToMinimumContentsLength = 0
    AdjustToMinimumContentsLengthWithIcon = 0

    # Enum QComboBox.InsertPolicy
    NoInsert = 0
    InsertAtTop = 0
    InsertAtCurrent = 0
    InsertAtBottom = 0
    InsertAfterCurrent = 0
    InsertBeforeCurrent = 0
    InsertAlphabetically = 0

    def __init__(self, parent = None):
        '''void QComboBox.__init__(QWidget parent = None)'''
    def inputMethodQuery(self):
        '''Qt.InputMethodQuery QComboBox.inputMethodQuery()'''
        return Qt.InputMethodQuery()
    def inputMethodEvent(self):
        '''QInputMethodEvent QComboBox.inputMethodEvent()'''
        return QInputMethodEvent()
    def contextMenuEvent(self, e):
        '''void QComboBox.contextMenuEvent(QContextMenuEvent e)'''
    def wheelEvent(self, e):
        '''void QComboBox.wheelEvent(QWheelEvent e)'''
    def keyReleaseEvent(self, e):
        '''void QComboBox.keyReleaseEvent(QKeyEvent e)'''
    def keyPressEvent(self, e):
        '''void QComboBox.keyPressEvent(QKeyEvent e)'''
    def mouseReleaseEvent(self, e):
        '''void QComboBox.mouseReleaseEvent(QMouseEvent e)'''
    def mousePressEvent(self, e):
        '''void QComboBox.mousePressEvent(QMouseEvent e)'''
    def hideEvent(self, e):
        '''void QComboBox.hideEvent(QHideEvent e)'''
    def showEvent(self, e):
        '''void QComboBox.showEvent(QShowEvent e)'''
    def paintEvent(self, e):
        '''void QComboBox.paintEvent(QPaintEvent e)'''
    def resizeEvent(self, e):
        '''void QComboBox.resizeEvent(QResizeEvent e)'''
    def changeEvent(self, e):
        '''void QComboBox.changeEvent(QEvent e)'''
    def focusOutEvent(self, e):
        '''void QComboBox.focusOutEvent(QFocusEvent e)'''
    def focusInEvent(self, e):
        '''void QComboBox.focusInEvent(QFocusEvent e)'''
    def initStyleOption(self, option):
        '''void QComboBox.initStyleOption(QStyleOptionComboBox option)'''
    highlighted = pyqtSignal() # void highlighted(int) - signal
    highlighted = pyqtSignal() # void highlighted(const QStringamp;) - signal
    currentIndexChanged = pyqtSignal() # void currentIndexChanged(int) - signal
    currentIndexChanged = pyqtSignal() # void currentIndexChanged(const QStringamp;) - signal
    activated = pyqtSignal() # void activated(int) - signal
    activated = pyqtSignal() # void activated(const QStringamp;) - signal
    editTextChanged = pyqtSignal() # void editTextChanged(const QStringamp;) - signal
    def setEditText(self, text):
        '''void QComboBox.setEditText(QString text)'''
    def clearEditText(self):
        '''void QComboBox.clearEditText()'''
    def clear(self):
        '''void QComboBox.clear()'''
    def insertSeparator(self, index):
        '''void QComboBox.insertSeparator(int index)'''
    def completer(self):
        '''QCompleter QComboBox.completer()'''
        return QCompleter()
    def setCompleter(self, c):
        '''void QComboBox.setCompleter(QCompleter c)'''
    def event(self, event):
        '''bool QComboBox.event(QEvent event)'''
        return bool()
    def hidePopup(self):
        '''void QComboBox.hidePopup()'''
    def showPopup(self):
        '''void QComboBox.showPopup()'''
    def minimumSizeHint(self):
        '''QSize QComboBox.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QComboBox.sizeHint()'''
        return QSize()
    def setView(self, itemView):
        '''void QComboBox.setView(QAbstractItemView itemView)'''
    def view(self):
        '''QAbstractItemView QComboBox.view()'''
        return QAbstractItemView()
    def setItemData(self, index, value, role = None):
        '''void QComboBox.setItemData(int index, QVariant value, int role = Qt.UserRole)'''
    def setItemIcon(self, index, icon):
        '''void QComboBox.setItemIcon(int index, QIcon icon)'''
    def setItemText(self, index, text):
        '''void QComboBox.setItemText(int index, QString text)'''
    def removeItem(self, index):
        '''void QComboBox.removeItem(int index)'''
    def insertItems(self, index, texts):
        '''void QComboBox.insertItems(int index, QStringList texts)'''
    def insertItem(self, index, text, userData = QVariant()):
        '''void QComboBox.insertItem(int index, QString text, QVariant userData = QVariant())'''
    def insertItem(self, index, icon, text, userData = QVariant()):
        '''void QComboBox.insertItem(int index, QIcon icon, QString text, QVariant userData = QVariant())'''
    def addItem(self, text, userData = QVariant()):
        '''void QComboBox.addItem(QString text, QVariant userData = QVariant())'''
    def addItem(self, icon, text, userData = QVariant()):
        '''void QComboBox.addItem(QIcon icon, QString text, QVariant userData = QVariant())'''
    def addItems(self, texts):
        '''void QComboBox.addItems(QStringList texts)'''
    def itemData(self, index, role = None):
        '''QVariant QComboBox.itemData(int index, int role = Qt.UserRole)'''
        return QVariant()
    def itemIcon(self, index):
        '''QIcon QComboBox.itemIcon(int index)'''
        return QIcon()
    def itemText(self, index):
        '''QString QComboBox.itemText(int index)'''
        return QString()
    def currentText(self):
        '''QString QComboBox.currentText()'''
        return QString()
    def setCurrentIndex(self, index):
        '''void QComboBox.setCurrentIndex(int index)'''
    def currentIndex(self):
        '''int QComboBox.currentIndex()'''
        return int()
    def setModelColumn(self, visibleColumn):
        '''void QComboBox.setModelColumn(int visibleColumn)'''
    def modelColumn(self):
        '''int QComboBox.modelColumn()'''
        return int()
    def setRootModelIndex(self, index):
        '''void QComboBox.setRootModelIndex(QModelIndex index)'''
    def rootModelIndex(self):
        '''QModelIndex QComboBox.rootModelIndex()'''
        return QModelIndex()
    def setModel(self, model):
        '''void QComboBox.setModel(QAbstractItemModel model)'''
    def model(self):
        '''QAbstractItemModel QComboBox.model()'''
        return QAbstractItemModel()
    def setItemDelegate(self, delegate):
        '''void QComboBox.setItemDelegate(QAbstractItemDelegate delegate)'''
    def itemDelegate(self):
        '''QAbstractItemDelegate QComboBox.itemDelegate()'''
        return QAbstractItemDelegate()
    def validator(self):
        '''QValidator QComboBox.validator()'''
        return QValidator()
    def setValidator(self, v):
        '''void QComboBox.setValidator(QValidator v)'''
    def lineEdit(self):
        '''QLineEdit QComboBox.lineEdit()'''
        return QLineEdit()
    def setLineEdit(self, edit):
        '''void QComboBox.setLineEdit(QLineEdit edit)'''
    def setEditable(self, editable):
        '''void QComboBox.setEditable(bool editable)'''
    def isEditable(self):
        '''bool QComboBox.isEditable()'''
        return bool()
    def setIconSize(self, size):
        '''void QComboBox.setIconSize(QSize size)'''
    def iconSize(self):
        '''QSize QComboBox.iconSize()'''
        return QSize()
    def setMinimumContentsLength(self, characters):
        '''void QComboBox.setMinimumContentsLength(int characters)'''
    def minimumContentsLength(self):
        '''int QComboBox.minimumContentsLength()'''
        return int()
    def setSizeAdjustPolicy(self, policy):
        '''void QComboBox.setSizeAdjustPolicy(QComboBox.SizeAdjustPolicy policy)'''
    def sizeAdjustPolicy(self):
        '''QComboBox.SizeAdjustPolicy QComboBox.sizeAdjustPolicy()'''
        return QComboBox.SizeAdjustPolicy()
    def setInsertPolicy(self, policy):
        '''void QComboBox.setInsertPolicy(QComboBox.InsertPolicy policy)'''
    def insertPolicy(self):
        '''QComboBox.InsertPolicy QComboBox.insertPolicy()'''
        return QComboBox.InsertPolicy()
    def findData(self, data, role = None, flags = None):
        '''int QComboBox.findData(QVariant data, int role = Qt.UserRole, Qt.MatchFlags flags = Qt.MatchExactly|Qt.MatchCaseSensitive)'''
        return int()
    def findText(self, text, flags = None):
        '''int QComboBox.findText(QString text, Qt.MatchFlags flags = Qt.MatchExactly|Qt.MatchCaseSensitive)'''
        return int()
    def hasFrame(self):
        '''bool QComboBox.hasFrame()'''
        return bool()
    def setFrame(self):
        '''bool QComboBox.setFrame()'''
        return bool()
    def setDuplicatesEnabled(self, enable):
        '''void QComboBox.setDuplicatesEnabled(bool enable)'''
    def duplicatesEnabled(self):
        '''bool QComboBox.duplicatesEnabled()'''
        return bool()
    def setAutoCompletionCaseSensitivity(self, sensitivity):
        '''void QComboBox.setAutoCompletionCaseSensitivity(Qt.CaseSensitivity sensitivity)'''
    def autoCompletionCaseSensitivity(self):
        '''Qt.CaseSensitivity QComboBox.autoCompletionCaseSensitivity()'''
        return Qt.CaseSensitivity()
    def setAutoCompletion(self, enable):
        '''void QComboBox.setAutoCompletion(bool enable)'''
    def autoCompletion(self):
        '''bool QComboBox.autoCompletion()'''
        return bool()
    def maxCount(self):
        '''int QComboBox.maxCount()'''
        return int()
    def setMaxCount(self, max):
        '''void QComboBox.setMaxCount(int max)'''
    def __len__(self):
        '''None QComboBox.__len__()'''
        return None()
    def count(self):
        '''int QComboBox.count()'''
        return int()
    def setMaxVisibleItems(self, maxItems):
        '''void QComboBox.setMaxVisibleItems(int maxItems)'''
    def maxVisibleItems(self):
        '''int QComboBox.maxVisibleItems()'''
        return int()


class QStyle(QObject):
    """"""
    # Enum QStyle.RequestSoftwareInputPanel
    RSIP_OnMouseClickAndAlreadyFocused = 0
    RSIP_OnMouseClick = 0

    # Enum QStyle.StandardPixmap
    SP_TitleBarMenuButton = 0
    SP_TitleBarMinButton = 0
    SP_TitleBarMaxButton = 0
    SP_TitleBarCloseButton = 0
    SP_TitleBarNormalButton = 0
    SP_TitleBarShadeButton = 0
    SP_TitleBarUnshadeButton = 0
    SP_TitleBarContextHelpButton = 0
    SP_DockWidgetCloseButton = 0
    SP_MessageBoxInformation = 0
    SP_MessageBoxWarning = 0
    SP_MessageBoxCritical = 0
    SP_MessageBoxQuestion = 0
    SP_DesktopIcon = 0
    SP_TrashIcon = 0
    SP_ComputerIcon = 0
    SP_DriveFDIcon = 0
    SP_DriveHDIcon = 0
    SP_DriveCDIcon = 0
    SP_DriveDVDIcon = 0
    SP_DriveNetIcon = 0
    SP_DirOpenIcon = 0
    SP_DirClosedIcon = 0
    SP_DirLinkIcon = 0
    SP_FileIcon = 0
    SP_FileLinkIcon = 0
    SP_ToolBarHorizontalExtensionButton = 0
    SP_ToolBarVerticalExtensionButton = 0
    SP_FileDialogStart = 0
    SP_FileDialogEnd = 0
    SP_FileDialogToParent = 0
    SP_FileDialogNewFolder = 0
    SP_FileDialogDetailedView = 0
    SP_FileDialogInfoView = 0
    SP_FileDialogContentsView = 0
    SP_FileDialogListView = 0
    SP_FileDialogBack = 0
    SP_DirIcon = 0
    SP_DialogOkButton = 0
    SP_DialogCancelButton = 0
    SP_DialogHelpButton = 0
    SP_DialogOpenButton = 0
    SP_DialogSaveButton = 0
    SP_DialogCloseButton = 0
    SP_DialogApplyButton = 0
    SP_DialogResetButton = 0
    SP_DialogDiscardButton = 0
    SP_DialogYesButton = 0
    SP_DialogNoButton = 0
    SP_ArrowUp = 0
    SP_ArrowDown = 0
    SP_ArrowLeft = 0
    SP_ArrowRight = 0
    SP_ArrowBack = 0
    SP_ArrowForward = 0
    SP_DirHomeIcon = 0
    SP_CommandLink = 0
    SP_VistaShield = 0
    SP_BrowserReload = 0
    SP_BrowserStop = 0
    SP_MediaPlay = 0
    SP_MediaStop = 0
    SP_MediaPause = 0
    SP_MediaSkipForward = 0
    SP_MediaSkipBackward = 0
    SP_MediaSeekForward = 0
    SP_MediaSeekBackward = 0
    SP_MediaVolume = 0
    SP_MediaVolumeMuted = 0
    SP_CustomBase = 0

    # Enum QStyle.StyleHint
    SH_EtchDisabledText = 0
    SH_DitherDisabledText = 0
    SH_ScrollBar_MiddleClickAbsolutePosition = 0
    SH_ScrollBar_ScrollWhenPointerLeavesControl = 0
    SH_TabBar_SelectMouseType = 0
    SH_TabBar_Alignment = 0
    SH_Header_ArrowAlignment = 0
    SH_Slider_SnapToValue = 0
    SH_Slider_SloppyKeyEvents = 0
    SH_ProgressDialog_CenterCancelButton = 0
    SH_ProgressDialog_TextLabelAlignment = 0
    SH_PrintDialog_RightAlignButtons = 0
    SH_MainWindow_SpaceBelowMenuBar = 0
    SH_FontDialog_SelectAssociatedText = 0
    SH_Menu_AllowActiveAndDisabled = 0
    SH_Menu_SpaceActivatesItem = 0
    SH_Menu_SubMenuPopupDelay = 0
    SH_ScrollView_FrameOnlyAroundContents = 0
    SH_MenuBar_AltKeyNavigation = 0
    SH_ComboBox_ListMouseTracking = 0
    SH_Menu_MouseTracking = 0
    SH_MenuBar_MouseTracking = 0
    SH_ItemView_ChangeHighlightOnFocus = 0
    SH_Widget_ShareActivation = 0
    SH_Workspace_FillSpaceOnMaximize = 0
    SH_ComboBox_Popup = 0
    SH_TitleBar_NoBorder = 0
    SH_ScrollBar_StopMouseOverSlider = 0
    SH_BlinkCursorWhenTextSelected = 0
    SH_RichText_FullWidthSelection = 0
    SH_Menu_Scrollable = 0
    SH_GroupBox_TextLabelVerticalAlignment = 0
    SH_GroupBox_TextLabelColor = 0
    SH_Menu_SloppySubMenus = 0
    SH_Table_GridLineColor = 0
    SH_LineEdit_PasswordCharacter = 0
    SH_DialogButtons_DefaultButton = 0
    SH_ToolBox_SelectedPageTitleBold = 0
    SH_TabBar_PreferNoArrows = 0
    SH_ScrollBar_LeftClickAbsolutePosition = 0
    SH_Q3ListViewExpand_SelectMouseType = 0
    SH_UnderlineShortcut = 0
    SH_SpinBox_AnimateButton = 0
    SH_SpinBox_KeyPressAutoRepeatRate = 0
    SH_SpinBox_ClickAutoRepeatRate = 0
    SH_Menu_FillScreenWithScroll = 0
    SH_ToolTipLabel_Opacity = 0
    SH_DrawMenuBarSeparator = 0
    SH_TitleBar_ModifyNotification = 0
    SH_Button_FocusPolicy = 0
    SH_MenuBar_DismissOnSecondClick = 0
    SH_MessageBox_UseBorderForButtonSpacing = 0
    SH_TitleBar_AutoRaise = 0
    SH_ToolButton_PopupDelay = 0
    SH_FocusFrame_Mask = 0
    SH_RubberBand_Mask = 0
    SH_WindowFrame_Mask = 0
    SH_SpinControls_DisableOnBounds = 0
    SH_Dial_BackgroundRole = 0
    SH_ComboBox_LayoutDirection = 0
    SH_ItemView_EllipsisLocation = 0
    SH_ItemView_ShowDecorationSelected = 0
    SH_ItemView_ActivateItemOnSingleClick = 0
    SH_ScrollBar_ContextMenu = 0
    SH_ScrollBar_RollBetweenButtons = 0
    SH_Slider_StopMouseOverSlider = 0
    SH_Slider_AbsoluteSetButtons = 0
    SH_Slider_PageSetButtons = 0
    SH_Menu_KeyboardSearch = 0
    SH_TabBar_ElideMode = 0
    SH_DialogButtonLayout = 0
    SH_ComboBox_PopupFrameStyle = 0
    SH_MessageBox_TextInteractionFlags = 0
    SH_DialogButtonBox_ButtonsHaveIcons = 0
    SH_SpellCheckUnderlineStyle = 0
    SH_MessageBox_CenterButtons = 0
    SH_Menu_SelectionWrap = 0
    SH_ItemView_MovementWithoutUpdatingSelection = 0
    SH_ToolTip_Mask = 0
    SH_FocusFrame_AboveWidget = 0
    SH_TextControl_FocusIndicatorTextCharFormat = 0
    SH_WizardStyle = 0
    SH_ItemView_ArrowKeysNavigateIntoChildren = 0
    SH_Menu_Mask = 0
    SH_Menu_FlashTriggeredItem = 0
    SH_Menu_FadeOutOnHide = 0
    SH_SpinBox_ClickAutoRepeatThreshold = 0
    SH_ItemView_PaintAlternatingRowColorsForEmptyArea = 0
    SH_FormLayoutWrapPolicy = 0
    SH_TabWidget_DefaultTabPosition = 0
    SH_ToolBar_Movable = 0
    SH_FormLayoutFieldGrowthPolicy = 0
    SH_FormLayoutFormAlignment = 0
    SH_FormLayoutLabelAlignment = 0
    SH_ItemView_DrawDelegateFrame = 0
    SH_TabBar_CloseButtonPosition = 0
    SH_DockWidget_ButtonsHaveFrame = 0
    SH_ToolButtonStyle = 0
    SH_RequestSoftwareInputPanel = 0
    SH_CustomBase = 0

    # Enum QStyle.ContentsType
    CT_PushButton = 0
    CT_CheckBox = 0
    CT_RadioButton = 0
    CT_ToolButton = 0
    CT_ComboBox = 0
    CT_Splitter = 0
    CT_Q3DockWindow = 0
    CT_ProgressBar = 0
    CT_MenuItem = 0
    CT_MenuBarItem = 0
    CT_MenuBar = 0
    CT_Menu = 0
    CT_TabBarTab = 0
    CT_Slider = 0
    CT_ScrollBar = 0
    CT_Q3Header = 0
    CT_LineEdit = 0
    CT_SpinBox = 0
    CT_SizeGrip = 0
    CT_TabWidget = 0
    CT_DialogButtons = 0
    CT_HeaderSection = 0
    CT_GroupBox = 0
    CT_MdiControls = 0
    CT_ItemViewItem = 0
    CT_CustomBase = 0

    # Enum QStyle.PixelMetric
    PM_ButtonMargin = 0
    PM_ButtonDefaultIndicator = 0
    PM_MenuButtonIndicator = 0
    PM_ButtonShiftHorizontal = 0
    PM_ButtonShiftVertical = 0
    PM_DefaultFrameWidth = 0
    PM_SpinBoxFrameWidth = 0
    PM_ComboBoxFrameWidth = 0
    PM_MaximumDragDistance = 0
    PM_ScrollBarExtent = 0
    PM_ScrollBarSliderMin = 0
    PM_SliderThickness = 0
    PM_SliderControlThickness = 0
    PM_SliderLength = 0
    PM_SliderTickmarkOffset = 0
    PM_SliderSpaceAvailable = 0
    PM_DockWidgetSeparatorExtent = 0
    PM_DockWidgetHandleExtent = 0
    PM_DockWidgetFrameWidth = 0
    PM_TabBarTabOverlap = 0
    PM_TabBarTabHSpace = 0
    PM_TabBarTabVSpace = 0
    PM_TabBarBaseHeight = 0
    PM_TabBarBaseOverlap = 0
    PM_ProgressBarChunkWidth = 0
    PM_SplitterWidth = 0
    PM_TitleBarHeight = 0
    PM_MenuScrollerHeight = 0
    PM_MenuHMargin = 0
    PM_MenuVMargin = 0
    PM_MenuPanelWidth = 0
    PM_MenuTearoffHeight = 0
    PM_MenuDesktopFrameWidth = 0
    PM_MenuBarPanelWidth = 0
    PM_MenuBarItemSpacing = 0
    PM_MenuBarVMargin = 0
    PM_MenuBarHMargin = 0
    PM_IndicatorWidth = 0
    PM_IndicatorHeight = 0
    PM_ExclusiveIndicatorWidth = 0
    PM_ExclusiveIndicatorHeight = 0
    PM_CheckListButtonSize = 0
    PM_CheckListControllerSize = 0
    PM_DialogButtonsSeparator = 0
    PM_DialogButtonsButtonWidth = 0
    PM_DialogButtonsButtonHeight = 0
    PM_MdiSubWindowFrameWidth = 0
    PM_MDIFrameWidth = 0
    PM_MdiSubWindowMinimizedWidth = 0
    PM_MDIMinimizedWidth = 0
    PM_HeaderMargin = 0
    PM_HeaderMarkSize = 0
    PM_HeaderGripMargin = 0
    PM_TabBarTabShiftHorizontal = 0
    PM_TabBarTabShiftVertical = 0
    PM_TabBarScrollButtonWidth = 0
    PM_ToolBarFrameWidth = 0
    PM_ToolBarHandleExtent = 0
    PM_ToolBarItemSpacing = 0
    PM_ToolBarItemMargin = 0
    PM_ToolBarSeparatorExtent = 0
    PM_ToolBarExtensionExtent = 0
    PM_SpinBoxSliderHeight = 0
    PM_DefaultTopLevelMargin = 0
    PM_DefaultChildMargin = 0
    PM_DefaultLayoutSpacing = 0
    PM_ToolBarIconSize = 0
    PM_ListViewIconSize = 0
    PM_IconViewIconSize = 0
    PM_SmallIconSize = 0
    PM_LargeIconSize = 0
    PM_FocusFrameVMargin = 0
    PM_FocusFrameHMargin = 0
    PM_ToolTipLabelFrameWidth = 0
    PM_CheckBoxLabelSpacing = 0
    PM_TabBarIconSize = 0
    PM_SizeGripSize = 0
    PM_DockWidgetTitleMargin = 0
    PM_MessageBoxIconSize = 0
    PM_ButtonIconSize = 0
    PM_DockWidgetTitleBarButtonMargin = 0
    PM_RadioButtonLabelSpacing = 0
    PM_LayoutLeftMargin = 0
    PM_LayoutTopMargin = 0
    PM_LayoutRightMargin = 0
    PM_LayoutBottomMargin = 0
    PM_LayoutHorizontalSpacing = 0
    PM_LayoutVerticalSpacing = 0
    PM_TabBar_ScrollButtonOverlap = 0
    PM_TextCursorWidth = 0
    PM_TabCloseIndicatorWidth = 0
    PM_TabCloseIndicatorHeight = 0
    PM_ScrollView_ScrollBarSpacing = 0
    PM_SubMenuOverlap = 0
    PM_CustomBase = 0

    # Enum QStyle.SubControl
    SC_None = 0
    SC_ScrollBarAddLine = 0
    SC_ScrollBarSubLine = 0
    SC_ScrollBarAddPage = 0
    SC_ScrollBarSubPage = 0
    SC_ScrollBarFirst = 0
    SC_ScrollBarLast = 0
    SC_ScrollBarSlider = 0
    SC_ScrollBarGroove = 0
    SC_SpinBoxUp = 0
    SC_SpinBoxDown = 0
    SC_SpinBoxFrame = 0
    SC_SpinBoxEditField = 0
    SC_ComboBoxFrame = 0
    SC_ComboBoxEditField = 0
    SC_ComboBoxArrow = 0
    SC_ComboBoxListBoxPopup = 0
    SC_SliderGroove = 0
    SC_SliderHandle = 0
    SC_SliderTickmarks = 0
    SC_ToolButton = 0
    SC_ToolButtonMenu = 0
    SC_TitleBarSysMenu = 0
    SC_TitleBarMinButton = 0
    SC_TitleBarMaxButton = 0
    SC_TitleBarCloseButton = 0
    SC_TitleBarNormalButton = 0
    SC_TitleBarShadeButton = 0
    SC_TitleBarUnshadeButton = 0
    SC_TitleBarContextHelpButton = 0
    SC_TitleBarLabel = 0
    SC_Q3ListView = 0
    SC_Q3ListViewBranch = 0
    SC_Q3ListViewExpand = 0
    SC_DialGroove = 0
    SC_DialHandle = 0
    SC_DialTickmarks = 0
    SC_GroupBoxCheckBox = 0
    SC_GroupBoxLabel = 0
    SC_GroupBoxContents = 0
    SC_GroupBoxFrame = 0
    SC_MdiMinButton = 0
    SC_MdiNormalButton = 0
    SC_MdiCloseButton = 0
    SC_CustomBase = 0
    SC_All = 0

    # Enum QStyle.ComplexControl
    CC_SpinBox = 0
    CC_ComboBox = 0
    CC_ScrollBar = 0
    CC_Slider = 0
    CC_ToolButton = 0
    CC_TitleBar = 0
    CC_Q3ListView = 0
    CC_Dial = 0
    CC_GroupBox = 0
    CC_MdiControls = 0
    CC_CustomBase = 0

    # Enum QStyle.SubElement
    SE_PushButtonContents = 0
    SE_PushButtonFocusRect = 0
    SE_CheckBoxIndicator = 0
    SE_CheckBoxContents = 0
    SE_CheckBoxFocusRect = 0
    SE_CheckBoxClickRect = 0
    SE_RadioButtonIndicator = 0
    SE_RadioButtonContents = 0
    SE_RadioButtonFocusRect = 0
    SE_RadioButtonClickRect = 0
    SE_ComboBoxFocusRect = 0
    SE_SliderFocusRect = 0
    SE_Q3DockWindowHandleRect = 0
    SE_ProgressBarGroove = 0
    SE_ProgressBarContents = 0
    SE_ProgressBarLabel = 0
    SE_DialogButtonAccept = 0
    SE_DialogButtonReject = 0
    SE_DialogButtonApply = 0
    SE_DialogButtonHelp = 0
    SE_DialogButtonAll = 0
    SE_DialogButtonAbort = 0
    SE_DialogButtonIgnore = 0
    SE_DialogButtonRetry = 0
    SE_DialogButtonCustom = 0
    SE_ToolBoxTabContents = 0
    SE_HeaderLabel = 0
    SE_HeaderArrow = 0
    SE_TabWidgetTabBar = 0
    SE_TabWidgetTabPane = 0
    SE_TabWidgetTabContents = 0
    SE_TabWidgetLeftCorner = 0
    SE_TabWidgetRightCorner = 0
    SE_ViewItemCheckIndicator = 0
    SE_TabBarTearIndicator = 0
    SE_TreeViewDisclosureItem = 0
    SE_LineEditContents = 0
    SE_FrameContents = 0
    SE_DockWidgetCloseButton = 0
    SE_DockWidgetFloatButton = 0
    SE_DockWidgetTitleBarText = 0
    SE_DockWidgetIcon = 0
    SE_CheckBoxLayoutItem = 0
    SE_ComboBoxLayoutItem = 0
    SE_DateTimeEditLayoutItem = 0
    SE_DialogButtonBoxLayoutItem = 0
    SE_LabelLayoutItem = 0
    SE_ProgressBarLayoutItem = 0
    SE_PushButtonLayoutItem = 0
    SE_RadioButtonLayoutItem = 0
    SE_SliderLayoutItem = 0
    SE_SpinBoxLayoutItem = 0
    SE_ToolButtonLayoutItem = 0
    SE_FrameLayoutItem = 0
    SE_GroupBoxLayoutItem = 0
    SE_TabWidgetLayoutItem = 0
    SE_ItemViewItemCheckIndicator = 0
    SE_ItemViewItemDecoration = 0
    SE_ItemViewItemText = 0
    SE_ItemViewItemFocusRect = 0
    SE_TabBarTabLeftButton = 0
    SE_TabBarTabRightButton = 0
    SE_TabBarTabText = 0
    SE_ShapedFrameContents = 0
    SE_ToolBarHandle = 0
    SE_CustomBase = 0

    # Enum QStyle.ControlElement
    CE_PushButton = 0
    CE_PushButtonBevel = 0
    CE_PushButtonLabel = 0
    CE_CheckBox = 0
    CE_CheckBoxLabel = 0
    CE_RadioButton = 0
    CE_RadioButtonLabel = 0
    CE_TabBarTab = 0
    CE_TabBarTabShape = 0
    CE_TabBarTabLabel = 0
    CE_ProgressBar = 0
    CE_ProgressBarGroove = 0
    CE_ProgressBarContents = 0
    CE_ProgressBarLabel = 0
    CE_MenuItem = 0
    CE_MenuScroller = 0
    CE_MenuVMargin = 0
    CE_MenuHMargin = 0
    CE_MenuTearoff = 0
    CE_MenuEmptyArea = 0
    CE_MenuBarItem = 0
    CE_MenuBarEmptyArea = 0
    CE_ToolButtonLabel = 0
    CE_Header = 0
    CE_HeaderSection = 0
    CE_HeaderLabel = 0
    CE_Q3DockWindowEmptyArea = 0
    CE_ToolBoxTab = 0
    CE_SizeGrip = 0
    CE_Splitter = 0
    CE_RubberBand = 0
    CE_DockWidgetTitle = 0
    CE_ScrollBarAddLine = 0
    CE_ScrollBarSubLine = 0
    CE_ScrollBarAddPage = 0
    CE_ScrollBarSubPage = 0
    CE_ScrollBarSlider = 0
    CE_ScrollBarFirst = 0
    CE_ScrollBarLast = 0
    CE_FocusFrame = 0
    CE_ComboBoxLabel = 0
    CE_ToolBar = 0
    CE_ToolBoxTabShape = 0
    CE_ToolBoxTabLabel = 0
    CE_HeaderEmptyArea = 0
    CE_ColumnViewGrip = 0
    CE_ItemViewItem = 0
    CE_ShapedFrame = 0
    CE_CustomBase = 0

    # Enum QStyle.PrimitiveElement
    PE_Q3CheckListController = 0
    PE_Q3CheckListExclusiveIndicator = 0
    PE_Q3CheckListIndicator = 0
    PE_Q3DockWindowSeparator = 0
    PE_Q3Separator = 0
    PE_Frame = 0
    PE_FrameDefaultButton = 0
    PE_FrameDockWidget = 0
    PE_FrameFocusRect = 0
    PE_FrameGroupBox = 0
    PE_FrameLineEdit = 0
    PE_FrameMenu = 0
    PE_FrameStatusBar = 0
    PE_FrameTabWidget = 0
    PE_FrameWindow = 0
    PE_FrameButtonBevel = 0
    PE_FrameButtonTool = 0
    PE_FrameTabBarBase = 0
    PE_PanelButtonCommand = 0
    PE_PanelButtonBevel = 0
    PE_PanelButtonTool = 0
    PE_PanelMenuBar = 0
    PE_PanelToolBar = 0
    PE_PanelLineEdit = 0
    PE_IndicatorArrowDown = 0
    PE_IndicatorArrowLeft = 0
    PE_IndicatorArrowRight = 0
    PE_IndicatorArrowUp = 0
    PE_IndicatorBranch = 0
    PE_IndicatorButtonDropDown = 0
    PE_IndicatorViewItemCheck = 0
    PE_IndicatorCheckBox = 0
    PE_IndicatorDockWidgetResizeHandle = 0
    PE_IndicatorHeaderArrow = 0
    PE_IndicatorMenuCheckMark = 0
    PE_IndicatorProgressChunk = 0
    PE_IndicatorRadioButton = 0
    PE_IndicatorSpinDown = 0
    PE_IndicatorSpinMinus = 0
    PE_IndicatorSpinPlus = 0
    PE_IndicatorSpinUp = 0
    PE_IndicatorToolBarHandle = 0
    PE_IndicatorToolBarSeparator = 0
    PE_PanelTipLabel = 0
    PE_IndicatorTabTear = 0
    PE_PanelScrollAreaCorner = 0
    PE_Widget = 0
    PE_IndicatorColumnViewArrow = 0
    PE_FrameStatusBarItem = 0
    PE_IndicatorItemViewItemCheck = 0
    PE_IndicatorItemViewItemDrop = 0
    PE_PanelItemViewItem = 0
    PE_PanelItemViewRow = 0
    PE_PanelStatusBar = 0
    PE_IndicatorTabClose = 0
    PE_PanelMenu = 0
    PE_CustomBase = 0

    # Enum QStyle.StateFlag
    State_None = 0
    State_Enabled = 0
    State_Raised = 0
    State_Sunken = 0
    State_Off = 0
    State_NoChange = 0
    State_On = 0
    State_DownArrow = 0
    State_Horizontal = 0
    State_HasFocus = 0
    State_Top = 0
    State_Bottom = 0
    State_FocusAtBorder = 0
    State_AutoRaise = 0
    State_MouseOver = 0
    State_UpArrow = 0
    State_Selected = 0
    State_Active = 0
    State_Open = 0
    State_Children = 0
    State_Item = 0
    State_Sibling = 0
    State_Editing = 0
    State_KeyboardFocusChange = 0
    State_ReadOnly = 0
    State_Window = 0
    State_Small = 0
    State_Mini = 0

    def __init__(self):
        '''void QStyle.__init__()'''
    def proxy(self):
        '''QStyle QStyle.proxy()'''
        return QStyle()
    def layoutSpacingImplementation(self, control1, control2, orientation, option = None, widget = None):
        '''int QStyle.layoutSpacingImplementation(QSizePolicy.ControlType control1, QSizePolicy.ControlType control2, Qt.Orientation orientation, QStyleOption option = None, QWidget widget = None)'''
        return int()
    def standardIconImplementation(self, standardIcon, option = None, widget = None):
        '''QIcon QStyle.standardIconImplementation(QStyle.StandardPixmap standardIcon, QStyleOption option = None, QWidget widget = None)'''
        return QIcon()
    def combinedLayoutSpacing(self, controls1, controls2, orientation, option = None, widget = None):
        '''int QStyle.combinedLayoutSpacing(QSizePolicy.ControlTypes controls1, QSizePolicy.ControlTypes controls2, Qt.Orientation orientation, QStyleOption option = None, QWidget widget = None)'''
        return int()
    def layoutSpacing(self, control1, control2, orientation, option = None, widget = None):
        '''int QStyle.layoutSpacing(QSizePolicy.ControlType control1, QSizePolicy.ControlType control2, Qt.Orientation orientation, QStyleOption option = None, QWidget widget = None)'''
        return int()
    def alignedRect(self, direction, alignment, size, rectangle):
        '''static QRect QStyle.alignedRect(Qt.LayoutDirection direction, Qt.Alignment alignment, QSize size, QRect rectangle)'''
        return QRect()
    def visualAlignment(self, direction, alignment):
        '''static Qt.Alignment QStyle.visualAlignment(Qt.LayoutDirection direction, Qt.Alignment alignment)'''
        return Qt.Alignment()
    def sliderValueFromPosition(self, min, max, position, span, upsideDown = False):
        '''static int QStyle.sliderValueFromPosition(int min, int max, int position, int span, bool upsideDown = False)'''
        return int()
    def sliderPositionFromValue(self, min, max, logicalValue, span, upsideDown = False):
        '''static int QStyle.sliderPositionFromValue(int min, int max, int logicalValue, int span, bool upsideDown = False)'''
        return int()
    def visualPos(self, direction, boundingRect, logicalPos):
        '''static QPoint QStyle.visualPos(Qt.LayoutDirection direction, QRect boundingRect, QPoint logicalPos)'''
        return QPoint()
    def visualRect(self, direction, boundingRect, logicalRect):
        '''static QRect QStyle.visualRect(Qt.LayoutDirection direction, QRect boundingRect, QRect logicalRect)'''
        return QRect()
    def generatedIconPixmap(self, iconMode, pixmap, opt):
        '''abstract QPixmap QStyle.generatedIconPixmap(QIcon.Mode iconMode, QPixmap pixmap, QStyleOption opt)'''
        return QPixmap()
    def standardIcon(self, standardIcon, option = None, widget = None):
        '''QIcon QStyle.standardIcon(QStyle.StandardPixmap standardIcon, QStyleOption option = None, QWidget widget = None)'''
        return QIcon()
    def standardPixmap(self, standardPixmap, option = None, widget = None):
        '''abstract QPixmap QStyle.standardPixmap(QStyle.StandardPixmap standardPixmap, QStyleOption option = None, QWidget widget = None)'''
        return QPixmap()
    def styleHint(self, stylehint, option = None, widget = None, returnData = None):
        '''abstract int QStyle.styleHint(QStyle.StyleHint stylehint, QStyleOption option = None, QWidget widget = None, QStyleHintReturn returnData = None)'''
        return int()
    def sizeFromContents(self, ct, opt, contentsSize, widget = None):
        '''abstract QSize QStyle.sizeFromContents(QStyle.ContentsType ct, QStyleOption opt, QSize contentsSize, QWidget widget = None)'''
        return QSize()
    def pixelMetric(self, metric, option = None, widget = None):
        '''abstract int QStyle.pixelMetric(QStyle.PixelMetric metric, QStyleOption option = None, QWidget widget = None)'''
        return int()
    def subControlRect(self, cc, opt, sc, widget = None):
        '''abstract QRect QStyle.subControlRect(QStyle.ComplexControl cc, QStyleOptionComplex opt, QStyle.SubControl sc, QWidget widget = None)'''
        return QRect()
    def hitTestComplexControl(self, cc, opt, pt, widget = None):
        '''abstract QStyle.SubControl QStyle.hitTestComplexControl(QStyle.ComplexControl cc, QStyleOptionComplex opt, QPoint pt, QWidget widget = None)'''
        return QStyle.SubControl()
    def drawComplexControl(self, cc, opt, p, widget = None):
        '''abstract void QStyle.drawComplexControl(QStyle.ComplexControl cc, QStyleOptionComplex opt, QPainter p, QWidget widget = None)'''
    def subElementRect(self, subElement, option, widget = None):
        '''abstract QRect QStyle.subElementRect(QStyle.SubElement subElement, QStyleOption option, QWidget widget = None)'''
        return QRect()
    def drawControl(self, element, opt, p, widget = None):
        '''abstract void QStyle.drawControl(QStyle.ControlElement element, QStyleOption opt, QPainter p, QWidget widget = None)'''
    def drawPrimitive(self, pe, opt, p, widget = None):
        '''abstract void QStyle.drawPrimitive(QStyle.PrimitiveElement pe, QStyleOption opt, QPainter p, QWidget widget = None)'''
    def standardPalette(self):
        '''QPalette QStyle.standardPalette()'''
        return QPalette()
    def drawItemPixmap(self, painter, rect, alignment, pixmap):
        '''void QStyle.drawItemPixmap(QPainter painter, QRect rect, int alignment, QPixmap pixmap)'''
    def drawItemText(self, painter, rectangle, alignment, palette, enabled, text, textRole = None):
        '''void QStyle.drawItemText(QPainter painter, QRect rectangle, int alignment, QPalette palette, bool enabled, QString text, QPalette.ColorRole textRole = QPalette.NoRole)'''
    def itemPixmapRect(self, r, flags, pixmap):
        '''QRect QStyle.itemPixmapRect(QRect r, int flags, QPixmap pixmap)'''
        return QRect()
    def itemTextRect(self, fm, r, flags, enabled, text):
        '''QRect QStyle.itemTextRect(QFontMetrics fm, QRect r, int flags, bool enabled, QString text)'''
        return QRect()
    def unpolish(self):
        '''QWidget QStyle.unpolish()'''
        return QWidget()
    def unpolish(self):
        '''QApplication QStyle.unpolish()'''
        return QApplication()
    def polish(self):
        '''QWidget QStyle.polish()'''
        return QWidget()
    def polish(self):
        '''QApplication QStyle.polish()'''
        return QApplication()
    def polish(self):
        '''QPalette QStyle.polish()'''
        return QPalette()
    class SubControls():
        """"""
        def __init__(self):
            '''QStyle.SubControls QStyle.SubControls.__init__()'''
            return QStyle.SubControls()
        def __init__(self):
            '''int QStyle.SubControls.__init__()'''
            return int()
        def __init__(self):
            '''void QStyle.SubControls.__init__()'''
        def __bool__(self):
            '''int QStyle.SubControls.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QStyle.SubControls.__ne__(QStyle.SubControls f)'''
            return bool()
        def __eq__(self, f):
            '''bool QStyle.SubControls.__eq__(QStyle.SubControls f)'''
            return bool()
        def __invert__(self):
            '''QStyle.SubControls QStyle.SubControls.__invert__()'''
            return QStyle.SubControls()
        def __and__(self, mask):
            '''QStyle.SubControls QStyle.SubControls.__and__(int mask)'''
            return QStyle.SubControls()
        def __xor__(self, f):
            '''QStyle.SubControls QStyle.SubControls.__xor__(QStyle.SubControls f)'''
            return QStyle.SubControls()
        def __xor__(self, f):
            '''QStyle.SubControls QStyle.SubControls.__xor__(int f)'''
            return QStyle.SubControls()
        def __or__(self, f):
            '''QStyle.SubControls QStyle.SubControls.__or__(QStyle.SubControls f)'''
            return QStyle.SubControls()
        def __or__(self, f):
            '''QStyle.SubControls QStyle.SubControls.__or__(int f)'''
            return QStyle.SubControls()
        def __int__(self):
            '''int QStyle.SubControls.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QStyle.SubControls QStyle.SubControls.__ixor__(QStyle.SubControls f)'''
            return QStyle.SubControls()
        def __ior__(self, f):
            '''QStyle.SubControls QStyle.SubControls.__ior__(QStyle.SubControls f)'''
            return QStyle.SubControls()
        def __iand__(self, mask):
            '''QStyle.SubControls QStyle.SubControls.__iand__(int mask)'''
            return QStyle.SubControls()
    class State():
        """"""
        def __init__(self):
            '''QStyle.State QStyle.State.__init__()'''
            return QStyle.State()
        def __init__(self):
            '''int QStyle.State.__init__()'''
            return int()
        def __init__(self):
            '''void QStyle.State.__init__()'''
        def __bool__(self):
            '''int QStyle.State.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QStyle.State.__ne__(QStyle.State f)'''
            return bool()
        def __eq__(self, f):
            '''bool QStyle.State.__eq__(QStyle.State f)'''
            return bool()
        def __invert__(self):
            '''QStyle.State QStyle.State.__invert__()'''
            return QStyle.State()
        def __and__(self, mask):
            '''QStyle.State QStyle.State.__and__(int mask)'''
            return QStyle.State()
        def __xor__(self, f):
            '''QStyle.State QStyle.State.__xor__(QStyle.State f)'''
            return QStyle.State()
        def __xor__(self, f):
            '''QStyle.State QStyle.State.__xor__(int f)'''
            return QStyle.State()
        def __or__(self, f):
            '''QStyle.State QStyle.State.__or__(QStyle.State f)'''
            return QStyle.State()
        def __or__(self, f):
            '''QStyle.State QStyle.State.__or__(int f)'''
            return QStyle.State()
        def __int__(self):
            '''int QStyle.State.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QStyle.State QStyle.State.__ixor__(QStyle.State f)'''
            return QStyle.State()
        def __ior__(self, f):
            '''QStyle.State QStyle.State.__ior__(QStyle.State f)'''
            return QStyle.State()
        def __iand__(self, mask):
            '''QStyle.State QStyle.State.__iand__(int mask)'''
            return QStyle.State()


class QCommonStyle(QStyle):
    """"""
    def __init__(self):
        '''void QCommonStyle.__init__()'''
    def standardIconImplementation(self, standardIcon, option = None, widget = None):
        '''QIcon QCommonStyle.standardIconImplementation(QStyle.StandardPixmap standardIcon, QStyleOption option = None, QWidget widget = None)'''
        return QIcon()
    def generatedIconPixmap(self, iconMode, pixmap, opt):
        '''QPixmap QCommonStyle.generatedIconPixmap(QIcon.Mode iconMode, QPixmap pixmap, QStyleOption opt)'''
        return QPixmap()
    def standardPixmap(self, sp, option = None, widget = None):
        '''QPixmap QCommonStyle.standardPixmap(QStyle.StandardPixmap sp, QStyleOption option = None, QWidget widget = None)'''
        return QPixmap()
    def styleHint(self, sh, option = None, widget = None, returnData = None):
        '''int QCommonStyle.styleHint(QStyle.StyleHint sh, QStyleOption option = None, QWidget widget = None, QStyleHintReturn returnData = None)'''
        return int()
    def pixelMetric(self, m, option = None, widget = None):
        '''int QCommonStyle.pixelMetric(QStyle.PixelMetric m, QStyleOption option = None, QWidget widget = None)'''
        return int()
    def sizeFromContents(self, ct, opt, contentsSize, widget = None):
        '''QSize QCommonStyle.sizeFromContents(QStyle.ContentsType ct, QStyleOption opt, QSize contentsSize, QWidget widget = None)'''
        return QSize()
    def subControlRect(self, cc, opt, sc, widget = None):
        '''QRect QCommonStyle.subControlRect(QStyle.ComplexControl cc, QStyleOptionComplex opt, QStyle.SubControl sc, QWidget widget = None)'''
        return QRect()
    def hitTestComplexControl(self, cc, opt, pt, widget = None):
        '''QStyle.SubControl QCommonStyle.hitTestComplexControl(QStyle.ComplexControl cc, QStyleOptionComplex opt, QPoint pt, QWidget widget = None)'''
        return QStyle.SubControl()
    def drawComplexControl(self, cc, opt, p, widget = None):
        '''void QCommonStyle.drawComplexControl(QStyle.ComplexControl cc, QStyleOptionComplex opt, QPainter p, QWidget widget = None)'''
    def subElementRect(self, r, opt, widget = None):
        '''QRect QCommonStyle.subElementRect(QStyle.SubElement r, QStyleOption opt, QWidget widget = None)'''
        return QRect()
    def drawControl(self, element, opt, p, widget = None):
        '''void QCommonStyle.drawControl(QStyle.ControlElement element, QStyleOption opt, QPainter p, QWidget widget = None)'''
    def drawPrimitive(self, pe, opt, p, widget = None):
        '''void QCommonStyle.drawPrimitive(QStyle.PrimitiveElement pe, QStyleOption opt, QPainter p, QWidget widget = None)'''
    def unpolish(self, widget):
        '''void QCommonStyle.unpolish(QWidget widget)'''
    def unpolish(self, application):
        '''void QCommonStyle.unpolish(QApplication application)'''
    def polish(self, widget):
        '''void QCommonStyle.polish(QWidget widget)'''
    def polish(self, app):
        '''void QCommonStyle.polish(QApplication app)'''
    def polish(self):
        '''QPalette QCommonStyle.polish()'''
        return QPalette()


class QCompleter(QObject):
    """"""
    # Enum QCompleter.ModelSorting
    UnsortedModel = 0
    CaseSensitivelySortedModel = 0
    CaseInsensitivelySortedModel = 0

    # Enum QCompleter.CompletionMode
    PopupCompletion = 0
    UnfilteredPopupCompletion = 0
    InlineCompletion = 0

    def __init__(self, parent = None):
        '''void QCompleter.__init__(QObject parent = None)'''
    def __init__(self, model, parent = None):
        '''void QCompleter.__init__(QAbstractItemModel model, QObject parent = None)'''
    def __init__(self, list, parent = None):
        '''void QCompleter.__init__(QStringList list, QObject parent = None)'''
    def setMaxVisibleItems(self, maxItems):
        '''void QCompleter.setMaxVisibleItems(int maxItems)'''
    def maxVisibleItems(self):
        '''int QCompleter.maxVisibleItems()'''
        return int()
    highlighted = pyqtSignal() # void highlighted(const QStringamp;) - signal
    highlighted = pyqtSignal() # void highlighted(const QModelIndexamp;) - signal
    activated = pyqtSignal() # void activated(const QStringamp;) - signal
    activated = pyqtSignal() # void activated(const QModelIndexamp;) - signal
    def event(self):
        '''QEvent QCompleter.event()'''
        return QEvent()
    def eventFilter(self, o, e):
        '''bool QCompleter.eventFilter(QObject o, QEvent e)'''
        return bool()
    def setWrapAround(self, wrap):
        '''void QCompleter.setWrapAround(bool wrap)'''
    def setCompletionPrefix(self, prefix):
        '''void QCompleter.setCompletionPrefix(QString prefix)'''
    def complete(self, rect = QRect()):
        '''void QCompleter.complete(QRect rect = QRect())'''
    def wrapAround(self):
        '''bool QCompleter.wrapAround()'''
        return bool()
    def splitPath(self, path):
        '''QStringList QCompleter.splitPath(QString path)'''
        return QStringList()
    def pathFromIndex(self, index):
        '''QString QCompleter.pathFromIndex(QModelIndex index)'''
        return QString()
    def completionPrefix(self):
        '''QString QCompleter.completionPrefix()'''
        return QString()
    def completionModel(self):
        '''QAbstractItemModel QCompleter.completionModel()'''
        return QAbstractItemModel()
    def currentCompletion(self):
        '''QString QCompleter.currentCompletion()'''
        return QString()
    def currentIndex(self):
        '''QModelIndex QCompleter.currentIndex()'''
        return QModelIndex()
    def currentRow(self):
        '''int QCompleter.currentRow()'''
        return int()
    def setCurrentRow(self, row):
        '''bool QCompleter.setCurrentRow(int row)'''
        return bool()
    def completionCount(self):
        '''int QCompleter.completionCount()'''
        return int()
    def completionRole(self):
        '''int QCompleter.completionRole()'''
        return int()
    def setCompletionRole(self, role):
        '''void QCompleter.setCompletionRole(int role)'''
    def completionColumn(self):
        '''int QCompleter.completionColumn()'''
        return int()
    def setCompletionColumn(self, column):
        '''void QCompleter.setCompletionColumn(int column)'''
    def modelSorting(self):
        '''QCompleter.ModelSorting QCompleter.modelSorting()'''
        return QCompleter.ModelSorting()
    def setModelSorting(self, sorting):
        '''void QCompleter.setModelSorting(QCompleter.ModelSorting sorting)'''
    def caseSensitivity(self):
        '''Qt.CaseSensitivity QCompleter.caseSensitivity()'''
        return Qt.CaseSensitivity()
    def setCaseSensitivity(self, caseSensitivity):
        '''void QCompleter.setCaseSensitivity(Qt.CaseSensitivity caseSensitivity)'''
    def setPopup(self, popup):
        '''void QCompleter.setPopup(QAbstractItemView popup)'''
    def popup(self):
        '''QAbstractItemView QCompleter.popup()'''
        return QAbstractItemView()
    def completionMode(self):
        '''QCompleter.CompletionMode QCompleter.completionMode()'''
        return QCompleter.CompletionMode()
    def setCompletionMode(self, mode):
        '''void QCompleter.setCompletionMode(QCompleter.CompletionMode mode)'''
    def model(self):
        '''QAbstractItemModel QCompleter.model()'''
        return QAbstractItemModel()
    def setModel(self, c):
        '''void QCompleter.setModel(QAbstractItemModel c)'''
    def widget(self):
        '''QWidget QCompleter.widget()'''
        return QWidget()
    def setWidget(self, widget):
        '''void QCompleter.setWidget(QWidget widget)'''


class QCursor():
    """"""
    def __init__(self):
        '''void QCursor.__init__()'''
    def __init__(self, shape):
        '''void QCursor.__init__(Qt.CursorShape shape)'''
    def __init__(self, bitmap, mask, hotX = None, hotY = None):
        '''void QCursor.__init__(QBitmap bitmap, QBitmap mask, int hotX = -1, int hotY = -1)'''
    def __init__(self, pixmap, hotX = None, hotY = None):
        '''void QCursor.__init__(QPixmap pixmap, int hotX = -1, int hotY = -1)'''
    def __init__(self, cursor):
        '''void QCursor.__init__(QCursor cursor)'''
    def __init__(self, variant):
        '''void QCursor.__init__(QVariant variant)'''
    def setPos(self, x, y):
        '''static void QCursor.setPos(int x, int y)'''
    def setPos(self, p):
        '''static void QCursor.setPos(QPoint p)'''
    def pos(self):
        '''static QPoint QCursor.pos()'''
        return QPoint()
    def hotSpot(self):
        '''QPoint QCursor.hotSpot()'''
        return QPoint()
    def pixmap(self):
        '''QPixmap QCursor.pixmap()'''
        return QPixmap()
    def mask(self):
        '''QBitmap QCursor.mask()'''
        return QBitmap()
    def bitmap(self):
        '''QBitmap QCursor.bitmap()'''
        return QBitmap()
    def setShape(self, newShape):
        '''void QCursor.setShape(Qt.CursorShape newShape)'''
    def shape(self):
        '''Qt.CursorShape QCursor.shape()'''
        return Qt.CursorShape()


class QDataWidgetMapper(QObject):
    """"""
    # Enum QDataWidgetMapper.SubmitPolicy
    AutoSubmit = 0
    ManualSubmit = 0

    def __init__(self, parent = None):
        '''void QDataWidgetMapper.__init__(QObject parent = None)'''
    currentIndexChanged = pyqtSignal() # void currentIndexChanged(int) - signal
    def toPrevious(self):
        '''void QDataWidgetMapper.toPrevious()'''
    def toNext(self):
        '''void QDataWidgetMapper.toNext()'''
    def toLast(self):
        '''void QDataWidgetMapper.toLast()'''
    def toFirst(self):
        '''void QDataWidgetMapper.toFirst()'''
    def submit(self):
        '''bool QDataWidgetMapper.submit()'''
        return bool()
    def setCurrentModelIndex(self, index):
        '''void QDataWidgetMapper.setCurrentModelIndex(QModelIndex index)'''
    def setCurrentIndex(self, index):
        '''void QDataWidgetMapper.setCurrentIndex(int index)'''
    def revert(self):
        '''void QDataWidgetMapper.revert()'''
    def currentIndex(self):
        '''int QDataWidgetMapper.currentIndex()'''
        return int()
    def clearMapping(self):
        '''void QDataWidgetMapper.clearMapping()'''
    def mappedWidgetAt(self, section):
        '''QWidget QDataWidgetMapper.mappedWidgetAt(int section)'''
        return QWidget()
    def mappedSection(self, widget):
        '''int QDataWidgetMapper.mappedSection(QWidget widget)'''
        return int()
    def mappedPropertyName(self, widget):
        '''QByteArray QDataWidgetMapper.mappedPropertyName(QWidget widget)'''
        return QByteArray()
    def removeMapping(self, widget):
        '''void QDataWidgetMapper.removeMapping(QWidget widget)'''
    def addMapping(self, widget, section):
        '''void QDataWidgetMapper.addMapping(QWidget widget, int section)'''
    def addMapping(self, widget, section, propertyName):
        '''void QDataWidgetMapper.addMapping(QWidget widget, int section, QByteArray propertyName)'''
    def submitPolicy(self):
        '''QDataWidgetMapper.SubmitPolicy QDataWidgetMapper.submitPolicy()'''
        return QDataWidgetMapper.SubmitPolicy()
    def setSubmitPolicy(self, policy):
        '''void QDataWidgetMapper.setSubmitPolicy(QDataWidgetMapper.SubmitPolicy policy)'''
    def orientation(self):
        '''Qt.Orientation QDataWidgetMapper.orientation()'''
        return Qt.Orientation()
    def setOrientation(self, aOrientation):
        '''void QDataWidgetMapper.setOrientation(Qt.Orientation aOrientation)'''
    def rootIndex(self):
        '''QModelIndex QDataWidgetMapper.rootIndex()'''
        return QModelIndex()
    def setRootIndex(self, index):
        '''void QDataWidgetMapper.setRootIndex(QModelIndex index)'''
    def itemDelegate(self):
        '''QAbstractItemDelegate QDataWidgetMapper.itemDelegate()'''
        return QAbstractItemDelegate()
    def setItemDelegate(self, delegate):
        '''void QDataWidgetMapper.setItemDelegate(QAbstractItemDelegate delegate)'''
    def model(self):
        '''QAbstractItemModel QDataWidgetMapper.model()'''
        return QAbstractItemModel()
    def setModel(self, model):
        '''void QDataWidgetMapper.setModel(QAbstractItemModel model)'''


class QDateTimeEdit(QAbstractSpinBox):
    """"""
    # Enum QDateTimeEdit.Section
    NoSection = 0
    AmPmSection = 0
    MSecSection = 0
    SecondSection = 0
    MinuteSection = 0
    HourSection = 0
    DaySection = 0
    MonthSection = 0
    YearSection = 0
    TimeSections_Mask = 0
    DateSections_Mask = 0

    def __init__(self, parent = None):
        '''void QDateTimeEdit.__init__(QWidget parent = None)'''
    def __init__(self, datetime, parent = None):
        '''void QDateTimeEdit.__init__(QDateTime datetime, QWidget parent = None)'''
    def __init__(self, date, parent = None):
        '''void QDateTimeEdit.__init__(QDate date, QWidget parent = None)'''
    def __init__(self, time, parent = None):
        '''void QDateTimeEdit.__init__(QTime time, QWidget parent = None)'''
    def setTimeSpec(self, spec):
        '''void QDateTimeEdit.setTimeSpec(Qt.TimeSpec spec)'''
    def timeSpec(self):
        '''Qt.TimeSpec QDateTimeEdit.timeSpec()'''
        return Qt.TimeSpec()
    def setCalendarWidget(self, calendarWidget):
        '''void QDateTimeEdit.setCalendarWidget(QCalendarWidget calendarWidget)'''
    def calendarWidget(self):
        '''QCalendarWidget QDateTimeEdit.calendarWidget()'''
        return QCalendarWidget()
    def setDateTimeRange(self, min, max):
        '''void QDateTimeEdit.setDateTimeRange(QDateTime min, QDateTime max)'''
    def setMaximumDateTime(self, dt):
        '''void QDateTimeEdit.setMaximumDateTime(QDateTime dt)'''
    def clearMaximumDateTime(self):
        '''void QDateTimeEdit.clearMaximumDateTime()'''
    def maximumDateTime(self):
        '''QDateTime QDateTimeEdit.maximumDateTime()'''
        return QDateTime()
    def setMinimumDateTime(self, dt):
        '''void QDateTimeEdit.setMinimumDateTime(QDateTime dt)'''
    def clearMinimumDateTime(self):
        '''void QDateTimeEdit.clearMinimumDateTime()'''
    def minimumDateTime(self):
        '''QDateTime QDateTimeEdit.minimumDateTime()'''
        return QDateTime()
    def stepEnabled(self):
        '''QAbstractSpinBox.StepEnabled QDateTimeEdit.stepEnabled()'''
        return QAbstractSpinBox.StepEnabled()
    def textFromDateTime(self, dt):
        '''QString QDateTimeEdit.textFromDateTime(QDateTime dt)'''
        return QString()
    def dateTimeFromText(self, text):
        '''QDateTime QDateTimeEdit.dateTimeFromText(QString text)'''
        return QDateTime()
    def fixup(self, input):
        '''void QDateTimeEdit.fixup(QString input)'''
    def fixup(self, input):
        '''void QDateTimeEdit.fixup(QString input)'''
    def validate(self, input, pos):
        '''QValidator.State QDateTimeEdit.validate(QString input, int pos)'''
        return QValidator.State()
    def validate(self, input, pos):
        '''QValidator.State QDateTimeEdit.validate(QString input, int pos)'''
        return QValidator.State()
    def paintEvent(self, event):
        '''void QDateTimeEdit.paintEvent(QPaintEvent event)'''
    def mousePressEvent(self, event):
        '''void QDateTimeEdit.mousePressEvent(QMouseEvent event)'''
    def focusNextPrevChild(self, next):
        '''bool QDateTimeEdit.focusNextPrevChild(bool next)'''
        return bool()
    def focusInEvent(self, e):
        '''void QDateTimeEdit.focusInEvent(QFocusEvent e)'''
    def wheelEvent(self, e):
        '''void QDateTimeEdit.wheelEvent(QWheelEvent e)'''
    def keyPressEvent(self, e):
        '''void QDateTimeEdit.keyPressEvent(QKeyEvent e)'''
    def initStyleOption(self, option):
        '''void QDateTimeEdit.initStyleOption(QStyleOptionSpinBox option)'''
    def setTime(self, time):
        '''void QDateTimeEdit.setTime(QTime time)'''
    def setDate(self, date):
        '''void QDateTimeEdit.setDate(QDate date)'''
    def setDateTime(self, dateTime):
        '''void QDateTimeEdit.setDateTime(QDateTime dateTime)'''
    dateChanged = pyqtSignal() # void dateChanged(const QDateamp;) - signal
    timeChanged = pyqtSignal() # void timeChanged(const QTimeamp;) - signal
    dateTimeChanged = pyqtSignal() # void dateTimeChanged(const QDateTimeamp;) - signal
    def sectionCount(self):
        '''int QDateTimeEdit.sectionCount()'''
        return int()
    def setCurrentSectionIndex(self, index):
        '''void QDateTimeEdit.setCurrentSectionIndex(int index)'''
    def currentSectionIndex(self):
        '''int QDateTimeEdit.currentSectionIndex()'''
        return int()
    def sectionAt(self, index):
        '''QDateTimeEdit.Section QDateTimeEdit.sectionAt(int index)'''
        return QDateTimeEdit.Section()
    def event(self, e):
        '''bool QDateTimeEdit.event(QEvent e)'''
        return bool()
    def stepBy(self, steps):
        '''void QDateTimeEdit.stepBy(int steps)'''
    def clear(self):
        '''void QDateTimeEdit.clear()'''
    def sizeHint(self):
        '''QSize QDateTimeEdit.sizeHint()'''
        return QSize()
    def setSelectedSection(self, section):
        '''void QDateTimeEdit.setSelectedSection(QDateTimeEdit.Section section)'''
    def setCalendarPopup(self, enable):
        '''void QDateTimeEdit.setCalendarPopup(bool enable)'''
    def calendarPopup(self):
        '''bool QDateTimeEdit.calendarPopup()'''
        return bool()
    def setDisplayFormat(self, format):
        '''void QDateTimeEdit.setDisplayFormat(QString format)'''
    def displayFormat(self):
        '''QString QDateTimeEdit.displayFormat()'''
        return QString()
    def sectionText(self, s):
        '''QString QDateTimeEdit.sectionText(QDateTimeEdit.Section s)'''
        return QString()
    def setCurrentSection(self, section):
        '''void QDateTimeEdit.setCurrentSection(QDateTimeEdit.Section section)'''
    def currentSection(self):
        '''QDateTimeEdit.Section QDateTimeEdit.currentSection()'''
        return QDateTimeEdit.Section()
    def displayedSections(self):
        '''QDateTimeEdit.Sections QDateTimeEdit.displayedSections()'''
        return QDateTimeEdit.Sections()
    def setTimeRange(self, min, max):
        '''void QDateTimeEdit.setTimeRange(QTime min, QTime max)'''
    def clearMaximumTime(self):
        '''void QDateTimeEdit.clearMaximumTime()'''
    def setMaximumTime(self, max):
        '''void QDateTimeEdit.setMaximumTime(QTime max)'''
    def maximumTime(self):
        '''QTime QDateTimeEdit.maximumTime()'''
        return QTime()
    def clearMinimumTime(self):
        '''void QDateTimeEdit.clearMinimumTime()'''
    def setMinimumTime(self, min):
        '''void QDateTimeEdit.setMinimumTime(QTime min)'''
    def minimumTime(self):
        '''QTime QDateTimeEdit.minimumTime()'''
        return QTime()
    def setDateRange(self, min, max):
        '''void QDateTimeEdit.setDateRange(QDate min, QDate max)'''
    def clearMaximumDate(self):
        '''void QDateTimeEdit.clearMaximumDate()'''
    def setMaximumDate(self, max):
        '''void QDateTimeEdit.setMaximumDate(QDate max)'''
    def maximumDate(self):
        '''QDate QDateTimeEdit.maximumDate()'''
        return QDate()
    def clearMinimumDate(self):
        '''void QDateTimeEdit.clearMinimumDate()'''
    def setMinimumDate(self, min):
        '''void QDateTimeEdit.setMinimumDate(QDate min)'''
    def minimumDate(self):
        '''QDate QDateTimeEdit.minimumDate()'''
        return QDate()
    def time(self):
        '''QTime QDateTimeEdit.time()'''
        return QTime()
    def date(self):
        '''QDate QDateTimeEdit.date()'''
        return QDate()
    def dateTime(self):
        '''QDateTime QDateTimeEdit.dateTime()'''
        return QDateTime()
    class Sections():
        """"""
        def __init__(self):
            '''QDateTimeEdit.Sections QDateTimeEdit.Sections.__init__()'''
            return QDateTimeEdit.Sections()
        def __init__(self):
            '''int QDateTimeEdit.Sections.__init__()'''
            return int()
        def __init__(self):
            '''void QDateTimeEdit.Sections.__init__()'''
        def __bool__(self):
            '''int QDateTimeEdit.Sections.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QDateTimeEdit.Sections.__ne__(QDateTimeEdit.Sections f)'''
            return bool()
        def __eq__(self, f):
            '''bool QDateTimeEdit.Sections.__eq__(QDateTimeEdit.Sections f)'''
            return bool()
        def __invert__(self):
            '''QDateTimeEdit.Sections QDateTimeEdit.Sections.__invert__()'''
            return QDateTimeEdit.Sections()
        def __and__(self, mask):
            '''QDateTimeEdit.Sections QDateTimeEdit.Sections.__and__(int mask)'''
            return QDateTimeEdit.Sections()
        def __xor__(self, f):
            '''QDateTimeEdit.Sections QDateTimeEdit.Sections.__xor__(QDateTimeEdit.Sections f)'''
            return QDateTimeEdit.Sections()
        def __xor__(self, f):
            '''QDateTimeEdit.Sections QDateTimeEdit.Sections.__xor__(int f)'''
            return QDateTimeEdit.Sections()
        def __or__(self, f):
            '''QDateTimeEdit.Sections QDateTimeEdit.Sections.__or__(QDateTimeEdit.Sections f)'''
            return QDateTimeEdit.Sections()
        def __or__(self, f):
            '''QDateTimeEdit.Sections QDateTimeEdit.Sections.__or__(int f)'''
            return QDateTimeEdit.Sections()
        def __int__(self):
            '''int QDateTimeEdit.Sections.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QDateTimeEdit.Sections QDateTimeEdit.Sections.__ixor__(QDateTimeEdit.Sections f)'''
            return QDateTimeEdit.Sections()
        def __ior__(self, f):
            '''QDateTimeEdit.Sections QDateTimeEdit.Sections.__ior__(QDateTimeEdit.Sections f)'''
            return QDateTimeEdit.Sections()
        def __iand__(self, mask):
            '''QDateTimeEdit.Sections QDateTimeEdit.Sections.__iand__(int mask)'''
            return QDateTimeEdit.Sections()


class QTimeEdit(QDateTimeEdit):
    """"""
    def __init__(self, parent = None):
        '''void QTimeEdit.__init__(QWidget parent = None)'''
    def __init__(self, time, parent = None):
        '''void QTimeEdit.__init__(QTime time, QWidget parent = None)'''


class QDateEdit(QDateTimeEdit):
    """"""
    def __init__(self, parent = None):
        '''void QDateEdit.__init__(QWidget parent = None)'''
    def __init__(self, date, parent = None):
        '''void QDateEdit.__init__(QDate date, QWidget parent = None)'''


class QDesktopServices():
    """"""
    # Enum QDesktopServices.StandardLocation
    DesktopLocation = 0
    DocumentsLocation = 0
    FontsLocation = 0
    ApplicationsLocation = 0
    MusicLocation = 0
    MoviesLocation = 0
    PicturesLocation = 0
    TempLocation = 0
    HomeLocation = 0
    DataLocation = 0
    CacheLocation = 0

    def __init__(self):
        '''void QDesktopServices.__init__()'''
    def __init__(self):
        '''QDesktopServices QDesktopServices.__init__()'''
        return QDesktopServices()
    def displayName(self, type):
        '''static QString QDesktopServices.displayName(QDesktopServices.StandardLocation type)'''
        return QString()
    def storageLocation(self, type):
        '''static QString QDesktopServices.storageLocation(QDesktopServices.StandardLocation type)'''
        return QString()
    def unsetUrlHandler(self, scheme):
        '''static void QDesktopServices.unsetUrlHandler(QString scheme)'''
    def setUrlHandler(self, scheme, receiver, method):
        '''static void QDesktopServices.setUrlHandler(QString scheme, QObject receiver, str method)'''
    def setUrlHandler(self, scheme, method):
        '''static void QDesktopServices.setUrlHandler(QString scheme, callable method)'''
    def openUrl(self, url):
        '''static bool QDesktopServices.openUrl(QUrl url)'''
        return bool()


class QDesktopWidget(QWidget):
    """"""
    def __init__(self):
        '''void QDesktopWidget.__init__()'''
    def resizeEvent(self, e):
        '''void QDesktopWidget.resizeEvent(QResizeEvent e)'''
    screenCountChanged = pyqtSignal() # void screenCountChanged(int) - signal
    workAreaResized = pyqtSignal() # void workAreaResized(int) - signal
    resized = pyqtSignal() # void resized(int) - signal
    def availableGeometry(self, screen = None):
        '''QRect QDesktopWidget.availableGeometry(int screen = -1)'''
        return QRect()
    def availableGeometry(self, widget):
        '''QRect QDesktopWidget.availableGeometry(QWidget widget)'''
        return QRect()
    def availableGeometry(self, point):
        '''QRect QDesktopWidget.availableGeometry(QPoint point)'''
        return QRect()
    def screenGeometry(self, screen = None):
        '''QRect QDesktopWidget.screenGeometry(int screen = -1)'''
        return QRect()
    def screenGeometry(self, widget):
        '''QRect QDesktopWidget.screenGeometry(QWidget widget)'''
        return QRect()
    def screenGeometry(self, point):
        '''QRect QDesktopWidget.screenGeometry(QPoint point)'''
        return QRect()
    def screenCount(self):
        '''int QDesktopWidget.screenCount()'''
        return int()
    def screen(self, screen = None):
        '''QWidget QDesktopWidget.screen(int screen = -1)'''
        return QWidget()
    def screenNumber(self, widget = None):
        '''int QDesktopWidget.screenNumber(QWidget widget = None)'''
        return int()
    def screenNumber(self):
        '''QPoint QDesktopWidget.screenNumber()'''
        return QPoint()
    def primaryScreen(self):
        '''int QDesktopWidget.primaryScreen()'''
        return int()
    def numScreens(self):
        '''int QDesktopWidget.numScreens()'''
        return int()
    def isVirtualDesktop(self):
        '''bool QDesktopWidget.isVirtualDesktop()'''
        return bool()


class QDial(QAbstractSlider):
    """"""
    def __init__(self, parent = None):
        '''void QDial.__init__(QWidget parent = None)'''
    def sliderChange(self, change):
        '''void QDial.sliderChange(QAbstractSlider.SliderChange change)'''
    def mouseMoveEvent(self, me):
        '''void QDial.mouseMoveEvent(QMouseEvent me)'''
    def mouseReleaseEvent(self, me):
        '''void QDial.mouseReleaseEvent(QMouseEvent me)'''
    def mousePressEvent(self, me):
        '''void QDial.mousePressEvent(QMouseEvent me)'''
    def paintEvent(self, pe):
        '''void QDial.paintEvent(QPaintEvent pe)'''
    def resizeEvent(self, re):
        '''void QDial.resizeEvent(QResizeEvent re)'''
    def event(self, e):
        '''bool QDial.event(QEvent e)'''
        return bool()
    def initStyleOption(self, option):
        '''void QDial.initStyleOption(QStyleOptionSlider option)'''
    def setWrapping(self, on):
        '''void QDial.setWrapping(bool on)'''
    def setNotchesVisible(self, visible):
        '''void QDial.setNotchesVisible(bool visible)'''
    def minimumSizeHint(self):
        '''QSize QDial.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QDial.sizeHint()'''
        return QSize()
    def notchesVisible(self):
        '''bool QDial.notchesVisible()'''
        return bool()
    def notchTarget(self):
        '''float QDial.notchTarget()'''
        return float()
    def setNotchTarget(self, target):
        '''void QDial.setNotchTarget(float target)'''
    def notchSize(self):
        '''int QDial.notchSize()'''
        return int()
    def wrapping(self):
        '''bool QDial.wrapping()'''
        return bool()


class QDialogButtonBox(QWidget):
    """"""
    # Enum QDialogButtonBox.StandardButton
    NoButton = 0
    Ok = 0
    Save = 0
    SaveAll = 0
    Open = 0
    Yes = 0
    YesToAll = 0
    No = 0
    NoToAll = 0
    Abort = 0
    Retry = 0
    Ignore = 0
    Close = 0
    Cancel = 0
    Discard = 0
    Help = 0
    Apply = 0
    Reset = 0
    RestoreDefaults = 0

    # Enum QDialogButtonBox.ButtonRole
    InvalidRole = 0
    AcceptRole = 0
    RejectRole = 0
    DestructiveRole = 0
    ActionRole = 0
    HelpRole = 0
    YesRole = 0
    NoRole = 0
    ResetRole = 0
    ApplyRole = 0

    # Enum QDialogButtonBox.ButtonLayout
    WinLayout = 0
    MacLayout = 0
    KdeLayout = 0
    GnomeLayout = 0

    def __init__(self, parent = None):
        '''void QDialogButtonBox.__init__(QWidget parent = None)'''
    def __init__(self, orientation, parent = None):
        '''void QDialogButtonBox.__init__(Qt.Orientation orientation, QWidget parent = None)'''
    def __init__(self, buttons, orientation = None, parent = None):
        '''void QDialogButtonBox.__init__(QDialogButtonBox.StandardButtons buttons, Qt.Orientation orientation = Qt.Horizontal, QWidget parent = None)'''
    def event(self, event):
        '''bool QDialogButtonBox.event(QEvent event)'''
        return bool()
    def changeEvent(self, event):
        '''void QDialogButtonBox.changeEvent(QEvent event)'''
    rejected = pyqtSignal() # void rejected() - signal
    helpRequested = pyqtSignal() # void helpRequested() - signal
    clicked = pyqtSignal() # void clicked(QAbstractButton *) - signal
    accepted = pyqtSignal() # void accepted() - signal
    def centerButtons(self):
        '''bool QDialogButtonBox.centerButtons()'''
        return bool()
    def setCenterButtons(self, center):
        '''void QDialogButtonBox.setCenterButtons(bool center)'''
    def button(self, which):
        '''QPushButton QDialogButtonBox.button(QDialogButtonBox.StandardButton which)'''
        return QPushButton()
    def standardButton(self, button):
        '''QDialogButtonBox.StandardButton QDialogButtonBox.standardButton(QAbstractButton button)'''
        return QDialogButtonBox.StandardButton()
    def standardButtons(self):
        '''QDialogButtonBox.StandardButtons QDialogButtonBox.standardButtons()'''
        return QDialogButtonBox.StandardButtons()
    def setStandardButtons(self, buttons):
        '''void QDialogButtonBox.setStandardButtons(QDialogButtonBox.StandardButtons buttons)'''
    def buttonRole(self, button):
        '''QDialogButtonBox.ButtonRole QDialogButtonBox.buttonRole(QAbstractButton button)'''
        return QDialogButtonBox.ButtonRole()
    def buttons(self):
        '''list-of-QAbstractButton QDialogButtonBox.buttons()'''
        return [QAbstractButton()]
    def clear(self):
        '''void QDialogButtonBox.clear()'''
    def removeButton(self, button):
        '''void QDialogButtonBox.removeButton(QAbstractButton button)'''
    def addButton(self, button, role):
        '''void QDialogButtonBox.addButton(QAbstractButton button, QDialogButtonBox.ButtonRole role)'''
    def addButton(self, text, role):
        '''QPushButton QDialogButtonBox.addButton(QString text, QDialogButtonBox.ButtonRole role)'''
        return QPushButton()
    def addButton(self, button):
        '''QPushButton QDialogButtonBox.addButton(QDialogButtonBox.StandardButton button)'''
        return QPushButton()
    def orientation(self):
        '''Qt.Orientation QDialogButtonBox.orientation()'''
        return Qt.Orientation()
    def setOrientation(self, orientation):
        '''void QDialogButtonBox.setOrientation(Qt.Orientation orientation)'''
    class StandardButtons():
        """"""
        def __init__(self):
            '''QDialogButtonBox.StandardButtons QDialogButtonBox.StandardButtons.__init__()'''
            return QDialogButtonBox.StandardButtons()
        def __init__(self):
            '''int QDialogButtonBox.StandardButtons.__init__()'''
            return int()
        def __init__(self):
            '''void QDialogButtonBox.StandardButtons.__init__()'''
        def __bool__(self):
            '''int QDialogButtonBox.StandardButtons.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QDialogButtonBox.StandardButtons.__ne__(QDialogButtonBox.StandardButtons f)'''
            return bool()
        def __eq__(self, f):
            '''bool QDialogButtonBox.StandardButtons.__eq__(QDialogButtonBox.StandardButtons f)'''
            return bool()
        def __invert__(self):
            '''QDialogButtonBox.StandardButtons QDialogButtonBox.StandardButtons.__invert__()'''
            return QDialogButtonBox.StandardButtons()
        def __and__(self, mask):
            '''QDialogButtonBox.StandardButtons QDialogButtonBox.StandardButtons.__and__(int mask)'''
            return QDialogButtonBox.StandardButtons()
        def __xor__(self, f):
            '''QDialogButtonBox.StandardButtons QDialogButtonBox.StandardButtons.__xor__(QDialogButtonBox.StandardButtons f)'''
            return QDialogButtonBox.StandardButtons()
        def __xor__(self, f):
            '''QDialogButtonBox.StandardButtons QDialogButtonBox.StandardButtons.__xor__(int f)'''
            return QDialogButtonBox.StandardButtons()
        def __or__(self, f):
            '''QDialogButtonBox.StandardButtons QDialogButtonBox.StandardButtons.__or__(QDialogButtonBox.StandardButtons f)'''
            return QDialogButtonBox.StandardButtons()
        def __or__(self, f):
            '''QDialogButtonBox.StandardButtons QDialogButtonBox.StandardButtons.__or__(int f)'''
            return QDialogButtonBox.StandardButtons()
        def __int__(self):
            '''int QDialogButtonBox.StandardButtons.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QDialogButtonBox.StandardButtons QDialogButtonBox.StandardButtons.__ixor__(QDialogButtonBox.StandardButtons f)'''
            return QDialogButtonBox.StandardButtons()
        def __ior__(self, f):
            '''QDialogButtonBox.StandardButtons QDialogButtonBox.StandardButtons.__ior__(QDialogButtonBox.StandardButtons f)'''
            return QDialogButtonBox.StandardButtons()
        def __iand__(self, mask):
            '''QDialogButtonBox.StandardButtons QDialogButtonBox.StandardButtons.__iand__(int mask)'''
            return QDialogButtonBox.StandardButtons()


class QDirModel(QAbstractItemModel):
    """"""
    # Enum QDirModel.Roles
    FileIconRole = 0
    FilePathRole = 0
    FileNameRole = 0

    def __init__(self, nameFilters, filters, sort, parent = None):
        '''void QDirModel.__init__(QStringList nameFilters, QDir.Filters filters, QDir.SortFlags sort, QObject parent = None)'''
    def __init__(self, parent = None):
        '''void QDirModel.__init__(QObject parent = None)'''
    def fileInfo(self, index):
        '''QFileInfo QDirModel.fileInfo(QModelIndex index)'''
        return QFileInfo()
    def fileIcon(self, index):
        '''QIcon QDirModel.fileIcon(QModelIndex index)'''
        return QIcon()
    def fileName(self, index):
        '''QString QDirModel.fileName(QModelIndex index)'''
        return QString()
    def filePath(self, index):
        '''QString QDirModel.filePath(QModelIndex index)'''
        return QString()
    def remove(self, index):
        '''bool QDirModel.remove(QModelIndex index)'''
        return bool()
    def rmdir(self, index):
        '''bool QDirModel.rmdir(QModelIndex index)'''
        return bool()
    def mkdir(self, parent, name):
        '''QModelIndex QDirModel.mkdir(QModelIndex parent, QString name)'''
        return QModelIndex()
    def isDir(self, index):
        '''bool QDirModel.isDir(QModelIndex index)'''
        return bool()
    def refresh(self, parent = QModelIndex()):
        '''void QDirModel.refresh(QModelIndex parent = QModelIndex())'''
    def lazyChildCount(self):
        '''bool QDirModel.lazyChildCount()'''
        return bool()
    def setLazyChildCount(self, enable):
        '''void QDirModel.setLazyChildCount(bool enable)'''
    def isReadOnly(self):
        '''bool QDirModel.isReadOnly()'''
        return bool()
    def setReadOnly(self, enable):
        '''void QDirModel.setReadOnly(bool enable)'''
    def resolveSymlinks(self):
        '''bool QDirModel.resolveSymlinks()'''
        return bool()
    def setResolveSymlinks(self, enable):
        '''void QDirModel.setResolveSymlinks(bool enable)'''
    def sorting(self):
        '''QDir.SortFlags QDirModel.sorting()'''
        return QDir.SortFlags()
    def setSorting(self, sort):
        '''void QDirModel.setSorting(QDir.SortFlags sort)'''
    def filter(self):
        '''QDir.Filters QDirModel.filter()'''
        return QDir.Filters()
    def setFilter(self, filters):
        '''void QDirModel.setFilter(QDir.Filters filters)'''
    def nameFilters(self):
        '''QStringList QDirModel.nameFilters()'''
        return QStringList()
    def setNameFilters(self, filters):
        '''void QDirModel.setNameFilters(QStringList filters)'''
    def iconProvider(self):
        '''QFileIconProvider QDirModel.iconProvider()'''
        return QFileIconProvider()
    def setIconProvider(self, provider):
        '''void QDirModel.setIconProvider(QFileIconProvider provider)'''
    def supportedDropActions(self):
        '''Qt.DropActions QDirModel.supportedDropActions()'''
        return Qt.DropActions()
    def dropMimeData(self, data, action, row, column, parent):
        '''bool QDirModel.dropMimeData(QMimeData data, Qt.DropAction action, int row, int column, QModelIndex parent)'''
        return bool()
    def mimeData(self, indexes):
        '''QMimeData QDirModel.mimeData(list-of-QModelIndex indexes)'''
        return QMimeData()
    def mimeTypes(self):
        '''QStringList QDirModel.mimeTypes()'''
        return QStringList()
    def sort(self, column, order = None):
        '''void QDirModel.sort(int column, Qt.SortOrder order = Qt.AscendingOrder)'''
    def flags(self, index):
        '''Qt.ItemFlags QDirModel.flags(QModelIndex index)'''
        return Qt.ItemFlags()
    def hasChildren(self, parent = QModelIndex()):
        '''bool QDirModel.hasChildren(QModelIndex parent = QModelIndex())'''
        return bool()
    def headerData(self, section, orientation, role = None):
        '''QVariant QDirModel.headerData(int section, Qt.Orientation orientation, int role = Qt.DisplayRole)'''
        return QVariant()
    def setData(self, index, value, role = None):
        '''bool QDirModel.setData(QModelIndex index, QVariant value, int role = Qt.EditRole)'''
        return bool()
    def data(self, index, role = None):
        '''QVariant QDirModel.data(QModelIndex index, int role = Qt.DisplayRole)'''
        return QVariant()
    def columnCount(self, parent = QModelIndex()):
        '''int QDirModel.columnCount(QModelIndex parent = QModelIndex())'''
        return int()
    def rowCount(self, parent = QModelIndex()):
        '''int QDirModel.rowCount(QModelIndex parent = QModelIndex())'''
        return int()
    def parent(self, child):
        '''QModelIndex QDirModel.parent(QModelIndex child)'''
        return QModelIndex()
    def parent(self):
        '''QObject QDirModel.parent()'''
        return QObject()
    def index(self, row, column, parent = QModelIndex()):
        '''QModelIndex QDirModel.index(int row, int column, QModelIndex parent = QModelIndex())'''
        return QModelIndex()
    def index(self, path, column = 0):
        '''QModelIndex QDirModel.index(QString path, int column = 0)'''
        return QModelIndex()


class QDockWidget(QWidget):
    """"""
    # Enum QDockWidget.DockWidgetFeature
    DockWidgetClosable = 0
    DockWidgetMovable = 0
    DockWidgetFloatable = 0
    DockWidgetVerticalTitleBar = 0
    AllDockWidgetFeatures = 0
    NoDockWidgetFeatures = 0

    def __init__(self, title, parent = None, flags = 0):
        '''void QDockWidget.__init__(QString title, QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def __init__(self, parent = None, flags = 0):
        '''void QDockWidget.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def event(self, event):
        '''bool QDockWidget.event(QEvent event)'''
        return bool()
    def paintEvent(self, event):
        '''void QDockWidget.paintEvent(QPaintEvent event)'''
    def closeEvent(self, event):
        '''void QDockWidget.closeEvent(QCloseEvent event)'''
    def changeEvent(self, event):
        '''void QDockWidget.changeEvent(QEvent event)'''
    def initStyleOption(self, option):
        '''void QDockWidget.initStyleOption(QStyleOptionDockWidget option)'''
    visibilityChanged = pyqtSignal() # void visibilityChanged(bool) - signal
    dockLocationChanged = pyqtSignal() # void dockLocationChanged(Qt::DockWidgetArea) - signal
    allowedAreasChanged = pyqtSignal() # void allowedAreasChanged(Qt::DockWidgetAreas) - signal
    topLevelChanged = pyqtSignal() # void topLevelChanged(bool) - signal
    featuresChanged = pyqtSignal() # void featuresChanged(QDockWidget::DockWidgetFeatures) - signal
    def titleBarWidget(self):
        '''QWidget QDockWidget.titleBarWidget()'''
        return QWidget()
    def setTitleBarWidget(self, widget):
        '''void QDockWidget.setTitleBarWidget(QWidget widget)'''
    def toggleViewAction(self):
        '''QAction QDockWidget.toggleViewAction()'''
        return QAction()
    def isAreaAllowed(self, area):
        '''bool QDockWidget.isAreaAllowed(Qt.DockWidgetArea area)'''
        return bool()
    def allowedAreas(self):
        '''Qt.DockWidgetAreas QDockWidget.allowedAreas()'''
        return Qt.DockWidgetAreas()
    def setAllowedAreas(self, areas):
        '''void QDockWidget.setAllowedAreas(Qt.DockWidgetAreas areas)'''
    def isFloating(self):
        '''bool QDockWidget.isFloating()'''
        return bool()
    def setFloating(self, floating):
        '''void QDockWidget.setFloating(bool floating)'''
    def features(self):
        '''QDockWidget.DockWidgetFeatures QDockWidget.features()'''
        return QDockWidget.DockWidgetFeatures()
    def setFeatures(self, features):
        '''void QDockWidget.setFeatures(QDockWidget.DockWidgetFeatures features)'''
    def setWidget(self, widget):
        '''void QDockWidget.setWidget(QWidget widget)'''
    def widget(self):
        '''QWidget QDockWidget.widget()'''
        return QWidget()
    class DockWidgetFeatures():
        """"""
        def __init__(self):
            '''QDockWidget.DockWidgetFeatures QDockWidget.DockWidgetFeatures.__init__()'''
            return QDockWidget.DockWidgetFeatures()
        def __init__(self):
            '''int QDockWidget.DockWidgetFeatures.__init__()'''
            return int()
        def __init__(self):
            '''void QDockWidget.DockWidgetFeatures.__init__()'''
        def __bool__(self):
            '''int QDockWidget.DockWidgetFeatures.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QDockWidget.DockWidgetFeatures.__ne__(QDockWidget.DockWidgetFeatures f)'''
            return bool()
        def __eq__(self, f):
            '''bool QDockWidget.DockWidgetFeatures.__eq__(QDockWidget.DockWidgetFeatures f)'''
            return bool()
        def __invert__(self):
            '''QDockWidget.DockWidgetFeatures QDockWidget.DockWidgetFeatures.__invert__()'''
            return QDockWidget.DockWidgetFeatures()
        def __and__(self, mask):
            '''QDockWidget.DockWidgetFeatures QDockWidget.DockWidgetFeatures.__and__(int mask)'''
            return QDockWidget.DockWidgetFeatures()
        def __xor__(self, f):
            '''QDockWidget.DockWidgetFeatures QDockWidget.DockWidgetFeatures.__xor__(QDockWidget.DockWidgetFeatures f)'''
            return QDockWidget.DockWidgetFeatures()
        def __xor__(self, f):
            '''QDockWidget.DockWidgetFeatures QDockWidget.DockWidgetFeatures.__xor__(int f)'''
            return QDockWidget.DockWidgetFeatures()
        def __or__(self, f):
            '''QDockWidget.DockWidgetFeatures QDockWidget.DockWidgetFeatures.__or__(QDockWidget.DockWidgetFeatures f)'''
            return QDockWidget.DockWidgetFeatures()
        def __or__(self, f):
            '''QDockWidget.DockWidgetFeatures QDockWidget.DockWidgetFeatures.__or__(int f)'''
            return QDockWidget.DockWidgetFeatures()
        def __int__(self):
            '''int QDockWidget.DockWidgetFeatures.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QDockWidget.DockWidgetFeatures QDockWidget.DockWidgetFeatures.__ixor__(QDockWidget.DockWidgetFeatures f)'''
            return QDockWidget.DockWidgetFeatures()
        def __ior__(self, f):
            '''QDockWidget.DockWidgetFeatures QDockWidget.DockWidgetFeatures.__ior__(QDockWidget.DockWidgetFeatures f)'''
            return QDockWidget.DockWidgetFeatures()
        def __iand__(self, mask):
            '''QDockWidget.DockWidgetFeatures QDockWidget.DockWidgetFeatures.__iand__(int mask)'''
            return QDockWidget.DockWidgetFeatures()


class QDrag(QObject):
    """"""
    def __init__(self, dragSource):
        '''void QDrag.__init__(QWidget dragSource)'''
    targetChanged = pyqtSignal() # void targetChanged(QWidget *) - signal
    actionChanged = pyqtSignal() # void actionChanged(Qt::DropAction) - signal
    def setDragCursor(self, cursor, action):
        '''void QDrag.setDragCursor(QPixmap cursor, Qt.DropAction action)'''
    def start(self, supportedActions = None):
        '''Qt.DropAction QDrag.start(Qt.DropActions supportedActions = Qt.CopyAction)'''
        return Qt.DropAction()
    def target(self):
        '''QWidget QDrag.target()'''
        return QWidget()
    def source(self):
        '''QWidget QDrag.source()'''
        return QWidget()
    def hotSpot(self):
        '''QPoint QDrag.hotSpot()'''
        return QPoint()
    def setHotSpot(self, hotspot):
        '''void QDrag.setHotSpot(QPoint hotspot)'''
    def pixmap(self):
        '''QPixmap QDrag.pixmap()'''
        return QPixmap()
    def setPixmap(self):
        '''QPixmap QDrag.setPixmap()'''
        return QPixmap()
    def mimeData(self):
        '''QMimeData QDrag.mimeData()'''
        return QMimeData()
    def setMimeData(self, data):
        '''void QDrag.setMimeData(QMimeData data)'''
    def exec_(self, supportedActions = None):
        '''Qt.DropAction QDrag.exec_(Qt.DropActions supportedActions = Qt.MoveAction)'''
        return Qt.DropAction()
    def exec_(self, supportedActions, defaultDropAction):
        '''Qt.DropAction QDrag.exec_(Qt.DropActions supportedActions, Qt.DropAction defaultDropAction)'''
        return Qt.DropAction()


class QErrorMessage(QDialog):
    """"""
    def __init__(self, parent = None):
        '''void QErrorMessage.__init__(QWidget parent = None)'''
    def done(self):
        '''int QErrorMessage.done()'''
        return int()
    def changeEvent(self, e):
        '''void QErrorMessage.changeEvent(QEvent e)'''
    def showMessage(self, message):
        '''void QErrorMessage.showMessage(QString message)'''
    def showMessage(self, message, type):
        '''void QErrorMessage.showMessage(QString message, QString type)'''
    def qtHandler(self):
        '''static QErrorMessage QErrorMessage.qtHandler()'''
        return QErrorMessage()


class QInputEvent(QEvent):
    """"""
    def modifiers(self):
        '''Qt.KeyboardModifiers QInputEvent.modifiers()'''
        return Qt.KeyboardModifiers()


class QMouseEvent(QInputEvent):
    """"""
    def __init__(self, type, pos, button, buttons, modifiers):
        '''void QMouseEvent.__init__(QEvent.Type type, QPoint pos, Qt.MouseButton button, Qt.MouseButtons buttons, Qt.KeyboardModifiers modifiers)'''
    def __init__(self, type, pos, globalPos, button, buttons, modifiers):
        '''void QMouseEvent.__init__(QEvent.Type type, QPoint pos, QPoint globalPos, Qt.MouseButton button, Qt.MouseButtons buttons, Qt.KeyboardModifiers modifiers)'''
    def __init__(self):
        '''QMouseEvent QMouseEvent.__init__()'''
        return QMouseEvent()
    def posF(self):
        '''QPointF QMouseEvent.posF()'''
        return QPointF()
    def hasExtendedInfo(self):
        '''bool QMouseEvent.hasExtendedInfo()'''
        return bool()
    def buttons(self):
        '''Qt.MouseButtons QMouseEvent.buttons()'''
        return Qt.MouseButtons()
    def button(self):
        '''Qt.MouseButton QMouseEvent.button()'''
        return Qt.MouseButton()
    def globalY(self):
        '''int QMouseEvent.globalY()'''
        return int()
    def globalX(self):
        '''int QMouseEvent.globalX()'''
        return int()
    def y(self):
        '''int QMouseEvent.y()'''
        return int()
    def x(self):
        '''int QMouseEvent.x()'''
        return int()
    def globalPos(self):
        '''QPoint QMouseEvent.globalPos()'''
        return QPoint()
    def pos(self):
        '''QPoint QMouseEvent.pos()'''
        return QPoint()


class QHoverEvent(QEvent):
    """"""
    def __init__(self, type, pos, oldPos):
        '''void QHoverEvent.__init__(QEvent.Type type, QPoint pos, QPoint oldPos)'''
    def __init__(self):
        '''QHoverEvent QHoverEvent.__init__()'''
        return QHoverEvent()
    def oldPos(self):
        '''QPoint QHoverEvent.oldPos()'''
        return QPoint()
    def pos(self):
        '''QPoint QHoverEvent.pos()'''
        return QPoint()


class QWheelEvent(QInputEvent):
    """"""
    def __init__(self, pos, delta, buttons, modifiers, orientation = None):
        '''void QWheelEvent.__init__(QPoint pos, int delta, Qt.MouseButtons buttons, Qt.KeyboardModifiers modifiers, Qt.Orientation orientation = Qt.Vertical)'''
    def __init__(self, pos, globalPos, delta, buttons, modifiers, orientation = None):
        '''void QWheelEvent.__init__(QPoint pos, QPoint globalPos, int delta, Qt.MouseButtons buttons, Qt.KeyboardModifiers modifiers, Qt.Orientation orientation = Qt.Vertical)'''
    def __init__(self):
        '''QWheelEvent QWheelEvent.__init__()'''
        return QWheelEvent()
    def orientation(self):
        '''Qt.Orientation QWheelEvent.orientation()'''
        return Qt.Orientation()
    def buttons(self):
        '''Qt.MouseButtons QWheelEvent.buttons()'''
        return Qt.MouseButtons()
    def globalY(self):
        '''int QWheelEvent.globalY()'''
        return int()
    def globalX(self):
        '''int QWheelEvent.globalX()'''
        return int()
    def y(self):
        '''int QWheelEvent.y()'''
        return int()
    def x(self):
        '''int QWheelEvent.x()'''
        return int()
    def globalPos(self):
        '''QPoint QWheelEvent.globalPos()'''
        return QPoint()
    def pos(self):
        '''QPoint QWheelEvent.pos()'''
        return QPoint()
    def delta(self):
        '''int QWheelEvent.delta()'''
        return int()


class QTabletEvent(QInputEvent):
    """"""
    # Enum QTabletEvent.PointerType
    UnknownPointer = 0
    Pen = 0
    Cursor = 0
    Eraser = 0

    # Enum QTabletEvent.TabletDevice
    NoDevice = 0
    Puck = 0
    Stylus = 0
    Airbrush = 0
    FourDMouse = 0
    XFreeEraser = 0
    RotationStylus = 0

    def __init__(self, t, pos, globalPos, hiResGlobalPos, device, pointerType, pressure, xTilt, yTilt, tangentialPressure, rotation, z, keyState, uniqueID):
        '''void QTabletEvent.__init__(QEvent.Type t, QPoint pos, QPoint globalPos, QPointF hiResGlobalPos, int device, int pointerType, float pressure, int xTilt, int yTilt, float tangentialPressure, float rotation, int z, Qt.KeyboardModifiers keyState, int uniqueID)'''
    def __init__(self):
        '''QTabletEvent QTabletEvent.__init__()'''
        return QTabletEvent()
    def yTilt(self):
        '''int QTabletEvent.yTilt()'''
        return int()
    def xTilt(self):
        '''int QTabletEvent.xTilt()'''
        return int()
    def rotation(self):
        '''float QTabletEvent.rotation()'''
        return float()
    def tangentialPressure(self):
        '''float QTabletEvent.tangentialPressure()'''
        return float()
    def z(self):
        '''int QTabletEvent.z()'''
        return int()
    def pressure(self):
        '''float QTabletEvent.pressure()'''
        return float()
    def uniqueId(self):
        '''int QTabletEvent.uniqueId()'''
        return int()
    def pointerType(self):
        '''QTabletEvent.PointerType QTabletEvent.pointerType()'''
        return QTabletEvent.PointerType()
    def device(self):
        '''QTabletEvent.TabletDevice QTabletEvent.device()'''
        return QTabletEvent.TabletDevice()
    def hiResGlobalY(self):
        '''float QTabletEvent.hiResGlobalY()'''
        return float()
    def hiResGlobalX(self):
        '''float QTabletEvent.hiResGlobalX()'''
        return float()
    def globalY(self):
        '''int QTabletEvent.globalY()'''
        return int()
    def globalX(self):
        '''int QTabletEvent.globalX()'''
        return int()
    def y(self):
        '''int QTabletEvent.y()'''
        return int()
    def x(self):
        '''int QTabletEvent.x()'''
        return int()
    def hiResGlobalPos(self):
        '''QPointF QTabletEvent.hiResGlobalPos()'''
        return QPointF()
    def globalPos(self):
        '''QPoint QTabletEvent.globalPos()'''
        return QPoint()
    def pos(self):
        '''QPoint QTabletEvent.pos()'''
        return QPoint()


class QKeyEvent(QInputEvent):
    """"""
    def __init__(self, type, key, modifiers, text = QString(), autorep = False, count = 1):
        '''void QKeyEvent.__init__(QEvent.Type type, int key, Qt.KeyboardModifiers modifiers, QString text = QString(), bool autorep = False, int count = 1)'''
    def __init__(self):
        '''QKeyEvent QKeyEvent.__init__()'''
        return QKeyEvent()
    def __ne__(self, key):
        '''bool QKeyEvent.__ne__(QKeySequence.StandardKey key)'''
        return bool()
    def __eq__(self, key):
        '''bool QKeyEvent.__eq__(QKeySequence.StandardKey key)'''
        return bool()
    def nativeVirtualKey(self):
        '''int QKeyEvent.nativeVirtualKey()'''
        return int()
    def nativeScanCode(self):
        '''int QKeyEvent.nativeScanCode()'''
        return int()
    def nativeModifiers(self):
        '''int QKeyEvent.nativeModifiers()'''
        return int()
    def matches(self, key):
        '''bool QKeyEvent.matches(QKeySequence.StandardKey key)'''
        return bool()
    def __len__(self):
        '''None QKeyEvent.__len__()'''
        return None()
    def count(self):
        '''int QKeyEvent.count()'''
        return int()
    def isAutoRepeat(self):
        '''bool QKeyEvent.isAutoRepeat()'''
        return bool()
    def text(self):
        '''QString QKeyEvent.text()'''
        return QString()
    def modifiers(self):
        '''Qt.KeyboardModifiers QKeyEvent.modifiers()'''
        return Qt.KeyboardModifiers()
    def key(self):
        '''int QKeyEvent.key()'''
        return int()


class QFocusEvent(QEvent):
    """"""
    def __init__(self, type, reason = None):
        '''void QFocusEvent.__init__(QEvent.Type type, Qt.FocusReason reason = Qt.OtherFocusReason)'''
    def __init__(self):
        '''QFocusEvent QFocusEvent.__init__()'''
        return QFocusEvent()
    def reason(self):
        '''Qt.FocusReason QFocusEvent.reason()'''
        return Qt.FocusReason()
    def lostFocus(self):
        '''bool QFocusEvent.lostFocus()'''
        return bool()
    def gotFocus(self):
        '''bool QFocusEvent.gotFocus()'''
        return bool()


class QPaintEvent(QEvent):
    """"""
    def __init__(self, paintRegion):
        '''void QPaintEvent.__init__(QRegion paintRegion)'''
    def __init__(self, paintRect):
        '''void QPaintEvent.__init__(QRect paintRect)'''
    def __init__(self):
        '''QPaintEvent QPaintEvent.__init__()'''
        return QPaintEvent()
    def region(self):
        '''QRegion QPaintEvent.region()'''
        return QRegion()
    def rect(self):
        '''QRect QPaintEvent.rect()'''
        return QRect()


class QMoveEvent(QEvent):
    """"""
    def __init__(self, pos, oldPos):
        '''void QMoveEvent.__init__(QPoint pos, QPoint oldPos)'''
    def __init__(self):
        '''QMoveEvent QMoveEvent.__init__()'''
        return QMoveEvent()
    def oldPos(self):
        '''QPoint QMoveEvent.oldPos()'''
        return QPoint()
    def pos(self):
        '''QPoint QMoveEvent.pos()'''
        return QPoint()


class QResizeEvent(QEvent):
    """"""
    def __init__(self, size, oldSize):
        '''void QResizeEvent.__init__(QSize size, QSize oldSize)'''
    def __init__(self):
        '''QResizeEvent QResizeEvent.__init__()'''
        return QResizeEvent()
    def oldSize(self):
        '''QSize QResizeEvent.oldSize()'''
        return QSize()
    def size(self):
        '''QSize QResizeEvent.size()'''
        return QSize()


class QCloseEvent(QEvent):
    """"""
    def __init__(self):
        '''void QCloseEvent.__init__()'''
    def __init__(self):
        '''QCloseEvent QCloseEvent.__init__()'''
        return QCloseEvent()


class QIconDragEvent(QEvent):
    """"""
    def __init__(self):
        '''void QIconDragEvent.__init__()'''
    def __init__(self):
        '''QIconDragEvent QIconDragEvent.__init__()'''
        return QIconDragEvent()


class QShowEvent(QEvent):
    """"""
    def __init__(self):
        '''void QShowEvent.__init__()'''
    def __init__(self):
        '''QShowEvent QShowEvent.__init__()'''
        return QShowEvent()


class QHideEvent(QEvent):
    """"""
    def __init__(self):
        '''void QHideEvent.__init__()'''
    def __init__(self):
        '''QHideEvent QHideEvent.__init__()'''
        return QHideEvent()


class QContextMenuEvent(QInputEvent):
    """"""
    # Enum QContextMenuEvent.Reason
    Mouse = 0
    Keyboard = 0
    Other = 0

    def __init__(self, reason, pos, globalPos, modifiers):
        '''void QContextMenuEvent.__init__(QContextMenuEvent.Reason reason, QPoint pos, QPoint globalPos, Qt.KeyboardModifiers modifiers)'''
    def __init__(self, reason, pos, globalPos):
        '''void QContextMenuEvent.__init__(QContextMenuEvent.Reason reason, QPoint pos, QPoint globalPos)'''
    def __init__(self, reason, pos):
        '''void QContextMenuEvent.__init__(QContextMenuEvent.Reason reason, QPoint pos)'''
    def __init__(self):
        '''QContextMenuEvent QContextMenuEvent.__init__()'''
        return QContextMenuEvent()
    def reason(self):
        '''QContextMenuEvent.Reason QContextMenuEvent.reason()'''
        return QContextMenuEvent.Reason()
    def globalPos(self):
        '''QPoint QContextMenuEvent.globalPos()'''
        return QPoint()
    def pos(self):
        '''QPoint QContextMenuEvent.pos()'''
        return QPoint()
    def globalY(self):
        '''int QContextMenuEvent.globalY()'''
        return int()
    def globalX(self):
        '''int QContextMenuEvent.globalX()'''
        return int()
    def y(self):
        '''int QContextMenuEvent.y()'''
        return int()
    def x(self):
        '''int QContextMenuEvent.x()'''
        return int()


class QInputMethodEvent(QEvent):
    """"""
    # Enum QInputMethodEvent.AttributeType
    TextFormat = 0
    Cursor = 0
    Language = 0
    Ruby = 0
    Selection = 0

    def __init__(self):
        '''void QInputMethodEvent.__init__()'''
    def __init__(self, preeditText, attributes):
        '''void QInputMethodEvent.__init__(QString preeditText, list-of-QInputMethodEvent.Attribute attributes)'''
    def __init__(self, other):
        '''void QInputMethodEvent.__init__(QInputMethodEvent other)'''
    def replacementLength(self):
        '''int QInputMethodEvent.replacementLength()'''
        return int()
    def replacementStart(self):
        '''int QInputMethodEvent.replacementStart()'''
        return int()
    def commitString(self):
        '''QString QInputMethodEvent.commitString()'''
        return QString()
    def preeditString(self):
        '''QString QInputMethodEvent.preeditString()'''
        return QString()
    def attributes(self):
        '''list-of-QInputMethodEvent.Attribute QInputMethodEvent.attributes()'''
        return [QInputMethodEvent.Attribute()]
    def setCommitString(self, commitString, from_ = 0, length = 0):
        '''void QInputMethodEvent.setCommitString(QString commitString, int from = 0, int length = 0)'''
    class Attribute():
        """"""
        length = None # int - member
        start = None # int - member
        type = None # QInputMethodEvent.AttributeType - member
        value = None # QVariant - member
        def __init__(self, t, s, l, val):
            '''void QInputMethodEvent.Attribute.__init__(QInputMethodEvent.AttributeType t, int s, int l, QVariant val)'''
        def __init__(self):
            '''QInputMethodEvent.Attribute QInputMethodEvent.Attribute.__init__()'''
            return QInputMethodEvent.Attribute()


class QMimeSource():
    """"""
    def __init__(self):
        '''void QMimeSource.__init__()'''
    def __init__(self):
        '''QMimeSource QMimeSource.__init__()'''
        return QMimeSource()
    def encodedData(self):
        '''abstract str QMimeSource.encodedData()'''
        return str()
    def provides(self):
        '''str QMimeSource.provides()'''
        return str()
    def format(self, i = 0):
        '''abstract str QMimeSource.format(int i = 0)'''
        return str()


class QDropEvent(QEvent, QMimeSource):
    """"""
    def __init__(self, pos, actions, data, buttons, modifiers, type = None):
        '''void QDropEvent.__init__(QPoint pos, Qt.DropActions actions, QMimeData data, Qt.MouseButtons buttons, Qt.KeyboardModifiers modifiers, QEvent.Type type = QEvent.Drop)'''
    def __init__(self):
        '''QDropEvent QDropEvent.__init__()'''
        return QDropEvent()
    def provides(self):
        '''str QDropEvent.provides()'''
        return str()
    def encodedData(self):
        '''str QDropEvent.encodedData()'''
        return str()
    def format(self, n = 0):
        '''str QDropEvent.format(int n = 0)'''
        return str()
    def mimeData(self):
        '''QMimeData QDropEvent.mimeData()'''
        return QMimeData()
    def source(self):
        '''QWidget QDropEvent.source()'''
        return QWidget()
    def setDropAction(self, action):
        '''void QDropEvent.setDropAction(Qt.DropAction action)'''
    def dropAction(self):
        '''Qt.DropAction QDropEvent.dropAction()'''
        return Qt.DropAction()
    def acceptProposedAction(self):
        '''void QDropEvent.acceptProposedAction()'''
    def proposedAction(self):
        '''Qt.DropAction QDropEvent.proposedAction()'''
        return Qt.DropAction()
    def possibleActions(self):
        '''Qt.DropActions QDropEvent.possibleActions()'''
        return Qt.DropActions()
    def keyboardModifiers(self):
        '''Qt.KeyboardModifiers QDropEvent.keyboardModifiers()'''
        return Qt.KeyboardModifiers()
    def mouseButtons(self):
        '''Qt.MouseButtons QDropEvent.mouseButtons()'''
        return Qt.MouseButtons()
    def pos(self):
        '''QPoint QDropEvent.pos()'''
        return QPoint()


class QDragMoveEvent(QDropEvent):
    """"""
    def __init__(self, pos, actions, data, buttons, modifiers, type = None):
        '''void QDragMoveEvent.__init__(QPoint pos, Qt.DropActions actions, QMimeData data, Qt.MouseButtons buttons, Qt.KeyboardModifiers modifiers, QEvent.Type type = QEvent.DragMove)'''
    def __init__(self):
        '''QDragMoveEvent QDragMoveEvent.__init__()'''
        return QDragMoveEvent()
    def ignore(self):
        '''void QDragMoveEvent.ignore()'''
    def ignore(self, r):
        '''void QDragMoveEvent.ignore(QRect r)'''
    def accept(self):
        '''void QDragMoveEvent.accept()'''
    def accept(self, r):
        '''void QDragMoveEvent.accept(QRect r)'''
    def answerRect(self):
        '''QRect QDragMoveEvent.answerRect()'''
        return QRect()


class QDragEnterEvent(QDragMoveEvent):
    """"""
    def __init__(self, pos, actions, data, buttons, modifiers):
        '''void QDragEnterEvent.__init__(QPoint pos, Qt.DropActions actions, QMimeData data, Qt.MouseButtons buttons, Qt.KeyboardModifiers modifiers)'''
    def __init__(self):
        '''QDragEnterEvent QDragEnterEvent.__init__()'''
        return QDragEnterEvent()


class QDragLeaveEvent(QEvent):
    """"""
    def __init__(self):
        '''void QDragLeaveEvent.__init__()'''
    def __init__(self):
        '''QDragLeaveEvent QDragLeaveEvent.__init__()'''
        return QDragLeaveEvent()


class QHelpEvent(QEvent):
    """"""
    def __init__(self, type, pos, globalPos):
        '''void QHelpEvent.__init__(QEvent.Type type, QPoint pos, QPoint globalPos)'''
    def __init__(self):
        '''QHelpEvent QHelpEvent.__init__()'''
        return QHelpEvent()
    def globalPos(self):
        '''QPoint QHelpEvent.globalPos()'''
        return QPoint()
    def pos(self):
        '''QPoint QHelpEvent.pos()'''
        return QPoint()
    def globalY(self):
        '''int QHelpEvent.globalY()'''
        return int()
    def globalX(self):
        '''int QHelpEvent.globalX()'''
        return int()
    def y(self):
        '''int QHelpEvent.y()'''
        return int()
    def x(self):
        '''int QHelpEvent.x()'''
        return int()


class QStatusTipEvent(QEvent):
    """"""
    def __init__(self, tip):
        '''void QStatusTipEvent.__init__(QString tip)'''
    def __init__(self):
        '''QStatusTipEvent QStatusTipEvent.__init__()'''
        return QStatusTipEvent()
    def tip(self):
        '''QString QStatusTipEvent.tip()'''
        return QString()


class QWhatsThisClickedEvent(QEvent):
    """"""
    def __init__(self, href):
        '''void QWhatsThisClickedEvent.__init__(QString href)'''
    def __init__(self):
        '''QWhatsThisClickedEvent QWhatsThisClickedEvent.__init__()'''
        return QWhatsThisClickedEvent()
    def href(self):
        '''QString QWhatsThisClickedEvent.href()'''
        return QString()


class QActionEvent(QEvent):
    """"""
    def __init__(self, type, action, before = None):
        '''void QActionEvent.__init__(int type, QAction action, QAction before = None)'''
    def __init__(self):
        '''QActionEvent QActionEvent.__init__()'''
        return QActionEvent()
    def before(self):
        '''QAction QActionEvent.before()'''
        return QAction()
    def action(self):
        '''QAction QActionEvent.action()'''
        return QAction()


class QFileOpenEvent(QEvent):
    """"""
    def openFile(self, file, flags):
        '''bool QFileOpenEvent.openFile(QFile file, QIODevice.OpenMode flags)'''
        return bool()
    def url(self):
        '''QUrl QFileOpenEvent.url()'''
        return QUrl()
    def file(self):
        '''QString QFileOpenEvent.file()'''
        return QString()


class QShortcutEvent(QEvent):
    """"""
    def __init__(self, key, id, ambiguous = False):
        '''void QShortcutEvent.__init__(QKeySequence key, int id, bool ambiguous = False)'''
    def __init__(self):
        '''QShortcutEvent QShortcutEvent.__init__()'''
        return QShortcutEvent()
    def shortcutId(self):
        '''int QShortcutEvent.shortcutId()'''
        return int()
    def key(self):
        '''QKeySequence QShortcutEvent.key()'''
        return QKeySequence()
    def isAmbiguous(self):
        '''bool QShortcutEvent.isAmbiguous()'''
        return bool()


class QWindowStateChangeEvent(QEvent):
    """"""
    def oldState(self):
        '''Qt.WindowStates QWindowStateChangeEvent.oldState()'''
        return Qt.WindowStates()


class QTouchEvent(QInputEvent):
    """"""
    # Enum QTouchEvent.DeviceType
    TouchScreen = 0
    TouchPad = 0

    def __init__(self, eventType, deviceType = None, modifiers = None, touchPointStates = 0, touchPoints = None):
        '''void QTouchEvent.__init__(QEvent.Type eventType, QTouchEvent.DeviceType deviceType = QTouchEvent.TouchScreen, Qt.KeyboardModifiers modifiers = Qt.NoModifier, Qt.TouchPointStates touchPointStates = 0, list-of-QTouchEvent.TouchPoint touchPoints = QListlt;QTouchEvent.TouchPointgt;())'''
    def __init__(self):
        '''QTouchEvent QTouchEvent.__init__()'''
        return QTouchEvent()
    def touchPoints(self):
        '''list-of-QTouchEvent.TouchPoint QTouchEvent.touchPoints()'''
        return [QTouchEvent.TouchPoint()]
    def touchPointStates(self):
        '''Qt.TouchPointStates QTouchEvent.touchPointStates()'''
        return Qt.TouchPointStates()
    def deviceType(self):
        '''QTouchEvent.DeviceType QTouchEvent.deviceType()'''
        return QTouchEvent.DeviceType()
    def widget(self):
        '''QWidget QTouchEvent.widget()'''
        return QWidget()
    class TouchPoint():
        """"""
        def pressure(self):
            '''float QTouchEvent.TouchPoint.pressure()'''
            return float()
        def screenRect(self):
            '''QRectF QTouchEvent.TouchPoint.screenRect()'''
            return QRectF()
        def sceneRect(self):
            '''QRectF QTouchEvent.TouchPoint.sceneRect()'''
            return QRectF()
        def rect(self):
            '''QRectF QTouchEvent.TouchPoint.rect()'''
            return QRectF()
        def lastNormalizedPos(self):
            '''QPointF QTouchEvent.TouchPoint.lastNormalizedPos()'''
            return QPointF()
        def startNormalizedPos(self):
            '''QPointF QTouchEvent.TouchPoint.startNormalizedPos()'''
            return QPointF()
        def normalizedPos(self):
            '''QPointF QTouchEvent.TouchPoint.normalizedPos()'''
            return QPointF()
        def lastScreenPos(self):
            '''QPointF QTouchEvent.TouchPoint.lastScreenPos()'''
            return QPointF()
        def startScreenPos(self):
            '''QPointF QTouchEvent.TouchPoint.startScreenPos()'''
            return QPointF()
        def screenPos(self):
            '''QPointF QTouchEvent.TouchPoint.screenPos()'''
            return QPointF()
        def lastScenePos(self):
            '''QPointF QTouchEvent.TouchPoint.lastScenePos()'''
            return QPointF()
        def startScenePos(self):
            '''QPointF QTouchEvent.TouchPoint.startScenePos()'''
            return QPointF()
        def scenePos(self):
            '''QPointF QTouchEvent.TouchPoint.scenePos()'''
            return QPointF()
        def lastPos(self):
            '''QPointF QTouchEvent.TouchPoint.lastPos()'''
            return QPointF()
        def startPos(self):
            '''QPointF QTouchEvent.TouchPoint.startPos()'''
            return QPointF()
        def pos(self):
            '''QPointF QTouchEvent.TouchPoint.pos()'''
            return QPointF()
        def isPrimary(self):
            '''bool QTouchEvent.TouchPoint.isPrimary()'''
            return bool()
        def state(self):
            '''Qt.TouchPointState QTouchEvent.TouchPoint.state()'''
            return Qt.TouchPointState()
        def id(self):
            '''int QTouchEvent.TouchPoint.id()'''
            return int()


class QGestureEvent(QEvent):
    """"""
    def __init__(self, gestures):
        '''void QGestureEvent.__init__(list-of-QGesture gestures)'''
    def __init__(self):
        '''QGestureEvent QGestureEvent.__init__()'''
        return QGestureEvent()
    def mapToGraphicsScene(self, gesturePoint):
        '''QPointF QGestureEvent.mapToGraphicsScene(QPointF gesturePoint)'''
        return QPointF()
    def widget(self):
        '''QWidget QGestureEvent.widget()'''
        return QWidget()
    def ignore(self):
        '''void QGestureEvent.ignore()'''
    def ignore(self):
        '''QGesture QGestureEvent.ignore()'''
        return QGesture()
    def ignore(self):
        '''Qt.GestureType QGestureEvent.ignore()'''
        return Qt.GestureType()
    def accept(self):
        '''void QGestureEvent.accept()'''
    def accept(self):
        '''QGesture QGestureEvent.accept()'''
        return QGesture()
    def accept(self):
        '''Qt.GestureType QGestureEvent.accept()'''
        return Qt.GestureType()
    def isAccepted(self):
        '''bool QGestureEvent.isAccepted()'''
        return bool()
    def isAccepted(self):
        '''QGesture QGestureEvent.isAccepted()'''
        return QGesture()
    def isAccepted(self):
        '''Qt.GestureType QGestureEvent.isAccepted()'''
        return Qt.GestureType()
    def setAccepted(self, accepted):
        '''void QGestureEvent.setAccepted(bool accepted)'''
    def setAccepted(self):
        '''bool QGestureEvent.setAccepted()'''
        return bool()
    def setAccepted(self):
        '''bool QGestureEvent.setAccepted()'''
        return bool()
    def canceledGestures(self):
        '''list-of-QGesture QGestureEvent.canceledGestures()'''
        return [QGesture()]
    def activeGestures(self):
        '''list-of-QGesture QGestureEvent.activeGestures()'''
        return [QGesture()]
    def gesture(self, type):
        '''QGesture QGestureEvent.gesture(Qt.GestureType type)'''
        return QGesture()
    def gestures(self):
        '''list-of-QGesture QGestureEvent.gestures()'''
        return [QGesture()]


class QFileDialog(QDialog):
    """"""
    # Enum QFileDialog.Option
    ShowDirsOnly = 0
    DontResolveSymlinks = 0
    DontConfirmOverwrite = 0
    DontUseSheet = 0
    DontUseNativeDialog = 0
    ReadOnly = 0
    HideNameFilterDetails = 0

    # Enum QFileDialog.DialogLabel
    LookIn = 0
    FileName = 0
    FileType = 0
    Accept = 0
    Reject = 0

    # Enum QFileDialog.AcceptMode
    AcceptOpen = 0
    AcceptSave = 0

    # Enum QFileDialog.FileMode
    AnyFile = 0
    ExistingFile = 0
    Directory = 0
    ExistingFiles = 0
    DirectoryOnly = 0

    # Enum QFileDialog.ViewMode
    Detail = 0
    List = 0

    def __init__(self, parent, f):
        '''void QFileDialog.__init__(QWidget parent, Qt.WindowFlags f)'''
    def __init__(self, parent = None, caption = QString(), directory = QString(), filter = QString()):
        '''void QFileDialog.__init__(QWidget parent = None, QString caption = QString(), QString directory = QString(), QString filter = QString())'''
    def setVisible(self, visible):
        '''void QFileDialog.setVisible(bool visible)'''
    def open(self):
        '''void QFileDialog.open()'''
    def open(self, receiver, member):
        '''void QFileDialog.open(QObject receiver, SLOT() member)'''
    def open(self, receiver):
        '''void QFileDialog.open(callable receiver)'''
    def options(self):
        '''QFileDialog.Options QFileDialog.options()'''
        return QFileDialog.Options()
    def setOptions(self, options):
        '''void QFileDialog.setOptions(QFileDialog.Options options)'''
    def testOption(self, option):
        '''bool QFileDialog.testOption(QFileDialog.Option option)'''
        return bool()
    def setOption(self, option, on = True):
        '''void QFileDialog.setOption(QFileDialog.Option option, bool on = True)'''
    def filter(self):
        '''QDir.Filters QFileDialog.filter()'''
        return QDir.Filters()
    def selectedNameFilter(self):
        '''QString QFileDialog.selectedNameFilter()'''
        return QString()
    def selectNameFilter(self, filter):
        '''void QFileDialog.selectNameFilter(QString filter)'''
    def nameFilters(self):
        '''QStringList QFileDialog.nameFilters()'''
        return QStringList()
    def setNameFilters(self, filters):
        '''void QFileDialog.setNameFilters(QStringList filters)'''
    def setNameFilter(self, filter):
        '''void QFileDialog.setNameFilter(QString filter)'''
    def isNameFilterDetailsVisible(self):
        '''bool QFileDialog.isNameFilterDetailsVisible()'''
        return bool()
    def setNameFilterDetailsVisible(self, enabled):
        '''void QFileDialog.setNameFilterDetailsVisible(bool enabled)'''
    def proxyModel(self):
        '''QAbstractProxyModel QFileDialog.proxyModel()'''
        return QAbstractProxyModel()
    def setProxyModel(self, model):
        '''void QFileDialog.setProxyModel(QAbstractProxyModel model)'''
    def restoreState(self, state):
        '''bool QFileDialog.restoreState(QByteArray state)'''
        return bool()
    def saveState(self):
        '''QByteArray QFileDialog.saveState()'''
        return QByteArray()
    def sidebarUrls(self):
        '''list-of-QUrl QFileDialog.sidebarUrls()'''
        return [QUrl()]
    def setSidebarUrls(self, urls):
        '''void QFileDialog.setSidebarUrls(list-of-QUrl urls)'''
    def changeEvent(self, e):
        '''void QFileDialog.changeEvent(QEvent e)'''
    def accept(self):
        '''void QFileDialog.accept()'''
    def done(self, result):
        '''void QFileDialog.done(int result)'''
    def getSaveFileNameAndFilter(self, parent = None, caption = QString(), directory = QString(), filter = QString(), initialFilter = QString(), options = 0):
        '''static (QString, QString) QFileDialog.getSaveFileNameAndFilter(QWidget parent = None, QString caption = QString(), QString directory = QString(), QString filter = QString(), QString initialFilter = QString(), QFileDialog.Options options = 0)'''
        return (QString, QString)()
    def getSaveFileName(self, parent = None, caption = QString(), directory = QString(), filter = QString(), options = 0):
        '''static QString QFileDialog.getSaveFileName(QWidget parent = None, QString caption = QString(), QString directory = QString(), QString filter = QString(), QFileDialog.Options options = 0)'''
        return QString()
    def getSaveFileName(self, parent = None, caption = QString(), directory = QString(), filter = QString(), selectedFilter = None, options = 0):
        '''static QString QFileDialog.getSaveFileName(QWidget parent = None, QString caption = QString(), QString directory = QString(), QString filter = QString(), QString selectedFilter = None, QFileDialog.Options options = 0)'''
        return QString()
    def getOpenFileNamesAndFilter(self, parent = None, caption = QString(), directory = QString(), filter = QString(), initialFilter = QString(), options = 0):
        '''static (QString, QString) QFileDialog.getOpenFileNamesAndFilter(QWidget parent = None, QString caption = QString(), QString directory = QString(), QString filter = QString(), QString initialFilter = QString(), QFileDialog.Options options = 0)'''
        return (QString, QString)()
    def getOpenFileNames(self, parent = None, caption = QString(), directory = QString(), filter = QString(), options = 0):
        '''static QStringList QFileDialog.getOpenFileNames(QWidget parent = None, QString caption = QString(), QString directory = QString(), QString filter = QString(), QFileDialog.Options options = 0)'''
        return QStringList()
    def getOpenFileNames(self, parent = None, caption = QString(), directory = QString(), filter = QString(), selectedFilter = None, options = 0):
        '''static QStringList QFileDialog.getOpenFileNames(QWidget parent = None, QString caption = QString(), QString directory = QString(), QString filter = QString(), QString selectedFilter = None, QFileDialog.Options options = 0)'''
        return QStringList()
    def getOpenFileNameAndFilter(self, parent = None, caption = QString(), directory = QString(), filter = QString(), initialFilter = QString(), options = 0):
        '''static (QString, QString) QFileDialog.getOpenFileNameAndFilter(QWidget parent = None, QString caption = QString(), QString directory = QString(), QString filter = QString(), QString initialFilter = QString(), QFileDialog.Options options = 0)'''
        return (QString, QString)()
    def getOpenFileName(self, parent = None, caption = QString(), directory = QString(), filter = QString(), options = 0):
        '''static QString QFileDialog.getOpenFileName(QWidget parent = None, QString caption = QString(), QString directory = QString(), QString filter = QString(), QFileDialog.Options options = 0)'''
        return QString()
    def getOpenFileName(self, parent = None, caption = QString(), directory = QString(), filter = QString(), selectedFilter = None, options = 0):
        '''static QString QFileDialog.getOpenFileName(QWidget parent = None, QString caption = QString(), QString directory = QString(), QString filter = QString(), QString selectedFilter = None, QFileDialog.Options options = 0)'''
        return QString()
    def getExistingDirectory(self, parent = None, caption = QString(), directory = QString(), options = None):
        '''static QString QFileDialog.getExistingDirectory(QWidget parent = None, QString caption = QString(), QString directory = QString(), QFileDialog.Options options = QFileDialog.ShowDirsOnly)'''
        return QString()
    fileSelected = pyqtSignal() # void fileSelected(const QStringamp;) - signal
    filterSelected = pyqtSignal() # void filterSelected(const QStringamp;) - signal
    filesSelected = pyqtSignal() # void filesSelected(const QStringListamp;) - signal
    directoryEntered = pyqtSignal() # void directoryEntered(const QStringamp;) - signal
    currentChanged = pyqtSignal() # void currentChanged(const QStringamp;) - signal
    def labelText(self, label):
        '''QString QFileDialog.labelText(QFileDialog.DialogLabel label)'''
        return QString()
    def setLabelText(self, label, text):
        '''void QFileDialog.setLabelText(QFileDialog.DialogLabel label, QString text)'''
    def iconProvider(self):
        '''QFileIconProvider QFileDialog.iconProvider()'''
        return QFileIconProvider()
    def setIconProvider(self, provider):
        '''void QFileDialog.setIconProvider(QFileIconProvider provider)'''
    def itemDelegate(self):
        '''QAbstractItemDelegate QFileDialog.itemDelegate()'''
        return QAbstractItemDelegate()
    def setItemDelegate(self, delegate):
        '''void QFileDialog.setItemDelegate(QAbstractItemDelegate delegate)'''
    def history(self):
        '''QStringList QFileDialog.history()'''
        return QStringList()
    def setHistory(self, paths):
        '''void QFileDialog.setHistory(QStringList paths)'''
    def defaultSuffix(self):
        '''QString QFileDialog.defaultSuffix()'''
        return QString()
    def setDefaultSuffix(self, suffix):
        '''void QFileDialog.setDefaultSuffix(QString suffix)'''
    def confirmOverwrite(self):
        '''bool QFileDialog.confirmOverwrite()'''
        return bool()
    def setConfirmOverwrite(self, enabled):
        '''void QFileDialog.setConfirmOverwrite(bool enabled)'''
    def resolveSymlinks(self):
        '''bool QFileDialog.resolveSymlinks()'''
        return bool()
    def setResolveSymlinks(self, enabled):
        '''void QFileDialog.setResolveSymlinks(bool enabled)'''
    def isReadOnly(self):
        '''bool QFileDialog.isReadOnly()'''
        return bool()
    def setReadOnly(self, enabled):
        '''void QFileDialog.setReadOnly(bool enabled)'''
    def acceptMode(self):
        '''QFileDialog.AcceptMode QFileDialog.acceptMode()'''
        return QFileDialog.AcceptMode()
    def setAcceptMode(self, mode):
        '''void QFileDialog.setAcceptMode(QFileDialog.AcceptMode mode)'''
    def fileMode(self):
        '''QFileDialog.FileMode QFileDialog.fileMode()'''
        return QFileDialog.FileMode()
    def setFileMode(self, mode):
        '''void QFileDialog.setFileMode(QFileDialog.FileMode mode)'''
    def viewMode(self):
        '''QFileDialog.ViewMode QFileDialog.viewMode()'''
        return QFileDialog.ViewMode()
    def setViewMode(self, mode):
        '''void QFileDialog.setViewMode(QFileDialog.ViewMode mode)'''
    def selectedFilter(self):
        '''QString QFileDialog.selectedFilter()'''
        return QString()
    def selectFilter(self, filter):
        '''void QFileDialog.selectFilter(QString filter)'''
    def filters(self):
        '''QStringList QFileDialog.filters()'''
        return QStringList()
    def setFilters(self, filters):
        '''void QFileDialog.setFilters(QStringList filters)'''
    def setFilter(self, filter):
        '''void QFileDialog.setFilter(QString filter)'''
    def setFilter(self, filters):
        '''void QFileDialog.setFilter(QDir.Filters filters)'''
    def selectedFiles(self):
        '''QStringList QFileDialog.selectedFiles()'''
        return QStringList()
    def selectFile(self, filename):
        '''void QFileDialog.selectFile(QString filename)'''
    def directory(self):
        '''QDir QFileDialog.directory()'''
        return QDir()
    def setDirectory(self, directory):
        '''void QFileDialog.setDirectory(QString directory)'''
    def setDirectory(self, adirectory):
        '''void QFileDialog.setDirectory(QDir adirectory)'''
    class Options():
        """"""
        def __init__(self):
            '''QFileDialog.Options QFileDialog.Options.__init__()'''
            return QFileDialog.Options()
        def __init__(self):
            '''int QFileDialog.Options.__init__()'''
            return int()
        def __init__(self):
            '''void QFileDialog.Options.__init__()'''
        def __bool__(self):
            '''int QFileDialog.Options.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QFileDialog.Options.__ne__(QFileDialog.Options f)'''
            return bool()
        def __eq__(self, f):
            '''bool QFileDialog.Options.__eq__(QFileDialog.Options f)'''
            return bool()
        def __invert__(self):
            '''QFileDialog.Options QFileDialog.Options.__invert__()'''
            return QFileDialog.Options()
        def __and__(self, mask):
            '''QFileDialog.Options QFileDialog.Options.__and__(int mask)'''
            return QFileDialog.Options()
        def __xor__(self, f):
            '''QFileDialog.Options QFileDialog.Options.__xor__(QFileDialog.Options f)'''
            return QFileDialog.Options()
        def __xor__(self, f):
            '''QFileDialog.Options QFileDialog.Options.__xor__(int f)'''
            return QFileDialog.Options()
        def __or__(self, f):
            '''QFileDialog.Options QFileDialog.Options.__or__(QFileDialog.Options f)'''
            return QFileDialog.Options()
        def __or__(self, f):
            '''QFileDialog.Options QFileDialog.Options.__or__(int f)'''
            return QFileDialog.Options()
        def __int__(self):
            '''int QFileDialog.Options.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QFileDialog.Options QFileDialog.Options.__ixor__(QFileDialog.Options f)'''
            return QFileDialog.Options()
        def __ior__(self, f):
            '''QFileDialog.Options QFileDialog.Options.__ior__(QFileDialog.Options f)'''
            return QFileDialog.Options()
        def __iand__(self, mask):
            '''QFileDialog.Options QFileDialog.Options.__iand__(int mask)'''
            return QFileDialog.Options()


class QFileIconProvider():
    """"""
    # Enum QFileIconProvider.IconType
    Computer = 0
    Desktop = 0
    Trashcan = 0
    Network = 0
    Drive = 0
    Folder = 0
    File = 0

    def __init__(self):
        '''void QFileIconProvider.__init__()'''
    def type(self, info):
        '''QString QFileIconProvider.type(QFileInfo info)'''
        return QString()
    def icon(self, type):
        '''QIcon QFileIconProvider.icon(QFileIconProvider.IconType type)'''
        return QIcon()
    def icon(self, info):
        '''QIcon QFileIconProvider.icon(QFileInfo info)'''
        return QIcon()


class QFileSystemModel(QAbstractItemModel):
    """"""
    # Enum QFileSystemModel.Roles
    FileIconRole = 0
    FilePathRole = 0
    FileNameRole = 0
    FilePermissions = 0

    def __init__(self, parent = None):
        '''void QFileSystemModel.__init__(QObject parent = None)'''
    def timerEvent(self, event):
        '''void QFileSystemModel.timerEvent(QTimerEvent event)'''
    def event(self, event):
        '''bool QFileSystemModel.event(QEvent event)'''
        return bool()
    directoryLoaded = pyqtSignal() # void directoryLoaded(const QStringamp;) - signal
    rootPathChanged = pyqtSignal() # void rootPathChanged(const QStringamp;) - signal
    fileRenamed = pyqtSignal() # void fileRenamed(const QStringamp;,const QStringamp;,const QStringamp;) - signal
    def remove(self, aindex):
        '''bool QFileSystemModel.remove(QModelIndex aindex)'''
        return bool()
    def fileInfo(self, aindex):
        '''QFileInfo QFileSystemModel.fileInfo(QModelIndex aindex)'''
        return QFileInfo()
    def fileIcon(self, aindex):
        '''QIcon QFileSystemModel.fileIcon(QModelIndex aindex)'''
        return QIcon()
    def fileName(self, aindex):
        '''QString QFileSystemModel.fileName(QModelIndex aindex)'''
        return QString()
    def rmdir(self, aindex):
        '''bool QFileSystemModel.rmdir(QModelIndex aindex)'''
        return bool()
    def permissions(self, index):
        '''QFile.Permissions QFileSystemModel.permissions(QModelIndex index)'''
        return QFile.Permissions()
    def mkdir(self, parent, name):
        '''QModelIndex QFileSystemModel.mkdir(QModelIndex parent, QString name)'''
        return QModelIndex()
    def lastModified(self, index):
        '''QDateTime QFileSystemModel.lastModified(QModelIndex index)'''
        return QDateTime()
    def type(self, index):
        '''QString QFileSystemModel.type(QModelIndex index)'''
        return QString()
    def size(self, index):
        '''int QFileSystemModel.size(QModelIndex index)'''
        return int()
    def isDir(self, index):
        '''bool QFileSystemModel.isDir(QModelIndex index)'''
        return bool()
    def filePath(self, index):
        '''QString QFileSystemModel.filePath(QModelIndex index)'''
        return QString()
    def nameFilters(self):
        '''QStringList QFileSystemModel.nameFilters()'''
        return QStringList()
    def setNameFilters(self, filters):
        '''void QFileSystemModel.setNameFilters(QStringList filters)'''
    def nameFilterDisables(self):
        '''bool QFileSystemModel.nameFilterDisables()'''
        return bool()
    def setNameFilterDisables(self, enable):
        '''void QFileSystemModel.setNameFilterDisables(bool enable)'''
    def isReadOnly(self):
        '''bool QFileSystemModel.isReadOnly()'''
        return bool()
    def setReadOnly(self, enable):
        '''void QFileSystemModel.setReadOnly(bool enable)'''
    def resolveSymlinks(self):
        '''bool QFileSystemModel.resolveSymlinks()'''
        return bool()
    def setResolveSymlinks(self, enable):
        '''void QFileSystemModel.setResolveSymlinks(bool enable)'''
    def filter(self):
        '''QDir.Filters QFileSystemModel.filter()'''
        return QDir.Filters()
    def setFilter(self, filters):
        '''void QFileSystemModel.setFilter(QDir.Filters filters)'''
    def iconProvider(self):
        '''QFileIconProvider QFileSystemModel.iconProvider()'''
        return QFileIconProvider()
    def setIconProvider(self, provider):
        '''void QFileSystemModel.setIconProvider(QFileIconProvider provider)'''
    def rootDirectory(self):
        '''QDir QFileSystemModel.rootDirectory()'''
        return QDir()
    def rootPath(self):
        '''QString QFileSystemModel.rootPath()'''
        return QString()
    def setRootPath(self, path):
        '''QModelIndex QFileSystemModel.setRootPath(QString path)'''
        return QModelIndex()
    def supportedDropActions(self):
        '''Qt.DropActions QFileSystemModel.supportedDropActions()'''
        return Qt.DropActions()
    def dropMimeData(self, data, action, row, column, parent):
        '''bool QFileSystemModel.dropMimeData(QMimeData data, Qt.DropAction action, int row, int column, QModelIndex parent)'''
        return bool()
    def mimeData(self, indexes):
        '''QMimeData QFileSystemModel.mimeData(list-of-QModelIndex indexes)'''
        return QMimeData()
    def mimeTypes(self):
        '''QStringList QFileSystemModel.mimeTypes()'''
        return QStringList()
    def sort(self, column, order = None):
        '''void QFileSystemModel.sort(int column, Qt.SortOrder order = Qt.AscendingOrder)'''
    def flags(self, index):
        '''Qt.ItemFlags QFileSystemModel.flags(QModelIndex index)'''
        return Qt.ItemFlags()
    def headerData(self, section, orientation, role = None):
        '''QVariant QFileSystemModel.headerData(int section, Qt.Orientation orientation, int role = Qt.DisplayRole)'''
        return QVariant()
    def setData(self, idx, value, role = None):
        '''bool QFileSystemModel.setData(QModelIndex idx, QVariant value, int role = Qt.EditRole)'''
        return bool()
    def data(self, index, role = None):
        '''QVariant QFileSystemModel.data(QModelIndex index, int role = Qt.DisplayRole)'''
        return QVariant()
    def myComputer(self, role = None):
        '''QVariant QFileSystemModel.myComputer(int role = Qt.DisplayRole)'''
        return QVariant()
    def columnCount(self, parent = QModelIndex()):
        '''int QFileSystemModel.columnCount(QModelIndex parent = QModelIndex())'''
        return int()
    def rowCount(self, parent = QModelIndex()):
        '''int QFileSystemModel.rowCount(QModelIndex parent = QModelIndex())'''
        return int()
    def fetchMore(self, parent):
        '''void QFileSystemModel.fetchMore(QModelIndex parent)'''
    def canFetchMore(self, parent):
        '''bool QFileSystemModel.canFetchMore(QModelIndex parent)'''
        return bool()
    def hasChildren(self, parent = QModelIndex()):
        '''bool QFileSystemModel.hasChildren(QModelIndex parent = QModelIndex())'''
        return bool()
    def parent(self, child):
        '''QModelIndex QFileSystemModel.parent(QModelIndex child)'''
        return QModelIndex()
    def index(self, row, column, parent = QModelIndex()):
        '''QModelIndex QFileSystemModel.index(int row, int column, QModelIndex parent = QModelIndex())'''
        return QModelIndex()
    def index(self, path, column = 0):
        '''QModelIndex QFileSystemModel.index(QString path, int column = 0)'''
        return QModelIndex()


class QFocusFrame(QWidget):
    """"""
    def __init__(self, parent = None):
        '''void QFocusFrame.__init__(QWidget parent = None)'''
    def paintEvent(self):
        '''QPaintEvent QFocusFrame.paintEvent()'''
        return QPaintEvent()
    def event(self, e):
        '''bool QFocusFrame.event(QEvent e)'''
        return bool()
    def eventFilter(self):
        '''QEvent QFocusFrame.eventFilter()'''
        return QEvent()
    def initStyleOption(self, option):
        '''void QFocusFrame.initStyleOption(QStyleOption option)'''
    def widget(self):
        '''QWidget QFocusFrame.widget()'''
        return QWidget()
    def setWidget(self, widget):
        '''void QFocusFrame.setWidget(QWidget widget)'''


class QFont():
    """"""
    # Enum QFont.HintingPreference
    PreferDefaultHinting = 0
    PreferNoHinting = 0
    PreferVerticalHinting = 0
    PreferFullHinting = 0

    # Enum QFont.SpacingType
    PercentageSpacing = 0
    AbsoluteSpacing = 0

    # Enum QFont.Capitalization
    MixedCase = 0
    AllUppercase = 0
    AllLowercase = 0
    SmallCaps = 0
    Capitalize = 0

    # Enum QFont.Stretch
    UltraCondensed = 0
    ExtraCondensed = 0
    Condensed = 0
    SemiCondensed = 0
    Unstretched = 0
    SemiExpanded = 0
    Expanded = 0
    ExtraExpanded = 0
    UltraExpanded = 0

    # Enum QFont.Style
    StyleNormal = 0
    StyleItalic = 0
    StyleOblique = 0

    # Enum QFont.Weight
    Light = 0
    Normal = 0
    DemiBold = 0
    Bold = 0
    Black = 0

    # Enum QFont.StyleStrategy
    PreferDefault = 0
    PreferBitmap = 0
    PreferDevice = 0
    PreferOutline = 0
    ForceOutline = 0
    PreferMatch = 0
    PreferQuality = 0
    PreferAntialias = 0
    NoAntialias = 0
    OpenGLCompatible = 0
    NoFontMerging = 0
    ForceIntegerMetrics = 0

    # Enum QFont.StyleHint
    Helvetica = 0
    SansSerif = 0
    Times = 0
    Serif = 0
    Courier = 0
    TypeWriter = 0
    OldEnglish = 0
    Decorative = 0
    System = 0
    AnyStyle = 0
    Cursive = 0
    Monospace = 0
    Fantasy = 0

    def __init__(self):
        '''void QFont.__init__()'''
    def __init__(self, family, pointSize = None, weight = None, italic = False):
        '''void QFont.__init__(QString family, int pointSize = -1, int weight = -1, bool italic = False)'''
    def __init__(self, pd):
        '''QFont QFont.__init__(QPaintDevice pd)'''
        return QFont()
    def __init__(self):
        '''QFont QFont.__init__()'''
        return QFont()
    def __init__(self, variant):
        '''void QFont.__init__(QVariant variant)'''
    def __ge__(self):
        '''QFont QFont.__ge__()'''
        return QFont()
    def hintingPreference(self):
        '''QFont.HintingPreference QFont.hintingPreference()'''
        return QFont.HintingPreference()
    def setHintingPreference(self, hintingPreference):
        '''void QFont.setHintingPreference(QFont.HintingPreference hintingPreference)'''
    def setStyleName(self, styleName):
        '''void QFont.setStyleName(QString styleName)'''
    def styleName(self):
        '''QString QFont.styleName()'''
        return QString()
    def capitalization(self):
        '''QFont.Capitalization QFont.capitalization()'''
        return QFont.Capitalization()
    def setCapitalization(self):
        '''QFont.Capitalization QFont.setCapitalization()'''
        return QFont.Capitalization()
    def setWordSpacing(self, spacing):
        '''void QFont.setWordSpacing(float spacing)'''
    def wordSpacing(self):
        '''float QFont.wordSpacing()'''
        return float()
    def setLetterSpacing(self, type, spacing):
        '''void QFont.setLetterSpacing(QFont.SpacingType type, float spacing)'''
    def letterSpacingType(self):
        '''QFont.SpacingType QFont.letterSpacingType()'''
        return QFont.SpacingType()
    def letterSpacing(self):
        '''float QFont.letterSpacing()'''
        return float()
    def setItalic(self, b):
        '''void QFont.setItalic(bool b)'''
    def italic(self):
        '''bool QFont.italic()'''
        return bool()
    def setBold(self, enable):
        '''void QFont.setBold(bool enable)'''
    def bold(self):
        '''bool QFont.bold()'''
        return bool()
    def resolve(self):
        '''QFont QFont.resolve()'''
        return QFont()
    def lastResortFont(self):
        '''QString QFont.lastResortFont()'''
        return QString()
    def lastResortFamily(self):
        '''QString QFont.lastResortFamily()'''
        return QString()
    def defaultFamily(self):
        '''QString QFont.defaultFamily()'''
        return QString()
    def cacheStatistics(self):
        '''static void QFont.cacheStatistics()'''
    def cleanup(self):
        '''static void QFont.cleanup()'''
    def initialize(self):
        '''static void QFont.initialize()'''
    def removeSubstitution(self):
        '''static QString QFont.removeSubstitution()'''
        return QString()
    def insertSubstitutions(self):
        '''static QStringList QFont.insertSubstitutions()'''
        return QStringList()
    def insertSubstitution(self):
        '''static QString QFont.insertSubstitution()'''
        return QString()
    def substitutions(self):
        '''static QStringList QFont.substitutions()'''
        return QStringList()
    def substitutes(self):
        '''static QString QFont.substitutes()'''
        return QString()
    def substitute(self):
        '''static QString QFont.substitute()'''
        return QString()
    def fromString(self):
        '''QString QFont.fromString()'''
        return QString()
    def toString(self):
        '''QString QFont.toString()'''
        return QString()
    def key(self):
        '''QString QFont.key()'''
        return QString()
    def rawName(self):
        '''QString QFont.rawName()'''
        return QString()
    def setRawName(self):
        '''QString QFont.setRawName()'''
        return QString()
    def handle(self):
        '''int QFont.handle()'''
        return int()
    def isCopyOf(self):
        '''QFont QFont.isCopyOf()'''
        return QFont()
    def __lt__(self):
        '''QFont QFont.__lt__()'''
        return QFont()
    def __ne__(self):
        '''QFont QFont.__ne__()'''
        return QFont()
    def __eq__(self):
        '''QFont QFont.__eq__()'''
        return QFont()
    def exactMatch(self):
        '''bool QFont.exactMatch()'''
        return bool()
    def setRawMode(self):
        '''bool QFont.setRawMode()'''
        return bool()
    def rawMode(self):
        '''bool QFont.rawMode()'''
        return bool()
    def setStretch(self):
        '''int QFont.setStretch()'''
        return int()
    def stretch(self):
        '''int QFont.stretch()'''
        return int()
    def setStyleStrategy(self, s):
        '''void QFont.setStyleStrategy(QFont.StyleStrategy s)'''
    def setStyleHint(self, hint, strategy = None):
        '''void QFont.setStyleHint(QFont.StyleHint hint, QFont.StyleStrategy strategy = QFont.PreferDefault)'''
    def styleStrategy(self):
        '''QFont.StyleStrategy QFont.styleStrategy()'''
        return QFont.StyleStrategy()
    def styleHint(self):
        '''QFont.StyleHint QFont.styleHint()'''
        return QFont.StyleHint()
    def setKerning(self):
        '''bool QFont.setKerning()'''
        return bool()
    def kerning(self):
        '''bool QFont.kerning()'''
        return bool()
    def setFixedPitch(self):
        '''bool QFont.setFixedPitch()'''
        return bool()
    def fixedPitch(self):
        '''bool QFont.fixedPitch()'''
        return bool()
    def setStrikeOut(self):
        '''bool QFont.setStrikeOut()'''
        return bool()
    def strikeOut(self):
        '''bool QFont.strikeOut()'''
        return bool()
    def setOverline(self):
        '''bool QFont.setOverline()'''
        return bool()
    def overline(self):
        '''bool QFont.overline()'''
        return bool()
    def setUnderline(self):
        '''bool QFont.setUnderline()'''
        return bool()
    def underline(self):
        '''bool QFont.underline()'''
        return bool()
    def style(self):
        '''QFont.Style QFont.style()'''
        return QFont.Style()
    def setStyle(self, style):
        '''void QFont.setStyle(QFont.Style style)'''
    def setWeight(self):
        '''int QFont.setWeight()'''
        return int()
    def weight(self):
        '''int QFont.weight()'''
        return int()
    def setPixelSize(self):
        '''int QFont.setPixelSize()'''
        return int()
    def pixelSize(self):
        '''int QFont.pixelSize()'''
        return int()
    def setPointSizeF(self):
        '''float QFont.setPointSizeF()'''
        return float()
    def pointSizeF(self):
        '''float QFont.pointSizeF()'''
        return float()
    def setPointSize(self):
        '''int QFont.setPointSize()'''
        return int()
    def pointSize(self):
        '''int QFont.pointSize()'''
        return int()
    def setFamily(self):
        '''QString QFont.setFamily()'''
        return QString()
    def family(self):
        '''QString QFont.family()'''
        return QString()


class QFontComboBox(QComboBox):
    """"""
    # Enum QFontComboBox.FontFilter
    AllFonts = 0
    ScalableFonts = 0
    NonScalableFonts = 0
    MonospacedFonts = 0
    ProportionalFonts = 0

    def __init__(self, parent = None):
        '''void QFontComboBox.__init__(QWidget parent = None)'''
    def event(self, e):
        '''bool QFontComboBox.event(QEvent e)'''
        return bool()
    currentFontChanged = pyqtSignal() # void currentFontChanged(const QFontamp;) - signal
    def setCurrentFont(self, f):
        '''void QFontComboBox.setCurrentFont(QFont f)'''
    def sizeHint(self):
        '''QSize QFontComboBox.sizeHint()'''
        return QSize()
    def currentFont(self):
        '''QFont QFontComboBox.currentFont()'''
        return QFont()
    def setFontFilters(self, filters):
        '''void QFontComboBox.setFontFilters(QFontComboBox.FontFilters filters)'''
    def writingSystem(self):
        '''QFontDatabase.WritingSystem QFontComboBox.writingSystem()'''
        return QFontDatabase.WritingSystem()
    def setWritingSystem(self):
        '''QFontDatabase.WritingSystem QFontComboBox.setWritingSystem()'''
        return QFontDatabase.WritingSystem()
    def fontFilters(self):
        '''QFontComboBox.FontFilters QFontComboBox.fontFilters()'''
        return QFontComboBox.FontFilters()
    class FontFilters():
        """"""
        def __init__(self):
            '''QFontComboBox.FontFilters QFontComboBox.FontFilters.__init__()'''
            return QFontComboBox.FontFilters()
        def __init__(self):
            '''int QFontComboBox.FontFilters.__init__()'''
            return int()
        def __init__(self):
            '''void QFontComboBox.FontFilters.__init__()'''
        def __bool__(self):
            '''int QFontComboBox.FontFilters.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QFontComboBox.FontFilters.__ne__(QFontComboBox.FontFilters f)'''
            return bool()
        def __eq__(self, f):
            '''bool QFontComboBox.FontFilters.__eq__(QFontComboBox.FontFilters f)'''
            return bool()
        def __invert__(self):
            '''QFontComboBox.FontFilters QFontComboBox.FontFilters.__invert__()'''
            return QFontComboBox.FontFilters()
        def __and__(self, mask):
            '''QFontComboBox.FontFilters QFontComboBox.FontFilters.__and__(int mask)'''
            return QFontComboBox.FontFilters()
        def __xor__(self, f):
            '''QFontComboBox.FontFilters QFontComboBox.FontFilters.__xor__(QFontComboBox.FontFilters f)'''
            return QFontComboBox.FontFilters()
        def __xor__(self, f):
            '''QFontComboBox.FontFilters QFontComboBox.FontFilters.__xor__(int f)'''
            return QFontComboBox.FontFilters()
        def __or__(self, f):
            '''QFontComboBox.FontFilters QFontComboBox.FontFilters.__or__(QFontComboBox.FontFilters f)'''
            return QFontComboBox.FontFilters()
        def __or__(self, f):
            '''QFontComboBox.FontFilters QFontComboBox.FontFilters.__or__(int f)'''
            return QFontComboBox.FontFilters()
        def __int__(self):
            '''int QFontComboBox.FontFilters.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QFontComboBox.FontFilters QFontComboBox.FontFilters.__ixor__(QFontComboBox.FontFilters f)'''
            return QFontComboBox.FontFilters()
        def __ior__(self, f):
            '''QFontComboBox.FontFilters QFontComboBox.FontFilters.__ior__(QFontComboBox.FontFilters f)'''
            return QFontComboBox.FontFilters()
        def __iand__(self, mask):
            '''QFontComboBox.FontFilters QFontComboBox.FontFilters.__iand__(int mask)'''
            return QFontComboBox.FontFilters()


class QFontDatabase():
    """"""
    # Enum QFontDatabase.WritingSystem
    Any = 0
    Latin = 0
    Greek = 0
    Cyrillic = 0
    Armenian = 0
    Hebrew = 0
    Arabic = 0
    Syriac = 0
    Thaana = 0
    Devanagari = 0
    Bengali = 0
    Gurmukhi = 0
    Gujarati = 0
    Oriya = 0
    Tamil = 0
    Telugu = 0
    Kannada = 0
    Malayalam = 0
    Sinhala = 0
    Thai = 0
    Lao = 0
    Tibetan = 0
    Myanmar = 0
    Georgian = 0
    Khmer = 0
    SimplifiedChinese = 0
    TraditionalChinese = 0
    Japanese = 0
    Korean = 0
    Vietnamese = 0
    Other = 0
    Symbol = 0
    Ogham = 0
    Runic = 0
    Nko = 0

    def __init__(self):
        '''void QFontDatabase.__init__()'''
    def __init__(self):
        '''QFontDatabase QFontDatabase.__init__()'''
        return QFontDatabase()
    def supportsThreadedFontRendering(self):
        '''static bool QFontDatabase.supportsThreadedFontRendering()'''
        return bool()
    def removeAllApplicationFonts(self):
        '''static bool QFontDatabase.removeAllApplicationFonts()'''
        return bool()
    def removeApplicationFont(self, id):
        '''static bool QFontDatabase.removeApplicationFont(int id)'''
        return bool()
    def applicationFontFamilies(self, id):
        '''static QStringList QFontDatabase.applicationFontFamilies(int id)'''
        return QStringList()
    def addApplicationFontFromData(self, fontData):
        '''static int QFontDatabase.addApplicationFontFromData(QByteArray fontData)'''
        return int()
    def addApplicationFont(self, fileName):
        '''static int QFontDatabase.addApplicationFont(QString fileName)'''
        return int()
    def writingSystemSample(self, writingSystem):
        '''static QString QFontDatabase.writingSystemSample(QFontDatabase.WritingSystem writingSystem)'''
        return QString()
    def writingSystemName(self, writingSystem):
        '''static QString QFontDatabase.writingSystemName(QFontDatabase.WritingSystem writingSystem)'''
        return QString()
    def weight(self, family, style):
        '''int QFontDatabase.weight(QString family, QString style)'''
        return int()
    def bold(self, family, style):
        '''bool QFontDatabase.bold(QString family, QString style)'''
        return bool()
    def italic(self, family, style):
        '''bool QFontDatabase.italic(QString family, QString style)'''
        return bool()
    def isFixedPitch(self, family, style = QString()):
        '''bool QFontDatabase.isFixedPitch(QString family, QString style = QString())'''
        return bool()
    def isScalable(self, family, style = QString()):
        '''bool QFontDatabase.isScalable(QString family, QString style = QString())'''
        return bool()
    def isSmoothlyScalable(self, family, style = QString()):
        '''bool QFontDatabase.isSmoothlyScalable(QString family, QString style = QString())'''
        return bool()
    def isBitmapScalable(self, family, style = QString()):
        '''bool QFontDatabase.isBitmapScalable(QString family, QString style = QString())'''
        return bool()
    def font(self, family, style, pointSize):
        '''QFont QFontDatabase.font(QString family, QString style, int pointSize)'''
        return QFont()
    def styleString(self, font):
        '''QString QFontDatabase.styleString(QFont font)'''
        return QString()
    def styleString(self, fontInfo):
        '''QString QFontDatabase.styleString(QFontInfo fontInfo)'''
        return QString()
    def smoothSizes(self, family, style):
        '''list-of-int QFontDatabase.smoothSizes(QString family, QString style)'''
        return [int()]
    def pointSizes(self, family, style = QString()):
        '''list-of-int QFontDatabase.pointSizes(QString family, QString style = QString())'''
        return [int()]
    def styles(self, family):
        '''QStringList QFontDatabase.styles(QString family)'''
        return QStringList()
    def families(self, writingSystem = None):
        '''QStringList QFontDatabase.families(QFontDatabase.WritingSystem writingSystem = QFontDatabase.Any)'''
        return QStringList()
    def writingSystems(self):
        '''list-of-QFontDatabase.WritingSystem QFontDatabase.writingSystems()'''
        return [QFontDatabase.WritingSystem()]
    def writingSystems(self, family):
        '''list-of-QFontDatabase.WritingSystem QFontDatabase.writingSystems(QString family)'''
        return [QFontDatabase.WritingSystem()]
    def standardSizes(self):
        '''static list-of-int QFontDatabase.standardSizes()'''
        return [int()]


class QFontDialog(QDialog):
    """"""
    # Enum QFontDialog.FontDialogOption
    NoButtons = 0
    DontUseNativeDialog = 0

    def __init__(self, parent = None):
        '''void QFontDialog.__init__(QWidget parent = None)'''
    def __init__(self, initial, parent = None):
        '''void QFontDialog.__init__(QFont initial, QWidget parent = None)'''
    fontSelected = pyqtSignal() # void fontSelected(const QFontamp;) - signal
    currentFontChanged = pyqtSignal() # void currentFontChanged(const QFontamp;) - signal
    def setVisible(self, visible):
        '''void QFontDialog.setVisible(bool visible)'''
    def open(self):
        '''void QFontDialog.open()'''
    def open(self, receiver, member):
        '''void QFontDialog.open(QObject receiver, SLOT() member)'''
    def open(self, receiver):
        '''void QFontDialog.open(callable receiver)'''
    def options(self):
        '''QFontDialog.FontDialogOptions QFontDialog.options()'''
        return QFontDialog.FontDialogOptions()
    def setOptions(self, options):
        '''void QFontDialog.setOptions(QFontDialog.FontDialogOptions options)'''
    def testOption(self, option):
        '''bool QFontDialog.testOption(QFontDialog.FontDialogOption option)'''
        return bool()
    def setOption(self, option, on = True):
        '''void QFontDialog.setOption(QFontDialog.FontDialogOption option, bool on = True)'''
    def selectedFont(self):
        '''QFont QFontDialog.selectedFont()'''
        return QFont()
    def currentFont(self):
        '''QFont QFontDialog.currentFont()'''
        return QFont()
    def setCurrentFont(self, font):
        '''void QFontDialog.setCurrentFont(QFont font)'''
    def done(self, result):
        '''void QFontDialog.done(int result)'''
    def changeEvent(self, e):
        '''void QFontDialog.changeEvent(QEvent e)'''
    def getFont(self, ok, initial, parent, title, options):
        '''static QFont QFontDialog.getFont(bool ok, QFont initial, QWidget parent, QString title, QFontDialog.FontDialogOptions options)'''
        return QFont()
    def getFont(self, ok, def_, parent, caption):
        '''static QFont QFontDialog.getFont(bool ok, QFont def, QWidget parent, QString caption)'''
        return QFont()
    def getFont(self, ok, initial, parent = None):
        '''static QFont QFontDialog.getFont(bool ok, QFont initial, QWidget parent = None)'''
        return QFont()
    def getFont(self, ok, parent = None):
        '''static QFont QFontDialog.getFont(bool ok, QWidget parent = None)'''
        return QFont()
    class FontDialogOptions():
        """"""
        def __init__(self):
            '''QFontDialog.FontDialogOptions QFontDialog.FontDialogOptions.__init__()'''
            return QFontDialog.FontDialogOptions()
        def __init__(self):
            '''int QFontDialog.FontDialogOptions.__init__()'''
            return int()
        def __init__(self):
            '''void QFontDialog.FontDialogOptions.__init__()'''
        def __bool__(self):
            '''int QFontDialog.FontDialogOptions.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QFontDialog.FontDialogOptions.__ne__(QFontDialog.FontDialogOptions f)'''
            return bool()
        def __eq__(self, f):
            '''bool QFontDialog.FontDialogOptions.__eq__(QFontDialog.FontDialogOptions f)'''
            return bool()
        def __invert__(self):
            '''QFontDialog.FontDialogOptions QFontDialog.FontDialogOptions.__invert__()'''
            return QFontDialog.FontDialogOptions()
        def __and__(self, mask):
            '''QFontDialog.FontDialogOptions QFontDialog.FontDialogOptions.__and__(int mask)'''
            return QFontDialog.FontDialogOptions()
        def __xor__(self, f):
            '''QFontDialog.FontDialogOptions QFontDialog.FontDialogOptions.__xor__(QFontDialog.FontDialogOptions f)'''
            return QFontDialog.FontDialogOptions()
        def __xor__(self, f):
            '''QFontDialog.FontDialogOptions QFontDialog.FontDialogOptions.__xor__(int f)'''
            return QFontDialog.FontDialogOptions()
        def __or__(self, f):
            '''QFontDialog.FontDialogOptions QFontDialog.FontDialogOptions.__or__(QFontDialog.FontDialogOptions f)'''
            return QFontDialog.FontDialogOptions()
        def __or__(self, f):
            '''QFontDialog.FontDialogOptions QFontDialog.FontDialogOptions.__or__(int f)'''
            return QFontDialog.FontDialogOptions()
        def __int__(self):
            '''int QFontDialog.FontDialogOptions.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QFontDialog.FontDialogOptions QFontDialog.FontDialogOptions.__ixor__(QFontDialog.FontDialogOptions f)'''
            return QFontDialog.FontDialogOptions()
        def __ior__(self, f):
            '''QFontDialog.FontDialogOptions QFontDialog.FontDialogOptions.__ior__(QFontDialog.FontDialogOptions f)'''
            return QFontDialog.FontDialogOptions()
        def __iand__(self, mask):
            '''QFontDialog.FontDialogOptions QFontDialog.FontDialogOptions.__iand__(int mask)'''
            return QFontDialog.FontDialogOptions()


class QFontInfo():
    """"""
    def __init__(self):
        '''QFont QFontInfo.__init__()'''
        return QFont()
    def __init__(self):
        '''QFontInfo QFontInfo.__init__()'''
        return QFontInfo()
    def styleName(self):
        '''QString QFontInfo.styleName()'''
        return QString()
    def exactMatch(self):
        '''bool QFontInfo.exactMatch()'''
        return bool()
    def rawMode(self):
        '''bool QFontInfo.rawMode()'''
        return bool()
    def styleHint(self):
        '''QFont.StyleHint QFontInfo.styleHint()'''
        return QFont.StyleHint()
    def fixedPitch(self):
        '''bool QFontInfo.fixedPitch()'''
        return bool()
    def bold(self):
        '''bool QFontInfo.bold()'''
        return bool()
    def weight(self):
        '''int QFontInfo.weight()'''
        return int()
    def style(self):
        '''QFont.Style QFontInfo.style()'''
        return QFont.Style()
    def italic(self):
        '''bool QFontInfo.italic()'''
        return bool()
    def pointSizeF(self):
        '''float QFontInfo.pointSizeF()'''
        return float()
    def pointSize(self):
        '''int QFontInfo.pointSize()'''
        return int()
    def pixelSize(self):
        '''int QFontInfo.pixelSize()'''
        return int()
    def family(self):
        '''QString QFontInfo.family()'''
        return QString()


class QFontMetrics():
    """"""
    def __init__(self):
        '''QFont QFontMetrics.__init__()'''
        return QFont()
    def __init__(self, pd):
        '''QFont QFontMetrics.__init__(QPaintDevice pd)'''
        return QFont()
    def __init__(self):
        '''QFontMetrics QFontMetrics.__init__()'''
        return QFontMetrics()
    def inFontUcs4(self, character):
        '''bool QFontMetrics.inFontUcs4(int character)'''
        return bool()
    def tightBoundingRect(self, text):
        '''QRect QFontMetrics.tightBoundingRect(QString text)'''
        return QRect()
    def __ne__(self, other):
        '''bool QFontMetrics.__ne__(QFontMetrics other)'''
        return bool()
    def __eq__(self, other):
        '''bool QFontMetrics.__eq__(QFontMetrics other)'''
        return bool()
    def elidedText(self, text, mode, width, flags = 0):
        '''QString QFontMetrics.elidedText(QString text, Qt.TextElideMode mode, int width, int flags = 0)'''
        return QString()
    def averageCharWidth(self):
        '''int QFontMetrics.averageCharWidth()'''
        return int()
    def lineWidth(self):
        '''int QFontMetrics.lineWidth()'''
        return int()
    def strikeOutPos(self):
        '''int QFontMetrics.strikeOutPos()'''
        return int()
    def overlinePos(self):
        '''int QFontMetrics.overlinePos()'''
        return int()
    def underlinePos(self):
        '''int QFontMetrics.underlinePos()'''
        return int()
    def size(self, flags, text, tabStops = 0, tabArray = 0):
        '''QSize QFontMetrics.size(int flags, QString text, int tabStops = 0, list-of-int tabArray = 0)'''
        return QSize()
    def boundingRect(self):
        '''QChar QFontMetrics.boundingRect()'''
        return QChar()
    def boundingRect(self, text):
        '''QRect QFontMetrics.boundingRect(QString text)'''
        return QRect()
    def boundingRect(self, rect, flags, text, tabStops = 0, tabArray = 0):
        '''QRect QFontMetrics.boundingRect(QRect rect, int flags, QString text, int tabStops = 0, list-of-int tabArray = 0)'''
        return QRect()
    def boundingRect(self, x, y, width, height, flags, text, tabStops = 0, tabArray = 0):
        '''QRect QFontMetrics.boundingRect(int x, int y, int width, int height, int flags, QString text, int tabStops = 0, list-of-int tabArray = 0)'''
        return QRect()
    def boundingRectChar(self):
        '''QChar QFontMetrics.boundingRectChar()'''
        return QChar()
    def charWidth(self, str, pos):
        '''int QFontMetrics.charWidth(QString str, int pos)'''
        return int()
    def width(self):
        '''QChar QFontMetrics.width()'''
        return QChar()
    def width(self, text, length = None):
        '''int QFontMetrics.width(QString text, int length = -1)'''
        return int()
    def widthChar(self):
        '''QChar QFontMetrics.widthChar()'''
        return QChar()
    def rightBearing(self):
        '''QChar QFontMetrics.rightBearing()'''
        return QChar()
    def leftBearing(self):
        '''QChar QFontMetrics.leftBearing()'''
        return QChar()
    def inFont(self):
        '''QChar QFontMetrics.inFont()'''
        return QChar()
    def xHeight(self):
        '''int QFontMetrics.xHeight()'''
        return int()
    def maxWidth(self):
        '''int QFontMetrics.maxWidth()'''
        return int()
    def minRightBearing(self):
        '''int QFontMetrics.minRightBearing()'''
        return int()
    def minLeftBearing(self):
        '''int QFontMetrics.minLeftBearing()'''
        return int()
    def lineSpacing(self):
        '''int QFontMetrics.lineSpacing()'''
        return int()
    def leading(self):
        '''int QFontMetrics.leading()'''
        return int()
    def height(self):
        '''int QFontMetrics.height()'''
        return int()
    def descent(self):
        '''int QFontMetrics.descent()'''
        return int()
    def ascent(self):
        '''int QFontMetrics.ascent()'''
        return int()


class QFontMetricsF():
    """"""
    def __init__(self):
        '''QFont QFontMetricsF.__init__()'''
        return QFont()
    def __init__(self, pd):
        '''QFont QFontMetricsF.__init__(QPaintDevice pd)'''
        return QFont()
    def __init__(self):
        '''QFontMetrics QFontMetricsF.__init__()'''
        return QFontMetrics()
    def __init__(self):
        '''QFontMetricsF QFontMetricsF.__init__()'''
        return QFontMetricsF()
    def inFontUcs4(self, character):
        '''bool QFontMetricsF.inFontUcs4(int character)'''
        return bool()
    def tightBoundingRect(self, text):
        '''QRectF QFontMetricsF.tightBoundingRect(QString text)'''
        return QRectF()
    def __ne__(self, other):
        '''bool QFontMetricsF.__ne__(QFontMetricsF other)'''
        return bool()
    def __eq__(self, other):
        '''bool QFontMetricsF.__eq__(QFontMetricsF other)'''
        return bool()
    def elidedText(self, text, mode, width, flags = 0):
        '''QString QFontMetricsF.elidedText(QString text, Qt.TextElideMode mode, float width, int flags = 0)'''
        return QString()
    def averageCharWidth(self):
        '''float QFontMetricsF.averageCharWidth()'''
        return float()
    def lineWidth(self):
        '''float QFontMetricsF.lineWidth()'''
        return float()
    def strikeOutPos(self):
        '''float QFontMetricsF.strikeOutPos()'''
        return float()
    def overlinePos(self):
        '''float QFontMetricsF.overlinePos()'''
        return float()
    def underlinePos(self):
        '''float QFontMetricsF.underlinePos()'''
        return float()
    def size(self, flags, text, tabStops = 0, tabArray = 0):
        '''QSizeF QFontMetricsF.size(int flags, QString text, int tabStops = 0, list-of-int tabArray = 0)'''
        return QSizeF()
    def boundingRect(self):
        '''QChar QFontMetricsF.boundingRect()'''
        return QChar()
    def boundingRect(self, string):
        '''QRectF QFontMetricsF.boundingRect(QString string)'''
        return QRectF()
    def boundingRect(self, rect, flags, text, tabStops = 0, tabArray = 0):
        '''QRectF QFontMetricsF.boundingRect(QRectF rect, int flags, QString text, int tabStops = 0, list-of-int tabArray = 0)'''
        return QRectF()
    def boundingRectChar(self):
        '''QChar QFontMetricsF.boundingRectChar()'''
        return QChar()
    def width(self):
        '''QChar QFontMetricsF.width()'''
        return QChar()
    def width(self, string):
        '''float QFontMetricsF.width(QString string)'''
        return float()
    def widthChar(self):
        '''QChar QFontMetricsF.widthChar()'''
        return QChar()
    def rightBearing(self):
        '''QChar QFontMetricsF.rightBearing()'''
        return QChar()
    def leftBearing(self):
        '''QChar QFontMetricsF.leftBearing()'''
        return QChar()
    def inFont(self):
        '''QChar QFontMetricsF.inFont()'''
        return QChar()
    def xHeight(self):
        '''float QFontMetricsF.xHeight()'''
        return float()
    def maxWidth(self):
        '''float QFontMetricsF.maxWidth()'''
        return float()
    def minRightBearing(self):
        '''float QFontMetricsF.minRightBearing()'''
        return float()
    def minLeftBearing(self):
        '''float QFontMetricsF.minLeftBearing()'''
        return float()
    def lineSpacing(self):
        '''float QFontMetricsF.lineSpacing()'''
        return float()
    def leading(self):
        '''float QFontMetricsF.leading()'''
        return float()
    def height(self):
        '''float QFontMetricsF.height()'''
        return float()
    def descent(self):
        '''float QFontMetricsF.descent()'''
        return float()
    def ascent(self):
        '''float QFontMetricsF.ascent()'''
        return float()


class QFormLayout(QLayout):
    """"""
    # Enum QFormLayout.ItemRole
    LabelRole = 0
    FieldRole = 0
    SpanningRole = 0

    # Enum QFormLayout.RowWrapPolicy
    DontWrapRows = 0
    WrapLongRows = 0
    WrapAllRows = 0

    # Enum QFormLayout.FieldGrowthPolicy
    FieldsStayAtSizeHint = 0
    ExpandingFieldsGrow = 0
    AllNonFixedFieldsGrow = 0

    def __init__(self, parent = None):
        '''void QFormLayout.__init__(QWidget parent = None)'''
    def rowCount(self):
        '''int QFormLayout.rowCount()'''
        return int()
    def count(self):
        '''int QFormLayout.count()'''
        return int()
    def expandingDirections(self):
        '''Qt.Orientations QFormLayout.expandingDirections()'''
        return Qt.Orientations()
    def heightForWidth(self, width):
        '''int QFormLayout.heightForWidth(int width)'''
        return int()
    def hasHeightForWidth(self):
        '''bool QFormLayout.hasHeightForWidth()'''
        return bool()
    def invalidate(self):
        '''void QFormLayout.invalidate()'''
    def sizeHint(self):
        '''QSize QFormLayout.sizeHint()'''
        return QSize()
    def minimumSize(self):
        '''QSize QFormLayout.minimumSize()'''
        return QSize()
    def setGeometry(self, rect):
        '''void QFormLayout.setGeometry(QRect rect)'''
    def takeAt(self, index):
        '''QLayoutItem QFormLayout.takeAt(int index)'''
        return QLayoutItem()
    def addItem(self, item):
        '''void QFormLayout.addItem(QLayoutItem item)'''
    def labelForField(self, field):
        '''QWidget QFormLayout.labelForField(QWidget field)'''
        return QWidget()
    def labelForField(self, field):
        '''QWidget QFormLayout.labelForField(QLayout field)'''
        return QWidget()
    def getLayoutPosition(self, layout, rowPtr, rolePtr):
        '''void QFormLayout.getLayoutPosition(QLayout layout, int rowPtr, QFormLayout.ItemRole rolePtr)'''
    def getWidgetPosition(self, widget, rowPtr, rolePtr):
        '''void QFormLayout.getWidgetPosition(QWidget widget, int rowPtr, QFormLayout.ItemRole rolePtr)'''
    def getItemPosition(self, index, rowPtr, rolePtr):
        '''void QFormLayout.getItemPosition(int index, int rowPtr, QFormLayout.ItemRole rolePtr)'''
    def itemAt(self, row, role):
        '''QLayoutItem QFormLayout.itemAt(int row, QFormLayout.ItemRole role)'''
        return QLayoutItem()
    def itemAt(self, index):
        '''QLayoutItem QFormLayout.itemAt(int index)'''
        return QLayoutItem()
    def setLayout(self, row, role, layout):
        '''void QFormLayout.setLayout(int row, QFormLayout.ItemRole role, QLayout layout)'''
    def setWidget(self, row, role, widget):
        '''void QFormLayout.setWidget(int row, QFormLayout.ItemRole role, QWidget widget)'''
    def setItem(self, row, role, item):
        '''void QFormLayout.setItem(int row, QFormLayout.ItemRole role, QLayoutItem item)'''
    def insertRow(self, row, label, field):
        '''void QFormLayout.insertRow(int row, QWidget label, QWidget field)'''
    def insertRow(self, row, label, field):
        '''void QFormLayout.insertRow(int row, QWidget label, QLayout field)'''
    def insertRow(self, row, labelText, field):
        '''void QFormLayout.insertRow(int row, QString labelText, QWidget field)'''
    def insertRow(self, row, labelText, field):
        '''void QFormLayout.insertRow(int row, QString labelText, QLayout field)'''
    def insertRow(self, row, widget):
        '''void QFormLayout.insertRow(int row, QWidget widget)'''
    def insertRow(self, row, layout):
        '''void QFormLayout.insertRow(int row, QLayout layout)'''
    def addRow(self, label, field):
        '''void QFormLayout.addRow(QWidget label, QWidget field)'''
    def addRow(self, label, field):
        '''void QFormLayout.addRow(QWidget label, QLayout field)'''
    def addRow(self, labelText, field):
        '''void QFormLayout.addRow(QString labelText, QWidget field)'''
    def addRow(self, labelText, field):
        '''void QFormLayout.addRow(QString labelText, QLayout field)'''
    def addRow(self, widget):
        '''void QFormLayout.addRow(QWidget widget)'''
    def addRow(self, layout):
        '''void QFormLayout.addRow(QLayout layout)'''
    def setSpacing(self):
        '''int QFormLayout.setSpacing()'''
        return int()
    def spacing(self):
        '''int QFormLayout.spacing()'''
        return int()
    def verticalSpacing(self):
        '''int QFormLayout.verticalSpacing()'''
        return int()
    def setVerticalSpacing(self, spacing):
        '''void QFormLayout.setVerticalSpacing(int spacing)'''
    def horizontalSpacing(self):
        '''int QFormLayout.horizontalSpacing()'''
        return int()
    def setHorizontalSpacing(self, spacing):
        '''void QFormLayout.setHorizontalSpacing(int spacing)'''
    def formAlignment(self):
        '''Qt.Alignment QFormLayout.formAlignment()'''
        return Qt.Alignment()
    def setFormAlignment(self, alignment):
        '''void QFormLayout.setFormAlignment(Qt.Alignment alignment)'''
    def labelAlignment(self):
        '''Qt.Alignment QFormLayout.labelAlignment()'''
        return Qt.Alignment()
    def setLabelAlignment(self, alignment):
        '''void QFormLayout.setLabelAlignment(Qt.Alignment alignment)'''
    def rowWrapPolicy(self):
        '''QFormLayout.RowWrapPolicy QFormLayout.rowWrapPolicy()'''
        return QFormLayout.RowWrapPolicy()
    def setRowWrapPolicy(self, policy):
        '''void QFormLayout.setRowWrapPolicy(QFormLayout.RowWrapPolicy policy)'''
    def fieldGrowthPolicy(self):
        '''QFormLayout.FieldGrowthPolicy QFormLayout.fieldGrowthPolicy()'''
        return QFormLayout.FieldGrowthPolicy()
    def setFieldGrowthPolicy(self, policy):
        '''void QFormLayout.setFieldGrowthPolicy(QFormLayout.FieldGrowthPolicy policy)'''


class QMatrix4x3():
    """"""
    def __init__(self):
        '''void QMatrix4x3.__init__()'''
    def __init__(self, other):
        '''void QMatrix4x3.__init__(QMatrix4x3 other)'''
    def __init__(self, values):
        '''void QMatrix4x3.__init__(sequence-of-float values)'''
    def __ne__(self):
        '''QMatrix4x3 QMatrix4x3.__ne__()'''
        return QMatrix4x3()
    def __eq__(self):
        '''QMatrix4x3 QMatrix4x3.__eq__()'''
        return QMatrix4x3()
    def __idiv__(self):
        '''float QMatrix4x3.__idiv__()'''
        return float()
    def __imul__(self):
        '''float QMatrix4x3.__imul__()'''
        return float()
    def __isub__(self):
        '''QMatrix4x3 QMatrix4x3.__isub__()'''
        return QMatrix4x3()
    def __iadd__(self):
        '''QMatrix4x3 QMatrix4x3.__iadd__()'''
        return QMatrix4x3()
    def transposed(self):
        '''QMatrix3x4 QMatrix4x3.transposed()'''
        return QMatrix3x4()
    def fill(self, value):
        '''void QMatrix4x3.fill(float value)'''
    def setToIdentity(self):
        '''void QMatrix4x3.setToIdentity()'''
    def isIdentity(self):
        '''bool QMatrix4x3.isIdentity()'''
        return bool()
    def __setitem__(self):
        '''float QMatrix4x3.__setitem__()'''
        return float()
    def __getitem__(self):
        '''object QMatrix4x3.__getitem__()'''
        return object()
    def copyDataTo(self):
        '''list-of-float QMatrix4x3.copyDataTo()'''
        return [float()]
    def data(self):
        '''list-of-float QMatrix4x3.data()'''
        return [float()]
    def __repr__(self):
        '''str QMatrix4x3.__repr__()'''
        return str()


class QMatrix4x2():
    """"""
    def __init__(self):
        '''void QMatrix4x2.__init__()'''
    def __init__(self, other):
        '''void QMatrix4x2.__init__(QMatrix4x2 other)'''
    def __init__(self, values):
        '''void QMatrix4x2.__init__(sequence-of-float values)'''
    def __ne__(self):
        '''QMatrix4x2 QMatrix4x2.__ne__()'''
        return QMatrix4x2()
    def __eq__(self):
        '''QMatrix4x2 QMatrix4x2.__eq__()'''
        return QMatrix4x2()
    def __idiv__(self):
        '''float QMatrix4x2.__idiv__()'''
        return float()
    def __imul__(self):
        '''float QMatrix4x2.__imul__()'''
        return float()
    def __isub__(self):
        '''QMatrix4x2 QMatrix4x2.__isub__()'''
        return QMatrix4x2()
    def __iadd__(self):
        '''QMatrix4x2 QMatrix4x2.__iadd__()'''
        return QMatrix4x2()
    def transposed(self):
        '''QMatrix2x4 QMatrix4x2.transposed()'''
        return QMatrix2x4()
    def fill(self, value):
        '''void QMatrix4x2.fill(float value)'''
    def setToIdentity(self):
        '''void QMatrix4x2.setToIdentity()'''
    def isIdentity(self):
        '''bool QMatrix4x2.isIdentity()'''
        return bool()
    def __setitem__(self):
        '''float QMatrix4x2.__setitem__()'''
        return float()
    def __getitem__(self):
        '''object QMatrix4x2.__getitem__()'''
        return object()
    def copyDataTo(self):
        '''list-of-float QMatrix4x2.copyDataTo()'''
        return [float()]
    def data(self):
        '''list-of-float QMatrix4x2.data()'''
        return [float()]
    def __repr__(self):
        '''str QMatrix4x2.__repr__()'''
        return str()


class QMatrix3x4():
    """"""
    def __init__(self):
        '''void QMatrix3x4.__init__()'''
    def __init__(self, other):
        '''void QMatrix3x4.__init__(QMatrix3x4 other)'''
    def __init__(self, values):
        '''void QMatrix3x4.__init__(sequence-of-float values)'''
    def __ne__(self):
        '''QMatrix3x4 QMatrix3x4.__ne__()'''
        return QMatrix3x4()
    def __eq__(self):
        '''QMatrix3x4 QMatrix3x4.__eq__()'''
        return QMatrix3x4()
    def __idiv__(self):
        '''float QMatrix3x4.__idiv__()'''
        return float()
    def __imul__(self):
        '''float QMatrix3x4.__imul__()'''
        return float()
    def __isub__(self):
        '''QMatrix3x4 QMatrix3x4.__isub__()'''
        return QMatrix3x4()
    def __iadd__(self):
        '''QMatrix3x4 QMatrix3x4.__iadd__()'''
        return QMatrix3x4()
    def transposed(self):
        '''QMatrix4x3 QMatrix3x4.transposed()'''
        return QMatrix4x3()
    def fill(self, value):
        '''void QMatrix3x4.fill(float value)'''
    def setToIdentity(self):
        '''void QMatrix3x4.setToIdentity()'''
    def isIdentity(self):
        '''bool QMatrix3x4.isIdentity()'''
        return bool()
    def __setitem__(self):
        '''float QMatrix3x4.__setitem__()'''
        return float()
    def __getitem__(self):
        '''object QMatrix3x4.__getitem__()'''
        return object()
    def copyDataTo(self):
        '''list-of-float QMatrix3x4.copyDataTo()'''
        return [float()]
    def data(self):
        '''list-of-float QMatrix3x4.data()'''
        return [float()]
    def __repr__(self):
        '''str QMatrix3x4.__repr__()'''
        return str()


class QMatrix3x3():
    """"""
    def __init__(self):
        '''void QMatrix3x3.__init__()'''
    def __init__(self, other):
        '''void QMatrix3x3.__init__(QMatrix3x3 other)'''
    def __init__(self, values):
        '''void QMatrix3x3.__init__(sequence-of-float values)'''
    def __ne__(self):
        '''QMatrix3x3 QMatrix3x3.__ne__()'''
        return QMatrix3x3()
    def __eq__(self):
        '''QMatrix3x3 QMatrix3x3.__eq__()'''
        return QMatrix3x3()
    def __idiv__(self):
        '''float QMatrix3x3.__idiv__()'''
        return float()
    def __imul__(self):
        '''float QMatrix3x3.__imul__()'''
        return float()
    def __isub__(self):
        '''QMatrix3x3 QMatrix3x3.__isub__()'''
        return QMatrix3x3()
    def __iadd__(self):
        '''QMatrix3x3 QMatrix3x3.__iadd__()'''
        return QMatrix3x3()
    def transposed(self):
        '''QMatrix3x3 QMatrix3x3.transposed()'''
        return QMatrix3x3()
    def fill(self, value):
        '''void QMatrix3x3.fill(float value)'''
    def setToIdentity(self):
        '''void QMatrix3x3.setToIdentity()'''
    def isIdentity(self):
        '''bool QMatrix3x3.isIdentity()'''
        return bool()
    def __setitem__(self):
        '''float QMatrix3x3.__setitem__()'''
        return float()
    def __getitem__(self):
        '''object QMatrix3x3.__getitem__()'''
        return object()
    def copyDataTo(self):
        '''list-of-float QMatrix3x3.copyDataTo()'''
        return [float()]
    def data(self):
        '''list-of-float QMatrix3x3.data()'''
        return [float()]
    def __repr__(self):
        '''str QMatrix3x3.__repr__()'''
        return str()


class QMatrix3x2():
    """"""
    def __init__(self):
        '''void QMatrix3x2.__init__()'''
    def __init__(self, other):
        '''void QMatrix3x2.__init__(QMatrix3x2 other)'''
    def __init__(self, values):
        '''void QMatrix3x2.__init__(sequence-of-float values)'''
    def __ne__(self):
        '''QMatrix3x2 QMatrix3x2.__ne__()'''
        return QMatrix3x2()
    def __eq__(self):
        '''QMatrix3x2 QMatrix3x2.__eq__()'''
        return QMatrix3x2()
    def __idiv__(self):
        '''float QMatrix3x2.__idiv__()'''
        return float()
    def __imul__(self):
        '''float QMatrix3x2.__imul__()'''
        return float()
    def __isub__(self):
        '''QMatrix3x2 QMatrix3x2.__isub__()'''
        return QMatrix3x2()
    def __iadd__(self):
        '''QMatrix3x2 QMatrix3x2.__iadd__()'''
        return QMatrix3x2()
    def transposed(self):
        '''QMatrix2x3 QMatrix3x2.transposed()'''
        return QMatrix2x3()
    def fill(self, value):
        '''void QMatrix3x2.fill(float value)'''
    def setToIdentity(self):
        '''void QMatrix3x2.setToIdentity()'''
    def isIdentity(self):
        '''bool QMatrix3x2.isIdentity()'''
        return bool()
    def __setitem__(self):
        '''float QMatrix3x2.__setitem__()'''
        return float()
    def __getitem__(self):
        '''object QMatrix3x2.__getitem__()'''
        return object()
    def copyDataTo(self):
        '''list-of-float QMatrix3x2.copyDataTo()'''
        return [float()]
    def data(self):
        '''list-of-float QMatrix3x2.data()'''
        return [float()]
    def __repr__(self):
        '''str QMatrix3x2.__repr__()'''
        return str()


class QMatrix2x4():
    """"""
    def __init__(self):
        '''void QMatrix2x4.__init__()'''
    def __init__(self, other):
        '''void QMatrix2x4.__init__(QMatrix2x4 other)'''
    def __init__(self, values):
        '''void QMatrix2x4.__init__(sequence-of-float values)'''
    def __ne__(self):
        '''QMatrix2x4 QMatrix2x4.__ne__()'''
        return QMatrix2x4()
    def __eq__(self):
        '''QMatrix2x4 QMatrix2x4.__eq__()'''
        return QMatrix2x4()
    def __idiv__(self):
        '''float QMatrix2x4.__idiv__()'''
        return float()
    def __imul__(self):
        '''float QMatrix2x4.__imul__()'''
        return float()
    def __isub__(self):
        '''QMatrix2x4 QMatrix2x4.__isub__()'''
        return QMatrix2x4()
    def __iadd__(self):
        '''QMatrix2x4 QMatrix2x4.__iadd__()'''
        return QMatrix2x4()
    def transposed(self):
        '''QMatrix4x2 QMatrix2x4.transposed()'''
        return QMatrix4x2()
    def fill(self, value):
        '''void QMatrix2x4.fill(float value)'''
    def setToIdentity(self):
        '''void QMatrix2x4.setToIdentity()'''
    def isIdentity(self):
        '''bool QMatrix2x4.isIdentity()'''
        return bool()
    def __setitem__(self):
        '''float QMatrix2x4.__setitem__()'''
        return float()
    def __getitem__(self):
        '''object QMatrix2x4.__getitem__()'''
        return object()
    def copyDataTo(self):
        '''list-of-float QMatrix2x4.copyDataTo()'''
        return [float()]
    def data(self):
        '''list-of-float QMatrix2x4.data()'''
        return [float()]
    def __repr__(self):
        '''str QMatrix2x4.__repr__()'''
        return str()


class QMatrix2x3():
    """"""
    def __init__(self):
        '''void QMatrix2x3.__init__()'''
    def __init__(self, other):
        '''void QMatrix2x3.__init__(QMatrix2x3 other)'''
    def __init__(self, values):
        '''void QMatrix2x3.__init__(sequence-of-float values)'''
    def __ne__(self):
        '''QMatrix2x3 QMatrix2x3.__ne__()'''
        return QMatrix2x3()
    def __eq__(self):
        '''QMatrix2x3 QMatrix2x3.__eq__()'''
        return QMatrix2x3()
    def __idiv__(self):
        '''float QMatrix2x3.__idiv__()'''
        return float()
    def __imul__(self):
        '''float QMatrix2x3.__imul__()'''
        return float()
    def __isub__(self):
        '''QMatrix2x3 QMatrix2x3.__isub__()'''
        return QMatrix2x3()
    def __iadd__(self):
        '''QMatrix2x3 QMatrix2x3.__iadd__()'''
        return QMatrix2x3()
    def transposed(self):
        '''QMatrix3x2 QMatrix2x3.transposed()'''
        return QMatrix3x2()
    def fill(self, value):
        '''void QMatrix2x3.fill(float value)'''
    def setToIdentity(self):
        '''void QMatrix2x3.setToIdentity()'''
    def isIdentity(self):
        '''bool QMatrix2x3.isIdentity()'''
        return bool()
    def __setitem__(self):
        '''float QMatrix2x3.__setitem__()'''
        return float()
    def __getitem__(self):
        '''object QMatrix2x3.__getitem__()'''
        return object()
    def copyDataTo(self):
        '''list-of-float QMatrix2x3.copyDataTo()'''
        return [float()]
    def data(self):
        '''list-of-float QMatrix2x3.data()'''
        return [float()]
    def __repr__(self):
        '''str QMatrix2x3.__repr__()'''
        return str()


class QMatrix2x2():
    """"""
    def __init__(self):
        '''void QMatrix2x2.__init__()'''
    def __init__(self, other):
        '''void QMatrix2x2.__init__(QMatrix2x2 other)'''
    def __init__(self, values):
        '''void QMatrix2x2.__init__(sequence-of-float values)'''
    def __ne__(self):
        '''QMatrix2x2 QMatrix2x2.__ne__()'''
        return QMatrix2x2()
    def __eq__(self):
        '''QMatrix2x2 QMatrix2x2.__eq__()'''
        return QMatrix2x2()
    def __idiv__(self):
        '''float QMatrix2x2.__idiv__()'''
        return float()
    def __imul__(self):
        '''float QMatrix2x2.__imul__()'''
        return float()
    def __isub__(self):
        '''QMatrix2x2 QMatrix2x2.__isub__()'''
        return QMatrix2x2()
    def __iadd__(self):
        '''QMatrix2x2 QMatrix2x2.__iadd__()'''
        return QMatrix2x2()
    def transposed(self):
        '''QMatrix2x2 QMatrix2x2.transposed()'''
        return QMatrix2x2()
    def fill(self, value):
        '''void QMatrix2x2.fill(float value)'''
    def setToIdentity(self):
        '''void QMatrix2x2.setToIdentity()'''
    def isIdentity(self):
        '''bool QMatrix2x2.isIdentity()'''
        return bool()
    def __setitem__(self):
        '''float QMatrix2x2.__setitem__()'''
        return float()
    def __getitem__(self):
        '''object QMatrix2x2.__getitem__()'''
        return object()
    def copyDataTo(self):
        '''list-of-float QMatrix2x2.copyDataTo()'''
        return [float()]
    def data(self):
        '''list-of-float QMatrix2x2.data()'''
        return [float()]
    def __repr__(self):
        '''str QMatrix2x2.__repr__()'''
        return str()


class QGesture(QObject):
    """"""
    # Enum QGesture.GestureCancelPolicy
    CancelNone = 0
    CancelAllInContext = 0

    def __init__(self, parent = None):
        '''void QGesture.__init__(QObject parent = None)'''
    def gestureCancelPolicy(self):
        '''QGesture.GestureCancelPolicy QGesture.gestureCancelPolicy()'''
        return QGesture.GestureCancelPolicy()
    def setGestureCancelPolicy(self, policy):
        '''void QGesture.setGestureCancelPolicy(QGesture.GestureCancelPolicy policy)'''
    def unsetHotSpot(self):
        '''void QGesture.unsetHotSpot()'''
    def hasHotSpot(self):
        '''bool QGesture.hasHotSpot()'''
        return bool()
    def setHotSpot(self, value):
        '''void QGesture.setHotSpot(QPointF value)'''
    def hotSpot(self):
        '''QPointF QGesture.hotSpot()'''
        return QPointF()
    def state(self):
        '''Qt.GestureState QGesture.state()'''
        return Qt.GestureState()
    def gestureType(self):
        '''Qt.GestureType QGesture.gestureType()'''
        return Qt.GestureType()


class QPanGesture(QGesture):
    """"""
    def __init__(self, parent = None):
        '''void QPanGesture.__init__(QObject parent = None)'''
    def setAcceleration(self, value):
        '''void QPanGesture.setAcceleration(float value)'''
    def setOffset(self, value):
        '''void QPanGesture.setOffset(QPointF value)'''
    def setLastOffset(self, value):
        '''void QPanGesture.setLastOffset(QPointF value)'''
    def acceleration(self):
        '''float QPanGesture.acceleration()'''
        return float()
    def delta(self):
        '''QPointF QPanGesture.delta()'''
        return QPointF()
    def offset(self):
        '''QPointF QPanGesture.offset()'''
        return QPointF()
    def lastOffset(self):
        '''QPointF QPanGesture.lastOffset()'''
        return QPointF()


class QPinchGesture(QGesture):
    """"""
    # Enum QPinchGesture.ChangeFlag
    ScaleFactorChanged = 0
    RotationAngleChanged = 0
    CenterPointChanged = 0

    def __init__(self, parent = None):
        '''void QPinchGesture.__init__(QObject parent = None)'''
    def setRotationAngle(self, value):
        '''void QPinchGesture.setRotationAngle(float value)'''
    def setLastRotationAngle(self, value):
        '''void QPinchGesture.setLastRotationAngle(float value)'''
    def setTotalRotationAngle(self, value):
        '''void QPinchGesture.setTotalRotationAngle(float value)'''
    def rotationAngle(self):
        '''float QPinchGesture.rotationAngle()'''
        return float()
    def lastRotationAngle(self):
        '''float QPinchGesture.lastRotationAngle()'''
        return float()
    def totalRotationAngle(self):
        '''float QPinchGesture.totalRotationAngle()'''
        return float()
    def setScaleFactor(self, value):
        '''void QPinchGesture.setScaleFactor(float value)'''
    def setLastScaleFactor(self, value):
        '''void QPinchGesture.setLastScaleFactor(float value)'''
    def setTotalScaleFactor(self, value):
        '''void QPinchGesture.setTotalScaleFactor(float value)'''
    def scaleFactor(self):
        '''float QPinchGesture.scaleFactor()'''
        return float()
    def lastScaleFactor(self):
        '''float QPinchGesture.lastScaleFactor()'''
        return float()
    def totalScaleFactor(self):
        '''float QPinchGesture.totalScaleFactor()'''
        return float()
    def setCenterPoint(self, value):
        '''void QPinchGesture.setCenterPoint(QPointF value)'''
    def setLastCenterPoint(self, value):
        '''void QPinchGesture.setLastCenterPoint(QPointF value)'''
    def setStartCenterPoint(self, value):
        '''void QPinchGesture.setStartCenterPoint(QPointF value)'''
    def centerPoint(self):
        '''QPointF QPinchGesture.centerPoint()'''
        return QPointF()
    def lastCenterPoint(self):
        '''QPointF QPinchGesture.lastCenterPoint()'''
        return QPointF()
    def startCenterPoint(self):
        '''QPointF QPinchGesture.startCenterPoint()'''
        return QPointF()
    def setChangeFlags(self, value):
        '''void QPinchGesture.setChangeFlags(QPinchGesture.ChangeFlags value)'''
    def changeFlags(self):
        '''QPinchGesture.ChangeFlags QPinchGesture.changeFlags()'''
        return QPinchGesture.ChangeFlags()
    def setTotalChangeFlags(self, value):
        '''void QPinchGesture.setTotalChangeFlags(QPinchGesture.ChangeFlags value)'''
    def totalChangeFlags(self):
        '''QPinchGesture.ChangeFlags QPinchGesture.totalChangeFlags()'''
        return QPinchGesture.ChangeFlags()
    class ChangeFlags():
        """"""
        def __init__(self):
            '''QPinchGesture.ChangeFlags QPinchGesture.ChangeFlags.__init__()'''
            return QPinchGesture.ChangeFlags()
        def __init__(self):
            '''int QPinchGesture.ChangeFlags.__init__()'''
            return int()
        def __init__(self):
            '''void QPinchGesture.ChangeFlags.__init__()'''
        def __bool__(self):
            '''int QPinchGesture.ChangeFlags.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QPinchGesture.ChangeFlags.__ne__(QPinchGesture.ChangeFlags f)'''
            return bool()
        def __eq__(self, f):
            '''bool QPinchGesture.ChangeFlags.__eq__(QPinchGesture.ChangeFlags f)'''
            return bool()
        def __invert__(self):
            '''QPinchGesture.ChangeFlags QPinchGesture.ChangeFlags.__invert__()'''
            return QPinchGesture.ChangeFlags()
        def __and__(self, mask):
            '''QPinchGesture.ChangeFlags QPinchGesture.ChangeFlags.__and__(int mask)'''
            return QPinchGesture.ChangeFlags()
        def __xor__(self, f):
            '''QPinchGesture.ChangeFlags QPinchGesture.ChangeFlags.__xor__(QPinchGesture.ChangeFlags f)'''
            return QPinchGesture.ChangeFlags()
        def __xor__(self, f):
            '''QPinchGesture.ChangeFlags QPinchGesture.ChangeFlags.__xor__(int f)'''
            return QPinchGesture.ChangeFlags()
        def __or__(self, f):
            '''QPinchGesture.ChangeFlags QPinchGesture.ChangeFlags.__or__(QPinchGesture.ChangeFlags f)'''
            return QPinchGesture.ChangeFlags()
        def __or__(self, f):
            '''QPinchGesture.ChangeFlags QPinchGesture.ChangeFlags.__or__(int f)'''
            return QPinchGesture.ChangeFlags()
        def __int__(self):
            '''int QPinchGesture.ChangeFlags.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QPinchGesture.ChangeFlags QPinchGesture.ChangeFlags.__ixor__(QPinchGesture.ChangeFlags f)'''
            return QPinchGesture.ChangeFlags()
        def __ior__(self, f):
            '''QPinchGesture.ChangeFlags QPinchGesture.ChangeFlags.__ior__(QPinchGesture.ChangeFlags f)'''
            return QPinchGesture.ChangeFlags()
        def __iand__(self, mask):
            '''QPinchGesture.ChangeFlags QPinchGesture.ChangeFlags.__iand__(int mask)'''
            return QPinchGesture.ChangeFlags()


class QSwipeGesture(QGesture):
    """"""
    # Enum QSwipeGesture.SwipeDirection
    NoDirection = 0
    Left = 0
    Right = 0
    Up = 0
    Down = 0

    def __init__(self, parent = None):
        '''void QSwipeGesture.__init__(QObject parent = None)'''
    def setSwipeAngle(self, value):
        '''void QSwipeGesture.setSwipeAngle(float value)'''
    def swipeAngle(self):
        '''float QSwipeGesture.swipeAngle()'''
        return float()
    def verticalDirection(self):
        '''QSwipeGesture.SwipeDirection QSwipeGesture.verticalDirection()'''
        return QSwipeGesture.SwipeDirection()
    def horizontalDirection(self):
        '''QSwipeGesture.SwipeDirection QSwipeGesture.horizontalDirection()'''
        return QSwipeGesture.SwipeDirection()


class QTapGesture(QGesture):
    """"""
    def __init__(self, parent = None):
        '''void QTapGesture.__init__(QObject parent = None)'''
    def setPosition(self, pos):
        '''void QTapGesture.setPosition(QPointF pos)'''
    def position(self):
        '''QPointF QTapGesture.position()'''
        return QPointF()


class QTapAndHoldGesture(QGesture):
    """"""
    def __init__(self, parent = None):
        '''void QTapAndHoldGesture.__init__(QObject parent = None)'''
    def timeout(self):
        '''static int QTapAndHoldGesture.timeout()'''
        return int()
    def setTimeout(self, msecs):
        '''static void QTapAndHoldGesture.setTimeout(int msecs)'''
    def setPosition(self, pos):
        '''void QTapAndHoldGesture.setPosition(QPointF pos)'''
    def position(self):
        '''QPointF QTapAndHoldGesture.position()'''
        return QPointF()


class QGestureRecognizer():
    """"""
    # Enum QGestureRecognizer.ResultFlag
    Ignore = 0
    MayBeGesture = 0
    TriggerGesture = 0
    FinishGesture = 0
    CancelGesture = 0
    ConsumeEventHint = 0

    def __init__(self):
        '''void QGestureRecognizer.__init__()'''
    def __init__(self):
        '''QGestureRecognizer QGestureRecognizer.__init__()'''
        return QGestureRecognizer()
    def unregisterRecognizer(self, type):
        '''static void QGestureRecognizer.unregisterRecognizer(Qt.GestureType type)'''
    def registerRecognizer(self, recognizer):
        '''static Qt.GestureType QGestureRecognizer.registerRecognizer(QGestureRecognizer recognizer)'''
        return Qt.GestureType()
    def reset(self, state):
        '''void QGestureRecognizer.reset(QGesture state)'''
    def recognize(self, state, watched, event):
        '''abstract QGestureRecognizer.Result QGestureRecognizer.recognize(QGesture state, QObject watched, QEvent event)'''
        return QGestureRecognizer.Result()
    def create(self, target):
        '''QGesture QGestureRecognizer.create(QObject target)'''
        return QGesture()
    class Result():
        """"""
        def __init__(self):
            '''QGestureRecognizer.Result QGestureRecognizer.Result.__init__()'''
            return QGestureRecognizer.Result()
        def __init__(self):
            '''int QGestureRecognizer.Result.__init__()'''
            return int()
        def __init__(self):
            '''void QGestureRecognizer.Result.__init__()'''
        def __bool__(self):
            '''int QGestureRecognizer.Result.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QGestureRecognizer.Result.__ne__(QGestureRecognizer.Result f)'''
            return bool()
        def __eq__(self, f):
            '''bool QGestureRecognizer.Result.__eq__(QGestureRecognizer.Result f)'''
            return bool()
        def __invert__(self):
            '''QGestureRecognizer.Result QGestureRecognizer.Result.__invert__()'''
            return QGestureRecognizer.Result()
        def __and__(self, mask):
            '''QGestureRecognizer.Result QGestureRecognizer.Result.__and__(int mask)'''
            return QGestureRecognizer.Result()
        def __xor__(self, f):
            '''QGestureRecognizer.Result QGestureRecognizer.Result.__xor__(QGestureRecognizer.Result f)'''
            return QGestureRecognizer.Result()
        def __xor__(self, f):
            '''QGestureRecognizer.Result QGestureRecognizer.Result.__xor__(int f)'''
            return QGestureRecognizer.Result()
        def __or__(self, f):
            '''QGestureRecognizer.Result QGestureRecognizer.Result.__or__(QGestureRecognizer.Result f)'''
            return QGestureRecognizer.Result()
        def __or__(self, f):
            '''QGestureRecognizer.Result QGestureRecognizer.Result.__or__(int f)'''
            return QGestureRecognizer.Result()
        def __int__(self):
            '''int QGestureRecognizer.Result.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QGestureRecognizer.Result QGestureRecognizer.Result.__ixor__(QGestureRecognizer.Result f)'''
            return QGestureRecognizer.Result()
        def __ior__(self, f):
            '''QGestureRecognizer.Result QGestureRecognizer.Result.__ior__(QGestureRecognizer.Result f)'''
            return QGestureRecognizer.Result()
        def __iand__(self, mask):
            '''QGestureRecognizer.Result QGestureRecognizer.Result.__iand__(int mask)'''
            return QGestureRecognizer.Result()


class QGlyphRun():
    """"""
    def __init__(self):
        '''void QGlyphRun.__init__()'''
    def __init__(self, other):
        '''void QGlyphRun.__init__(QGlyphRun other)'''
    def strikeOut(self):
        '''bool QGlyphRun.strikeOut()'''
        return bool()
    def setStrikeOut(self, strikeOut):
        '''void QGlyphRun.setStrikeOut(bool strikeOut)'''
    def underline(self):
        '''bool QGlyphRun.underline()'''
        return bool()
    def setUnderline(self, underline):
        '''void QGlyphRun.setUnderline(bool underline)'''
    def overline(self):
        '''bool QGlyphRun.overline()'''
        return bool()
    def setOverline(self, overline):
        '''void QGlyphRun.setOverline(bool overline)'''
    def __ne__(self, other):
        '''bool QGlyphRun.__ne__(QGlyphRun other)'''
        return bool()
    def __eq__(self, other):
        '''bool QGlyphRun.__eq__(QGlyphRun other)'''
        return bool()
    def clear(self):
        '''void QGlyphRun.clear()'''
    def setPositions(self, positions):
        '''void QGlyphRun.setPositions(list-of-QPointF positions)'''
    def positions(self):
        '''list-of-QPointF QGlyphRun.positions()'''
        return [QPointF()]
    def setGlyphIndexes(self, glyphIndexes):
        '''void QGlyphRun.setGlyphIndexes(list-of-int glyphIndexes)'''
    def glyphIndexes(self):
        '''list-of-int QGlyphRun.glyphIndexes()'''
        return [int()]
    def setRawFont(self, rawFont):
        '''void QGlyphRun.setRawFont(QRawFont rawFont)'''
    def rawFont(self):
        '''QRawFont QGlyphRun.rawFont()'''
        return QRawFont()


class QGraphicsAnchor(QObject):
    """"""
    def sizePolicy(self):
        '''QSizePolicy.Policy QGraphicsAnchor.sizePolicy()'''
        return QSizePolicy.Policy()
    def setSizePolicy(self, policy):
        '''void QGraphicsAnchor.setSizePolicy(QSizePolicy.Policy policy)'''
    def spacing(self):
        '''float QGraphicsAnchor.spacing()'''
        return float()
    def unsetSpacing(self):
        '''void QGraphicsAnchor.unsetSpacing()'''
    def setSpacing(self, spacing):
        '''void QGraphicsAnchor.setSpacing(float spacing)'''


class QGraphicsLayoutItem():
    """"""
    def __init__(self, parent = None, isLayout = False):
        '''void QGraphicsLayoutItem.__init__(QGraphicsLayoutItem parent = None, bool isLayout = False)'''
    def setOwnedByLayout(self, ownedByLayout):
        '''void QGraphicsLayoutItem.setOwnedByLayout(bool ownedByLayout)'''
    def setGraphicsItem(self, item):
        '''void QGraphicsLayoutItem.setGraphicsItem(QGraphicsItem item)'''
    def sizeHint(self, which, constraint = QSizeF()):
        '''abstract QSizeF QGraphicsLayoutItem.sizeHint(Qt.SizeHint which, QSizeF constraint = QSizeF())'''
        return QSizeF()
    def ownedByLayout(self):
        '''bool QGraphicsLayoutItem.ownedByLayout()'''
        return bool()
    def graphicsItem(self):
        '''QGraphicsItem QGraphicsLayoutItem.graphicsItem()'''
        return QGraphicsItem()
    def maximumHeight(self):
        '''float QGraphicsLayoutItem.maximumHeight()'''
        return float()
    def maximumWidth(self):
        '''float QGraphicsLayoutItem.maximumWidth()'''
        return float()
    def preferredHeight(self):
        '''float QGraphicsLayoutItem.preferredHeight()'''
        return float()
    def preferredWidth(self):
        '''float QGraphicsLayoutItem.preferredWidth()'''
        return float()
    def minimumHeight(self):
        '''float QGraphicsLayoutItem.minimumHeight()'''
        return float()
    def minimumWidth(self):
        '''float QGraphicsLayoutItem.minimumWidth()'''
        return float()
    def isLayout(self):
        '''bool QGraphicsLayoutItem.isLayout()'''
        return bool()
    def setParentLayoutItem(self, parent):
        '''void QGraphicsLayoutItem.setParentLayoutItem(QGraphicsLayoutItem parent)'''
    def parentLayoutItem(self):
        '''QGraphicsLayoutItem QGraphicsLayoutItem.parentLayoutItem()'''
        return QGraphicsLayoutItem()
    def updateGeometry(self):
        '''void QGraphicsLayoutItem.updateGeometry()'''
    def effectiveSizeHint(self, which, constraint = QSizeF()):
        '''QSizeF QGraphicsLayoutItem.effectiveSizeHint(Qt.SizeHint which, QSizeF constraint = QSizeF())'''
        return QSizeF()
    def contentsRect(self):
        '''QRectF QGraphicsLayoutItem.contentsRect()'''
        return QRectF()
    def getContentsMargins(self, left, top, right, bottom):
        '''void QGraphicsLayoutItem.getContentsMargins(float left, float top, float right, float bottom)'''
    def geometry(self):
        '''QRectF QGraphicsLayoutItem.geometry()'''
        return QRectF()
    def setGeometry(self, rect):
        '''void QGraphicsLayoutItem.setGeometry(QRectF rect)'''
    def setMaximumHeight(self, height):
        '''void QGraphicsLayoutItem.setMaximumHeight(float height)'''
    def setMaximumWidth(self, width):
        '''void QGraphicsLayoutItem.setMaximumWidth(float width)'''
    def maximumSize(self):
        '''QSizeF QGraphicsLayoutItem.maximumSize()'''
        return QSizeF()
    def setMaximumSize(self, size):
        '''void QGraphicsLayoutItem.setMaximumSize(QSizeF size)'''
    def setMaximumSize(self, aw, ah):
        '''void QGraphicsLayoutItem.setMaximumSize(float aw, float ah)'''
    def setPreferredHeight(self, height):
        '''void QGraphicsLayoutItem.setPreferredHeight(float height)'''
    def setPreferredWidth(self, width):
        '''void QGraphicsLayoutItem.setPreferredWidth(float width)'''
    def preferredSize(self):
        '''QSizeF QGraphicsLayoutItem.preferredSize()'''
        return QSizeF()
    def setPreferredSize(self, size):
        '''void QGraphicsLayoutItem.setPreferredSize(QSizeF size)'''
    def setPreferredSize(self, aw, ah):
        '''void QGraphicsLayoutItem.setPreferredSize(float aw, float ah)'''
    def setMinimumHeight(self, height):
        '''void QGraphicsLayoutItem.setMinimumHeight(float height)'''
    def setMinimumWidth(self, width):
        '''void QGraphicsLayoutItem.setMinimumWidth(float width)'''
    def minimumSize(self):
        '''QSizeF QGraphicsLayoutItem.minimumSize()'''
        return QSizeF()
    def setMinimumSize(self, size):
        '''void QGraphicsLayoutItem.setMinimumSize(QSizeF size)'''
    def setMinimumSize(self, aw, ah):
        '''void QGraphicsLayoutItem.setMinimumSize(float aw, float ah)'''
    def sizePolicy(self):
        '''QSizePolicy QGraphicsLayoutItem.sizePolicy()'''
        return QSizePolicy()
    def setSizePolicy(self, policy):
        '''void QGraphicsLayoutItem.setSizePolicy(QSizePolicy policy)'''
    def setSizePolicy(self, hPolicy, vPolicy, controlType = None):
        '''void QGraphicsLayoutItem.setSizePolicy(QSizePolicy.Policy hPolicy, QSizePolicy.Policy vPolicy, QSizePolicy.ControlType controlType = QSizePolicy.DefaultType)'''


class QGraphicsLayout(QGraphicsLayoutItem):
    """"""
    def __init__(self, parent = None):
        '''void QGraphicsLayout.__init__(QGraphicsLayoutItem parent = None)'''
    def addChildLayoutItem(self, layoutItem):
        '''void QGraphicsLayout.addChildLayoutItem(QGraphicsLayoutItem layoutItem)'''
    def updateGeometry(self):
        '''void QGraphicsLayout.updateGeometry()'''
    def removeAt(self, index):
        '''abstract void QGraphicsLayout.removeAt(int index)'''
    def itemAt(self, i):
        '''abstract QGraphicsLayoutItem QGraphicsLayout.itemAt(int i)'''
        return QGraphicsLayoutItem()
    def __len__(self):
        '''None QGraphicsLayout.__len__()'''
        return None()
    def count(self):
        '''abstract int QGraphicsLayout.count()'''
        return int()
    def widgetEvent(self, e):
        '''void QGraphicsLayout.widgetEvent(QEvent e)'''
    def invalidate(self):
        '''void QGraphicsLayout.invalidate()'''
    def isActivated(self):
        '''bool QGraphicsLayout.isActivated()'''
        return bool()
    def activate(self):
        '''void QGraphicsLayout.activate()'''
    def getContentsMargins(self, left, top, right, bottom):
        '''void QGraphicsLayout.getContentsMargins(float left, float top, float right, float bottom)'''
    def setContentsMargins(self, left, top, right, bottom):
        '''void QGraphicsLayout.setContentsMargins(float left, float top, float right, float bottom)'''


class QGraphicsAnchorLayout(QGraphicsLayout):
    """"""
    def __init__(self, parent = None):
        '''void QGraphicsAnchorLayout.__init__(QGraphicsLayoutItem parent = None)'''
    def sizeHint(self, which, constraint = QSizeF()):
        '''QSizeF QGraphicsAnchorLayout.sizeHint(Qt.SizeHint which, QSizeF constraint = QSizeF())'''
        return QSizeF()
    def invalidate(self):
        '''void QGraphicsAnchorLayout.invalidate()'''
    def itemAt(self, index):
        '''QGraphicsLayoutItem QGraphicsAnchorLayout.itemAt(int index)'''
        return QGraphicsLayoutItem()
    def count(self):
        '''int QGraphicsAnchorLayout.count()'''
        return int()
    def setGeometry(self, rect):
        '''void QGraphicsAnchorLayout.setGeometry(QRectF rect)'''
    def removeAt(self, index):
        '''void QGraphicsAnchorLayout.removeAt(int index)'''
    def verticalSpacing(self):
        '''float QGraphicsAnchorLayout.verticalSpacing()'''
        return float()
    def horizontalSpacing(self):
        '''float QGraphicsAnchorLayout.horizontalSpacing()'''
        return float()
    def setSpacing(self, spacing):
        '''void QGraphicsAnchorLayout.setSpacing(float spacing)'''
    def setVerticalSpacing(self, spacing):
        '''void QGraphicsAnchorLayout.setVerticalSpacing(float spacing)'''
    def setHorizontalSpacing(self, spacing):
        '''void QGraphicsAnchorLayout.setHorizontalSpacing(float spacing)'''
    def addAnchors(self, firstItem, secondItem, orientations = None):
        '''void QGraphicsAnchorLayout.addAnchors(QGraphicsLayoutItem firstItem, QGraphicsLayoutItem secondItem, Qt.Orientations orientations = Qt.Horizontal|Qt.Vertical)'''
    def addCornerAnchors(self, firstItem, firstCorner, secondItem, secondCorner):
        '''void QGraphicsAnchorLayout.addCornerAnchors(QGraphicsLayoutItem firstItem, Qt.Corner firstCorner, QGraphicsLayoutItem secondItem, Qt.Corner secondCorner)'''
    def anchor(self, firstItem, firstEdge, secondItem, secondEdge):
        '''QGraphicsAnchor QGraphicsAnchorLayout.anchor(QGraphicsLayoutItem firstItem, Qt.AnchorPoint firstEdge, QGraphicsLayoutItem secondItem, Qt.AnchorPoint secondEdge)'''
        return QGraphicsAnchor()
    def addAnchor(self, firstItem, firstEdge, secondItem, secondEdge):
        '''QGraphicsAnchor QGraphicsAnchorLayout.addAnchor(QGraphicsLayoutItem firstItem, Qt.AnchorPoint firstEdge, QGraphicsLayoutItem secondItem, Qt.AnchorPoint secondEdge)'''
        return QGraphicsAnchor()


class QGraphicsEffect(QObject):
    """"""
    # Enum QGraphicsEffect.PixmapPadMode
    NoPad = 0
    PadToTransparentBorder = 0
    PadToEffectiveBoundingRect = 0

    # Enum QGraphicsEffect.ChangeFlag
    SourceAttached = 0
    SourceDetached = 0
    SourceBoundingRectChanged = 0
    SourceInvalidated = 0

    def __init__(self, parent = None):
        '''void QGraphicsEffect.__init__(QObject parent = None)'''
    def sourcePixmap(self, system = None, offset = None, mode = None):
        '''QPixmap QGraphicsEffect.sourcePixmap(Qt.CoordinateSystem system = Qt.LogicalCoordinates, QPoint offset, QGraphicsEffect.PixmapPadMode mode = QGraphicsEffect.PadToEffectiveBoundingRect)'''
        return QPixmap()
    def drawSource(self, painter):
        '''void QGraphicsEffect.drawSource(QPainter painter)'''
    def sourceBoundingRect(self, system = None):
        '''QRectF QGraphicsEffect.sourceBoundingRect(Qt.CoordinateSystem system = Qt.LogicalCoordinates)'''
        return QRectF()
    def sourceIsPixmap(self):
        '''bool QGraphicsEffect.sourceIsPixmap()'''
        return bool()
    def updateBoundingRect(self):
        '''void QGraphicsEffect.updateBoundingRect()'''
    def sourceChanged(self, flags):
        '''void QGraphicsEffect.sourceChanged(QGraphicsEffect.ChangeFlags flags)'''
    def draw(self, painter):
        '''abstract void QGraphicsEffect.draw(QPainter painter)'''
    enabledChanged = pyqtSignal() # void enabledChanged(bool) - signal
    def update(self):
        '''void QGraphicsEffect.update()'''
    def setEnabled(self, enable):
        '''void QGraphicsEffect.setEnabled(bool enable)'''
    def isEnabled(self):
        '''bool QGraphicsEffect.isEnabled()'''
        return bool()
    def boundingRect(self):
        '''QRectF QGraphicsEffect.boundingRect()'''
        return QRectF()
    def boundingRectFor(self, sourceRect):
        '''QRectF QGraphicsEffect.boundingRectFor(QRectF sourceRect)'''
        return QRectF()
    class ChangeFlags():
        """"""
        def __init__(self):
            '''QGraphicsEffect.ChangeFlags QGraphicsEffect.ChangeFlags.__init__()'''
            return QGraphicsEffect.ChangeFlags()
        def __init__(self):
            '''int QGraphicsEffect.ChangeFlags.__init__()'''
            return int()
        def __init__(self):
            '''void QGraphicsEffect.ChangeFlags.__init__()'''
        def __bool__(self):
            '''int QGraphicsEffect.ChangeFlags.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QGraphicsEffect.ChangeFlags.__ne__(QGraphicsEffect.ChangeFlags f)'''
            return bool()
        def __eq__(self, f):
            '''bool QGraphicsEffect.ChangeFlags.__eq__(QGraphicsEffect.ChangeFlags f)'''
            return bool()
        def __invert__(self):
            '''QGraphicsEffect.ChangeFlags QGraphicsEffect.ChangeFlags.__invert__()'''
            return QGraphicsEffect.ChangeFlags()
        def __and__(self, mask):
            '''QGraphicsEffect.ChangeFlags QGraphicsEffect.ChangeFlags.__and__(int mask)'''
            return QGraphicsEffect.ChangeFlags()
        def __xor__(self, f):
            '''QGraphicsEffect.ChangeFlags QGraphicsEffect.ChangeFlags.__xor__(QGraphicsEffect.ChangeFlags f)'''
            return QGraphicsEffect.ChangeFlags()
        def __xor__(self, f):
            '''QGraphicsEffect.ChangeFlags QGraphicsEffect.ChangeFlags.__xor__(int f)'''
            return QGraphicsEffect.ChangeFlags()
        def __or__(self, f):
            '''QGraphicsEffect.ChangeFlags QGraphicsEffect.ChangeFlags.__or__(QGraphicsEffect.ChangeFlags f)'''
            return QGraphicsEffect.ChangeFlags()
        def __or__(self, f):
            '''QGraphicsEffect.ChangeFlags QGraphicsEffect.ChangeFlags.__or__(int f)'''
            return QGraphicsEffect.ChangeFlags()
        def __int__(self):
            '''int QGraphicsEffect.ChangeFlags.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QGraphicsEffect.ChangeFlags QGraphicsEffect.ChangeFlags.__ixor__(QGraphicsEffect.ChangeFlags f)'''
            return QGraphicsEffect.ChangeFlags()
        def __ior__(self, f):
            '''QGraphicsEffect.ChangeFlags QGraphicsEffect.ChangeFlags.__ior__(QGraphicsEffect.ChangeFlags f)'''
            return QGraphicsEffect.ChangeFlags()
        def __iand__(self, mask):
            '''QGraphicsEffect.ChangeFlags QGraphicsEffect.ChangeFlags.__iand__(int mask)'''
            return QGraphicsEffect.ChangeFlags()


class QGraphicsColorizeEffect(QGraphicsEffect):
    """"""
    def __init__(self, parent = None):
        '''void QGraphicsColorizeEffect.__init__(QObject parent = None)'''
    def draw(self, painter):
        '''void QGraphicsColorizeEffect.draw(QPainter painter)'''
    strengthChanged = pyqtSignal() # void strengthChanged(qreal) - signal
    colorChanged = pyqtSignal() # void colorChanged(const QColoramp;) - signal
    def setStrength(self, strength):
        '''void QGraphicsColorizeEffect.setStrength(float strength)'''
    def setColor(self, c):
        '''void QGraphicsColorizeEffect.setColor(QColor c)'''
    def strength(self):
        '''float QGraphicsColorizeEffect.strength()'''
        return float()
    def color(self):
        '''QColor QGraphicsColorizeEffect.color()'''
        return QColor()


class QGraphicsBlurEffect(QGraphicsEffect):
    """"""
    # Enum QGraphicsBlurEffect.BlurHint
    PerformanceHint = 0
    QualityHint = 0
    AnimationHint = 0

    def __init__(self, parent = None):
        '''void QGraphicsBlurEffect.__init__(QObject parent = None)'''
    def draw(self, painter):
        '''void QGraphicsBlurEffect.draw(QPainter painter)'''
    blurHintsChanged = pyqtSignal() # void blurHintsChanged(QGraphicsBlurEffect::BlurHints) - signal
    blurRadiusChanged = pyqtSignal() # void blurRadiusChanged(qreal) - signal
    def setBlurHints(self, hints):
        '''void QGraphicsBlurEffect.setBlurHints(QGraphicsBlurEffect.BlurHints hints)'''
    def setBlurRadius(self, blurRadius):
        '''void QGraphicsBlurEffect.setBlurRadius(float blurRadius)'''
    def blurHints(self):
        '''QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.blurHints()'''
        return QGraphicsBlurEffect.BlurHints()
    def blurRadius(self):
        '''float QGraphicsBlurEffect.blurRadius()'''
        return float()
    def boundingRectFor(self, rect):
        '''QRectF QGraphicsBlurEffect.boundingRectFor(QRectF rect)'''
        return QRectF()
    class BlurHints():
        """"""
        def __init__(self):
            '''QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.BlurHints.__init__()'''
            return QGraphicsBlurEffect.BlurHints()
        def __init__(self):
            '''int QGraphicsBlurEffect.BlurHints.__init__()'''
            return int()
        def __init__(self):
            '''void QGraphicsBlurEffect.BlurHints.__init__()'''
        def __bool__(self):
            '''int QGraphicsBlurEffect.BlurHints.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QGraphicsBlurEffect.BlurHints.__ne__(QGraphicsBlurEffect.BlurHints f)'''
            return bool()
        def __eq__(self, f):
            '''bool QGraphicsBlurEffect.BlurHints.__eq__(QGraphicsBlurEffect.BlurHints f)'''
            return bool()
        def __invert__(self):
            '''QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.BlurHints.__invert__()'''
            return QGraphicsBlurEffect.BlurHints()
        def __and__(self, mask):
            '''QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.BlurHints.__and__(int mask)'''
            return QGraphicsBlurEffect.BlurHints()
        def __xor__(self, f):
            '''QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.BlurHints.__xor__(QGraphicsBlurEffect.BlurHints f)'''
            return QGraphicsBlurEffect.BlurHints()
        def __xor__(self, f):
            '''QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.BlurHints.__xor__(int f)'''
            return QGraphicsBlurEffect.BlurHints()
        def __or__(self, f):
            '''QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.BlurHints.__or__(QGraphicsBlurEffect.BlurHints f)'''
            return QGraphicsBlurEffect.BlurHints()
        def __or__(self, f):
            '''QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.BlurHints.__or__(int f)'''
            return QGraphicsBlurEffect.BlurHints()
        def __int__(self):
            '''int QGraphicsBlurEffect.BlurHints.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.BlurHints.__ixor__(QGraphicsBlurEffect.BlurHints f)'''
            return QGraphicsBlurEffect.BlurHints()
        def __ior__(self, f):
            '''QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.BlurHints.__ior__(QGraphicsBlurEffect.BlurHints f)'''
            return QGraphicsBlurEffect.BlurHints()
        def __iand__(self, mask):
            '''QGraphicsBlurEffect.BlurHints QGraphicsBlurEffect.BlurHints.__iand__(int mask)'''
            return QGraphicsBlurEffect.BlurHints()


class QGraphicsDropShadowEffect(QGraphicsEffect):
    """"""
    def __init__(self, parent = None):
        '''void QGraphicsDropShadowEffect.__init__(QObject parent = None)'''
    def draw(self, painter):
        '''void QGraphicsDropShadowEffect.draw(QPainter painter)'''
    colorChanged = pyqtSignal() # void colorChanged(const QColoramp;) - signal
    blurRadiusChanged = pyqtSignal() # void blurRadiusChanged(qreal) - signal
    offsetChanged = pyqtSignal() # void offsetChanged(const QPointFamp;) - signal
    def setColor(self, color):
        '''void QGraphicsDropShadowEffect.setColor(QColor color)'''
    def setBlurRadius(self, blurRadius):
        '''void QGraphicsDropShadowEffect.setBlurRadius(float blurRadius)'''
    def setYOffset(self, dy):
        '''void QGraphicsDropShadowEffect.setYOffset(float dy)'''
    def setXOffset(self, dx):
        '''void QGraphicsDropShadowEffect.setXOffset(float dx)'''
    def setOffset(self, ofs):
        '''void QGraphicsDropShadowEffect.setOffset(QPointF ofs)'''
    def setOffset(self, dx, dy):
        '''void QGraphicsDropShadowEffect.setOffset(float dx, float dy)'''
    def setOffset(self, d):
        '''void QGraphicsDropShadowEffect.setOffset(float d)'''
    def color(self):
        '''QColor QGraphicsDropShadowEffect.color()'''
        return QColor()
    def blurRadius(self):
        '''float QGraphicsDropShadowEffect.blurRadius()'''
        return float()
    def yOffset(self):
        '''float QGraphicsDropShadowEffect.yOffset()'''
        return float()
    def xOffset(self):
        '''float QGraphicsDropShadowEffect.xOffset()'''
        return float()
    def offset(self):
        '''QPointF QGraphicsDropShadowEffect.offset()'''
        return QPointF()
    def boundingRectFor(self, rect):
        '''QRectF QGraphicsDropShadowEffect.boundingRectFor(QRectF rect)'''
        return QRectF()


class QGraphicsOpacityEffect(QGraphicsEffect):
    """"""
    def __init__(self, parent = None):
        '''void QGraphicsOpacityEffect.__init__(QObject parent = None)'''
    def draw(self, painter):
        '''void QGraphicsOpacityEffect.draw(QPainter painter)'''
    opacityMaskChanged = pyqtSignal() # void opacityMaskChanged(const QBrushamp;) - signal
    opacityChanged = pyqtSignal() # void opacityChanged(qreal) - signal
    def setOpacityMask(self, mask):
        '''void QGraphicsOpacityEffect.setOpacityMask(QBrush mask)'''
    def setOpacity(self, opacity):
        '''void QGraphicsOpacityEffect.setOpacity(float opacity)'''
    def opacityMask(self):
        '''QBrush QGraphicsOpacityEffect.opacityMask()'''
        return QBrush()
    def opacity(self):
        '''float QGraphicsOpacityEffect.opacity()'''
        return float()


class QGraphicsGridLayout(QGraphicsLayout):
    """"""
    def __init__(self, parent = None):
        '''void QGraphicsGridLayout.__init__(QGraphicsLayoutItem parent = None)'''
    def removeItem(self, item):
        '''void QGraphicsGridLayout.removeItem(QGraphicsLayoutItem item)'''
    def sizeHint(self, which, constraint = QSizeF()):
        '''QSizeF QGraphicsGridLayout.sizeHint(Qt.SizeHint which, QSizeF constraint = QSizeF())'''
        return QSizeF()
    def setGeometry(self, rect):
        '''void QGraphicsGridLayout.setGeometry(QRectF rect)'''
    def invalidate(self):
        '''void QGraphicsGridLayout.invalidate()'''
    def removeAt(self, index):
        '''void QGraphicsGridLayout.removeAt(int index)'''
    def count(self):
        '''int QGraphicsGridLayout.count()'''
        return int()
    def itemAt(self, row, column):
        '''QGraphicsLayoutItem QGraphicsGridLayout.itemAt(int row, int column)'''
        return QGraphicsLayoutItem()
    def itemAt(self, index):
        '''QGraphicsLayoutItem QGraphicsGridLayout.itemAt(int index)'''
        return QGraphicsLayoutItem()
    def columnCount(self):
        '''int QGraphicsGridLayout.columnCount()'''
        return int()
    def rowCount(self):
        '''int QGraphicsGridLayout.rowCount()'''
        return int()
    def alignment(self, item):
        '''Qt.Alignment QGraphicsGridLayout.alignment(QGraphicsLayoutItem item)'''
        return Qt.Alignment()
    def setAlignment(self, item, alignment):
        '''void QGraphicsGridLayout.setAlignment(QGraphicsLayoutItem item, Qt.Alignment alignment)'''
    def columnAlignment(self, column):
        '''Qt.Alignment QGraphicsGridLayout.columnAlignment(int column)'''
        return Qt.Alignment()
    def setColumnAlignment(self, column, alignment):
        '''void QGraphicsGridLayout.setColumnAlignment(int column, Qt.Alignment alignment)'''
    def rowAlignment(self, row):
        '''Qt.Alignment QGraphicsGridLayout.rowAlignment(int row)'''
        return Qt.Alignment()
    def setRowAlignment(self, row, alignment):
        '''void QGraphicsGridLayout.setRowAlignment(int row, Qt.Alignment alignment)'''
    def setColumnFixedWidth(self, column, width):
        '''void QGraphicsGridLayout.setColumnFixedWidth(int column, float width)'''
    def columnMaximumWidth(self, column):
        '''float QGraphicsGridLayout.columnMaximumWidth(int column)'''
        return float()
    def setColumnMaximumWidth(self, column, width):
        '''void QGraphicsGridLayout.setColumnMaximumWidth(int column, float width)'''
    def columnPreferredWidth(self, column):
        '''float QGraphicsGridLayout.columnPreferredWidth(int column)'''
        return float()
    def setColumnPreferredWidth(self, column, width):
        '''void QGraphicsGridLayout.setColumnPreferredWidth(int column, float width)'''
    def columnMinimumWidth(self, column):
        '''float QGraphicsGridLayout.columnMinimumWidth(int column)'''
        return float()
    def setColumnMinimumWidth(self, column, width):
        '''void QGraphicsGridLayout.setColumnMinimumWidth(int column, float width)'''
    def setRowFixedHeight(self, row, height):
        '''void QGraphicsGridLayout.setRowFixedHeight(int row, float height)'''
    def rowMaximumHeight(self, row):
        '''float QGraphicsGridLayout.rowMaximumHeight(int row)'''
        return float()
    def setRowMaximumHeight(self, row, height):
        '''void QGraphicsGridLayout.setRowMaximumHeight(int row, float height)'''
    def rowPreferredHeight(self, row):
        '''float QGraphicsGridLayout.rowPreferredHeight(int row)'''
        return float()
    def setRowPreferredHeight(self, row, height):
        '''void QGraphicsGridLayout.setRowPreferredHeight(int row, float height)'''
    def rowMinimumHeight(self, row):
        '''float QGraphicsGridLayout.rowMinimumHeight(int row)'''
        return float()
    def setRowMinimumHeight(self, row, height):
        '''void QGraphicsGridLayout.setRowMinimumHeight(int row, float height)'''
    def columnStretchFactor(self, column):
        '''int QGraphicsGridLayout.columnStretchFactor(int column)'''
        return int()
    def setColumnStretchFactor(self, column, stretch):
        '''void QGraphicsGridLayout.setColumnStretchFactor(int column, int stretch)'''
    def rowStretchFactor(self, row):
        '''int QGraphicsGridLayout.rowStretchFactor(int row)'''
        return int()
    def setRowStretchFactor(self, row, stretch):
        '''void QGraphicsGridLayout.setRowStretchFactor(int row, int stretch)'''
    def columnSpacing(self, column):
        '''float QGraphicsGridLayout.columnSpacing(int column)'''
        return float()
    def setColumnSpacing(self, column, spacing):
        '''void QGraphicsGridLayout.setColumnSpacing(int column, float spacing)'''
    def rowSpacing(self, row):
        '''float QGraphicsGridLayout.rowSpacing(int row)'''
        return float()
    def setRowSpacing(self, row, spacing):
        '''void QGraphicsGridLayout.setRowSpacing(int row, float spacing)'''
    def setSpacing(self, spacing):
        '''void QGraphicsGridLayout.setSpacing(float spacing)'''
    def verticalSpacing(self):
        '''float QGraphicsGridLayout.verticalSpacing()'''
        return float()
    def setVerticalSpacing(self, spacing):
        '''void QGraphicsGridLayout.setVerticalSpacing(float spacing)'''
    def horizontalSpacing(self):
        '''float QGraphicsGridLayout.horizontalSpacing()'''
        return float()
    def setHorizontalSpacing(self, spacing):
        '''void QGraphicsGridLayout.setHorizontalSpacing(float spacing)'''
    def addItem(self, item, row, column, rowSpan, columnSpan, alignment = 0):
        '''void QGraphicsGridLayout.addItem(QGraphicsLayoutItem item, int row, int column, int rowSpan, int columnSpan, Qt.Alignment alignment = 0)'''
    def addItem(self, aitem, arow, acolumn, alignment = 0):
        '''void QGraphicsGridLayout.addItem(QGraphicsLayoutItem aitem, int arow, int acolumn, Qt.Alignment alignment = 0)'''


class QGraphicsItem():
    """"""
    # Enum QGraphicsItem.PanelModality
    NonModal = 0
    PanelModal = 0
    SceneModal = 0

    UserType = None # int - member
    # Enum QGraphicsItem.GraphicsItemFlag
    ItemIsMovable = 0
    ItemIsSelectable = 0
    ItemIsFocusable = 0
    ItemClipsToShape = 0
    ItemClipsChildrenToShape = 0
    ItemIgnoresTransformations = 0
    ItemIgnoresParentOpacity = 0
    ItemDoesntPropagateOpacityToChildren = 0
    ItemStacksBehindParent = 0
    ItemUsesExtendedStyleOption = 0
    ItemHasNoContents = 0
    ItemSendsGeometryChanges = 0
    ItemAcceptsInputMethod = 0
    ItemNegativeZStacksBehindParent = 0
    ItemIsPanel = 0
    ItemSendsScenePositionChanges = 0

    # Enum QGraphicsItem.GraphicsItemChange
    ItemPositionChange = 0
    ItemMatrixChange = 0
    ItemVisibleChange = 0
    ItemEnabledChange = 0
    ItemSelectedChange = 0
    ItemParentChange = 0
    ItemChildAddedChange = 0
    ItemChildRemovedChange = 0
    ItemTransformChange = 0
    ItemPositionHasChanged = 0
    ItemTransformHasChanged = 0
    ItemSceneChange = 0
    ItemVisibleHasChanged = 0
    ItemEnabledHasChanged = 0
    ItemSelectedHasChanged = 0
    ItemParentHasChanged = 0
    ItemSceneHasChanged = 0
    ItemCursorChange = 0
    ItemCursorHasChanged = 0
    ItemToolTipChange = 0
    ItemToolTipHasChanged = 0
    ItemFlagsChange = 0
    ItemFlagsHaveChanged = 0
    ItemZValueChange = 0
    ItemZValueHasChanged = 0
    ItemOpacityChange = 0
    ItemOpacityHasChanged = 0
    ItemScenePositionHasChanged = 0
    ItemRotationChange = 0
    ItemRotationHasChanged = 0
    ItemScaleChange = 0
    ItemScaleHasChanged = 0
    ItemTransformOriginPointChange = 0
    ItemTransformOriginPointHasChanged = 0

    # Enum QGraphicsItem.CacheMode
    NoCache = 0
    ItemCoordinateCache = 0
    DeviceCoordinateCache = 0

    def __init__(self, parent = None, scene = None):
        '''void QGraphicsItem.__init__(QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def updateMicroFocus(self):
        '''void QGraphicsItem.updateMicroFocus()'''
    def setInputMethodHints(self, hints):
        '''void QGraphicsItem.setInputMethodHints(Qt.InputMethodHints hints)'''
    def inputMethodHints(self):
        '''Qt.InputMethodHints QGraphicsItem.inputMethodHints()'''
        return Qt.InputMethodHints()
    def stackBefore(self, sibling):
        '''void QGraphicsItem.stackBefore(QGraphicsItem sibling)'''
    def setTransformOriginPoint(self, origin):
        '''void QGraphicsItem.setTransformOriginPoint(QPointF origin)'''
    def setTransformOriginPoint(self, ax, ay):
        '''void QGraphicsItem.setTransformOriginPoint(float ax, float ay)'''
    def transformOriginPoint(self):
        '''QPointF QGraphicsItem.transformOriginPoint()'''
        return QPointF()
    def setTransformations(self, transformations):
        '''void QGraphicsItem.setTransformations(list-of-QGraphicsTransform transformations)'''
    def transformations(self):
        '''list-of-QGraphicsTransform QGraphicsItem.transformations()'''
        return [QGraphicsTransform()]
    def setScale(self, scale):
        '''void QGraphicsItem.setScale(float scale)'''
    def rotation(self):
        '''float QGraphicsItem.rotation()'''
        return float()
    def setRotation(self, angle):
        '''void QGraphicsItem.setRotation(float angle)'''
    def setY(self, y):
        '''void QGraphicsItem.setY(float y)'''
    def setX(self, x):
        '''void QGraphicsItem.setX(float x)'''
    def focusItem(self):
        '''QGraphicsItem QGraphicsItem.focusItem()'''
        return QGraphicsItem()
    def setFocusProxy(self, item):
        '''void QGraphicsItem.setFocusProxy(QGraphicsItem item)'''
    def focusProxy(self):
        '''QGraphicsItem QGraphicsItem.focusProxy()'''
        return QGraphicsItem()
    def setActive(self, active):
        '''void QGraphicsItem.setActive(bool active)'''
    def isActive(self):
        '''bool QGraphicsItem.isActive()'''
        return bool()
    def setFiltersChildEvents(self, enabled):
        '''void QGraphicsItem.setFiltersChildEvents(bool enabled)'''
    def filtersChildEvents(self):
        '''bool QGraphicsItem.filtersChildEvents()'''
        return bool()
    def setAcceptTouchEvents(self, enabled):
        '''void QGraphicsItem.setAcceptTouchEvents(bool enabled)'''
    def acceptTouchEvents(self):
        '''bool QGraphicsItem.acceptTouchEvents()'''
        return bool()
    def setGraphicsEffect(self, effect):
        '''void QGraphicsItem.setGraphicsEffect(QGraphicsEffect effect)'''
    def graphicsEffect(self):
        '''QGraphicsEffect QGraphicsItem.graphicsEffect()'''
        return QGraphicsEffect()
    def isBlockedByModalPanel(self, blockingPanel):
        '''bool QGraphicsItem.isBlockedByModalPanel(QGraphicsItem blockingPanel)'''
        return bool()
    def setPanelModality(self, panelModality):
        '''void QGraphicsItem.setPanelModality(QGraphicsItem.PanelModality panelModality)'''
    def panelModality(self):
        '''QGraphicsItem.PanelModality QGraphicsItem.panelModality()'''
        return QGraphicsItem.PanelModality()
    def toGraphicsObject(self):
        '''QGraphicsObject QGraphicsItem.toGraphicsObject()'''
        return QGraphicsObject()
    def isPanel(self):
        '''bool QGraphicsItem.isPanel()'''
        return bool()
    def panel(self):
        '''QGraphicsItem QGraphicsItem.panel()'''
        return QGraphicsItem()
    def parentObject(self):
        '''QGraphicsObject QGraphicsItem.parentObject()'''
        return QGraphicsObject()
    def mapRectFromScene(self, rect):
        '''QRectF QGraphicsItem.mapRectFromScene(QRectF rect)'''
        return QRectF()
    def mapRectFromScene(self, ax, ay, w, h):
        '''QRectF QGraphicsItem.mapRectFromScene(float ax, float ay, float w, float h)'''
        return QRectF()
    def mapRectFromParent(self, rect):
        '''QRectF QGraphicsItem.mapRectFromParent(QRectF rect)'''
        return QRectF()
    def mapRectFromParent(self, ax, ay, w, h):
        '''QRectF QGraphicsItem.mapRectFromParent(float ax, float ay, float w, float h)'''
        return QRectF()
    def mapRectFromItem(self, item, rect):
        '''QRectF QGraphicsItem.mapRectFromItem(QGraphicsItem item, QRectF rect)'''
        return QRectF()
    def mapRectFromItem(self, item, ax, ay, w, h):
        '''QRectF QGraphicsItem.mapRectFromItem(QGraphicsItem item, float ax, float ay, float w, float h)'''
        return QRectF()
    def mapRectToScene(self, rect):
        '''QRectF QGraphicsItem.mapRectToScene(QRectF rect)'''
        return QRectF()
    def mapRectToScene(self, ax, ay, w, h):
        '''QRectF QGraphicsItem.mapRectToScene(float ax, float ay, float w, float h)'''
        return QRectF()
    def mapRectToParent(self, rect):
        '''QRectF QGraphicsItem.mapRectToParent(QRectF rect)'''
        return QRectF()
    def mapRectToParent(self, ax, ay, w, h):
        '''QRectF QGraphicsItem.mapRectToParent(float ax, float ay, float w, float h)'''
        return QRectF()
    def mapRectToItem(self, item, rect):
        '''QRectF QGraphicsItem.mapRectToItem(QGraphicsItem item, QRectF rect)'''
        return QRectF()
    def mapRectToItem(self, item, ax, ay, w, h):
        '''QRectF QGraphicsItem.mapRectToItem(QGraphicsItem item, float ax, float ay, float w, float h)'''
        return QRectF()
    def clipPath(self):
        '''QPainterPath QGraphicsItem.clipPath()'''
        return QPainterPath()
    def isClipped(self):
        '''bool QGraphicsItem.isClipped()'''
        return bool()
    def itemTransform(self, other, ok):
        '''QTransform QGraphicsItem.itemTransform(QGraphicsItem other, bool ok)'''
        return QTransform()
    def setOpacity(self, opacity):
        '''void QGraphicsItem.setOpacity(float opacity)'''
    def effectiveOpacity(self):
        '''float QGraphicsItem.effectiveOpacity()'''
        return float()
    def opacity(self):
        '''float QGraphicsItem.opacity()'''
        return float()
    def isUnderMouse(self):
        '''bool QGraphicsItem.isUnderMouse()'''
        return bool()
    def commonAncestorItem(self, other):
        '''QGraphicsItem QGraphicsItem.commonAncestorItem(QGraphicsItem other)'''
        return QGraphicsItem()
    def scroll(self, dx, dy, rect = QRectF()):
        '''void QGraphicsItem.scroll(float dx, float dy, QRectF rect = QRectF())'''
    def setBoundingRegionGranularity(self, granularity):
        '''void QGraphicsItem.setBoundingRegionGranularity(float granularity)'''
    def boundingRegionGranularity(self):
        '''float QGraphicsItem.boundingRegionGranularity()'''
        return float()
    def boundingRegion(self, itemToDeviceTransform):
        '''QRegion QGraphicsItem.boundingRegion(QTransform itemToDeviceTransform)'''
        return QRegion()
    def ungrabKeyboard(self):
        '''void QGraphicsItem.ungrabKeyboard()'''
    def grabKeyboard(self):
        '''void QGraphicsItem.grabKeyboard()'''
    def ungrabMouse(self):
        '''void QGraphicsItem.ungrabMouse()'''
    def grabMouse(self):
        '''void QGraphicsItem.grabMouse()'''
    def setAcceptHoverEvents(self, enabled):
        '''void QGraphicsItem.setAcceptHoverEvents(bool enabled)'''
    def acceptHoverEvents(self):
        '''bool QGraphicsItem.acceptHoverEvents()'''
        return bool()
    def isVisibleTo(self, parent):
        '''bool QGraphicsItem.isVisibleTo(QGraphicsItem parent)'''
        return bool()
    def setCacheMode(self, mode, logicalCacheSize = QSize()):
        '''void QGraphicsItem.setCacheMode(QGraphicsItem.CacheMode mode, QSize logicalCacheSize = QSize())'''
    def cacheMode(self):
        '''QGraphicsItem.CacheMode QGraphicsItem.cacheMode()'''
        return QGraphicsItem.CacheMode()
    def isWindow(self):
        '''bool QGraphicsItem.isWindow()'''
        return bool()
    def isWidget(self):
        '''bool QGraphicsItem.isWidget()'''
        return bool()
    def childItems(self):
        '''list-of-QGraphicsItem QGraphicsItem.childItems()'''
        return [QGraphicsItem()]
    def window(self):
        '''QGraphicsWidget QGraphicsItem.window()'''
        return QGraphicsWidget()
    def topLevelWidget(self):
        '''QGraphicsWidget QGraphicsItem.topLevelWidget()'''
        return QGraphicsWidget()
    def parentWidget(self):
        '''QGraphicsWidget QGraphicsItem.parentWidget()'''
        return QGraphicsWidget()
    def resetTransform(self):
        '''void QGraphicsItem.resetTransform()'''
    def setTransform(self, matrix, combine = False):
        '''void QGraphicsItem.setTransform(QTransform matrix, bool combine = False)'''
    def deviceTransform(self, viewportTransform):
        '''QTransform QGraphicsItem.deviceTransform(QTransform viewportTransform)'''
        return QTransform()
    def sceneTransform(self):
        '''QTransform QGraphicsItem.sceneTransform()'''
        return QTransform()
    def transform(self):
        '''QTransform QGraphicsItem.transform()'''
        return QTransform()
    def wheelEvent(self, event):
        '''void QGraphicsItem.wheelEvent(QGraphicsSceneWheelEvent event)'''
    def sceneEventFilter(self, watched, event):
        '''bool QGraphicsItem.sceneEventFilter(QGraphicsItem watched, QEvent event)'''
        return bool()
    def sceneEvent(self, event):
        '''bool QGraphicsItem.sceneEvent(QEvent event)'''
        return bool()
    def prepareGeometryChange(self):
        '''void QGraphicsItem.prepareGeometryChange()'''
    def mouseReleaseEvent(self, event):
        '''void QGraphicsItem.mouseReleaseEvent(QGraphicsSceneMouseEvent event)'''
    def mousePressEvent(self, event):
        '''void QGraphicsItem.mousePressEvent(QGraphicsSceneMouseEvent event)'''
    def mouseMoveEvent(self, event):
        '''void QGraphicsItem.mouseMoveEvent(QGraphicsSceneMouseEvent event)'''
    def mouseDoubleClickEvent(self, event):
        '''void QGraphicsItem.mouseDoubleClickEvent(QGraphicsSceneMouseEvent event)'''
    def keyReleaseEvent(self, event):
        '''void QGraphicsItem.keyReleaseEvent(QKeyEvent event)'''
    def keyPressEvent(self, event):
        '''void QGraphicsItem.keyPressEvent(QKeyEvent event)'''
    def itemChange(self, change, value):
        '''QVariant QGraphicsItem.itemChange(QGraphicsItem.GraphicsItemChange change, QVariant value)'''
        return QVariant()
    def inputMethodQuery(self, query):
        '''QVariant QGraphicsItem.inputMethodQuery(Qt.InputMethodQuery query)'''
        return QVariant()
    def inputMethodEvent(self, event):
        '''void QGraphicsItem.inputMethodEvent(QInputMethodEvent event)'''
    def hoverMoveEvent(self, event):
        '''void QGraphicsItem.hoverMoveEvent(QGraphicsSceneHoverEvent event)'''
    def hoverLeaveEvent(self, event):
        '''void QGraphicsItem.hoverLeaveEvent(QGraphicsSceneHoverEvent event)'''
    def hoverEnterEvent(self, event):
        '''void QGraphicsItem.hoverEnterEvent(QGraphicsSceneHoverEvent event)'''
    def focusOutEvent(self, event):
        '''void QGraphicsItem.focusOutEvent(QFocusEvent event)'''
    def focusInEvent(self, event):
        '''void QGraphicsItem.focusInEvent(QFocusEvent event)'''
    def dropEvent(self, event):
        '''void QGraphicsItem.dropEvent(QGraphicsSceneDragDropEvent event)'''
    def dragMoveEvent(self, event):
        '''void QGraphicsItem.dragMoveEvent(QGraphicsSceneDragDropEvent event)'''
    def dragLeaveEvent(self, event):
        '''void QGraphicsItem.dragLeaveEvent(QGraphicsSceneDragDropEvent event)'''
    def dragEnterEvent(self, event):
        '''void QGraphicsItem.dragEnterEvent(QGraphicsSceneDragDropEvent event)'''
    def contextMenuEvent(self, event):
        '''void QGraphicsItem.contextMenuEvent(QGraphicsSceneContextMenuEvent event)'''
    def removeSceneEventFilter(self, filterItem):
        '''void QGraphicsItem.removeSceneEventFilter(QGraphicsItem filterItem)'''
    def installSceneEventFilter(self, filterItem):
        '''void QGraphicsItem.installSceneEventFilter(QGraphicsItem filterItem)'''
    def type(self):
        '''int QGraphicsItem.type()'''
        return int()
    def setData(self, key, value):
        '''void QGraphicsItem.setData(int key, QVariant value)'''
    def data(self, key):
        '''QVariant QGraphicsItem.data(int key)'''
        return QVariant()
    def isAncestorOf(self, child):
        '''bool QGraphicsItem.isAncestorOf(QGraphicsItem child)'''
        return bool()
    def mapFromScene(self, point):
        '''QPointF QGraphicsItem.mapFromScene(QPointF point)'''
        return QPointF()
    def mapFromScene(self, rect):
        '''QPolygonF QGraphicsItem.mapFromScene(QRectF rect)'''
        return QPolygonF()
    def mapFromScene(self, polygon):
        '''QPolygonF QGraphicsItem.mapFromScene(QPolygonF polygon)'''
        return QPolygonF()
    def mapFromScene(self, path):
        '''QPainterPath QGraphicsItem.mapFromScene(QPainterPath path)'''
        return QPainterPath()
    def mapFromScene(self, ax, ay):
        '''QPointF QGraphicsItem.mapFromScene(float ax, float ay)'''
        return QPointF()
    def mapFromScene(self, ax, ay, w, h):
        '''QPolygonF QGraphicsItem.mapFromScene(float ax, float ay, float w, float h)'''
        return QPolygonF()
    def mapFromParent(self, point):
        '''QPointF QGraphicsItem.mapFromParent(QPointF point)'''
        return QPointF()
    def mapFromParent(self, rect):
        '''QPolygonF QGraphicsItem.mapFromParent(QRectF rect)'''
        return QPolygonF()
    def mapFromParent(self, polygon):
        '''QPolygonF QGraphicsItem.mapFromParent(QPolygonF polygon)'''
        return QPolygonF()
    def mapFromParent(self, path):
        '''QPainterPath QGraphicsItem.mapFromParent(QPainterPath path)'''
        return QPainterPath()
    def mapFromParent(self, ax, ay):
        '''QPointF QGraphicsItem.mapFromParent(float ax, float ay)'''
        return QPointF()
    def mapFromParent(self, ax, ay, w, h):
        '''QPolygonF QGraphicsItem.mapFromParent(float ax, float ay, float w, float h)'''
        return QPolygonF()
    def mapFromItem(self, item, point):
        '''QPointF QGraphicsItem.mapFromItem(QGraphicsItem item, QPointF point)'''
        return QPointF()
    def mapFromItem(self, item, rect):
        '''QPolygonF QGraphicsItem.mapFromItem(QGraphicsItem item, QRectF rect)'''
        return QPolygonF()
    def mapFromItem(self, item, polygon):
        '''QPolygonF QGraphicsItem.mapFromItem(QGraphicsItem item, QPolygonF polygon)'''
        return QPolygonF()
    def mapFromItem(self, item, path):
        '''QPainterPath QGraphicsItem.mapFromItem(QGraphicsItem item, QPainterPath path)'''
        return QPainterPath()
    def mapFromItem(self, item, ax, ay):
        '''QPointF QGraphicsItem.mapFromItem(QGraphicsItem item, float ax, float ay)'''
        return QPointF()
    def mapFromItem(self, item, ax, ay, w, h):
        '''QPolygonF QGraphicsItem.mapFromItem(QGraphicsItem item, float ax, float ay, float w, float h)'''
        return QPolygonF()
    def mapToScene(self, point):
        '''QPointF QGraphicsItem.mapToScene(QPointF point)'''
        return QPointF()
    def mapToScene(self, rect):
        '''QPolygonF QGraphicsItem.mapToScene(QRectF rect)'''
        return QPolygonF()
    def mapToScene(self, polygon):
        '''QPolygonF QGraphicsItem.mapToScene(QPolygonF polygon)'''
        return QPolygonF()
    def mapToScene(self, path):
        '''QPainterPath QGraphicsItem.mapToScene(QPainterPath path)'''
        return QPainterPath()
    def mapToScene(self, ax, ay):
        '''QPointF QGraphicsItem.mapToScene(float ax, float ay)'''
        return QPointF()
    def mapToScene(self, ax, ay, w, h):
        '''QPolygonF QGraphicsItem.mapToScene(float ax, float ay, float w, float h)'''
        return QPolygonF()
    def mapToParent(self, point):
        '''QPointF QGraphicsItem.mapToParent(QPointF point)'''
        return QPointF()
    def mapToParent(self, rect):
        '''QPolygonF QGraphicsItem.mapToParent(QRectF rect)'''
        return QPolygonF()
    def mapToParent(self, polygon):
        '''QPolygonF QGraphicsItem.mapToParent(QPolygonF polygon)'''
        return QPolygonF()
    def mapToParent(self, path):
        '''QPainterPath QGraphicsItem.mapToParent(QPainterPath path)'''
        return QPainterPath()
    def mapToParent(self, ax, ay):
        '''QPointF QGraphicsItem.mapToParent(float ax, float ay)'''
        return QPointF()
    def mapToParent(self, ax, ay, w, h):
        '''QPolygonF QGraphicsItem.mapToParent(float ax, float ay, float w, float h)'''
        return QPolygonF()
    def mapToItem(self, item, point):
        '''QPointF QGraphicsItem.mapToItem(QGraphicsItem item, QPointF point)'''
        return QPointF()
    def mapToItem(self, item, rect):
        '''QPolygonF QGraphicsItem.mapToItem(QGraphicsItem item, QRectF rect)'''
        return QPolygonF()
    def mapToItem(self, item, polygon):
        '''QPolygonF QGraphicsItem.mapToItem(QGraphicsItem item, QPolygonF polygon)'''
        return QPolygonF()
    def mapToItem(self, item, path):
        '''QPainterPath QGraphicsItem.mapToItem(QGraphicsItem item, QPainterPath path)'''
        return QPainterPath()
    def mapToItem(self, item, ax, ay):
        '''QPointF QGraphicsItem.mapToItem(QGraphicsItem item, float ax, float ay)'''
        return QPointF()
    def mapToItem(self, item, ax, ay, w, h):
        '''QPolygonF QGraphicsItem.mapToItem(QGraphicsItem item, float ax, float ay, float w, float h)'''
        return QPolygonF()
    def update(self, rect = QRectF()):
        '''void QGraphicsItem.update(QRectF rect = QRectF())'''
    def update(self, ax, ay, width, height):
        '''void QGraphicsItem.update(float ax, float ay, float width, float height)'''
    def paint(self, painter, option, widget = None):
        '''abstract void QGraphicsItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget = None)'''
    def opaqueArea(self):
        '''QPainterPath QGraphicsItem.opaqueArea()'''
        return QPainterPath()
    def isObscuredBy(self, item):
        '''bool QGraphicsItem.isObscuredBy(QGraphicsItem item)'''
        return bool()
    def isObscured(self):
        '''bool QGraphicsItem.isObscured()'''
        return bool()
    def isObscured(self, rect):
        '''bool QGraphicsItem.isObscured(QRectF rect)'''
        return bool()
    def isObscured(self, ax, ay, w, h):
        '''bool QGraphicsItem.isObscured(float ax, float ay, float w, float h)'''
        return bool()
    def collidingItems(self, mode = None):
        '''list-of-QGraphicsItem QGraphicsItem.collidingItems(Qt.ItemSelectionMode mode = Qt.IntersectsItemShape)'''
        return [QGraphicsItem()]
    def collidesWithPath(self, path, mode = None):
        '''bool QGraphicsItem.collidesWithPath(QPainterPath path, Qt.ItemSelectionMode mode = Qt.IntersectsItemShape)'''
        return bool()
    def collidesWithItem(self, other, mode = None):
        '''bool QGraphicsItem.collidesWithItem(QGraphicsItem other, Qt.ItemSelectionMode mode = Qt.IntersectsItemShape)'''
        return bool()
    def contains(self, point):
        '''bool QGraphicsItem.contains(QPointF point)'''
        return bool()
    def shape(self):
        '''QPainterPath QGraphicsItem.shape()'''
        return QPainterPath()
    def sceneBoundingRect(self):
        '''QRectF QGraphicsItem.sceneBoundingRect()'''
        return QRectF()
    def childrenBoundingRect(self):
        '''QRectF QGraphicsItem.childrenBoundingRect()'''
        return QRectF()
    def boundingRect(self):
        '''abstract QRectF QGraphicsItem.boundingRect()'''
        return QRectF()
    def setZValue(self, z):
        '''void QGraphicsItem.setZValue(float z)'''
    def zValue(self):
        '''float QGraphicsItem.zValue()'''
        return float()
    def advance(self, phase):
        '''void QGraphicsItem.advance(int phase)'''
    def translate(self, dx, dy):
        '''void QGraphicsItem.translate(float dx, float dy)'''
    def shear(self, sh, sv):
        '''void QGraphicsItem.shear(float sh, float sv)'''
    def scale(self, sx, sy):
        '''void QGraphicsItem.scale(float sx, float sy)'''
    def scale(self):
        '''float QGraphicsItem.scale()'''
        return float()
    def rotate(self, angle):
        '''void QGraphicsItem.rotate(float angle)'''
    def resetMatrix(self):
        '''void QGraphicsItem.resetMatrix()'''
    def setMatrix(self, matrix, combine = False):
        '''void QGraphicsItem.setMatrix(QMatrix matrix, bool combine = False)'''
    def sceneMatrix(self):
        '''QMatrix QGraphicsItem.sceneMatrix()'''
        return QMatrix()
    def matrix(self):
        '''QMatrix QGraphicsItem.matrix()'''
        return QMatrix()
    def ensureVisible(self, rect = QRectF(), xMargin = 50, yMargin = 50):
        '''void QGraphicsItem.ensureVisible(QRectF rect = QRectF(), int xMargin = 50, int yMargin = 50)'''
    def ensureVisible(self, x, y, w, h, xMargin = 50, yMargin = 50):
        '''void QGraphicsItem.ensureVisible(float x, float y, float w, float h, int xMargin = 50, int yMargin = 50)'''
    def moveBy(self, dx, dy):
        '''void QGraphicsItem.moveBy(float dx, float dy)'''
    def setPos(self, pos):
        '''void QGraphicsItem.setPos(QPointF pos)'''
    def setPos(self, ax, ay):
        '''void QGraphicsItem.setPos(float ax, float ay)'''
    def scenePos(self):
        '''QPointF QGraphicsItem.scenePos()'''
        return QPointF()
    def y(self):
        '''float QGraphicsItem.y()'''
        return float()
    def x(self):
        '''float QGraphicsItem.x()'''
        return float()
    def pos(self):
        '''QPointF QGraphicsItem.pos()'''
        return QPointF()
    def clearFocus(self):
        '''void QGraphicsItem.clearFocus()'''
    def setFocus(self, focusReason = None):
        '''void QGraphicsItem.setFocus(Qt.FocusReason focusReason = Qt.OtherFocusReason)'''
    def hasFocus(self):
        '''bool QGraphicsItem.hasFocus()'''
        return bool()
    def setHandlesChildEvents(self, enabled):
        '''void QGraphicsItem.setHandlesChildEvents(bool enabled)'''
    def handlesChildEvents(self):
        '''bool QGraphicsItem.handlesChildEvents()'''
        return bool()
    def setAcceptsHoverEvents(self, enabled):
        '''void QGraphicsItem.setAcceptsHoverEvents(bool enabled)'''
    def acceptsHoverEvents(self):
        '''bool QGraphicsItem.acceptsHoverEvents()'''
        return bool()
    def setAcceptedMouseButtons(self, buttons):
        '''void QGraphicsItem.setAcceptedMouseButtons(Qt.MouseButtons buttons)'''
    def acceptedMouseButtons(self):
        '''Qt.MouseButtons QGraphicsItem.acceptedMouseButtons()'''
        return Qt.MouseButtons()
    def setAcceptDrops(self, on):
        '''void QGraphicsItem.setAcceptDrops(bool on)'''
    def acceptDrops(self):
        '''bool QGraphicsItem.acceptDrops()'''
        return bool()
    def setSelected(self, selected):
        '''void QGraphicsItem.setSelected(bool selected)'''
    def isSelected(self):
        '''bool QGraphicsItem.isSelected()'''
        return bool()
    def setEnabled(self, enabled):
        '''void QGraphicsItem.setEnabled(bool enabled)'''
    def isEnabled(self):
        '''bool QGraphicsItem.isEnabled()'''
        return bool()
    def show(self):
        '''void QGraphicsItem.show()'''
    def hide(self):
        '''void QGraphicsItem.hide()'''
    def setVisible(self, visible):
        '''void QGraphicsItem.setVisible(bool visible)'''
    def isVisible(self):
        '''bool QGraphicsItem.isVisible()'''
        return bool()
    def unsetCursor(self):
        '''void QGraphicsItem.unsetCursor()'''
    def hasCursor(self):
        '''bool QGraphicsItem.hasCursor()'''
        return bool()
    def setCursor(self, cursor):
        '''void QGraphicsItem.setCursor(QCursor cursor)'''
    def cursor(self):
        '''QCursor QGraphicsItem.cursor()'''
        return QCursor()
    def setToolTip(self, toolTip):
        '''void QGraphicsItem.setToolTip(QString toolTip)'''
    def toolTip(self):
        '''QString QGraphicsItem.toolTip()'''
        return QString()
    def setFlags(self, flags):
        '''void QGraphicsItem.setFlags(QGraphicsItem.GraphicsItemFlags flags)'''
    def setFlag(self, flag, enabled = True):
        '''void QGraphicsItem.setFlag(QGraphicsItem.GraphicsItemFlag flag, bool enabled = True)'''
    def flags(self):
        '''QGraphicsItem.GraphicsItemFlags QGraphicsItem.flags()'''
        return QGraphicsItem.GraphicsItemFlags()
    def setGroup(self, group):
        '''void QGraphicsItem.setGroup(QGraphicsItemGroup group)'''
    def group(self):
        '''QGraphicsItemGroup QGraphicsItem.group()'''
        return QGraphicsItemGroup()
    def setParentItem(self, parent):
        '''void QGraphicsItem.setParentItem(QGraphicsItem parent)'''
    def topLevelItem(self):
        '''QGraphicsItem QGraphicsItem.topLevelItem()'''
        return QGraphicsItem()
    def parentItem(self):
        '''QGraphicsItem QGraphicsItem.parentItem()'''
        return QGraphicsItem()
    def scene(self):
        '''QGraphicsScene QGraphicsItem.scene()'''
        return QGraphicsScene()
    class GraphicsItemFlags():
        """"""
        def __init__(self):
            '''QGraphicsItem.GraphicsItemFlags QGraphicsItem.GraphicsItemFlags.__init__()'''
            return QGraphicsItem.GraphicsItemFlags()
        def __init__(self):
            '''int QGraphicsItem.GraphicsItemFlags.__init__()'''
            return int()
        def __init__(self):
            '''void QGraphicsItem.GraphicsItemFlags.__init__()'''
        def __bool__(self):
            '''int QGraphicsItem.GraphicsItemFlags.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QGraphicsItem.GraphicsItemFlags.__ne__(QGraphicsItem.GraphicsItemFlags f)'''
            return bool()
        def __eq__(self, f):
            '''bool QGraphicsItem.GraphicsItemFlags.__eq__(QGraphicsItem.GraphicsItemFlags f)'''
            return bool()
        def __invert__(self):
            '''QGraphicsItem.GraphicsItemFlags QGraphicsItem.GraphicsItemFlags.__invert__()'''
            return QGraphicsItem.GraphicsItemFlags()
        def __and__(self, mask):
            '''QGraphicsItem.GraphicsItemFlags QGraphicsItem.GraphicsItemFlags.__and__(int mask)'''
            return QGraphicsItem.GraphicsItemFlags()
        def __xor__(self, f):
            '''QGraphicsItem.GraphicsItemFlags QGraphicsItem.GraphicsItemFlags.__xor__(QGraphicsItem.GraphicsItemFlags f)'''
            return QGraphicsItem.GraphicsItemFlags()
        def __xor__(self, f):
            '''QGraphicsItem.GraphicsItemFlags QGraphicsItem.GraphicsItemFlags.__xor__(int f)'''
            return QGraphicsItem.GraphicsItemFlags()
        def __or__(self, f):
            '''QGraphicsItem.GraphicsItemFlags QGraphicsItem.GraphicsItemFlags.__or__(QGraphicsItem.GraphicsItemFlags f)'''
            return QGraphicsItem.GraphicsItemFlags()
        def __or__(self, f):
            '''QGraphicsItem.GraphicsItemFlags QGraphicsItem.GraphicsItemFlags.__or__(int f)'''
            return QGraphicsItem.GraphicsItemFlags()
        def __int__(self):
            '''int QGraphicsItem.GraphicsItemFlags.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QGraphicsItem.GraphicsItemFlags QGraphicsItem.GraphicsItemFlags.__ixor__(QGraphicsItem.GraphicsItemFlags f)'''
            return QGraphicsItem.GraphicsItemFlags()
        def __ior__(self, f):
            '''QGraphicsItem.GraphicsItemFlags QGraphicsItem.GraphicsItemFlags.__ior__(QGraphicsItem.GraphicsItemFlags f)'''
            return QGraphicsItem.GraphicsItemFlags()
        def __iand__(self, mask):
            '''QGraphicsItem.GraphicsItemFlags QGraphicsItem.GraphicsItemFlags.__iand__(int mask)'''
            return QGraphicsItem.GraphicsItemFlags()


class QAbstractGraphicsShapeItem(QGraphicsItem):
    """"""
    def __init__(self, parent = None, scene = None):
        '''void QAbstractGraphicsShapeItem.__init__(QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def opaqueArea(self):
        '''QPainterPath QAbstractGraphicsShapeItem.opaqueArea()'''
        return QPainterPath()
    def isObscuredBy(self, item):
        '''bool QAbstractGraphicsShapeItem.isObscuredBy(QGraphicsItem item)'''
        return bool()
    def setBrush(self, brush):
        '''void QAbstractGraphicsShapeItem.setBrush(QBrush brush)'''
    def brush(self):
        '''QBrush QAbstractGraphicsShapeItem.brush()'''
        return QBrush()
    def setPen(self, pen):
        '''void QAbstractGraphicsShapeItem.setPen(QPen pen)'''
    def pen(self):
        '''QPen QAbstractGraphicsShapeItem.pen()'''
        return QPen()


class QGraphicsPathItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(self, parent = None, scene = None):
        '''void QGraphicsPathItem.__init__(QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def __init__(self, path, parent = None, scene = None):
        '''void QGraphicsPathItem.__init__(QPainterPath path, QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def type(self):
        '''int QGraphicsPathItem.type()'''
        return int()
    def opaqueArea(self):
        '''QPainterPath QGraphicsPathItem.opaqueArea()'''
        return QPainterPath()
    def isObscuredBy(self, item):
        '''bool QGraphicsPathItem.isObscuredBy(QGraphicsItem item)'''
        return bool()
    def paint(self, painter, option, widget = None):
        '''void QGraphicsPathItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget = None)'''
    def contains(self, point):
        '''bool QGraphicsPathItem.contains(QPointF point)'''
        return bool()
    def shape(self):
        '''QPainterPath QGraphicsPathItem.shape()'''
        return QPainterPath()
    def boundingRect(self):
        '''QRectF QGraphicsPathItem.boundingRect()'''
        return QRectF()
    def setPath(self, path):
        '''void QGraphicsPathItem.setPath(QPainterPath path)'''
    def path(self):
        '''QPainterPath QGraphicsPathItem.path()'''
        return QPainterPath()


class QGraphicsRectItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(self, parent = None, scene = None):
        '''void QGraphicsRectItem.__init__(QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def __init__(self, rect, parent = None, scene = None):
        '''void QGraphicsRectItem.__init__(QRectF rect, QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def __init__(self, x, y, w, h, parent = None, scene = None):
        '''void QGraphicsRectItem.__init__(float x, float y, float w, float h, QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def type(self):
        '''int QGraphicsRectItem.type()'''
        return int()
    def opaqueArea(self):
        '''QPainterPath QGraphicsRectItem.opaqueArea()'''
        return QPainterPath()
    def isObscuredBy(self, item):
        '''bool QGraphicsRectItem.isObscuredBy(QGraphicsItem item)'''
        return bool()
    def paint(self, painter, option, widget = None):
        '''void QGraphicsRectItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget = None)'''
    def contains(self, point):
        '''bool QGraphicsRectItem.contains(QPointF point)'''
        return bool()
    def shape(self):
        '''QPainterPath QGraphicsRectItem.shape()'''
        return QPainterPath()
    def boundingRect(self):
        '''QRectF QGraphicsRectItem.boundingRect()'''
        return QRectF()
    def setRect(self, rect):
        '''void QGraphicsRectItem.setRect(QRectF rect)'''
    def setRect(self, ax, ay, w, h):
        '''void QGraphicsRectItem.setRect(float ax, float ay, float w, float h)'''
    def rect(self):
        '''QRectF QGraphicsRectItem.rect()'''
        return QRectF()


class QGraphicsEllipseItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(self, parent = None, scene = None):
        '''void QGraphicsEllipseItem.__init__(QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def __init__(self, rect, parent = None, scene = None):
        '''void QGraphicsEllipseItem.__init__(QRectF rect, QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def __init__(self, x, y, w, h, parent = None, scene = None):
        '''void QGraphicsEllipseItem.__init__(float x, float y, float w, float h, QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def type(self):
        '''int QGraphicsEllipseItem.type()'''
        return int()
    def opaqueArea(self):
        '''QPainterPath QGraphicsEllipseItem.opaqueArea()'''
        return QPainterPath()
    def isObscuredBy(self, item):
        '''bool QGraphicsEllipseItem.isObscuredBy(QGraphicsItem item)'''
        return bool()
    def paint(self, painter, option, widget = None):
        '''void QGraphicsEllipseItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget = None)'''
    def contains(self, point):
        '''bool QGraphicsEllipseItem.contains(QPointF point)'''
        return bool()
    def shape(self):
        '''QPainterPath QGraphicsEllipseItem.shape()'''
        return QPainterPath()
    def boundingRect(self):
        '''QRectF QGraphicsEllipseItem.boundingRect()'''
        return QRectF()
    def setSpanAngle(self, angle):
        '''void QGraphicsEllipseItem.setSpanAngle(int angle)'''
    def spanAngle(self):
        '''int QGraphicsEllipseItem.spanAngle()'''
        return int()
    def setStartAngle(self, angle):
        '''void QGraphicsEllipseItem.setStartAngle(int angle)'''
    def startAngle(self):
        '''int QGraphicsEllipseItem.startAngle()'''
        return int()
    def setRect(self, rect):
        '''void QGraphicsEllipseItem.setRect(QRectF rect)'''
    def setRect(self, ax, ay, w, h):
        '''void QGraphicsEllipseItem.setRect(float ax, float ay, float w, float h)'''
    def rect(self):
        '''QRectF QGraphicsEllipseItem.rect()'''
        return QRectF()


class QGraphicsPolygonItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(self, parent = None, scene = None):
        '''void QGraphicsPolygonItem.__init__(QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def __init__(self, polygon, parent = None, scene = None):
        '''void QGraphicsPolygonItem.__init__(QPolygonF polygon, QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def type(self):
        '''int QGraphicsPolygonItem.type()'''
        return int()
    def opaqueArea(self):
        '''QPainterPath QGraphicsPolygonItem.opaqueArea()'''
        return QPainterPath()
    def isObscuredBy(self, item):
        '''bool QGraphicsPolygonItem.isObscuredBy(QGraphicsItem item)'''
        return bool()
    def paint(self, painter, option, widget = None):
        '''void QGraphicsPolygonItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget = None)'''
    def contains(self, point):
        '''bool QGraphicsPolygonItem.contains(QPointF point)'''
        return bool()
    def shape(self):
        '''QPainterPath QGraphicsPolygonItem.shape()'''
        return QPainterPath()
    def boundingRect(self):
        '''QRectF QGraphicsPolygonItem.boundingRect()'''
        return QRectF()
    def setFillRule(self, rule):
        '''void QGraphicsPolygonItem.setFillRule(Qt.FillRule rule)'''
    def fillRule(self):
        '''Qt.FillRule QGraphicsPolygonItem.fillRule()'''
        return Qt.FillRule()
    def setPolygon(self, polygon):
        '''void QGraphicsPolygonItem.setPolygon(QPolygonF polygon)'''
    def polygon(self):
        '''QPolygonF QGraphicsPolygonItem.polygon()'''
        return QPolygonF()


class QGraphicsLineItem(QGraphicsItem):
    """"""
    def __init__(self, parent = None, scene = None):
        '''void QGraphicsLineItem.__init__(QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def __init__(self, line, parent = None, scene = None):
        '''void QGraphicsLineItem.__init__(QLineF line, QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def __init__(self, x1, y1, x2, y2, parent = None, scene = None):
        '''void QGraphicsLineItem.__init__(float x1, float y1, float x2, float y2, QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def type(self):
        '''int QGraphicsLineItem.type()'''
        return int()
    def opaqueArea(self):
        '''QPainterPath QGraphicsLineItem.opaqueArea()'''
        return QPainterPath()
    def isObscuredBy(self, item):
        '''bool QGraphicsLineItem.isObscuredBy(QGraphicsItem item)'''
        return bool()
    def paint(self, painter, option, widget = None):
        '''void QGraphicsLineItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget = None)'''
    def contains(self, point):
        '''bool QGraphicsLineItem.contains(QPointF point)'''
        return bool()
    def shape(self):
        '''QPainterPath QGraphicsLineItem.shape()'''
        return QPainterPath()
    def boundingRect(self):
        '''QRectF QGraphicsLineItem.boundingRect()'''
        return QRectF()
    def setLine(self, line):
        '''void QGraphicsLineItem.setLine(QLineF line)'''
    def setLine(self, x1, y1, x2, y2):
        '''void QGraphicsLineItem.setLine(float x1, float y1, float x2, float y2)'''
    def line(self):
        '''QLineF QGraphicsLineItem.line()'''
        return QLineF()
    def setPen(self, pen):
        '''void QGraphicsLineItem.setPen(QPen pen)'''
    def pen(self):
        '''QPen QGraphicsLineItem.pen()'''
        return QPen()


class QGraphicsPixmapItem(QGraphicsItem):
    """"""
    # Enum QGraphicsPixmapItem.ShapeMode
    MaskShape = 0
    BoundingRectShape = 0
    HeuristicMaskShape = 0

    def __init__(self, parent = None, scene = None):
        '''void QGraphicsPixmapItem.__init__(QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def __init__(self, pixmap, parent = None, scene = None):
        '''void QGraphicsPixmapItem.__init__(QPixmap pixmap, QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def setShapeMode(self, mode):
        '''void QGraphicsPixmapItem.setShapeMode(QGraphicsPixmapItem.ShapeMode mode)'''
    def shapeMode(self):
        '''QGraphicsPixmapItem.ShapeMode QGraphicsPixmapItem.shapeMode()'''
        return QGraphicsPixmapItem.ShapeMode()
    def type(self):
        '''int QGraphicsPixmapItem.type()'''
        return int()
    def opaqueArea(self):
        '''QPainterPath QGraphicsPixmapItem.opaqueArea()'''
        return QPainterPath()
    def isObscuredBy(self, item):
        '''bool QGraphicsPixmapItem.isObscuredBy(QGraphicsItem item)'''
        return bool()
    def paint(self, painter, option, widget):
        '''void QGraphicsPixmapItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget)'''
    def contains(self, point):
        '''bool QGraphicsPixmapItem.contains(QPointF point)'''
        return bool()
    def shape(self):
        '''QPainterPath QGraphicsPixmapItem.shape()'''
        return QPainterPath()
    def boundingRect(self):
        '''QRectF QGraphicsPixmapItem.boundingRect()'''
        return QRectF()
    def setOffset(self, offset):
        '''void QGraphicsPixmapItem.setOffset(QPointF offset)'''
    def setOffset(self, ax, ay):
        '''void QGraphicsPixmapItem.setOffset(float ax, float ay)'''
    def offset(self):
        '''QPointF QGraphicsPixmapItem.offset()'''
        return QPointF()
    def setTransformationMode(self, mode):
        '''void QGraphicsPixmapItem.setTransformationMode(Qt.TransformationMode mode)'''
    def transformationMode(self):
        '''Qt.TransformationMode QGraphicsPixmapItem.transformationMode()'''
        return Qt.TransformationMode()
    def setPixmap(self, pixmap):
        '''void QGraphicsPixmapItem.setPixmap(QPixmap pixmap)'''
    def pixmap(self):
        '''QPixmap QGraphicsPixmapItem.pixmap()'''
        return QPixmap()


class QGraphicsSimpleTextItem(QAbstractGraphicsShapeItem):
    """"""
    def __init__(self, parent = None, scene = None):
        '''void QGraphicsSimpleTextItem.__init__(QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def __init__(self, text, parent = None, scene = None):
        '''void QGraphicsSimpleTextItem.__init__(QString text, QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def type(self):
        '''int QGraphicsSimpleTextItem.type()'''
        return int()
    def opaqueArea(self):
        '''QPainterPath QGraphicsSimpleTextItem.opaqueArea()'''
        return QPainterPath()
    def isObscuredBy(self, item):
        '''bool QGraphicsSimpleTextItem.isObscuredBy(QGraphicsItem item)'''
        return bool()
    def paint(self, painter, option, widget):
        '''void QGraphicsSimpleTextItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget)'''
    def contains(self, point):
        '''bool QGraphicsSimpleTextItem.contains(QPointF point)'''
        return bool()
    def shape(self):
        '''QPainterPath QGraphicsSimpleTextItem.shape()'''
        return QPainterPath()
    def boundingRect(self):
        '''QRectF QGraphicsSimpleTextItem.boundingRect()'''
        return QRectF()
    def font(self):
        '''QFont QGraphicsSimpleTextItem.font()'''
        return QFont()
    def setFont(self, font):
        '''void QGraphicsSimpleTextItem.setFont(QFont font)'''
    def text(self):
        '''QString QGraphicsSimpleTextItem.text()'''
        return QString()
    def setText(self, text):
        '''void QGraphicsSimpleTextItem.setText(QString text)'''


class QGraphicsItemGroup(QGraphicsItem):
    """"""
    def __init__(self, parent = None, scene = None):
        '''void QGraphicsItemGroup.__init__(QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def type(self):
        '''int QGraphicsItemGroup.type()'''
        return int()
    def opaqueArea(self):
        '''QPainterPath QGraphicsItemGroup.opaqueArea()'''
        return QPainterPath()
    def isObscuredBy(self, item):
        '''bool QGraphicsItemGroup.isObscuredBy(QGraphicsItem item)'''
        return bool()
    def paint(self, painter, option, widget = None):
        '''void QGraphicsItemGroup.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget = None)'''
    def boundingRect(self):
        '''QRectF QGraphicsItemGroup.boundingRect()'''
        return QRectF()
    def removeFromGroup(self, item):
        '''void QGraphicsItemGroup.removeFromGroup(QGraphicsItem item)'''
    def addToGroup(self, item):
        '''void QGraphicsItemGroup.addToGroup(QGraphicsItem item)'''


class QGraphicsObject(QObject, QGraphicsItem):
    """"""
    def __init__(self, parent = None):
        '''void QGraphicsObject.__init__(QGraphicsItem parent = None)'''
    def updateMicroFocus(self):
        '''void QGraphicsObject.updateMicroFocus()'''
    scaleChanged = pyqtSignal() # void scaleChanged() - signal
    rotationChanged = pyqtSignal() # void rotationChanged() - signal
    zChanged = pyqtSignal() # void zChanged() - signal
    yChanged = pyqtSignal() # void yChanged() - signal
    xChanged = pyqtSignal() # void xChanged() - signal
    enabledChanged = pyqtSignal() # void enabledChanged() - signal
    visibleChanged = pyqtSignal() # void visibleChanged() - signal
    opacityChanged = pyqtSignal() # void opacityChanged() - signal
    parentChanged = pyqtSignal() # void parentChanged() - signal
    def ungrabGesture(self, type):
        '''void QGraphicsObject.ungrabGesture(Qt.GestureType type)'''
    def grabGesture(self, type, flags = None):
        '''void QGraphicsObject.grabGesture(Qt.GestureType type, Qt.GestureFlags flags = Qt.GestureFlags(0))'''


class QGraphicsTextItem(QGraphicsObject):
    """"""
    def __init__(self, parent = None, scene = None):
        '''void QGraphicsTextItem.__init__(QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def __init__(self, text, parent = None, scene = None):
        '''void QGraphicsTextItem.__init__(QString text, QGraphicsItem parent = None, QGraphicsScene scene = None)'''
    def inputMethodQuery(self, query):
        '''QVariant QGraphicsTextItem.inputMethodQuery(Qt.InputMethodQuery query)'''
        return QVariant()
    def hoverLeaveEvent(self, event):
        '''void QGraphicsTextItem.hoverLeaveEvent(QGraphicsSceneHoverEvent event)'''
    def hoverMoveEvent(self, event):
        '''void QGraphicsTextItem.hoverMoveEvent(QGraphicsSceneHoverEvent event)'''
    def hoverEnterEvent(self, event):
        '''void QGraphicsTextItem.hoverEnterEvent(QGraphicsSceneHoverEvent event)'''
    def inputMethodEvent(self, event):
        '''void QGraphicsTextItem.inputMethodEvent(QInputMethodEvent event)'''
    def dropEvent(self, event):
        '''void QGraphicsTextItem.dropEvent(QGraphicsSceneDragDropEvent event)'''
    def dragMoveEvent(self, event):
        '''void QGraphicsTextItem.dragMoveEvent(QGraphicsSceneDragDropEvent event)'''
    def dragLeaveEvent(self, event):
        '''void QGraphicsTextItem.dragLeaveEvent(QGraphicsSceneDragDropEvent event)'''
    def dragEnterEvent(self, event):
        '''void QGraphicsTextItem.dragEnterEvent(QGraphicsSceneDragDropEvent event)'''
    def focusOutEvent(self, event):
        '''void QGraphicsTextItem.focusOutEvent(QFocusEvent event)'''
    def focusInEvent(self, event):
        '''void QGraphicsTextItem.focusInEvent(QFocusEvent event)'''
    def keyReleaseEvent(self, event):
        '''void QGraphicsTextItem.keyReleaseEvent(QKeyEvent event)'''
    def keyPressEvent(self, event):
        '''void QGraphicsTextItem.keyPressEvent(QKeyEvent event)'''
    def contextMenuEvent(self, event):
        '''void QGraphicsTextItem.contextMenuEvent(QGraphicsSceneContextMenuEvent event)'''
    def mouseDoubleClickEvent(self, event):
        '''void QGraphicsTextItem.mouseDoubleClickEvent(QGraphicsSceneMouseEvent event)'''
    def mouseReleaseEvent(self, event):
        '''void QGraphicsTextItem.mouseReleaseEvent(QGraphicsSceneMouseEvent event)'''
    def mouseMoveEvent(self, event):
        '''void QGraphicsTextItem.mouseMoveEvent(QGraphicsSceneMouseEvent event)'''
    def mousePressEvent(self, event):
        '''void QGraphicsTextItem.mousePressEvent(QGraphicsSceneMouseEvent event)'''
    def sceneEvent(self, event):
        '''bool QGraphicsTextItem.sceneEvent(QEvent event)'''
        return bool()
    linkHovered = pyqtSignal() # void linkHovered(const QStringamp;) - signal
    linkActivated = pyqtSignal() # void linkActivated(const QStringamp;) - signal
    def textCursor(self):
        '''QTextCursor QGraphicsTextItem.textCursor()'''
        return QTextCursor()
    def setTextCursor(self, cursor):
        '''void QGraphicsTextItem.setTextCursor(QTextCursor cursor)'''
    def openExternalLinks(self):
        '''bool QGraphicsTextItem.openExternalLinks()'''
        return bool()
    def setOpenExternalLinks(self, open):
        '''void QGraphicsTextItem.setOpenExternalLinks(bool open)'''
    def tabChangesFocus(self):
        '''bool QGraphicsTextItem.tabChangesFocus()'''
        return bool()
    def setTabChangesFocus(self, b):
        '''void QGraphicsTextItem.setTabChangesFocus(bool b)'''
    def textInteractionFlags(self):
        '''Qt.TextInteractionFlags QGraphicsTextItem.textInteractionFlags()'''
        return Qt.TextInteractionFlags()
    def setTextInteractionFlags(self, flags):
        '''void QGraphicsTextItem.setTextInteractionFlags(Qt.TextInteractionFlags flags)'''
    def document(self):
        '''QTextDocument QGraphicsTextItem.document()'''
        return QTextDocument()
    def setDocument(self, document):
        '''void QGraphicsTextItem.setDocument(QTextDocument document)'''
    def adjustSize(self):
        '''void QGraphicsTextItem.adjustSize()'''
    def textWidth(self):
        '''float QGraphicsTextItem.textWidth()'''
        return float()
    def setTextWidth(self, width):
        '''void QGraphicsTextItem.setTextWidth(float width)'''
    def type(self):
        '''int QGraphicsTextItem.type()'''
        return int()
    def opaqueArea(self):
        '''QPainterPath QGraphicsTextItem.opaqueArea()'''
        return QPainterPath()
    def isObscuredBy(self, item):
        '''bool QGraphicsTextItem.isObscuredBy(QGraphicsItem item)'''
        return bool()
    def paint(self, painter, option, widget):
        '''void QGraphicsTextItem.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget)'''
    def contains(self, point):
        '''bool QGraphicsTextItem.contains(QPointF point)'''
        return bool()
    def shape(self):
        '''QPainterPath QGraphicsTextItem.shape()'''
        return QPainterPath()
    def boundingRect(self):
        '''QRectF QGraphicsTextItem.boundingRect()'''
        return QRectF()
    def defaultTextColor(self):
        '''QColor QGraphicsTextItem.defaultTextColor()'''
        return QColor()
    def setDefaultTextColor(self, c):
        '''void QGraphicsTextItem.setDefaultTextColor(QColor c)'''
    def setFont(self, font):
        '''void QGraphicsTextItem.setFont(QFont font)'''
    def font(self):
        '''QFont QGraphicsTextItem.font()'''
        return QFont()
    def setPlainText(self, text):
        '''void QGraphicsTextItem.setPlainText(QString text)'''
    def toPlainText(self):
        '''QString QGraphicsTextItem.toPlainText()'''
        return QString()
    def setHtml(self, html):
        '''void QGraphicsTextItem.setHtml(QString html)'''
    def toHtml(self):
        '''QString QGraphicsTextItem.toHtml()'''
        return QString()


class QGraphicsItemAnimation(QObject):
    """"""
    def __init__(self, parent = None):
        '''void QGraphicsItemAnimation.__init__(QObject parent = None)'''
    def shearList(self):
        '''list-of-tuple-of-float-QPointF QGraphicsItemAnimation.shearList()'''
        return [tuple-of-float-QPointF()]
    def scaleList(self):
        '''list-of-tuple-of-float-QPointF QGraphicsItemAnimation.scaleList()'''
        return [tuple-of-float-QPointF()]
    def translationList(self):
        '''list-of-tuple-of-float-QPointF QGraphicsItemAnimation.translationList()'''
        return [tuple-of-float-QPointF()]
    def rotationList(self):
        '''list-of-tuple-of-float-float QGraphicsItemAnimation.rotationList()'''
        return [tuple-of-float-float()]
    def posList(self):
        '''list-of-tuple-of-float-QPointF QGraphicsItemAnimation.posList()'''
        return [tuple-of-float-QPointF()]
    def beforeAnimationStep(self, step):
        '''void QGraphicsItemAnimation.beforeAnimationStep(float step)'''
    def afterAnimationStep(self, step):
        '''void QGraphicsItemAnimation.afterAnimationStep(float step)'''
    def setStep(self, x):
        '''void QGraphicsItemAnimation.setStep(float x)'''
    def reset(self):
        '''void QGraphicsItemAnimation.reset()'''
    def clear(self):
        '''void QGraphicsItemAnimation.clear()'''
    def setShearAt(self, step, sh, sv):
        '''void QGraphicsItemAnimation.setShearAt(float step, float sh, float sv)'''
    def horizontalShearAt(self, step):
        '''float QGraphicsItemAnimation.horizontalShearAt(float step)'''
        return float()
    def verticalShearAt(self, step):
        '''float QGraphicsItemAnimation.verticalShearAt(float step)'''
        return float()
    def setScaleAt(self, step, sx, sy):
        '''void QGraphicsItemAnimation.setScaleAt(float step, float sx, float sy)'''
    def horizontalScaleAt(self, step):
        '''float QGraphicsItemAnimation.horizontalScaleAt(float step)'''
        return float()
    def verticalScaleAt(self, step):
        '''float QGraphicsItemAnimation.verticalScaleAt(float step)'''
        return float()
    def setTranslationAt(self, step, dx, dy):
        '''void QGraphicsItemAnimation.setTranslationAt(float step, float dx, float dy)'''
    def yTranslationAt(self, step):
        '''float QGraphicsItemAnimation.yTranslationAt(float step)'''
        return float()
    def xTranslationAt(self, step):
        '''float QGraphicsItemAnimation.xTranslationAt(float step)'''
        return float()
    def setRotationAt(self, step, angle):
        '''void QGraphicsItemAnimation.setRotationAt(float step, float angle)'''
    def rotationAt(self, step):
        '''float QGraphicsItemAnimation.rotationAt(float step)'''
        return float()
    def matrixAt(self, step):
        '''QMatrix QGraphicsItemAnimation.matrixAt(float step)'''
        return QMatrix()
    def setPosAt(self, step, pos):
        '''void QGraphicsItemAnimation.setPosAt(float step, QPointF pos)'''
    def posAt(self, step):
        '''QPointF QGraphicsItemAnimation.posAt(float step)'''
        return QPointF()
    def setTimeLine(self, timeLine):
        '''void QGraphicsItemAnimation.setTimeLine(QTimeLine timeLine)'''
    def timeLine(self):
        '''QTimeLine QGraphicsItemAnimation.timeLine()'''
        return QTimeLine()
    def setItem(self, item):
        '''void QGraphicsItemAnimation.setItem(QGraphicsItem item)'''
    def item(self):
        '''QGraphicsItem QGraphicsItemAnimation.item()'''
        return QGraphicsItem()


class QGraphicsLinearLayout(QGraphicsLayout):
    """"""
    def __init__(self, parent = None):
        '''void QGraphicsLinearLayout.__init__(QGraphicsLayoutItem parent = None)'''
    def __init__(self, orientation, parent = None):
        '''void QGraphicsLinearLayout.__init__(Qt.Orientation orientation, QGraphicsLayoutItem parent = None)'''
    def sizeHint(self, which, constraint = QSizeF()):
        '''QSizeF QGraphicsLinearLayout.sizeHint(Qt.SizeHint which, QSizeF constraint = QSizeF())'''
        return QSizeF()
    def invalidate(self):
        '''void QGraphicsLinearLayout.invalidate()'''
    def itemAt(self, index):
        '''QGraphicsLayoutItem QGraphicsLinearLayout.itemAt(int index)'''
        return QGraphicsLayoutItem()
    def count(self):
        '''int QGraphicsLinearLayout.count()'''
        return int()
    def setGeometry(self, rect):
        '''void QGraphicsLinearLayout.setGeometry(QRectF rect)'''
    def alignment(self, item):
        '''Qt.Alignment QGraphicsLinearLayout.alignment(QGraphicsLayoutItem item)'''
        return Qt.Alignment()
    def setAlignment(self, item, alignment):
        '''void QGraphicsLinearLayout.setAlignment(QGraphicsLayoutItem item, Qt.Alignment alignment)'''
    def stretchFactor(self, item):
        '''int QGraphicsLinearLayout.stretchFactor(QGraphicsLayoutItem item)'''
        return int()
    def setStretchFactor(self, item, stretch):
        '''void QGraphicsLinearLayout.setStretchFactor(QGraphicsLayoutItem item, int stretch)'''
    def itemSpacing(self, index):
        '''float QGraphicsLinearLayout.itemSpacing(int index)'''
        return float()
    def setItemSpacing(self, index, spacing):
        '''void QGraphicsLinearLayout.setItemSpacing(int index, float spacing)'''
    def spacing(self):
        '''float QGraphicsLinearLayout.spacing()'''
        return float()
    def setSpacing(self, spacing):
        '''void QGraphicsLinearLayout.setSpacing(float spacing)'''
    def removeAt(self, index):
        '''void QGraphicsLinearLayout.removeAt(int index)'''
    def removeItem(self, item):
        '''void QGraphicsLinearLayout.removeItem(QGraphicsLayoutItem item)'''
    def insertStretch(self, index, stretch = 1):
        '''void QGraphicsLinearLayout.insertStretch(int index, int stretch = 1)'''
    def insertItem(self, index, item):
        '''void QGraphicsLinearLayout.insertItem(int index, QGraphicsLayoutItem item)'''
    def addStretch(self, stretch = 1):
        '''void QGraphicsLinearLayout.addStretch(int stretch = 1)'''
    def addItem(self, item):
        '''void QGraphicsLinearLayout.addItem(QGraphicsLayoutItem item)'''
    def orientation(self):
        '''Qt.Orientation QGraphicsLinearLayout.orientation()'''
        return Qt.Orientation()
    def setOrientation(self, orientation):
        '''void QGraphicsLinearLayout.setOrientation(Qt.Orientation orientation)'''


class QGraphicsWidget(QGraphicsObject, QGraphicsLayoutItem):
    """"""
    def __init__(self, parent = None, flags = 0):
        '''void QGraphicsWidget.__init__(QGraphicsItem parent = None, Qt.WindowFlags flags = 0)'''
    geometryChanged = pyqtSignal() # void geometryChanged() - signal
    def setAutoFillBackground(self, enabled):
        '''void QGraphicsWidget.setAutoFillBackground(bool enabled)'''
    def autoFillBackground(self):
        '''bool QGraphicsWidget.autoFillBackground()'''
        return bool()
    def ungrabKeyboardEvent(self, event):
        '''void QGraphicsWidget.ungrabKeyboardEvent(QEvent event)'''
    def grabKeyboardEvent(self, event):
        '''void QGraphicsWidget.grabKeyboardEvent(QEvent event)'''
    def ungrabMouseEvent(self, event):
        '''void QGraphicsWidget.ungrabMouseEvent(QEvent event)'''
    def grabMouseEvent(self, event):
        '''void QGraphicsWidget.grabMouseEvent(QEvent event)'''
    def hoverLeaveEvent(self, event):
        '''void QGraphicsWidget.hoverLeaveEvent(QGraphicsSceneHoverEvent event)'''
    def hoverMoveEvent(self, event):
        '''void QGraphicsWidget.hoverMoveEvent(QGraphicsSceneHoverEvent event)'''
    def showEvent(self, event):
        '''void QGraphicsWidget.showEvent(QShowEvent event)'''
    def resizeEvent(self, event):
        '''void QGraphicsWidget.resizeEvent(QGraphicsSceneResizeEvent event)'''
    def polishEvent(self):
        '''void QGraphicsWidget.polishEvent()'''
    def moveEvent(self, event):
        '''void QGraphicsWidget.moveEvent(QGraphicsSceneMoveEvent event)'''
    def hideEvent(self, event):
        '''void QGraphicsWidget.hideEvent(QHideEvent event)'''
    def focusOutEvent(self, event):
        '''void QGraphicsWidget.focusOutEvent(QFocusEvent event)'''
    def focusNextPrevChild(self, next):
        '''bool QGraphicsWidget.focusNextPrevChild(bool next)'''
        return bool()
    def focusInEvent(self, event):
        '''void QGraphicsWidget.focusInEvent(QFocusEvent event)'''
    def closeEvent(self, event):
        '''void QGraphicsWidget.closeEvent(QCloseEvent event)'''
    def changeEvent(self, event):
        '''void QGraphicsWidget.changeEvent(QEvent event)'''
    def event(self, event):
        '''bool QGraphicsWidget.event(QEvent event)'''
        return bool()
    def windowFrameSectionAt(self, pos):
        '''Qt.WindowFrameSection QGraphicsWidget.windowFrameSectionAt(QPointF pos)'''
        return Qt.WindowFrameSection()
    def windowFrameEvent(self, e):
        '''bool QGraphicsWidget.windowFrameEvent(QEvent e)'''
        return bool()
    def sceneEvent(self, event):
        '''bool QGraphicsWidget.sceneEvent(QEvent event)'''
        return bool()
    def itemChange(self, change, value):
        '''QVariant QGraphicsWidget.itemChange(QGraphicsItem.GraphicsItemChange change, QVariant value)'''
        return QVariant()
    def updateGeometry(self):
        '''void QGraphicsWidget.updateGeometry()'''
    def sizeHint(self, which, constraint = QSizeF()):
        '''QSizeF QGraphicsWidget.sizeHint(Qt.SizeHint which, QSizeF constraint = QSizeF())'''
        return QSizeF()
    def initStyleOption(self, option):
        '''void QGraphicsWidget.initStyleOption(QStyleOption option)'''
    def close(self):
        '''bool QGraphicsWidget.close()'''
        return bool()
    def shape(self):
        '''QPainterPath QGraphicsWidget.shape()'''
        return QPainterPath()
    def boundingRect(self):
        '''QRectF QGraphicsWidget.boundingRect()'''
        return QRectF()
    def paintWindowFrame(self, painter, option, widget = None):
        '''void QGraphicsWidget.paintWindowFrame(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget = None)'''
    def paint(self, painter, option, widget = None):
        '''void QGraphicsWidget.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget = None)'''
    def type(self):
        '''int QGraphicsWidget.type()'''
        return int()
    def testAttribute(self, attribute):
        '''bool QGraphicsWidget.testAttribute(Qt.WidgetAttribute attribute)'''
        return bool()
    def setAttribute(self, attribute, on = True):
        '''void QGraphicsWidget.setAttribute(Qt.WidgetAttribute attribute, bool on = True)'''
    def actions(self):
        '''list-of-QAction QGraphicsWidget.actions()'''
        return [QAction()]
    def removeAction(self, action):
        '''void QGraphicsWidget.removeAction(QAction action)'''
    def insertActions(self, before, actions):
        '''void QGraphicsWidget.insertActions(QAction before, list-of-QAction actions)'''
    def insertAction(self, before, action):
        '''void QGraphicsWidget.insertAction(QAction before, QAction action)'''
    def addActions(self, actions):
        '''void QGraphicsWidget.addActions(list-of-QAction actions)'''
    def addAction(self, action):
        '''void QGraphicsWidget.addAction(QAction action)'''
    def setShortcutAutoRepeat(self, id, enabled = True):
        '''void QGraphicsWidget.setShortcutAutoRepeat(int id, bool enabled = True)'''
    def setShortcutEnabled(self, id, enabled = True):
        '''void QGraphicsWidget.setShortcutEnabled(int id, bool enabled = True)'''
    def releaseShortcut(self, id):
        '''void QGraphicsWidget.releaseShortcut(int id)'''
    def grabShortcut(self, sequence, context = None):
        '''int QGraphicsWidget.grabShortcut(QKeySequence sequence, Qt.ShortcutContext context = Qt.WindowShortcut)'''
        return int()
    def focusWidget(self):
        '''QGraphicsWidget QGraphicsWidget.focusWidget()'''
        return QGraphicsWidget()
    def setTabOrder(self, first, second):
        '''static void QGraphicsWidget.setTabOrder(QGraphicsWidget first, QGraphicsWidget second)'''
    def setFocusPolicy(self, policy):
        '''void QGraphicsWidget.setFocusPolicy(Qt.FocusPolicy policy)'''
    def focusPolicy(self):
        '''Qt.FocusPolicy QGraphicsWidget.focusPolicy()'''
        return Qt.FocusPolicy()
    def windowTitle(self):
        '''QString QGraphicsWidget.windowTitle()'''
        return QString()
    def setWindowTitle(self, title):
        '''void QGraphicsWidget.setWindowTitle(QString title)'''
    def isActiveWindow(self):
        '''bool QGraphicsWidget.isActiveWindow()'''
        return bool()
    def setWindowFlags(self, wFlags):
        '''void QGraphicsWidget.setWindowFlags(Qt.WindowFlags wFlags)'''
    def windowType(self):
        '''Qt.WindowType QGraphicsWidget.windowType()'''
        return Qt.WindowType()
    def windowFlags(self):
        '''Qt.WindowFlags QGraphicsWidget.windowFlags()'''
        return Qt.WindowFlags()
    def windowFrameRect(self):
        '''QRectF QGraphicsWidget.windowFrameRect()'''
        return QRectF()
    def windowFrameGeometry(self):
        '''QRectF QGraphicsWidget.windowFrameGeometry()'''
        return QRectF()
    def unsetWindowFrameMargins(self):
        '''void QGraphicsWidget.unsetWindowFrameMargins()'''
    def getWindowFrameMargins(self, left, top, right, bottom):
        '''void QGraphicsWidget.getWindowFrameMargins(float left, float top, float right, float bottom)'''
    def setWindowFrameMargins(self, left, top, right, bottom):
        '''void QGraphicsWidget.setWindowFrameMargins(float left, float top, float right, float bottom)'''
    def getContentsMargins(self, left, top, right, bottom):
        '''void QGraphicsWidget.getContentsMargins(float left, float top, float right, float bottom)'''
    def setContentsMargins(self, left, top, right, bottom):
        '''void QGraphicsWidget.setContentsMargins(float left, float top, float right, float bottom)'''
    def rect(self):
        '''QRectF QGraphicsWidget.rect()'''
        return QRectF()
    def setGeometry(self, rect):
        '''void QGraphicsWidget.setGeometry(QRectF rect)'''
    def setGeometry(self, ax, ay, aw, ah):
        '''void QGraphicsWidget.setGeometry(float ax, float ay, float aw, float ah)'''
    def size(self):
        '''QSizeF QGraphicsWidget.size()'''
        return QSizeF()
    def resize(self, size):
        '''void QGraphicsWidget.resize(QSizeF size)'''
    def resize(self, w, h):
        '''void QGraphicsWidget.resize(float w, float h)'''
    def setPalette(self, palette):
        '''void QGraphicsWidget.setPalette(QPalette palette)'''
    def palette(self):
        '''QPalette QGraphicsWidget.palette()'''
        return QPalette()
    def setFont(self, font):
        '''void QGraphicsWidget.setFont(QFont font)'''
    def font(self):
        '''QFont QGraphicsWidget.font()'''
        return QFont()
    def setStyle(self, style):
        '''void QGraphicsWidget.setStyle(QStyle style)'''
    def style(self):
        '''QStyle QGraphicsWidget.style()'''
        return QStyle()
    def unsetLayoutDirection(self):
        '''void QGraphicsWidget.unsetLayoutDirection()'''
    def setLayoutDirection(self, direction):
        '''void QGraphicsWidget.setLayoutDirection(Qt.LayoutDirection direction)'''
    def layoutDirection(self):
        '''Qt.LayoutDirection QGraphicsWidget.layoutDirection()'''
        return Qt.LayoutDirection()
    def adjustSize(self):
        '''void QGraphicsWidget.adjustSize()'''
    def setLayout(self, layout):
        '''void QGraphicsWidget.setLayout(QGraphicsLayout layout)'''
    def layout(self):
        '''QGraphicsLayout QGraphicsWidget.layout()'''
        return QGraphicsLayout()


class QGraphicsProxyWidget(QGraphicsWidget):
    """"""
    def __init__(self, parent = None, flags = 0):
        '''void QGraphicsProxyWidget.__init__(QGraphicsItem parent = None, Qt.WindowFlags flags = 0)'''
    def newProxyWidget(self):
        '''QWidget QGraphicsProxyWidget.newProxyWidget()'''
        return QWidget()
    def dropEvent(self, event):
        '''void QGraphicsProxyWidget.dropEvent(QGraphicsSceneDragDropEvent event)'''
    def dragMoveEvent(self, event):
        '''void QGraphicsProxyWidget.dragMoveEvent(QGraphicsSceneDragDropEvent event)'''
    def dragLeaveEvent(self, event):
        '''void QGraphicsProxyWidget.dragLeaveEvent(QGraphicsSceneDragDropEvent event)'''
    def dragEnterEvent(self, event):
        '''void QGraphicsProxyWidget.dragEnterEvent(QGraphicsSceneDragDropEvent event)'''
    def resizeEvent(self, event):
        '''void QGraphicsProxyWidget.resizeEvent(QGraphicsSceneResizeEvent event)'''
    def sizeHint(self, which, constraint = QSizeF()):
        '''QSizeF QGraphicsProxyWidget.sizeHint(Qt.SizeHint which, QSizeF constraint = QSizeF())'''
        return QSizeF()
    def focusNextPrevChild(self, next):
        '''bool QGraphicsProxyWidget.focusNextPrevChild(bool next)'''
        return bool()
    def focusOutEvent(self, event):
        '''void QGraphicsProxyWidget.focusOutEvent(QFocusEvent event)'''
    def focusInEvent(self, event):
        '''void QGraphicsProxyWidget.focusInEvent(QFocusEvent event)'''
    def keyReleaseEvent(self, event):
        '''void QGraphicsProxyWidget.keyReleaseEvent(QKeyEvent event)'''
    def keyPressEvent(self, event):
        '''void QGraphicsProxyWidget.keyPressEvent(QKeyEvent event)'''
    def wheelEvent(self, event):
        '''void QGraphicsProxyWidget.wheelEvent(QGraphicsSceneWheelEvent event)'''
    def mouseDoubleClickEvent(self, event):
        '''void QGraphicsProxyWidget.mouseDoubleClickEvent(QGraphicsSceneMouseEvent event)'''
    def mouseReleaseEvent(self, event):
        '''void QGraphicsProxyWidget.mouseReleaseEvent(QGraphicsSceneMouseEvent event)'''
    def mousePressEvent(self, event):
        '''void QGraphicsProxyWidget.mousePressEvent(QGraphicsSceneMouseEvent event)'''
    def mouseMoveEvent(self, event):
        '''void QGraphicsProxyWidget.mouseMoveEvent(QGraphicsSceneMouseEvent event)'''
    def ungrabMouseEvent(self, event):
        '''void QGraphicsProxyWidget.ungrabMouseEvent(QEvent event)'''
    def grabMouseEvent(self, event):
        '''void QGraphicsProxyWidget.grabMouseEvent(QEvent event)'''
    def hoverMoveEvent(self, event):
        '''void QGraphicsProxyWidget.hoverMoveEvent(QGraphicsSceneHoverEvent event)'''
    def hoverLeaveEvent(self, event):
        '''void QGraphicsProxyWidget.hoverLeaveEvent(QGraphicsSceneHoverEvent event)'''
    def hoverEnterEvent(self, event):
        '''void QGraphicsProxyWidget.hoverEnterEvent(QGraphicsSceneHoverEvent event)'''
    def contextMenuEvent(self, event):
        '''void QGraphicsProxyWidget.contextMenuEvent(QGraphicsSceneContextMenuEvent event)'''
    def hideEvent(self, event):
        '''void QGraphicsProxyWidget.hideEvent(QHideEvent event)'''
    def showEvent(self, event):
        '''void QGraphicsProxyWidget.showEvent(QShowEvent event)'''
    def eventFilter(self, object, event):
        '''bool QGraphicsProxyWidget.eventFilter(QObject object, QEvent event)'''
        return bool()
    def event(self, event):
        '''bool QGraphicsProxyWidget.event(QEvent event)'''
        return bool()
    def itemChange(self, change, value):
        '''QVariant QGraphicsProxyWidget.itemChange(QGraphicsItem.GraphicsItemChange change, QVariant value)'''
        return QVariant()
    def createProxyForChildWidget(self, child):
        '''QGraphicsProxyWidget QGraphicsProxyWidget.createProxyForChildWidget(QWidget child)'''
        return QGraphicsProxyWidget()
    def type(self):
        '''int QGraphicsProxyWidget.type()'''
        return int()
    def paint(self, painter, option, widget):
        '''void QGraphicsProxyWidget.paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget)'''
    def setGeometry(self, rect):
        '''void QGraphicsProxyWidget.setGeometry(QRectF rect)'''
    def subWidgetRect(self, widget):
        '''QRectF QGraphicsProxyWidget.subWidgetRect(QWidget widget)'''
        return QRectF()
    def widget(self):
        '''QWidget QGraphicsProxyWidget.widget()'''
        return QWidget()
    def setWidget(self, widget):
        '''void QGraphicsProxyWidget.setWidget(QWidget widget)'''


class QGraphicsScene(QObject):
    """"""
    # Enum QGraphicsScene.SceneLayer
    ItemLayer = 0
    BackgroundLayer = 0
    ForegroundLayer = 0
    AllLayers = 0

    # Enum QGraphicsScene.ItemIndexMethod
    BspTreeIndex = 0
    NoIndex = 0

    def __init__(self, parent = None):
        '''void QGraphicsScene.__init__(QObject parent = None)'''
    def __init__(self, sceneRect, parent = None):
        '''void QGraphicsScene.__init__(QRectF sceneRect, QObject parent = None)'''
    def __init__(self, x, y, width, height, parent = None):
        '''void QGraphicsScene.__init__(float x, float y, float width, float height, QObject parent = None)'''
    def sendEvent(self, item, event):
        '''bool QGraphicsScene.sendEvent(QGraphicsItem item, QEvent event)'''
        return bool()
    def setActivePanel(self, item):
        '''void QGraphicsScene.setActivePanel(QGraphicsItem item)'''
    def activePanel(self):
        '''QGraphicsItem QGraphicsScene.activePanel()'''
        return QGraphicsItem()
    def isActive(self):
        '''bool QGraphicsScene.isActive()'''
        return bool()
    def stickyFocus(self):
        '''bool QGraphicsScene.stickyFocus()'''
        return bool()
    def setStickyFocus(self, enabled):
        '''void QGraphicsScene.setStickyFocus(bool enabled)'''
    def setSortCacheEnabled(self, enabled):
        '''void QGraphicsScene.setSortCacheEnabled(bool enabled)'''
    def isSortCacheEnabled(self):
        '''bool QGraphicsScene.isSortCacheEnabled()'''
        return bool()
    def focusNextPrevChild(self, next):
        '''bool QGraphicsScene.focusNextPrevChild(bool next)'''
        return bool()
    def eventFilter(self, watched, event):
        '''bool QGraphicsScene.eventFilter(QObject watched, QEvent event)'''
        return bool()
    def setActiveWindow(self, widget):
        '''void QGraphicsScene.setActiveWindow(QGraphicsWidget widget)'''
    def activeWindow(self):
        '''QGraphicsWidget QGraphicsScene.activeWindow()'''
        return QGraphicsWidget()
    def setPalette(self, palette):
        '''void QGraphicsScene.setPalette(QPalette palette)'''
    def palette(self):
        '''QPalette QGraphicsScene.palette()'''
        return QPalette()
    def setFont(self, font):
        '''void QGraphicsScene.setFont(QFont font)'''
    def font(self):
        '''QFont QGraphicsScene.font()'''
        return QFont()
    def setStyle(self, style):
        '''void QGraphicsScene.setStyle(QStyle style)'''
    def style(self):
        '''QStyle QGraphicsScene.style()'''
        return QStyle()
    def addWidget(self, widget, flags = 0):
        '''QGraphicsProxyWidget QGraphicsScene.addWidget(QWidget widget, Qt.WindowFlags flags = 0)'''
        return QGraphicsProxyWidget()
    def selectionArea(self):
        '''QPainterPath QGraphicsScene.selectionArea()'''
        return QPainterPath()
    def setBspTreeDepth(self, depth):
        '''void QGraphicsScene.setBspTreeDepth(int depth)'''
    def bspTreeDepth(self):
        '''int QGraphicsScene.bspTreeDepth()'''
        return int()
    def drawItems(self, painter, items, options, widget = None):
        '''void QGraphicsScene.drawItems(QPainter painter, list-of-QGraphicsItem items, list-of-QStyleOptionGraphicsItem options, QWidget widget = None)'''
    def drawForeground(self, painter, rect):
        '''void QGraphicsScene.drawForeground(QPainter painter, QRectF rect)'''
    def drawBackground(self, painter, rect):
        '''void QGraphicsScene.drawBackground(QPainter painter, QRectF rect)'''
    def inputMethodEvent(self, event):
        '''void QGraphicsScene.inputMethodEvent(QInputMethodEvent event)'''
    def wheelEvent(self, event):
        '''void QGraphicsScene.wheelEvent(QGraphicsSceneWheelEvent event)'''
    def mouseDoubleClickEvent(self, event):
        '''void QGraphicsScene.mouseDoubleClickEvent(QGraphicsSceneMouseEvent event)'''
    def mouseReleaseEvent(self, event):
        '''void QGraphicsScene.mouseReleaseEvent(QGraphicsSceneMouseEvent event)'''
    def mouseMoveEvent(self, event):
        '''void QGraphicsScene.mouseMoveEvent(QGraphicsSceneMouseEvent event)'''
    def mousePressEvent(self, event):
        '''void QGraphicsScene.mousePressEvent(QGraphicsSceneMouseEvent event)'''
    def keyReleaseEvent(self, event):
        '''void QGraphicsScene.keyReleaseEvent(QKeyEvent event)'''
    def keyPressEvent(self, event):
        '''void QGraphicsScene.keyPressEvent(QKeyEvent event)'''
    def helpEvent(self, event):
        '''void QGraphicsScene.helpEvent(QGraphicsSceneHelpEvent event)'''
    def focusOutEvent(self, event):
        '''void QGraphicsScene.focusOutEvent(QFocusEvent event)'''
    def focusInEvent(self, event):
        '''void QGraphicsScene.focusInEvent(QFocusEvent event)'''
    def dropEvent(self, event):
        '''void QGraphicsScene.dropEvent(QGraphicsSceneDragDropEvent event)'''
    def dragLeaveEvent(self, event):
        '''void QGraphicsScene.dragLeaveEvent(QGraphicsSceneDragDropEvent event)'''
    def dragMoveEvent(self, event):
        '''void QGraphicsScene.dragMoveEvent(QGraphicsSceneDragDropEvent event)'''
    def dragEnterEvent(self, event):
        '''void QGraphicsScene.dragEnterEvent(QGraphicsSceneDragDropEvent event)'''
    def contextMenuEvent(self, event):
        '''void QGraphicsScene.contextMenuEvent(QGraphicsSceneContextMenuEvent event)'''
    def event(self, event):
        '''bool QGraphicsScene.event(QEvent event)'''
        return bool()
    selectionChanged = pyqtSignal() # void selectionChanged() - signal
    sceneRectChanged = pyqtSignal() # void sceneRectChanged(const QRectFamp;) - signal
    changed = pyqtSignal() # void changed(const QListlt;QRectFgt;amp;) - signal
    def clear(self):
        '''void QGraphicsScene.clear()'''
    def invalidate(self, rect = QRectF(), layers = None):
        '''void QGraphicsScene.invalidate(QRectF rect = QRectF(), QGraphicsScene.SceneLayers layers = QGraphicsScene.AllLayers)'''
    def invalidate(self, x, y, w, h, layers = None):
        '''void QGraphicsScene.invalidate(float x, float y, float w, float h, QGraphicsScene.SceneLayers layers = QGraphicsScene.AllLayers)'''
    def update(self, rect = QRectF()):
        '''void QGraphicsScene.update(QRectF rect = QRectF())'''
    def update(self, x, y, w, h):
        '''void QGraphicsScene.update(float x, float y, float w, float h)'''
    def advance(self):
        '''void QGraphicsScene.advance()'''
    def views(self):
        '''list-of-QGraphicsView QGraphicsScene.views()'''
        return [QGraphicsView()]
    def inputMethodQuery(self, query):
        '''QVariant QGraphicsScene.inputMethodQuery(Qt.InputMethodQuery query)'''
        return QVariant()
    def setForegroundBrush(self, brush):
        '''void QGraphicsScene.setForegroundBrush(QBrush brush)'''
    def foregroundBrush(self):
        '''QBrush QGraphicsScene.foregroundBrush()'''
        return QBrush()
    def setBackgroundBrush(self, brush):
        '''void QGraphicsScene.setBackgroundBrush(QBrush brush)'''
    def backgroundBrush(self):
        '''QBrush QGraphicsScene.backgroundBrush()'''
        return QBrush()
    def mouseGrabberItem(self):
        '''QGraphicsItem QGraphicsScene.mouseGrabberItem()'''
        return QGraphicsItem()
    def clearFocus(self):
        '''void QGraphicsScene.clearFocus()'''
    def setFocus(self, focusReason = None):
        '''void QGraphicsScene.setFocus(Qt.FocusReason focusReason = Qt.OtherFocusReason)'''
    def hasFocus(self):
        '''bool QGraphicsScene.hasFocus()'''
        return bool()
    def setFocusItem(self, item, focusReason = None):
        '''void QGraphicsScene.setFocusItem(QGraphicsItem item, Qt.FocusReason focusReason = Qt.OtherFocusReason)'''
    def focusItem(self):
        '''QGraphicsItem QGraphicsScene.focusItem()'''
        return QGraphicsItem()
    def removeItem(self, item):
        '''void QGraphicsScene.removeItem(QGraphicsItem item)'''
    def addText(self, text, font = QFont()):
        '''QGraphicsTextItem QGraphicsScene.addText(QString text, QFont font = QFont())'''
        return QGraphicsTextItem()
    def addSimpleText(self, text, font = QFont()):
        '''QGraphicsSimpleTextItem QGraphicsScene.addSimpleText(QString text, QFont font = QFont())'''
        return QGraphicsSimpleTextItem()
    def addRect(self, rect, pen = QPen(), brush = QBrush()):
        '''QGraphicsRectItem QGraphicsScene.addRect(QRectF rect, QPen pen = QPen(), QBrush brush = QBrush())'''
        return QGraphicsRectItem()
    def addRect(self, x, y, w, h, pen = QPen(), brush = QBrush()):
        '''QGraphicsRectItem QGraphicsScene.addRect(float x, float y, float w, float h, QPen pen = QPen(), QBrush brush = QBrush())'''
        return QGraphicsRectItem()
    def addPolygon(self, polygon, pen = QPen(), brush = QBrush()):
        '''QGraphicsPolygonItem QGraphicsScene.addPolygon(QPolygonF polygon, QPen pen = QPen(), QBrush brush = QBrush())'''
        return QGraphicsPolygonItem()
    def addPixmap(self, pixmap):
        '''QGraphicsPixmapItem QGraphicsScene.addPixmap(QPixmap pixmap)'''
        return QGraphicsPixmapItem()
    def addPath(self, path, pen = QPen(), brush = QBrush()):
        '''QGraphicsPathItem QGraphicsScene.addPath(QPainterPath path, QPen pen = QPen(), QBrush brush = QBrush())'''
        return QGraphicsPathItem()
    def addLine(self, line, pen = QPen()):
        '''QGraphicsLineItem QGraphicsScene.addLine(QLineF line, QPen pen = QPen())'''
        return QGraphicsLineItem()
    def addLine(self, x1, y1, x2, y2, pen = QPen()):
        '''QGraphicsLineItem QGraphicsScene.addLine(float x1, float y1, float x2, float y2, QPen pen = QPen())'''
        return QGraphicsLineItem()
    def addEllipse(self, rect, pen = QPen(), brush = QBrush()):
        '''QGraphicsEllipseItem QGraphicsScene.addEllipse(QRectF rect, QPen pen = QPen(), QBrush brush = QBrush())'''
        return QGraphicsEllipseItem()
    def addEllipse(self, x, y, w, h, pen = QPen(), brush = QBrush()):
        '''QGraphicsEllipseItem QGraphicsScene.addEllipse(float x, float y, float w, float h, QPen pen = QPen(), QBrush brush = QBrush())'''
        return QGraphicsEllipseItem()
    def addItem(self, item):
        '''void QGraphicsScene.addItem(QGraphicsItem item)'''
    def destroyItemGroup(self, group):
        '''void QGraphicsScene.destroyItemGroup(QGraphicsItemGroup group)'''
    def createItemGroup(self, items):
        '''QGraphicsItemGroup QGraphicsScene.createItemGroup(list-of-QGraphicsItem items)'''
        return QGraphicsItemGroup()
    def clearSelection(self):
        '''void QGraphicsScene.clearSelection()'''
    def setSelectionArea(self, path):
        '''void QGraphicsScene.setSelectionArea(QPainterPath path)'''
    def setSelectionArea(self, path):
        '''Qt.ItemSelectionMode QGraphicsScene.setSelectionArea(QPainterPath path)'''
        return Qt.ItemSelectionMode()
    def setSelectionArea(self, path, deviceTransform):
        '''void QGraphicsScene.setSelectionArea(QPainterPath path, QTransform deviceTransform)'''
    def setSelectionArea(self, path, mode, deviceTransform):
        '''void QGraphicsScene.setSelectionArea(QPainterPath path, Qt.ItemSelectionMode mode, QTransform deviceTransform)'''
    def selectedItems(self):
        '''list-of-QGraphicsItem QGraphicsScene.selectedItems()'''
        return [QGraphicsItem()]
    def itemAt(self, pos):
        '''QGraphicsItem QGraphicsScene.itemAt(QPointF pos)'''
        return QGraphicsItem()
    def itemAt(self, x, y):
        '''QGraphicsItem QGraphicsScene.itemAt(float x, float y)'''
        return QGraphicsItem()
    def itemAt(self, pos, deviceTransform):
        '''QGraphicsItem QGraphicsScene.itemAt(QPointF pos, QTransform deviceTransform)'''
        return QGraphicsItem()
    def itemAt(self, x, y, deviceTransform):
        '''QGraphicsItem QGraphicsScene.itemAt(float x, float y, QTransform deviceTransform)'''
        return QGraphicsItem()
    def collidingItems(self, item, mode = None):
        '''list-of-QGraphicsItem QGraphicsScene.collidingItems(QGraphicsItem item, Qt.ItemSelectionMode mode = Qt.IntersectsItemShape)'''
        return [QGraphicsItem()]
    def items(self):
        '''list-of-QGraphicsItem QGraphicsScene.items()'''
        return [QGraphicsItem()]
    def items(self, pos):
        '''list-of-QGraphicsItem QGraphicsScene.items(QPointF pos)'''
        return [QGraphicsItem()]
    def items(self, rectangle, mode = None):
        '''list-of-QGraphicsItem QGraphicsScene.items(QRectF rectangle, Qt.ItemSelectionMode mode = Qt.IntersectsItemShape)'''
        return [QGraphicsItem()]
    def items(self, polygon, mode = None):
        '''list-of-QGraphicsItem QGraphicsScene.items(QPolygonF polygon, Qt.ItemSelectionMode mode = Qt.IntersectsItemShape)'''
        return [QGraphicsItem()]
    def items(self, path, mode = None):
        '''list-of-QGraphicsItem QGraphicsScene.items(QPainterPath path, Qt.ItemSelectionMode mode = Qt.IntersectsItemShape)'''
        return [QGraphicsItem()]
    def items(self, x, y, w, h, mode = None):
        '''list-of-QGraphicsItem QGraphicsScene.items(float x, float y, float w, float h, Qt.ItemSelectionMode mode = Qt.IntersectsItemShape)'''
        return [QGraphicsItem()]
    def items(self, order):
        '''list-of-QGraphicsItem QGraphicsScene.items(Qt.SortOrder order)'''
        return [QGraphicsItem()]
    def items(self, pos, mode, order, deviceTransform = QTransform()):
        '''list-of-QGraphicsItem QGraphicsScene.items(QPointF pos, Qt.ItemSelectionMode mode, Qt.SortOrder order, QTransform deviceTransform = QTransform())'''
        return [QGraphicsItem()]
    def items(self, rect, mode, order, deviceTransform = QTransform()):
        '''list-of-QGraphicsItem QGraphicsScene.items(QRectF rect, Qt.ItemSelectionMode mode, Qt.SortOrder order, QTransform deviceTransform = QTransform())'''
        return [QGraphicsItem()]
    def items(self, polygon, mode, order, deviceTransform = QTransform()):
        '''list-of-QGraphicsItem QGraphicsScene.items(QPolygonF polygon, Qt.ItemSelectionMode mode, Qt.SortOrder order, QTransform deviceTransform = QTransform())'''
        return [QGraphicsItem()]
    def items(self, path, mode, order, deviceTransform = QTransform()):
        '''list-of-QGraphicsItem QGraphicsScene.items(QPainterPath path, Qt.ItemSelectionMode mode, Qt.SortOrder order, QTransform deviceTransform = QTransform())'''
        return [QGraphicsItem()]
    def items(self, x, y, w, h, mode, order, deviceTransform = QTransform()):
        '''list-of-QGraphicsItem QGraphicsScene.items(float x, float y, float w, float h, Qt.ItemSelectionMode mode, Qt.SortOrder order, QTransform deviceTransform = QTransform())'''
        return [QGraphicsItem()]
    def itemsBoundingRect(self):
        '''QRectF QGraphicsScene.itemsBoundingRect()'''
        return QRectF()
    def setItemIndexMethod(self, method):
        '''void QGraphicsScene.setItemIndexMethod(QGraphicsScene.ItemIndexMethod method)'''
    def itemIndexMethod(self):
        '''QGraphicsScene.ItemIndexMethod QGraphicsScene.itemIndexMethod()'''
        return QGraphicsScene.ItemIndexMethod()
    def render(self, painter, target = QRectF(), source = QRectF(), mode = None):
        '''void QGraphicsScene.render(QPainter painter, QRectF target = QRectF(), QRectF source = QRectF(), Qt.AspectRatioMode mode = Qt.KeepAspectRatio)'''
    def setSceneRect(self, rect):
        '''void QGraphicsScene.setSceneRect(QRectF rect)'''
    def setSceneRect(self, x, y, w, h):
        '''void QGraphicsScene.setSceneRect(float x, float y, float w, float h)'''
    def height(self):
        '''float QGraphicsScene.height()'''
        return float()
    def width(self):
        '''float QGraphicsScene.width()'''
        return float()
    def sceneRect(self):
        '''QRectF QGraphicsScene.sceneRect()'''
        return QRectF()
    class SceneLayers():
        """"""
        def __init__(self):
            '''QGraphicsScene.SceneLayers QGraphicsScene.SceneLayers.__init__()'''
            return QGraphicsScene.SceneLayers()
        def __init__(self):
            '''int QGraphicsScene.SceneLayers.__init__()'''
            return int()
        def __init__(self):
            '''void QGraphicsScene.SceneLayers.__init__()'''
        def __bool__(self):
            '''int QGraphicsScene.SceneLayers.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QGraphicsScene.SceneLayers.__ne__(QGraphicsScene.SceneLayers f)'''
            return bool()
        def __eq__(self, f):
            '''bool QGraphicsScene.SceneLayers.__eq__(QGraphicsScene.SceneLayers f)'''
            return bool()
        def __invert__(self):
            '''QGraphicsScene.SceneLayers QGraphicsScene.SceneLayers.__invert__()'''
            return QGraphicsScene.SceneLayers()
        def __and__(self, mask):
            '''QGraphicsScene.SceneLayers QGraphicsScene.SceneLayers.__and__(int mask)'''
            return QGraphicsScene.SceneLayers()
        def __xor__(self, f):
            '''QGraphicsScene.SceneLayers QGraphicsScene.SceneLayers.__xor__(QGraphicsScene.SceneLayers f)'''
            return QGraphicsScene.SceneLayers()
        def __xor__(self, f):
            '''QGraphicsScene.SceneLayers QGraphicsScene.SceneLayers.__xor__(int f)'''
            return QGraphicsScene.SceneLayers()
        def __or__(self, f):
            '''QGraphicsScene.SceneLayers QGraphicsScene.SceneLayers.__or__(QGraphicsScene.SceneLayers f)'''
            return QGraphicsScene.SceneLayers()
        def __or__(self, f):
            '''QGraphicsScene.SceneLayers QGraphicsScene.SceneLayers.__or__(int f)'''
            return QGraphicsScene.SceneLayers()
        def __int__(self):
            '''int QGraphicsScene.SceneLayers.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QGraphicsScene.SceneLayers QGraphicsScene.SceneLayers.__ixor__(QGraphicsScene.SceneLayers f)'''
            return QGraphicsScene.SceneLayers()
        def __ior__(self, f):
            '''QGraphicsScene.SceneLayers QGraphicsScene.SceneLayers.__ior__(QGraphicsScene.SceneLayers f)'''
            return QGraphicsScene.SceneLayers()
        def __iand__(self, mask):
            '''QGraphicsScene.SceneLayers QGraphicsScene.SceneLayers.__iand__(int mask)'''
            return QGraphicsScene.SceneLayers()


class QGraphicsSceneEvent(QEvent):
    """"""
    def setWidget(self, widget):
        '''void QGraphicsSceneEvent.setWidget(QWidget widget)'''
    def widget(self):
        '''QWidget QGraphicsSceneEvent.widget()'''
        return QWidget()


class QGraphicsSceneMouseEvent(QGraphicsSceneEvent):
    """"""
    def modifiers(self):
        '''Qt.KeyboardModifiers QGraphicsSceneMouseEvent.modifiers()'''
        return Qt.KeyboardModifiers()
    def button(self):
        '''Qt.MouseButton QGraphicsSceneMouseEvent.button()'''
        return Qt.MouseButton()
    def buttons(self):
        '''Qt.MouseButtons QGraphicsSceneMouseEvent.buttons()'''
        return Qt.MouseButtons()
    def lastScreenPos(self):
        '''QPoint QGraphicsSceneMouseEvent.lastScreenPos()'''
        return QPoint()
    def lastScenePos(self):
        '''QPointF QGraphicsSceneMouseEvent.lastScenePos()'''
        return QPointF()
    def lastPos(self):
        '''QPointF QGraphicsSceneMouseEvent.lastPos()'''
        return QPointF()
    def buttonDownScreenPos(self, button):
        '''QPoint QGraphicsSceneMouseEvent.buttonDownScreenPos(Qt.MouseButton button)'''
        return QPoint()
    def buttonDownScenePos(self, button):
        '''QPointF QGraphicsSceneMouseEvent.buttonDownScenePos(Qt.MouseButton button)'''
        return QPointF()
    def buttonDownPos(self, button):
        '''QPointF QGraphicsSceneMouseEvent.buttonDownPos(Qt.MouseButton button)'''
        return QPointF()
    def screenPos(self):
        '''QPoint QGraphicsSceneMouseEvent.screenPos()'''
        return QPoint()
    def scenePos(self):
        '''QPointF QGraphicsSceneMouseEvent.scenePos()'''
        return QPointF()
    def pos(self):
        '''QPointF QGraphicsSceneMouseEvent.pos()'''
        return QPointF()


class QGraphicsSceneWheelEvent(QGraphicsSceneEvent):
    """"""
    def orientation(self):
        '''Qt.Orientation QGraphicsSceneWheelEvent.orientation()'''
        return Qt.Orientation()
    def delta(self):
        '''int QGraphicsSceneWheelEvent.delta()'''
        return int()
    def modifiers(self):
        '''Qt.KeyboardModifiers QGraphicsSceneWheelEvent.modifiers()'''
        return Qt.KeyboardModifiers()
    def buttons(self):
        '''Qt.MouseButtons QGraphicsSceneWheelEvent.buttons()'''
        return Qt.MouseButtons()
    def screenPos(self):
        '''QPoint QGraphicsSceneWheelEvent.screenPos()'''
        return QPoint()
    def scenePos(self):
        '''QPointF QGraphicsSceneWheelEvent.scenePos()'''
        return QPointF()
    def pos(self):
        '''QPointF QGraphicsSceneWheelEvent.pos()'''
        return QPointF()


class QGraphicsSceneContextMenuEvent(QGraphicsSceneEvent):
    """"""
    # Enum QGraphicsSceneContextMenuEvent.Reason
    Mouse = 0
    Keyboard = 0
    Other = 0

    def reason(self):
        '''QGraphicsSceneContextMenuEvent.Reason QGraphicsSceneContextMenuEvent.reason()'''
        return QGraphicsSceneContextMenuEvent.Reason()
    def modifiers(self):
        '''Qt.KeyboardModifiers QGraphicsSceneContextMenuEvent.modifiers()'''
        return Qt.KeyboardModifiers()
    def screenPos(self):
        '''QPoint QGraphicsSceneContextMenuEvent.screenPos()'''
        return QPoint()
    def scenePos(self):
        '''QPointF QGraphicsSceneContextMenuEvent.scenePos()'''
        return QPointF()
    def pos(self):
        '''QPointF QGraphicsSceneContextMenuEvent.pos()'''
        return QPointF()


class QGraphicsSceneHoverEvent(QGraphicsSceneEvent):
    """"""
    def modifiers(self):
        '''Qt.KeyboardModifiers QGraphicsSceneHoverEvent.modifiers()'''
        return Qt.KeyboardModifiers()
    def lastScreenPos(self):
        '''QPoint QGraphicsSceneHoverEvent.lastScreenPos()'''
        return QPoint()
    def lastScenePos(self):
        '''QPointF QGraphicsSceneHoverEvent.lastScenePos()'''
        return QPointF()
    def lastPos(self):
        '''QPointF QGraphicsSceneHoverEvent.lastPos()'''
        return QPointF()
    def screenPos(self):
        '''QPoint QGraphicsSceneHoverEvent.screenPos()'''
        return QPoint()
    def scenePos(self):
        '''QPointF QGraphicsSceneHoverEvent.scenePos()'''
        return QPointF()
    def pos(self):
        '''QPointF QGraphicsSceneHoverEvent.pos()'''
        return QPointF()


class QGraphicsSceneHelpEvent(QGraphicsSceneEvent):
    """"""
    def screenPos(self):
        '''QPoint QGraphicsSceneHelpEvent.screenPos()'''
        return QPoint()
    def scenePos(self):
        '''QPointF QGraphicsSceneHelpEvent.scenePos()'''
        return QPointF()


class QGraphicsSceneDragDropEvent(QGraphicsSceneEvent):
    """"""
    def mimeData(self):
        '''QMimeData QGraphicsSceneDragDropEvent.mimeData()'''
        return QMimeData()
    def source(self):
        '''QWidget QGraphicsSceneDragDropEvent.source()'''
        return QWidget()
    def setDropAction(self, action):
        '''void QGraphicsSceneDragDropEvent.setDropAction(Qt.DropAction action)'''
    def dropAction(self):
        '''Qt.DropAction QGraphicsSceneDragDropEvent.dropAction()'''
        return Qt.DropAction()
    def acceptProposedAction(self):
        '''void QGraphicsSceneDragDropEvent.acceptProposedAction()'''
    def proposedAction(self):
        '''Qt.DropAction QGraphicsSceneDragDropEvent.proposedAction()'''
        return Qt.DropAction()
    def possibleActions(self):
        '''Qt.DropActions QGraphicsSceneDragDropEvent.possibleActions()'''
        return Qt.DropActions()
    def modifiers(self):
        '''Qt.KeyboardModifiers QGraphicsSceneDragDropEvent.modifiers()'''
        return Qt.KeyboardModifiers()
    def buttons(self):
        '''Qt.MouseButtons QGraphicsSceneDragDropEvent.buttons()'''
        return Qt.MouseButtons()
    def screenPos(self):
        '''QPoint QGraphicsSceneDragDropEvent.screenPos()'''
        return QPoint()
    def scenePos(self):
        '''QPointF QGraphicsSceneDragDropEvent.scenePos()'''
        return QPointF()
    def pos(self):
        '''QPointF QGraphicsSceneDragDropEvent.pos()'''
        return QPointF()


class QGraphicsSceneResizeEvent(QGraphicsSceneEvent):
    """"""
    def __init__(self):
        '''void QGraphicsSceneResizeEvent.__init__()'''
    def newSize(self):
        '''QSizeF QGraphicsSceneResizeEvent.newSize()'''
        return QSizeF()
    def oldSize(self):
        '''QSizeF QGraphicsSceneResizeEvent.oldSize()'''
        return QSizeF()


class QGraphicsSceneMoveEvent(QGraphicsSceneEvent):
    """"""
    def __init__(self):
        '''void QGraphicsSceneMoveEvent.__init__()'''
    def newPos(self):
        '''QPointF QGraphicsSceneMoveEvent.newPos()'''
        return QPointF()
    def oldPos(self):
        '''QPointF QGraphicsSceneMoveEvent.oldPos()'''
        return QPointF()


class QGraphicsTransform(QObject):
    """"""
    def __init__(self, parent = None):
        '''void QGraphicsTransform.__init__(QObject parent = None)'''
    def update(self):
        '''void QGraphicsTransform.update()'''
    def applyTo(self, matrix):
        '''abstract void QGraphicsTransform.applyTo(QMatrix4x4 matrix)'''


class QGraphicsScale(QGraphicsTransform):
    """"""
    def __init__(self, parent = None):
        '''void QGraphicsScale.__init__(QObject parent = None)'''
    zScaleChanged = pyqtSignal() # void zScaleChanged() - signal
    yScaleChanged = pyqtSignal() # void yScaleChanged() - signal
    xScaleChanged = pyqtSignal() # void xScaleChanged() - signal
    scaleChanged = pyqtSignal() # void scaleChanged() - signal
    originChanged = pyqtSignal() # void originChanged() - signal
    def applyTo(self, matrix):
        '''void QGraphicsScale.applyTo(QMatrix4x4 matrix)'''
    def setZScale(self):
        '''float QGraphicsScale.setZScale()'''
        return float()
    def zScale(self):
        '''float QGraphicsScale.zScale()'''
        return float()
    def setYScale(self):
        '''float QGraphicsScale.setYScale()'''
        return float()
    def yScale(self):
        '''float QGraphicsScale.yScale()'''
        return float()
    def setXScale(self):
        '''float QGraphicsScale.setXScale()'''
        return float()
    def xScale(self):
        '''float QGraphicsScale.xScale()'''
        return float()
    def setOrigin(self, point):
        '''void QGraphicsScale.setOrigin(QVector3D point)'''
    def origin(self):
        '''QVector3D QGraphicsScale.origin()'''
        return QVector3D()


class QGraphicsRotation(QGraphicsTransform):
    """"""
    def __init__(self, parent = None):
        '''void QGraphicsRotation.__init__(QObject parent = None)'''
    axisChanged = pyqtSignal() # void axisChanged() - signal
    angleChanged = pyqtSignal() # void angleChanged() - signal
    originChanged = pyqtSignal() # void originChanged() - signal
    def applyTo(self, matrix):
        '''void QGraphicsRotation.applyTo(QMatrix4x4 matrix)'''
    def setAxis(self, axis):
        '''void QGraphicsRotation.setAxis(QVector3D axis)'''
    def setAxis(self, axis):
        '''void QGraphicsRotation.setAxis(Qt.Axis axis)'''
    def axis(self):
        '''QVector3D QGraphicsRotation.axis()'''
        return QVector3D()
    def setAngle(self):
        '''float QGraphicsRotation.setAngle()'''
        return float()
    def angle(self):
        '''float QGraphicsRotation.angle()'''
        return float()
    def setOrigin(self, point):
        '''void QGraphicsRotation.setOrigin(QVector3D point)'''
    def origin(self):
        '''QVector3D QGraphicsRotation.origin()'''
        return QVector3D()


class QGraphicsView(QAbstractScrollArea):
    """"""
    # Enum QGraphicsView.OptimizationFlag
    DontClipPainter = 0
    DontSavePainterState = 0
    DontAdjustForAntialiasing = 0

    # Enum QGraphicsView.ViewportUpdateMode
    FullViewportUpdate = 0
    MinimalViewportUpdate = 0
    SmartViewportUpdate = 0
    BoundingRectViewportUpdate = 0
    NoViewportUpdate = 0

    # Enum QGraphicsView.ViewportAnchor
    NoAnchor = 0
    AnchorViewCenter = 0
    AnchorUnderMouse = 0

    # Enum QGraphicsView.DragMode
    NoDrag = 0
    ScrollHandDrag = 0
    RubberBandDrag = 0

    # Enum QGraphicsView.CacheModeFlag
    CacheNone = 0
    CacheBackground = 0

    def __init__(self, parent = None):
        '''void QGraphicsView.__init__(QWidget parent = None)'''
    def __init__(self, scene, parent = None):
        '''void QGraphicsView.__init__(QGraphicsScene scene, QWidget parent = None)'''
    def isTransformed(self):
        '''bool QGraphicsView.isTransformed()'''
        return bool()
    def resetTransform(self):
        '''void QGraphicsView.resetTransform()'''
    def setTransform(self, matrix, combine = False):
        '''void QGraphicsView.setTransform(QTransform matrix, bool combine = False)'''
    def viewportTransform(self):
        '''QTransform QGraphicsView.viewportTransform()'''
        return QTransform()
    def transform(self):
        '''QTransform QGraphicsView.transform()'''
        return QTransform()
    def setRubberBandSelectionMode(self, mode):
        '''void QGraphicsView.setRubberBandSelectionMode(Qt.ItemSelectionMode mode)'''
    def rubberBandSelectionMode(self):
        '''Qt.ItemSelectionMode QGraphicsView.rubberBandSelectionMode()'''
        return Qt.ItemSelectionMode()
    def setOptimizationFlags(self, flags):
        '''void QGraphicsView.setOptimizationFlags(QGraphicsView.OptimizationFlags flags)'''
    def setOptimizationFlag(self, flag, enabled = True):
        '''void QGraphicsView.setOptimizationFlag(QGraphicsView.OptimizationFlag flag, bool enabled = True)'''
    def optimizationFlags(self):
        '''QGraphicsView.OptimizationFlags QGraphicsView.optimizationFlags()'''
        return QGraphicsView.OptimizationFlags()
    def setViewportUpdateMode(self, mode):
        '''void QGraphicsView.setViewportUpdateMode(QGraphicsView.ViewportUpdateMode mode)'''
    def viewportUpdateMode(self):
        '''QGraphicsView.ViewportUpdateMode QGraphicsView.viewportUpdateMode()'''
        return QGraphicsView.ViewportUpdateMode()
    def drawItems(self, painter, items, options):
        '''void QGraphicsView.drawItems(QPainter painter, list-of-QGraphicsItem items, list-of-QStyleOptionGraphicsItem options)'''
    def drawForeground(self, painter, rect):
        '''void QGraphicsView.drawForeground(QPainter painter, QRectF rect)'''
    def drawBackground(self, painter, rect):
        '''void QGraphicsView.drawBackground(QPainter painter, QRectF rect)'''
    def inputMethodEvent(self, event):
        '''void QGraphicsView.inputMethodEvent(QInputMethodEvent event)'''
    def showEvent(self, event):
        '''void QGraphicsView.showEvent(QShowEvent event)'''
    def scrollContentsBy(self, dx, dy):
        '''void QGraphicsView.scrollContentsBy(int dx, int dy)'''
    def resizeEvent(self, event):
        '''void QGraphicsView.resizeEvent(QResizeEvent event)'''
    def paintEvent(self, event):
        '''void QGraphicsView.paintEvent(QPaintEvent event)'''
    def wheelEvent(self, event):
        '''void QGraphicsView.wheelEvent(QWheelEvent event)'''
    def mouseReleaseEvent(self, event):
        '''void QGraphicsView.mouseReleaseEvent(QMouseEvent event)'''
    def mouseMoveEvent(self, event):
        '''void QGraphicsView.mouseMoveEvent(QMouseEvent event)'''
    def mousePressEvent(self, event):
        '''void QGraphicsView.mousePressEvent(QMouseEvent event)'''
    def mouseDoubleClickEvent(self, event):
        '''void QGraphicsView.mouseDoubleClickEvent(QMouseEvent event)'''
    def keyReleaseEvent(self, event):
        '''void QGraphicsView.keyReleaseEvent(QKeyEvent event)'''
    def keyPressEvent(self, event):
        '''void QGraphicsView.keyPressEvent(QKeyEvent event)'''
    def focusNextPrevChild(self, next):
        '''bool QGraphicsView.focusNextPrevChild(bool next)'''
        return bool()
    def focusOutEvent(self, event):
        '''void QGraphicsView.focusOutEvent(QFocusEvent event)'''
    def focusInEvent(self, event):
        '''void QGraphicsView.focusInEvent(QFocusEvent event)'''
    def dropEvent(self, event):
        '''void QGraphicsView.dropEvent(QDropEvent event)'''
    def dragMoveEvent(self, event):
        '''void QGraphicsView.dragMoveEvent(QDragMoveEvent event)'''
    def dragLeaveEvent(self, event):
        '''void QGraphicsView.dragLeaveEvent(QDragLeaveEvent event)'''
    def dragEnterEvent(self, event):
        '''void QGraphicsView.dragEnterEvent(QDragEnterEvent event)'''
    def contextMenuEvent(self, event):
        '''void QGraphicsView.contextMenuEvent(QContextMenuEvent event)'''
    def viewportEvent(self, event):
        '''bool QGraphicsView.viewportEvent(QEvent event)'''
        return bool()
    def event(self, event):
        '''bool QGraphicsView.event(QEvent event)'''
        return bool()
    def setupViewport(self, widget):
        '''void QGraphicsView.setupViewport(QWidget widget)'''
    def updateSceneRect(self, rect):
        '''void QGraphicsView.updateSceneRect(QRectF rect)'''
    def updateScene(self, rects):
        '''void QGraphicsView.updateScene(list-of-QRectF rects)'''
    def invalidateScene(self, rect = QRectF(), layers = None):
        '''void QGraphicsView.invalidateScene(QRectF rect = QRectF(), QGraphicsScene.SceneLayers layers = QGraphicsScene.AllLayers)'''
    def setForegroundBrush(self, brush):
        '''void QGraphicsView.setForegroundBrush(QBrush brush)'''
    def foregroundBrush(self):
        '''QBrush QGraphicsView.foregroundBrush()'''
        return QBrush()
    def setBackgroundBrush(self, brush):
        '''void QGraphicsView.setBackgroundBrush(QBrush brush)'''
    def backgroundBrush(self):
        '''QBrush QGraphicsView.backgroundBrush()'''
        return QBrush()
    def inputMethodQuery(self, query):
        '''QVariant QGraphicsView.inputMethodQuery(Qt.InputMethodQuery query)'''
        return QVariant()
    def mapFromScene(self, point):
        '''QPoint QGraphicsView.mapFromScene(QPointF point)'''
        return QPoint()
    def mapFromScene(self, rect):
        '''QPolygon QGraphicsView.mapFromScene(QRectF rect)'''
        return QPolygon()
    def mapFromScene(self, polygon):
        '''QPolygon QGraphicsView.mapFromScene(QPolygonF polygon)'''
        return QPolygon()
    def mapFromScene(self, path):
        '''QPainterPath QGraphicsView.mapFromScene(QPainterPath path)'''
        return QPainterPath()
    def mapFromScene(self, ax, ay):
        '''QPoint QGraphicsView.mapFromScene(float ax, float ay)'''
        return QPoint()
    def mapFromScene(self, ax, ay, w, h):
        '''QPolygon QGraphicsView.mapFromScene(float ax, float ay, float w, float h)'''
        return QPolygon()
    def mapToScene(self, point):
        '''QPointF QGraphicsView.mapToScene(QPoint point)'''
        return QPointF()
    def mapToScene(self, rect):
        '''QPolygonF QGraphicsView.mapToScene(QRect rect)'''
        return QPolygonF()
    def mapToScene(self, polygon):
        '''QPolygonF QGraphicsView.mapToScene(QPolygon polygon)'''
        return QPolygonF()
    def mapToScene(self, path):
        '''QPainterPath QGraphicsView.mapToScene(QPainterPath path)'''
        return QPainterPath()
    def mapToScene(self, ax, ay):
        '''QPointF QGraphicsView.mapToScene(int ax, int ay)'''
        return QPointF()
    def mapToScene(self, ax, ay, w, h):
        '''QPolygonF QGraphicsView.mapToScene(int ax, int ay, int w, int h)'''
        return QPolygonF()
    def itemAt(self, pos):
        '''QGraphicsItem QGraphicsView.itemAt(QPoint pos)'''
        return QGraphicsItem()
    def itemAt(self, ax, ay):
        '''QGraphicsItem QGraphicsView.itemAt(int ax, int ay)'''
        return QGraphicsItem()
    def items(self):
        '''list-of-QGraphicsItem QGraphicsView.items()'''
        return [QGraphicsItem()]
    def items(self, pos):
        '''list-of-QGraphicsItem QGraphicsView.items(QPoint pos)'''
        return [QGraphicsItem()]
    def items(self, ax, ay):
        '''list-of-QGraphicsItem QGraphicsView.items(int ax, int ay)'''
        return [QGraphicsItem()]
    def items(self, x, y, w, h, mode = None):
        '''list-of-QGraphicsItem QGraphicsView.items(int x, int y, int w, int h, Qt.ItemSelectionMode mode = Qt.IntersectsItemShape)'''
        return [QGraphicsItem()]
    def items(self, rect, mode = None):
        '''list-of-QGraphicsItem QGraphicsView.items(QRect rect, Qt.ItemSelectionMode mode = Qt.IntersectsItemShape)'''
        return [QGraphicsItem()]
    def items(self, polygon, mode = None):
        '''list-of-QGraphicsItem QGraphicsView.items(QPolygon polygon, Qt.ItemSelectionMode mode = Qt.IntersectsItemShape)'''
        return [QGraphicsItem()]
    def items(self, path, mode = None):
        '''list-of-QGraphicsItem QGraphicsView.items(QPainterPath path, Qt.ItemSelectionMode mode = Qt.IntersectsItemShape)'''
        return [QGraphicsItem()]
    def render(self, painter, target = QRectF(), source = QRect(), mode = None):
        '''void QGraphicsView.render(QPainter painter, QRectF target = QRectF(), QRect source = QRect(), Qt.AspectRatioMode mode = Qt.KeepAspectRatio)'''
    def fitInView(self, rect, mode = None):
        '''void QGraphicsView.fitInView(QRectF rect, Qt.AspectRatioMode mode = Qt.IgnoreAspectRatio)'''
    def fitInView(self, item, mode = None):
        '''void QGraphicsView.fitInView(QGraphicsItem item, Qt.AspectRatioMode mode = Qt.IgnoreAspectRatio)'''
    def fitInView(self, x, y, w, h, mode = None):
        '''void QGraphicsView.fitInView(float x, float y, float w, float h, Qt.AspectRatioMode mode = Qt.IgnoreAspectRatio)'''
    def ensureVisible(self, rect, xMargin = 50, yMargin = 50):
        '''void QGraphicsView.ensureVisible(QRectF rect, int xMargin = 50, int yMargin = 50)'''
    def ensureVisible(self, item, xMargin = 50, yMargin = 50):
        '''void QGraphicsView.ensureVisible(QGraphicsItem item, int xMargin = 50, int yMargin = 50)'''
    def ensureVisible(self, x, y, w, h, xMargin = 50, yMargin = 50):
        '''void QGraphicsView.ensureVisible(float x, float y, float w, float h, int xMargin = 50, int yMargin = 50)'''
    def centerOn(self, pos):
        '''void QGraphicsView.centerOn(QPointF pos)'''
    def centerOn(self, item):
        '''void QGraphicsView.centerOn(QGraphicsItem item)'''
    def centerOn(self, ax, ay):
        '''void QGraphicsView.centerOn(float ax, float ay)'''
    def translate(self, dx, dy):
        '''void QGraphicsView.translate(float dx, float dy)'''
    def shear(self, sh, sv):
        '''void QGraphicsView.shear(float sh, float sv)'''
    def scale(self, sx, sy):
        '''void QGraphicsView.scale(float sx, float sy)'''
    def rotate(self, angle):
        '''void QGraphicsView.rotate(float angle)'''
    def resetMatrix(self):
        '''void QGraphicsView.resetMatrix()'''
    def setMatrix(self, matrix, combine = False):
        '''void QGraphicsView.setMatrix(QMatrix matrix, bool combine = False)'''
    def matrix(self):
        '''QMatrix QGraphicsView.matrix()'''
        return QMatrix()
    def setSceneRect(self, rect):
        '''void QGraphicsView.setSceneRect(QRectF rect)'''
    def setSceneRect(self, ax, ay, aw, ah):
        '''void QGraphicsView.setSceneRect(float ax, float ay, float aw, float ah)'''
    def sceneRect(self):
        '''QRectF QGraphicsView.sceneRect()'''
        return QRectF()
    def setScene(self, scene):
        '''void QGraphicsView.setScene(QGraphicsScene scene)'''
    def scene(self):
        '''QGraphicsScene QGraphicsView.scene()'''
        return QGraphicsScene()
    def setInteractive(self, allowed):
        '''void QGraphicsView.setInteractive(bool allowed)'''
    def isInteractive(self):
        '''bool QGraphicsView.isInteractive()'''
        return bool()
    def resetCachedContent(self):
        '''void QGraphicsView.resetCachedContent()'''
    def setCacheMode(self, mode):
        '''void QGraphicsView.setCacheMode(QGraphicsView.CacheMode mode)'''
    def cacheMode(self):
        '''QGraphicsView.CacheMode QGraphicsView.cacheMode()'''
        return QGraphicsView.CacheMode()
    def setDragMode(self, mode):
        '''void QGraphicsView.setDragMode(QGraphicsView.DragMode mode)'''
    def dragMode(self):
        '''QGraphicsView.DragMode QGraphicsView.dragMode()'''
        return QGraphicsView.DragMode()
    def setResizeAnchor(self, anchor):
        '''void QGraphicsView.setResizeAnchor(QGraphicsView.ViewportAnchor anchor)'''
    def resizeAnchor(self):
        '''QGraphicsView.ViewportAnchor QGraphicsView.resizeAnchor()'''
        return QGraphicsView.ViewportAnchor()
    def setTransformationAnchor(self, anchor):
        '''void QGraphicsView.setTransformationAnchor(QGraphicsView.ViewportAnchor anchor)'''
    def transformationAnchor(self):
        '''QGraphicsView.ViewportAnchor QGraphicsView.transformationAnchor()'''
        return QGraphicsView.ViewportAnchor()
    def setAlignment(self, alignment):
        '''void QGraphicsView.setAlignment(Qt.Alignment alignment)'''
    def alignment(self):
        '''Qt.Alignment QGraphicsView.alignment()'''
        return Qt.Alignment()
    def setRenderHints(self, hints):
        '''void QGraphicsView.setRenderHints(QPainter.RenderHints hints)'''
    def setRenderHint(self, hint, on = True):
        '''void QGraphicsView.setRenderHint(QPainter.RenderHint hint, bool on = True)'''
    def renderHints(self):
        '''QPainter.RenderHints QGraphicsView.renderHints()'''
        return QPainter.RenderHints()
    def sizeHint(self):
        '''QSize QGraphicsView.sizeHint()'''
        return QSize()
    class CacheMode():
        """"""
        def __init__(self):
            '''QGraphicsView.CacheMode QGraphicsView.CacheMode.__init__()'''
            return QGraphicsView.CacheMode()
        def __init__(self):
            '''int QGraphicsView.CacheMode.__init__()'''
            return int()
        def __init__(self):
            '''void QGraphicsView.CacheMode.__init__()'''
        def __bool__(self):
            '''int QGraphicsView.CacheMode.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QGraphicsView.CacheMode.__ne__(QGraphicsView.CacheMode f)'''
            return bool()
        def __eq__(self, f):
            '''bool QGraphicsView.CacheMode.__eq__(QGraphicsView.CacheMode f)'''
            return bool()
        def __invert__(self):
            '''QGraphicsView.CacheMode QGraphicsView.CacheMode.__invert__()'''
            return QGraphicsView.CacheMode()
        def __and__(self, mask):
            '''QGraphicsView.CacheMode QGraphicsView.CacheMode.__and__(int mask)'''
            return QGraphicsView.CacheMode()
        def __xor__(self, f):
            '''QGraphicsView.CacheMode QGraphicsView.CacheMode.__xor__(QGraphicsView.CacheMode f)'''
            return QGraphicsView.CacheMode()
        def __xor__(self, f):
            '''QGraphicsView.CacheMode QGraphicsView.CacheMode.__xor__(int f)'''
            return QGraphicsView.CacheMode()
        def __or__(self, f):
            '''QGraphicsView.CacheMode QGraphicsView.CacheMode.__or__(QGraphicsView.CacheMode f)'''
            return QGraphicsView.CacheMode()
        def __or__(self, f):
            '''QGraphicsView.CacheMode QGraphicsView.CacheMode.__or__(int f)'''
            return QGraphicsView.CacheMode()
        def __int__(self):
            '''int QGraphicsView.CacheMode.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QGraphicsView.CacheMode QGraphicsView.CacheMode.__ixor__(QGraphicsView.CacheMode f)'''
            return QGraphicsView.CacheMode()
        def __ior__(self, f):
            '''QGraphicsView.CacheMode QGraphicsView.CacheMode.__ior__(QGraphicsView.CacheMode f)'''
            return QGraphicsView.CacheMode()
        def __iand__(self, mask):
            '''QGraphicsView.CacheMode QGraphicsView.CacheMode.__iand__(int mask)'''
            return QGraphicsView.CacheMode()
    class OptimizationFlags():
        """"""
        def __init__(self):
            '''QGraphicsView.OptimizationFlags QGraphicsView.OptimizationFlags.__init__()'''
            return QGraphicsView.OptimizationFlags()
        def __init__(self):
            '''int QGraphicsView.OptimizationFlags.__init__()'''
            return int()
        def __init__(self):
            '''void QGraphicsView.OptimizationFlags.__init__()'''
        def __bool__(self):
            '''int QGraphicsView.OptimizationFlags.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QGraphicsView.OptimizationFlags.__ne__(QGraphicsView.OptimizationFlags f)'''
            return bool()
        def __eq__(self, f):
            '''bool QGraphicsView.OptimizationFlags.__eq__(QGraphicsView.OptimizationFlags f)'''
            return bool()
        def __invert__(self):
            '''QGraphicsView.OptimizationFlags QGraphicsView.OptimizationFlags.__invert__()'''
            return QGraphicsView.OptimizationFlags()
        def __and__(self, mask):
            '''QGraphicsView.OptimizationFlags QGraphicsView.OptimizationFlags.__and__(int mask)'''
            return QGraphicsView.OptimizationFlags()
        def __xor__(self, f):
            '''QGraphicsView.OptimizationFlags QGraphicsView.OptimizationFlags.__xor__(QGraphicsView.OptimizationFlags f)'''
            return QGraphicsView.OptimizationFlags()
        def __xor__(self, f):
            '''QGraphicsView.OptimizationFlags QGraphicsView.OptimizationFlags.__xor__(int f)'''
            return QGraphicsView.OptimizationFlags()
        def __or__(self, f):
            '''QGraphicsView.OptimizationFlags QGraphicsView.OptimizationFlags.__or__(QGraphicsView.OptimizationFlags f)'''
            return QGraphicsView.OptimizationFlags()
        def __or__(self, f):
            '''QGraphicsView.OptimizationFlags QGraphicsView.OptimizationFlags.__or__(int f)'''
            return QGraphicsView.OptimizationFlags()
        def __int__(self):
            '''int QGraphicsView.OptimizationFlags.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QGraphicsView.OptimizationFlags QGraphicsView.OptimizationFlags.__ixor__(QGraphicsView.OptimizationFlags f)'''
            return QGraphicsView.OptimizationFlags()
        def __ior__(self, f):
            '''QGraphicsView.OptimizationFlags QGraphicsView.OptimizationFlags.__ior__(QGraphicsView.OptimizationFlags f)'''
            return QGraphicsView.OptimizationFlags()
        def __iand__(self, mask):
            '''QGraphicsView.OptimizationFlags QGraphicsView.OptimizationFlags.__iand__(int mask)'''
            return QGraphicsView.OptimizationFlags()


class QGridLayout(QLayout):
    """"""
    def __init__(self, parent):
        '''void QGridLayout.__init__(QWidget parent)'''
    def __init__(self):
        '''void QGridLayout.__init__()'''
    def itemAtPosition(self, row, column):
        '''QLayoutItem QGridLayout.itemAtPosition(int row, int column)'''
        return QLayoutItem()
    def spacing(self):
        '''int QGridLayout.spacing()'''
        return int()
    def setSpacing(self, spacing):
        '''void QGridLayout.setSpacing(int spacing)'''
    def verticalSpacing(self):
        '''int QGridLayout.verticalSpacing()'''
        return int()
    def setVerticalSpacing(self, spacing):
        '''void QGridLayout.setVerticalSpacing(int spacing)'''
    def horizontalSpacing(self):
        '''int QGridLayout.horizontalSpacing()'''
        return int()
    def setHorizontalSpacing(self, spacing):
        '''void QGridLayout.setHorizontalSpacing(int spacing)'''
    def getItemPosition(self, idx, row, column, rowSpan, columnSpan):
        '''void QGridLayout.getItemPosition(int idx, int row, int column, int rowSpan, int columnSpan)'''
    def setDefaultPositioning(self, n, orient):
        '''void QGridLayout.setDefaultPositioning(int n, Qt.Orientation orient)'''
    def addItem(self, item, row, column, rowSpan = 1, columnSpan = 1, alignment = 0):
        '''void QGridLayout.addItem(QLayoutItem item, int row, int column, int rowSpan = 1, int columnSpan = 1, Qt.Alignment alignment = 0)'''
    def addItem(self):
        '''QLayoutItem QGridLayout.addItem()'''
        return QLayoutItem()
    def setGeometry(self):
        '''QRect QGridLayout.setGeometry()'''
        return QRect()
    def count(self):
        '''int QGridLayout.count()'''
        return int()
    def takeAt(self):
        '''int QGridLayout.takeAt()'''
        return int()
    def itemAt(self):
        '''int QGridLayout.itemAt()'''
        return int()
    def originCorner(self):
        '''Qt.Corner QGridLayout.originCorner()'''
        return Qt.Corner()
    def setOriginCorner(self):
        '''Qt.Corner QGridLayout.setOriginCorner()'''
        return Qt.Corner()
    def addLayout(self, row, column, alignment = 0):
        '''QLayout QGridLayout.addLayout(int row, int column, Qt.Alignment alignment = 0)'''
        return QLayout()
    def addLayout(self, row, column, rowSpan, columnSpan, alignment = 0):
        '''QLayout QGridLayout.addLayout(int row, int column, int rowSpan, int columnSpan, Qt.Alignment alignment = 0)'''
        return QLayout()
    def addWidget(self, w):
        '''void QGridLayout.addWidget(QWidget w)'''
    def addWidget(self, row, column, alignment = 0):
        '''QWidget QGridLayout.addWidget(int row, int column, Qt.Alignment alignment = 0)'''
        return QWidget()
    def addWidget(self, row, column, rowSpan, columnSpan, alignment = 0):
        '''QWidget QGridLayout.addWidget(int row, int column, int rowSpan, int columnSpan, Qt.Alignment alignment = 0)'''
        return QWidget()
    def invalidate(self):
        '''void QGridLayout.invalidate()'''
    def expandingDirections(self):
        '''Qt.Orientations QGridLayout.expandingDirections()'''
        return Qt.Orientations()
    def minimumHeightForWidth(self):
        '''int QGridLayout.minimumHeightForWidth()'''
        return int()
    def heightForWidth(self):
        '''int QGridLayout.heightForWidth()'''
        return int()
    def hasHeightForWidth(self):
        '''bool QGridLayout.hasHeightForWidth()'''
        return bool()
    def cellRect(self, row, column):
        '''QRect QGridLayout.cellRect(int row, int column)'''
        return QRect()
    def rowCount(self):
        '''int QGridLayout.rowCount()'''
        return int()
    def columnCount(self):
        '''int QGridLayout.columnCount()'''
        return int()
    def columnMinimumWidth(self, column):
        '''int QGridLayout.columnMinimumWidth(int column)'''
        return int()
    def rowMinimumHeight(self, row):
        '''int QGridLayout.rowMinimumHeight(int row)'''
        return int()
    def setColumnMinimumWidth(self, column, minSize):
        '''void QGridLayout.setColumnMinimumWidth(int column, int minSize)'''
    def setRowMinimumHeight(self, row, minSize):
        '''void QGridLayout.setRowMinimumHeight(int row, int minSize)'''
    def columnStretch(self, column):
        '''int QGridLayout.columnStretch(int column)'''
        return int()
    def rowStretch(self, row):
        '''int QGridLayout.rowStretch(int row)'''
        return int()
    def setColumnStretch(self, column, stretch):
        '''void QGridLayout.setColumnStretch(int column, int stretch)'''
    def setRowStretch(self, row, stretch):
        '''void QGridLayout.setRowStretch(int row, int stretch)'''
    def maximumSize(self):
        '''QSize QGridLayout.maximumSize()'''
        return QSize()
    def minimumSize(self):
        '''QSize QGridLayout.minimumSize()'''
        return QSize()
    def sizeHint(self):
        '''QSize QGridLayout.sizeHint()'''
        return QSize()


class QGroupBox(QWidget):
    """"""
    def __init__(self, parent = None):
        '''void QGroupBox.__init__(QWidget parent = None)'''
    def __init__(self, title, parent = None):
        '''void QGroupBox.__init__(QString title, QWidget parent = None)'''
    def mouseReleaseEvent(self, event):
        '''void QGroupBox.mouseReleaseEvent(QMouseEvent event)'''
    def mouseMoveEvent(self, event):
        '''void QGroupBox.mouseMoveEvent(QMouseEvent event)'''
    def mousePressEvent(self, event):
        '''void QGroupBox.mousePressEvent(QMouseEvent event)'''
    def changeEvent(self):
        '''QEvent QGroupBox.changeEvent()'''
        return QEvent()
    def focusInEvent(self):
        '''QFocusEvent QGroupBox.focusInEvent()'''
        return QFocusEvent()
    def paintEvent(self):
        '''QPaintEvent QGroupBox.paintEvent()'''
        return QPaintEvent()
    def resizeEvent(self):
        '''QResizeEvent QGroupBox.resizeEvent()'''
        return QResizeEvent()
    def childEvent(self):
        '''QChildEvent QGroupBox.childEvent()'''
        return QChildEvent()
    def event(self):
        '''QEvent QGroupBox.event()'''
        return QEvent()
    def initStyleOption(self, option):
        '''void QGroupBox.initStyleOption(QStyleOptionGroupBox option)'''
    toggled = pyqtSignal() # void toggled(bool) - signal
    clicked = pyqtSignal() # void clicked(bool = 0) - signal
    def setChecked(self, b):
        '''void QGroupBox.setChecked(bool b)'''
    def isChecked(self):
        '''bool QGroupBox.isChecked()'''
        return bool()
    def setCheckable(self, b):
        '''void QGroupBox.setCheckable(bool b)'''
    def isCheckable(self):
        '''bool QGroupBox.isCheckable()'''
        return bool()
    def setFlat(self, b):
        '''void QGroupBox.setFlat(bool b)'''
    def isFlat(self):
        '''bool QGroupBox.isFlat()'''
        return bool()
    def minimumSizeHint(self):
        '''QSize QGroupBox.minimumSizeHint()'''
        return QSize()
    def setAlignment(self):
        '''int QGroupBox.setAlignment()'''
        return int()
    def alignment(self):
        '''Qt.Alignment QGroupBox.alignment()'''
        return Qt.Alignment()
    def setTitle(self):
        '''QString QGroupBox.setTitle()'''
        return QString()
    def title(self):
        '''QString QGroupBox.title()'''
        return QString()


class QHeaderView(QAbstractItemView):
    """"""
    # Enum QHeaderView.ResizeMode
    Interactive = 0
    Fixed = 0
    Stretch = 0
    ResizeToContents = 0
    Custom = 0

    def __init__(self, orientation, parent = None):
        '''void QHeaderView.__init__(Qt.Orientation orientation, QWidget parent = None)'''
    def initStyleOption(self, option):
        '''void QHeaderView.initStyleOption(QStyleOptionHeader option)'''
    sortIndicatorChanged = pyqtSignal() # void sortIndicatorChanged(int,Qt::SortOrder) - signal
    sectionEntered = pyqtSignal() # void sectionEntered(int) - signal
    def setOffsetToLastSection(self):
        '''void QHeaderView.setOffsetToLastSection()'''
    def reset(self):
        '''void QHeaderView.reset()'''
    def restoreState(self, state):
        '''bool QHeaderView.restoreState(QByteArray state)'''
        return bool()
    def saveState(self):
        '''QByteArray QHeaderView.saveState()'''
        return QByteArray()
    def setMinimumSectionSize(self, size):
        '''void QHeaderView.setMinimumSectionSize(int size)'''
    def minimumSectionSize(self):
        '''int QHeaderView.minimumSectionSize()'''
        return int()
    def setCascadingSectionResizes(self, enable):
        '''void QHeaderView.setCascadingSectionResizes(bool enable)'''
    def cascadingSectionResizes(self):
        '''bool QHeaderView.cascadingSectionResizes()'''
        return bool()
    def swapSections(self, first, second):
        '''void QHeaderView.swapSections(int first, int second)'''
    def sectionsHidden(self):
        '''bool QHeaderView.sectionsHidden()'''
        return bool()
    def setDefaultAlignment(self, alignment):
        '''void QHeaderView.setDefaultAlignment(Qt.Alignment alignment)'''
    def defaultAlignment(self):
        '''Qt.Alignment QHeaderView.defaultAlignment()'''
        return Qt.Alignment()
    def setDefaultSectionSize(self, size):
        '''void QHeaderView.setDefaultSectionSize(int size)'''
    def defaultSectionSize(self):
        '''int QHeaderView.defaultSectionSize()'''
        return int()
    def hiddenSectionCount(self):
        '''int QHeaderView.hiddenSectionCount()'''
        return int()
    def showSection(self, alogicalIndex):
        '''void QHeaderView.showSection(int alogicalIndex)'''
    def hideSection(self, alogicalIndex):
        '''void QHeaderView.hideSection(int alogicalIndex)'''
    def visualRegionForSelection(self, selection):
        '''QRegion QHeaderView.visualRegionForSelection(QItemSelection selection)'''
        return QRegion()
    def setSelection(self):
        '''QItemSelectionModel.SelectionFlags QHeaderView.setSelection()'''
        return QItemSelectionModel.SelectionFlags()
    def moveCursor(self):
        '''Qt.KeyboardModifiers QHeaderView.moveCursor()'''
        return Qt.KeyboardModifiers()
    def isIndexHidden(self, index):
        '''bool QHeaderView.isIndexHidden(QModelIndex index)'''
        return bool()
    def indexAt(self, p):
        '''QModelIndex QHeaderView.indexAt(QPoint p)'''
        return QModelIndex()
    def scrollTo(self, index, hint):
        '''void QHeaderView.scrollTo(QModelIndex index, QAbstractItemView.ScrollHint hint)'''
    def visualRect(self, index):
        '''QRect QHeaderView.visualRect(QModelIndex index)'''
        return QRect()
    def rowsInserted(self, parent, start, end):
        '''void QHeaderView.rowsInserted(QModelIndex parent, int start, int end)'''
    def dataChanged(self, topLeft, bottomRight):
        '''void QHeaderView.dataChanged(QModelIndex topLeft, QModelIndex bottomRight)'''
    def scrollContentsBy(self, dx, dy):
        '''void QHeaderView.scrollContentsBy(int dx, int dy)'''
    def updateGeometries(self):
        '''void QHeaderView.updateGeometries()'''
    def verticalOffset(self):
        '''int QHeaderView.verticalOffset()'''
        return int()
    def horizontalOffset(self):
        '''int QHeaderView.horizontalOffset()'''
        return int()
    def sectionSizeFromContents(self, logicalIndex):
        '''QSize QHeaderView.sectionSizeFromContents(int logicalIndex)'''
        return QSize()
    def paintSection(self, painter, rect, logicalIndex):
        '''void QHeaderView.paintSection(QPainter painter, QRect rect, int logicalIndex)'''
    def mouseDoubleClickEvent(self, e):
        '''void QHeaderView.mouseDoubleClickEvent(QMouseEvent e)'''
    def mouseReleaseEvent(self, e):
        '''void QHeaderView.mouseReleaseEvent(QMouseEvent e)'''
    def mouseMoveEvent(self, e):
        '''void QHeaderView.mouseMoveEvent(QMouseEvent e)'''
    def mousePressEvent(self, e):
        '''void QHeaderView.mousePressEvent(QMouseEvent e)'''
    def paintEvent(self, e):
        '''void QHeaderView.paintEvent(QPaintEvent e)'''
    def viewportEvent(self, e):
        '''bool QHeaderView.viewportEvent(QEvent e)'''
        return bool()
    def event(self, e):
        '''bool QHeaderView.event(QEvent e)'''
        return bool()
    def currentChanged(self, current, old):
        '''void QHeaderView.currentChanged(QModelIndex current, QModelIndex old)'''
    def initializeSections(self):
        '''void QHeaderView.initializeSections()'''
    def initializeSections(self, start, end):
        '''void QHeaderView.initializeSections(int start, int end)'''
    def initialize(self):
        '''void QHeaderView.initialize()'''
    def sectionsAboutToBeRemoved(self, parent, logicalFirst, logicalLast):
        '''void QHeaderView.sectionsAboutToBeRemoved(QModelIndex parent, int logicalFirst, int logicalLast)'''
    def sectionsInserted(self, parent, logicalFirst, logicalLast):
        '''void QHeaderView.sectionsInserted(QModelIndex parent, int logicalFirst, int logicalLast)'''
    def resizeSections(self):
        '''void QHeaderView.resizeSections()'''
    def resizeSections(self, mode):
        '''void QHeaderView.resizeSections(QHeaderView.ResizeMode mode)'''
    def updateSection(self, logicalIndex):
        '''void QHeaderView.updateSection(int logicalIndex)'''
    sectionAutoResize = pyqtSignal() # void sectionAutoResize(int,QHeaderView::ResizeMode) - signal
    sectionHandleDoubleClicked = pyqtSignal() # void sectionHandleDoubleClicked(int) - signal
    sectionCountChanged = pyqtSignal() # void sectionCountChanged(int,int) - signal
    sectionDoubleClicked = pyqtSignal() # void sectionDoubleClicked(int) - signal
    sectionClicked = pyqtSignal() # void sectionClicked(int) - signal
    sectionPressed = pyqtSignal() # void sectionPressed(int) - signal
    sectionResized = pyqtSignal() # void sectionResized(int,int,int) - signal
    sectionMoved = pyqtSignal() # void sectionMoved(int,int,int) - signal
    geometriesChanged = pyqtSignal() # void geometriesChanged() - signal
    def setOffsetToSectionPosition(self, visualIndex):
        '''void QHeaderView.setOffsetToSectionPosition(int visualIndex)'''
    def headerDataChanged(self, orientation, logicalFirst, logicalLast):
        '''void QHeaderView.headerDataChanged(Qt.Orientation orientation, int logicalFirst, int logicalLast)'''
    def setOffset(self, offset):
        '''void QHeaderView.setOffset(int offset)'''
    def sectionsMoved(self):
        '''bool QHeaderView.sectionsMoved()'''
        return bool()
    def setStretchLastSection(self, stretch):
        '''void QHeaderView.setStretchLastSection(bool stretch)'''
    def stretchLastSection(self):
        '''bool QHeaderView.stretchLastSection()'''
        return bool()
    def sortIndicatorOrder(self):
        '''Qt.SortOrder QHeaderView.sortIndicatorOrder()'''
        return Qt.SortOrder()
    def sortIndicatorSection(self):
        '''int QHeaderView.sortIndicatorSection()'''
        return int()
    def setSortIndicator(self, logicalIndex, order):
        '''void QHeaderView.setSortIndicator(int logicalIndex, Qt.SortOrder order)'''
    def isSortIndicatorShown(self):
        '''bool QHeaderView.isSortIndicatorShown()'''
        return bool()
    def setSortIndicatorShown(self, show):
        '''void QHeaderView.setSortIndicatorShown(bool show)'''
    def stretchSectionCount(self):
        '''int QHeaderView.stretchSectionCount()'''
        return int()
    def resizeMode(self, logicalIndex):
        '''QHeaderView.ResizeMode QHeaderView.resizeMode(int logicalIndex)'''
        return QHeaderView.ResizeMode()
    def setResizeMode(self, mode):
        '''void QHeaderView.setResizeMode(QHeaderView.ResizeMode mode)'''
    def setResizeMode(self, logicalIndex, mode):
        '''void QHeaderView.setResizeMode(int logicalIndex, QHeaderView.ResizeMode mode)'''
    def highlightSections(self):
        '''bool QHeaderView.highlightSections()'''
        return bool()
    def setHighlightSections(self, highlight):
        '''void QHeaderView.setHighlightSections(bool highlight)'''
    def isClickable(self):
        '''bool QHeaderView.isClickable()'''
        return bool()
    def setClickable(self, clickable):
        '''void QHeaderView.setClickable(bool clickable)'''
    def isMovable(self):
        '''bool QHeaderView.isMovable()'''
        return bool()
    def setMovable(self, movable):
        '''void QHeaderView.setMovable(bool movable)'''
    def logicalIndex(self, visualIndex):
        '''int QHeaderView.logicalIndex(int visualIndex)'''
        return int()
    def visualIndex(self, logicalIndex):
        '''int QHeaderView.visualIndex(int logicalIndex)'''
        return int()
    def __len__(self):
        '''None QHeaderView.__len__()'''
        return None()
    def count(self):
        '''int QHeaderView.count()'''
        return int()
    def setSectionHidden(self, logicalIndex, hide):
        '''void QHeaderView.setSectionHidden(int logicalIndex, bool hide)'''
    def isSectionHidden(self, logicalIndex):
        '''bool QHeaderView.isSectionHidden(int logicalIndex)'''
        return bool()
    def resizeSection(self, logicalIndex, size):
        '''void QHeaderView.resizeSection(int logicalIndex, int size)'''
    def moveSection(self, from_, to):
        '''void QHeaderView.moveSection(int from, int to)'''
    def sectionViewportPosition(self, logicalIndex):
        '''int QHeaderView.sectionViewportPosition(int logicalIndex)'''
        return int()
    def sectionPosition(self, logicalIndex):
        '''int QHeaderView.sectionPosition(int logicalIndex)'''
        return int()
    def sectionSize(self, logicalIndex):
        '''int QHeaderView.sectionSize(int logicalIndex)'''
        return int()
    def logicalIndexAt(self, position):
        '''int QHeaderView.logicalIndexAt(int position)'''
        return int()
    def logicalIndexAt(self, ax, ay):
        '''int QHeaderView.logicalIndexAt(int ax, int ay)'''
        return int()
    def logicalIndexAt(self, apos):
        '''int QHeaderView.logicalIndexAt(QPoint apos)'''
        return int()
    def visualIndexAt(self, position):
        '''int QHeaderView.visualIndexAt(int position)'''
        return int()
    def sectionSizeHint(self, logicalIndex):
        '''int QHeaderView.sectionSizeHint(int logicalIndex)'''
        return int()
    def sizeHint(self):
        '''QSize QHeaderView.sizeHint()'''
        return QSize()
    def length(self):
        '''int QHeaderView.length()'''
        return int()
    def offset(self):
        '''int QHeaderView.offset()'''
        return int()
    def orientation(self):
        '''Qt.Orientation QHeaderView.orientation()'''
        return Qt.Orientation()
    def setModel(self, model):
        '''void QHeaderView.setModel(QAbstractItemModel model)'''


class QIcon():
    """"""
    # Enum QIcon.State
    On = 0
    Off = 0

    # Enum QIcon.Mode
    Normal = 0
    Disabled = 0
    Active = 0
    Selected = 0

    def __init__(self):
        '''void QIcon.__init__()'''
    def __init__(self, pixmap):
        '''void QIcon.__init__(QPixmap pixmap)'''
    def __init__(self, other):
        '''void QIcon.__init__(QIcon other)'''
    def __init__(self, fileName):
        '''void QIcon.__init__(QString fileName)'''
    def __init__(self, engine):
        '''void QIcon.__init__(QIconEngine engine)'''
    def __init__(self, engine):
        '''void QIcon.__init__(QIconEngineV2 engine)'''
    def __init__(self, variant):
        '''void QIcon.__init__(QVariant variant)'''
    def swap(self, other):
        '''void QIcon.swap(QIcon other)'''
    def name(self):
        '''QString QIcon.name()'''
        return QString()
    def setThemeName(self, path):
        '''static void QIcon.setThemeName(QString path)'''
    def themeName(self):
        '''static QString QIcon.themeName()'''
        return QString()
    def setThemeSearchPaths(self, searchpath):
        '''static void QIcon.setThemeSearchPaths(QStringList searchpath)'''
    def themeSearchPaths(self):
        '''static QStringList QIcon.themeSearchPaths()'''
        return QStringList()
    def hasThemeIcon(self, name):
        '''static bool QIcon.hasThemeIcon(QString name)'''
        return bool()
    def fromTheme(self, name, fallback = QIcon()):
        '''static QIcon QIcon.fromTheme(QString name, QIcon fallback = QIcon())'''
        return QIcon()
    def cacheKey(self):
        '''int QIcon.cacheKey()'''
        return int()
    def addFile(self, fileName, size = QSize(), mode = None, state = None):
        '''void QIcon.addFile(QString fileName, QSize size = QSize(), QIcon.Mode mode = QIcon.Normal, QIcon.State state = QIcon.Off)'''
    def addPixmap(self, pixmap, mode = None, state = None):
        '''void QIcon.addPixmap(QPixmap pixmap, QIcon.Mode mode = QIcon.Normal, QIcon.State state = QIcon.Off)'''
    def serialNumber(self):
        '''int QIcon.serialNumber()'''
        return int()
    def isDetached(self):
        '''bool QIcon.isDetached()'''
        return bool()
    def isNull(self):
        '''bool QIcon.isNull()'''
        return bool()
    def paint(self, painter, rect, alignment = None, mode = None, state = None):
        '''void QIcon.paint(QPainter painter, QRect rect, Qt.Alignment alignment = Qt.AlignCenter, QIcon.Mode mode = QIcon.Normal, QIcon.State state = QIcon.Off)'''
    def paint(self, painter, x, y, w, h, alignment = None, mode = None, state = None):
        '''void QIcon.paint(QPainter painter, int x, int y, int w, int h, Qt.Alignment alignment = Qt.AlignCenter, QIcon.Mode mode = QIcon.Normal, QIcon.State state = QIcon.Off)'''
    def availableSizes(self, mode = None, state = None):
        '''list-of-QSize QIcon.availableSizes(QIcon.Mode mode = QIcon.Normal, QIcon.State state = QIcon.Off)'''
        return [QSize()]
    def actualSize(self, size, mode = None, state = None):
        '''QSize QIcon.actualSize(QSize size, QIcon.Mode mode = QIcon.Normal, QIcon.State state = QIcon.Off)'''
        return QSize()
    def pixmap(self, size, mode = None, state = None):
        '''QPixmap QIcon.pixmap(QSize size, QIcon.Mode mode = QIcon.Normal, QIcon.State state = QIcon.Off)'''
        return QPixmap()
    def pixmap(self, w, h, mode = None, state = None):
        '''QPixmap QIcon.pixmap(int w, int h, QIcon.Mode mode = QIcon.Normal, QIcon.State state = QIcon.Off)'''
        return QPixmap()
    def pixmap(self, extent, mode = None, state = None):
        '''QPixmap QIcon.pixmap(int extent, QIcon.Mode mode = QIcon.Normal, QIcon.State state = QIcon.Off)'''
        return QPixmap()


class QIconEngine():
    """"""
    def __init__(self):
        '''void QIconEngine.__init__()'''
    def __init__(self):
        '''QIconEngine QIconEngine.__init__()'''
        return QIconEngine()
    def addFile(self, fileName, size, mode, state):
        '''void QIconEngine.addFile(QString fileName, QSize size, QIcon.Mode mode, QIcon.State state)'''
    def addPixmap(self, pixmap, mode, state):
        '''void QIconEngine.addPixmap(QPixmap pixmap, QIcon.Mode mode, QIcon.State state)'''
    def pixmap(self, size, mode, state):
        '''QPixmap QIconEngine.pixmap(QSize size, QIcon.Mode mode, QIcon.State state)'''
        return QPixmap()
    def actualSize(self, size, mode, state):
        '''QSize QIconEngine.actualSize(QSize size, QIcon.Mode mode, QIcon.State state)'''
        return QSize()
    def paint(self, painter, rect, mode, state):
        '''abstract void QIconEngine.paint(QPainter painter, QRect rect, QIcon.Mode mode, QIcon.State state)'''


class QIconEngineV2(QIconEngine):
    """"""
    # Enum QIconEngineV2.IconEngineHook
    AvailableSizesHook = 0
    IconNameHook = 0

    def __init__(self):
        '''void QIconEngineV2.__init__()'''
    def __init__(self):
        '''QIconEngineV2 QIconEngineV2.__init__()'''
        return QIconEngineV2()
    def iconName(self):
        '''QString QIconEngineV2.iconName()'''
        return QString()
    def availableSizes(self, mode = None, state = None):
        '''list-of-QSize QIconEngineV2.availableSizes(QIcon.Mode mode = QIcon.Normal, QIcon.State state = QIcon.Off)'''
        return [QSize()]
    def write(self, out):
        '''bool QIconEngineV2.write(QDataStream out)'''
        return bool()
    def read(self, in_):
        '''bool QIconEngineV2.read(QDataStream in)'''
        return bool()
    def clone(self):
        '''QIconEngineV2 QIconEngineV2.clone()'''
        return QIconEngineV2()
    def key(self):
        '''QString QIconEngineV2.key()'''
        return QString()
    class AvailableSizesArgument():
        """"""
        mode = None # QIcon.Mode - member
        sizes = None # list-of-QSize - member
        state = None # QIcon.State - member
        def __init__(self):
            '''void QIconEngineV2.AvailableSizesArgument.__init__()'''
        def __init__(self):
            '''QIconEngineV2.AvailableSizesArgument QIconEngineV2.AvailableSizesArgument.__init__()'''
            return QIconEngineV2.AvailableSizesArgument()


class QIdentityProxyModel(QAbstractProxyModel):
    """"""
    def __init__(self, parent = None):
        '''void QIdentityProxyModel.__init__(QObject parent = None)'''
    def removeRows(self, row, count, parent = QModelIndex()):
        '''bool QIdentityProxyModel.removeRows(int row, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def removeColumns(self, column, count, parent = QModelIndex()):
        '''bool QIdentityProxyModel.removeColumns(int column, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def insertRows(self, row, count, parent = QModelIndex()):
        '''bool QIdentityProxyModel.insertRows(int row, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def insertColumns(self, column, count, parent = QModelIndex()):
        '''bool QIdentityProxyModel.insertColumns(int column, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def setSourceModel(self, sourceModel):
        '''void QIdentityProxyModel.setSourceModel(QAbstractItemModel sourceModel)'''
    def match(self, start, role, value, hits = 1, flags = None):
        '''list-of-QModelIndex QIdentityProxyModel.match(QModelIndex start, int role, QVariant value, int hits = 1, Qt.MatchFlags flags = Qt.MatchStartsWith|Qt.MatchWrap)'''
        return [QModelIndex()]
    def mapSelectionToSource(self, selection):
        '''QItemSelection QIdentityProxyModel.mapSelectionToSource(QItemSelection selection)'''
        return QItemSelection()
    def mapSelectionFromSource(self, selection):
        '''QItemSelection QIdentityProxyModel.mapSelectionFromSource(QItemSelection selection)'''
        return QItemSelection()
    def dropMimeData(self, data, action, row, column, parent):
        '''bool QIdentityProxyModel.dropMimeData(QMimeData data, Qt.DropAction action, int row, int column, QModelIndex parent)'''
        return bool()
    def rowCount(self, parent = QModelIndex()):
        '''int QIdentityProxyModel.rowCount(QModelIndex parent = QModelIndex())'''
        return int()
    def parent(self, child):
        '''QModelIndex QIdentityProxyModel.parent(QModelIndex child)'''
        return QModelIndex()
    def mapToSource(self, proxyIndex):
        '''QModelIndex QIdentityProxyModel.mapToSource(QModelIndex proxyIndex)'''
        return QModelIndex()
    def mapFromSource(self, sourceIndex):
        '''QModelIndex QIdentityProxyModel.mapFromSource(QModelIndex sourceIndex)'''
        return QModelIndex()
    def index(self, row, column, parent = QModelIndex()):
        '''QModelIndex QIdentityProxyModel.index(int row, int column, QModelIndex parent = QModelIndex())'''
        return QModelIndex()
    def columnCount(self, parent = QModelIndex()):
        '''int QIdentityProxyModel.columnCount(QModelIndex parent = QModelIndex())'''
        return int()


class QImage(QPaintDevice):
    """"""
    # Enum QImage.Format
    Format_Invalid = 0
    Format_Mono = 0
    Format_MonoLSB = 0
    Format_Indexed8 = 0
    Format_RGB32 = 0
    Format_ARGB32 = 0
    Format_ARGB32_Premultiplied = 0
    Format_RGB16 = 0
    Format_ARGB8565_Premultiplied = 0
    Format_RGB666 = 0
    Format_ARGB6666_Premultiplied = 0
    Format_RGB555 = 0
    Format_ARGB8555_Premultiplied = 0
    Format_RGB888 = 0
    Format_RGB444 = 0
    Format_ARGB4444_Premultiplied = 0

    # Enum QImage.InvertMode
    InvertRgb = 0
    InvertRgba = 0

    def __init__(self):
        '''void QImage.__init__()'''
    def __init__(self, size, format):
        '''void QImage.__init__(QSize size, QImage.Format format)'''
    def __init__(self, width, height, format):
        '''void QImage.__init__(int width, int height, QImage.Format format)'''
    def __init__(self, data, width, height, format):
        '''void QImage.__init__(str data, int width, int height, QImage.Format format)'''
    def __init__(self, data, width, height, format):
        '''void QImage.__init__(sip.voidptr data, int width, int height, QImage.Format format)'''
    def __init__(self, data, width, height, bytesPerLine, format):
        '''void QImage.__init__(str data, int width, int height, int bytesPerLine, QImage.Format format)'''
    def __init__(self, data, width, height, bytesPerLine, format):
        '''void QImage.__init__(sip.voidptr data, int width, int height, int bytesPerLine, QImage.Format format)'''
    def __init__(self, xpm):
        '''void QImage.__init__(list-of-str xpm)'''
    def __init__(self, fileName, format = None):
        '''void QImage.__init__(QString fileName, str format = None)'''
    def __init__(self):
        '''QImage QImage.__init__()'''
        return QImage()
    def __init__(self, variant):
        '''void QImage.__init__(QVariant variant)'''
    def swap(self, other):
        '''void QImage.swap(QImage other)'''
    def bitPlaneCount(self):
        '''int QImage.bitPlaneCount()'''
        return int()
    def byteCount(self):
        '''int QImage.byteCount()'''
        return int()
    def setColorCount(self):
        '''int QImage.setColorCount()'''
        return int()
    def colorCount(self):
        '''int QImage.colorCount()'''
        return int()
    def cacheKey(self):
        '''int QImage.cacheKey()'''
        return int()
    def createMaskFromColor(self, color, mode = None):
        '''QImage QImage.createMaskFromColor(int color, Qt.MaskMode mode = Qt.MaskInColor)'''
        return QImage()
    def metric(self, metric):
        '''int QImage.metric(QPaintDevice.PaintDeviceMetric metric)'''
        return int()
    def setText(self, key, value):
        '''void QImage.setText(QString key, QString value)'''
    def text(self, key = QString()):
        '''QString QImage.text(QString key = QString())'''
        return QString()
    def textKeys(self):
        '''QStringList QImage.textKeys()'''
        return QStringList()
    def setOffset(self):
        '''QPoint QImage.setOffset()'''
        return QPoint()
    def offset(self):
        '''QPoint QImage.offset()'''
        return QPoint()
    def setDotsPerMeterY(self):
        '''int QImage.setDotsPerMeterY()'''
        return int()
    def setDotsPerMeterX(self):
        '''int QImage.setDotsPerMeterX()'''
        return int()
    def dotsPerMeterY(self):
        '''int QImage.dotsPerMeterY()'''
        return int()
    def dotsPerMeterX(self):
        '''int QImage.dotsPerMeterX()'''
        return int()
    def paintEngine(self):
        '''QPaintEngine QImage.paintEngine()'''
        return QPaintEngine()
    def serialNumber(self):
        '''int QImage.serialNumber()'''
        return int()
    def fromData(self, data, format = None):
        '''static QImage QImage.fromData(str data, str format = None)'''
        return QImage()
    def fromData(self, data, format = None):
        '''static QImage QImage.fromData(QByteArray data, str format = None)'''
        return QImage()
    def save(self, fileName, format = None, quality = None):
        '''bool QImage.save(QString fileName, str format = None, int quality = -1)'''
        return bool()
    def save(self, device, format = None, quality = None):
        '''bool QImage.save(QIODevice device, str format = None, int quality = -1)'''
        return bool()
    def loadFromData(self, data, format = None):
        '''bool QImage.loadFromData(str data, str format = None)'''
        return bool()
    def loadFromData(self, data, format = None):
        '''bool QImage.loadFromData(QByteArray data, str format = None)'''
        return bool()
    def load(self, device, format):
        '''bool QImage.load(QIODevice device, str format)'''
        return bool()
    def load(self, fileName, format = None):
        '''bool QImage.load(QString fileName, str format = None)'''
        return bool()
    def invertPixels(self, mode = None):
        '''void QImage.invertPixels(QImage.InvertMode mode = QImage.InvertRgb)'''
    def rgbSwapped(self):
        '''QImage QImage.rgbSwapped()'''
        return QImage()
    def mirrored(self, horizontal = False, vertical = True):
        '''QImage QImage.mirrored(bool horizontal = False, bool vertical = True)'''
        return QImage()
    def trueMatrix(self, w, h):
        '''static QMatrix QImage.trueMatrix(int w, int h)'''
        return QMatrix()
    def trueMatrix(self, w, h):
        '''static QTransform QImage.trueMatrix(int w, int h)'''
        return QTransform()
    def transformed(self, matrix, mode = None):
        '''QImage QImage.transformed(QMatrix matrix, Qt.TransformationMode mode = Qt.FastTransformation)'''
        return QImage()
    def transformed(self, matrix, mode = None):
        '''QImage QImage.transformed(QTransform matrix, Qt.TransformationMode mode = Qt.FastTransformation)'''
        return QImage()
    def scaledToHeight(self, height, mode = None):
        '''QImage QImage.scaledToHeight(int height, Qt.TransformationMode mode = Qt.FastTransformation)'''
        return QImage()
    def scaledToWidth(self, width, mode = None):
        '''QImage QImage.scaledToWidth(int width, Qt.TransformationMode mode = Qt.FastTransformation)'''
        return QImage()
    def scaled(self, width, height, aspectRatioMode = None, transformMode = None):
        '''QImage QImage.scaled(int width, int height, Qt.AspectRatioMode aspectRatioMode = Qt.IgnoreAspectRatio, Qt.TransformationMode transformMode = Qt.FastTransformation)'''
        return QImage()
    def scaled(self, size, aspectRatioMode = None, transformMode = None):
        '''QImage QImage.scaled(QSize size, Qt.AspectRatioMode aspectRatioMode = Qt.IgnoreAspectRatio, Qt.TransformationMode transformMode = Qt.FastTransformation)'''
        return QImage()
    def createHeuristicMask(self, clipTight = True):
        '''QImage QImage.createHeuristicMask(bool clipTight = True)'''
        return QImage()
    def createAlphaMask(self, flags = None):
        '''QImage QImage.createAlphaMask(Qt.ImageConversionFlags flags = Qt.AutoColor)'''
        return QImage()
    def alphaChannel(self):
        '''QImage QImage.alphaChannel()'''
        return QImage()
    def setAlphaChannel(self, alphaChannel):
        '''void QImage.setAlphaChannel(QImage alphaChannel)'''
    def hasAlphaChannel(self):
        '''bool QImage.hasAlphaChannel()'''
        return bool()
    def fill(self, color):
        '''void QImage.fill(Qt.GlobalColor color)'''
    def fill(self, color):
        '''void QImage.fill(QColor color)'''
    def fill(self, pixel):
        '''void QImage.fill(int pixel)'''
    def setColorTable(self, colors):
        '''void QImage.setColorTable(list-of-int colors)'''
    def colorTable(self):
        '''list-of-int QImage.colorTable()'''
        return [int()]
    def setPixel(self, pt, index_or_rgb):
        '''void QImage.setPixel(QPoint pt, int index_or_rgb)'''
    def setPixel(self, x, y, index_or_rgb):
        '''void QImage.setPixel(int x, int y, int index_or_rgb)'''
    def pixel(self, pt):
        '''int QImage.pixel(QPoint pt)'''
        return int()
    def pixel(self, x, y):
        '''int QImage.pixel(int x, int y)'''
        return int()
    def pixelIndex(self, pt):
        '''int QImage.pixelIndex(QPoint pt)'''
        return int()
    def pixelIndex(self, x, y):
        '''int QImage.pixelIndex(int x, int y)'''
        return int()
    def valid(self, pt):
        '''bool QImage.valid(QPoint pt)'''
        return bool()
    def valid(self, x, y):
        '''bool QImage.valid(int x, int y)'''
        return bool()
    def bytesPerLine(self):
        '''int QImage.bytesPerLine()'''
        return int()
    def scanLine(self):
        '''int QImage.scanLine()'''
        return int()
    def numBytes(self):
        '''int QImage.numBytes()'''
        return int()
    def bits(self):
        '''sip.voidptr QImage.bits()'''
        return sip.voidptr()
    def isGrayscale(self):
        '''bool QImage.isGrayscale()'''
        return bool()
    def allGray(self):
        '''bool QImage.allGray()'''
        return bool()
    def setNumColors(self):
        '''int QImage.setNumColors()'''
        return int()
    def setColor(self, i, c):
        '''void QImage.setColor(int i, int c)'''
    def color(self, i):
        '''int QImage.color(int i)'''
        return int()
    def numColors(self):
        '''int QImage.numColors()'''
        return int()
    def depth(self):
        '''int QImage.depth()'''
        return int()
    def rect(self):
        '''QRect QImage.rect()'''
        return QRect()
    def size(self):
        '''QSize QImage.size()'''
        return QSize()
    def height(self):
        '''int QImage.height()'''
        return int()
    def width(self):
        '''int QImage.width()'''
        return int()
    def convertToFormat(self, format, flags = None):
        '''QImage QImage.convertToFormat(QImage.Format format, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
        return QImage()
    def convertToFormat(self, format, colorTable, flags = None):
        '''QImage QImage.convertToFormat(QImage.Format format, list-of-int colorTable, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
        return QImage()
    def format(self):
        '''QImage.Format QImage.format()'''
        return QImage.Format()
    def copy(self, rect = QRect()):
        '''QImage QImage.copy(QRect rect = QRect())'''
        return QImage()
    def copy(self, x, y, w, h):
        '''QImage QImage.copy(int x, int y, int w, int h)'''
        return QImage()
    def isDetached(self):
        '''bool QImage.isDetached()'''
        return bool()
    def detach(self):
        '''void QImage.detach()'''
    def __ne__(self):
        '''QImage QImage.__ne__()'''
        return QImage()
    def __eq__(self):
        '''QImage QImage.__eq__()'''
        return QImage()
    def devType(self):
        '''int QImage.devType()'''
        return int()
    def isNull(self):
        '''bool QImage.isNull()'''
        return bool()


class QImageIOHandler():
    """"""
    # Enum QImageIOHandler.ImageOption
    Size = 0
    ClipRect = 0
    Description = 0
    ScaledClipRect = 0
    ScaledSize = 0
    CompressionRatio = 0
    Gamma = 0
    Quality = 0
    Name = 0
    SubType = 0
    IncrementalReading = 0
    Endianness = 0
    Animation = 0
    BackgroundColor = 0

    def __init__(self):
        '''void QImageIOHandler.__init__()'''
    def currentImageRect(self):
        '''QRect QImageIOHandler.currentImageRect()'''
        return QRect()
    def currentImageNumber(self):
        '''int QImageIOHandler.currentImageNumber()'''
        return int()
    def nextImageDelay(self):
        '''int QImageIOHandler.nextImageDelay()'''
        return int()
    def imageCount(self):
        '''int QImageIOHandler.imageCount()'''
        return int()
    def loopCount(self):
        '''int QImageIOHandler.loopCount()'''
        return int()
    def jumpToImage(self, imageNumber):
        '''bool QImageIOHandler.jumpToImage(int imageNumber)'''
        return bool()
    def jumpToNextImage(self):
        '''bool QImageIOHandler.jumpToNextImage()'''
        return bool()
    def supportsOption(self, option):
        '''bool QImageIOHandler.supportsOption(QImageIOHandler.ImageOption option)'''
        return bool()
    def setOption(self, option, value):
        '''void QImageIOHandler.setOption(QImageIOHandler.ImageOption option, QVariant value)'''
    def option(self, option):
        '''QVariant QImageIOHandler.option(QImageIOHandler.ImageOption option)'''
        return QVariant()
    def write(self, image):
        '''bool QImageIOHandler.write(QImage image)'''
        return bool()
    def read(self, image):
        '''abstract bool QImageIOHandler.read(QImage image)'''
        return bool()
    def canRead(self):
        '''abstract bool QImageIOHandler.canRead()'''
        return bool()
    def name(self):
        '''QByteArray QImageIOHandler.name()'''
        return QByteArray()
    def format(self):
        '''QByteArray QImageIOHandler.format()'''
        return QByteArray()
    def setFormat(self, format):
        '''void QImageIOHandler.setFormat(QByteArray format)'''
    def device(self):
        '''QIODevice QImageIOHandler.device()'''
        return QIODevice()
    def setDevice(self, device):
        '''void QImageIOHandler.setDevice(QIODevice device)'''


class QImageReader():
    """"""
    # Enum QImageReader.ImageReaderError
    UnknownError = 0
    FileNotFoundError = 0
    DeviceError = 0
    UnsupportedFormatError = 0
    InvalidDataError = 0

    def __init__(self):
        '''void QImageReader.__init__()'''
    def __init__(self, device, format = QByteArray()):
        '''void QImageReader.__init__(QIODevice device, QByteArray format = QByteArray())'''
    def __init__(self, fileName, format = QByteArray()):
        '''void QImageReader.__init__(QString fileName, QByteArray format = QByteArray())'''
    def decideFormatFromContent(self):
        '''bool QImageReader.decideFormatFromContent()'''
        return bool()
    def setDecideFormatFromContent(self, ignored):
        '''void QImageReader.setDecideFormatFromContent(bool ignored)'''
    def autoDetectImageFormat(self):
        '''bool QImageReader.autoDetectImageFormat()'''
        return bool()
    def setAutoDetectImageFormat(self, enabled):
        '''void QImageReader.setAutoDetectImageFormat(bool enabled)'''
    def supportsOption(self, option):
        '''bool QImageReader.supportsOption(QImageIOHandler.ImageOption option)'''
        return bool()
    def quality(self):
        '''int QImageReader.quality()'''
        return int()
    def setQuality(self, quality):
        '''void QImageReader.setQuality(int quality)'''
    def supportsAnimation(self):
        '''bool QImageReader.supportsAnimation()'''
        return bool()
    def backgroundColor(self):
        '''QColor QImageReader.backgroundColor()'''
        return QColor()
    def setBackgroundColor(self, color):
        '''void QImageReader.setBackgroundColor(QColor color)'''
    def text(self, key):
        '''QString QImageReader.text(QString key)'''
        return QString()
    def textKeys(self):
        '''QStringList QImageReader.textKeys()'''
        return QStringList()
    def supportedImageFormats(self):
        '''static list-of-QByteArray QImageReader.supportedImageFormats()'''
        return [QByteArray()]
    def imageFormat(self, fileName):
        '''static QByteArray QImageReader.imageFormat(QString fileName)'''
        return QByteArray()
    def imageFormat(self, device):
        '''static QByteArray QImageReader.imageFormat(QIODevice device)'''
        return QByteArray()
    def imageFormat(self):
        '''QImage.Format QImageReader.imageFormat()'''
        return QImage.Format()
    def errorString(self):
        '''QString QImageReader.errorString()'''
        return QString()
    def error(self):
        '''QImageReader.ImageReaderError QImageReader.error()'''
        return QImageReader.ImageReaderError()
    def currentImageRect(self):
        '''QRect QImageReader.currentImageRect()'''
        return QRect()
    def currentImageNumber(self):
        '''int QImageReader.currentImageNumber()'''
        return int()
    def nextImageDelay(self):
        '''int QImageReader.nextImageDelay()'''
        return int()
    def imageCount(self):
        '''int QImageReader.imageCount()'''
        return int()
    def loopCount(self):
        '''int QImageReader.loopCount()'''
        return int()
    def jumpToImage(self, imageNumber):
        '''bool QImageReader.jumpToImage(int imageNumber)'''
        return bool()
    def jumpToNextImage(self):
        '''bool QImageReader.jumpToNextImage()'''
        return bool()
    def read(self):
        '''QImage QImageReader.read()'''
        return QImage()
    def read(self, image):
        '''bool QImageReader.read(QImage image)'''
        return bool()
    def canRead(self):
        '''bool QImageReader.canRead()'''
        return bool()
    def scaledClipRect(self):
        '''QRect QImageReader.scaledClipRect()'''
        return QRect()
    def setScaledClipRect(self, rect):
        '''void QImageReader.setScaledClipRect(QRect rect)'''
    def scaledSize(self):
        '''QSize QImageReader.scaledSize()'''
        return QSize()
    def setScaledSize(self, size):
        '''void QImageReader.setScaledSize(QSize size)'''
    def clipRect(self):
        '''QRect QImageReader.clipRect()'''
        return QRect()
    def setClipRect(self, rect):
        '''void QImageReader.setClipRect(QRect rect)'''
    def size(self):
        '''QSize QImageReader.size()'''
        return QSize()
    def fileName(self):
        '''QString QImageReader.fileName()'''
        return QString()
    def setFileName(self, fileName):
        '''void QImageReader.setFileName(QString fileName)'''
    def device(self):
        '''QIODevice QImageReader.device()'''
        return QIODevice()
    def setDevice(self, device):
        '''void QImageReader.setDevice(QIODevice device)'''
    def format(self):
        '''QByteArray QImageReader.format()'''
        return QByteArray()
    def setFormat(self, format):
        '''void QImageReader.setFormat(QByteArray format)'''


class QImageWriter():
    """"""
    # Enum QImageWriter.ImageWriterError
    UnknownError = 0
    DeviceError = 0
    UnsupportedFormatError = 0

    def __init__(self):
        '''void QImageWriter.__init__()'''
    def __init__(self, device, format):
        '''void QImageWriter.__init__(QIODevice device, QByteArray format)'''
    def __init__(self, fileName, format = QByteArray()):
        '''void QImageWriter.__init__(QString fileName, QByteArray format = QByteArray())'''
    def compression(self):
        '''int QImageWriter.compression()'''
        return int()
    def setCompression(self, compression):
        '''void QImageWriter.setCompression(int compression)'''
    def supportsOption(self, option):
        '''bool QImageWriter.supportsOption(QImageIOHandler.ImageOption option)'''
        return bool()
    def setText(self, key, text):
        '''void QImageWriter.setText(QString key, QString text)'''
    def supportedImageFormats(self):
        '''static list-of-QByteArray QImageWriter.supportedImageFormats()'''
        return [QByteArray()]
    def errorString(self):
        '''QString QImageWriter.errorString()'''
        return QString()
    def error(self):
        '''QImageWriter.ImageWriterError QImageWriter.error()'''
        return QImageWriter.ImageWriterError()
    def write(self, image):
        '''bool QImageWriter.write(QImage image)'''
        return bool()
    def canWrite(self):
        '''bool QImageWriter.canWrite()'''
        return bool()
    def description(self):
        '''QString QImageWriter.description()'''
        return QString()
    def setDescription(self, description):
        '''void QImageWriter.setDescription(QString description)'''
    def gamma(self):
        '''float QImageWriter.gamma()'''
        return float()
    def setGamma(self, gamma):
        '''void QImageWriter.setGamma(float gamma)'''
    def quality(self):
        '''int QImageWriter.quality()'''
        return int()
    def setQuality(self, quality):
        '''void QImageWriter.setQuality(int quality)'''
    def fileName(self):
        '''QString QImageWriter.fileName()'''
        return QString()
    def setFileName(self, fileName):
        '''void QImageWriter.setFileName(QString fileName)'''
    def device(self):
        '''QIODevice QImageWriter.device()'''
        return QIODevice()
    def setDevice(self, device):
        '''void QImageWriter.setDevice(QIODevice device)'''
    def format(self):
        '''QByteArray QImageWriter.format()'''
        return QByteArray()
    def setFormat(self, format):
        '''void QImageWriter.setFormat(QByteArray format)'''


class QInputContext(QObject):
    """"""
    # Enum QInputContext.StandardFormat
    PreeditFormat = 0
    SelectionFormat = 0

    def __init__(self, parent = None):
        '''void QInputContext.__init__(QObject parent = None)'''
    def standardFormat(self, s):
        '''QTextFormat QInputContext.standardFormat(QInputContext.StandardFormat s)'''
        return QTextFormat()
    def sendEvent(self, event):
        '''void QInputContext.sendEvent(QInputMethodEvent event)'''
    def filterEvent(self, event):
        '''bool QInputContext.filterEvent(QEvent event)'''
        return bool()
    def actions(self):
        '''list-of-QAction QInputContext.actions()'''
        return [QAction()]
    def widgetDestroyed(self, w):
        '''void QInputContext.widgetDestroyed(QWidget w)'''
    def setFocusWidget(self, w):
        '''void QInputContext.setFocusWidget(QWidget w)'''
    def focusWidget(self):
        '''QWidget QInputContext.focusWidget()'''
        return QWidget()
    def isComposing(self):
        '''abstract bool QInputContext.isComposing()'''
        return bool()
    def font(self):
        '''QFont QInputContext.font()'''
        return QFont()
    def mouseHandler(self, x, event):
        '''void QInputContext.mouseHandler(int x, QMouseEvent event)'''
    def update(self):
        '''void QInputContext.update()'''
    def reset(self):
        '''abstract void QInputContext.reset()'''
    def language(self):
        '''abstract QString QInputContext.language()'''
        return QString()
    def identifierName(self):
        '''abstract QString QInputContext.identifierName()'''
        return QString()


class QInputContextFactory():
    """"""
    def __init__(self):
        '''void QInputContextFactory.__init__()'''
    def __init__(self):
        '''QInputContextFactory QInputContextFactory.__init__()'''
        return QInputContextFactory()
    def description(self, key):
        '''static QString QInputContextFactory.description(QString key)'''
        return QString()
    def displayName(self, key):
        '''static QString QInputContextFactory.displayName(QString key)'''
        return QString()
    def languages(self, key):
        '''static QStringList QInputContextFactory.languages(QString key)'''
        return QStringList()
    def create(self, key, parent):
        '''static QInputContext QInputContextFactory.create(QString key, QObject parent)'''
        return QInputContext()
    def keys(self):
        '''static QStringList QInputContextFactory.keys()'''
        return QStringList()


class QInputDialog(QDialog):
    """"""
    # Enum QInputDialog.InputMode
    TextInput = 0
    IntInput = 0
    DoubleInput = 0

    # Enum QInputDialog.InputDialogOption
    NoButtons = 0
    UseListViewForComboBoxItems = 0

    def __init__(self, parent = None, flags = 0):
        '''void QInputDialog.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    doubleValueSelected = pyqtSignal() # void doubleValueSelected(double) - signal
    doubleValueChanged = pyqtSignal() # void doubleValueChanged(double) - signal
    intValueSelected = pyqtSignal() # void intValueSelected(int) - signal
    intValueChanged = pyqtSignal() # void intValueChanged(int) - signal
    textValueSelected = pyqtSignal() # void textValueSelected(const QStringamp;) - signal
    textValueChanged = pyqtSignal() # void textValueChanged(const QStringamp;) - signal
    def done(self, result):
        '''void QInputDialog.done(int result)'''
    def setVisible(self, visible):
        '''void QInputDialog.setVisible(bool visible)'''
    def sizeHint(self):
        '''QSize QInputDialog.sizeHint()'''
        return QSize()
    def minimumSizeHint(self):
        '''QSize QInputDialog.minimumSizeHint()'''
        return QSize()
    def open(self):
        '''void QInputDialog.open()'''
    def open(self, receiver, member):
        '''void QInputDialog.open(QObject receiver, SLOT() member)'''
    def open(self, receiver):
        '''void QInputDialog.open(callable receiver)'''
    def cancelButtonText(self):
        '''QString QInputDialog.cancelButtonText()'''
        return QString()
    def setCancelButtonText(self, text):
        '''void QInputDialog.setCancelButtonText(QString text)'''
    def okButtonText(self):
        '''QString QInputDialog.okButtonText()'''
        return QString()
    def setOkButtonText(self, text):
        '''void QInputDialog.setOkButtonText(QString text)'''
    def doubleDecimals(self):
        '''int QInputDialog.doubleDecimals()'''
        return int()
    def setDoubleDecimals(self, decimals):
        '''void QInputDialog.setDoubleDecimals(int decimals)'''
    def setDoubleRange(self, min, max):
        '''void QInputDialog.setDoubleRange(float min, float max)'''
    def doubleMaximum(self):
        '''float QInputDialog.doubleMaximum()'''
        return float()
    def setDoubleMaximum(self, max):
        '''void QInputDialog.setDoubleMaximum(float max)'''
    def doubleMinimum(self):
        '''float QInputDialog.doubleMinimum()'''
        return float()
    def setDoubleMinimum(self, min):
        '''void QInputDialog.setDoubleMinimum(float min)'''
    def doubleValue(self):
        '''float QInputDialog.doubleValue()'''
        return float()
    def setDoubleValue(self, value):
        '''void QInputDialog.setDoubleValue(float value)'''
    def intStep(self):
        '''int QInputDialog.intStep()'''
        return int()
    def setIntStep(self, step):
        '''void QInputDialog.setIntStep(int step)'''
    def setIntRange(self, min, max):
        '''void QInputDialog.setIntRange(int min, int max)'''
    def intMaximum(self):
        '''int QInputDialog.intMaximum()'''
        return int()
    def setIntMaximum(self, max):
        '''void QInputDialog.setIntMaximum(int max)'''
    def intMinimum(self):
        '''int QInputDialog.intMinimum()'''
        return int()
    def setIntMinimum(self, min):
        '''void QInputDialog.setIntMinimum(int min)'''
    def intValue(self):
        '''int QInputDialog.intValue()'''
        return int()
    def setIntValue(self, value):
        '''void QInputDialog.setIntValue(int value)'''
    def comboBoxItems(self):
        '''QStringList QInputDialog.comboBoxItems()'''
        return QStringList()
    def setComboBoxItems(self, items):
        '''void QInputDialog.setComboBoxItems(QStringList items)'''
    def isComboBoxEditable(self):
        '''bool QInputDialog.isComboBoxEditable()'''
        return bool()
    def setComboBoxEditable(self, editable):
        '''void QInputDialog.setComboBoxEditable(bool editable)'''
    def textEchoMode(self):
        '''QLineEdit.EchoMode QInputDialog.textEchoMode()'''
        return QLineEdit.EchoMode()
    def setTextEchoMode(self, mode):
        '''void QInputDialog.setTextEchoMode(QLineEdit.EchoMode mode)'''
    def textValue(self):
        '''QString QInputDialog.textValue()'''
        return QString()
    def setTextValue(self, text):
        '''void QInputDialog.setTextValue(QString text)'''
    def options(self):
        '''QInputDialog.InputDialogOptions QInputDialog.options()'''
        return QInputDialog.InputDialogOptions()
    def setOptions(self, options):
        '''void QInputDialog.setOptions(QInputDialog.InputDialogOptions options)'''
    def testOption(self, option):
        '''bool QInputDialog.testOption(QInputDialog.InputDialogOption option)'''
        return bool()
    def setOption(self, option, on = True):
        '''void QInputDialog.setOption(QInputDialog.InputDialogOption option, bool on = True)'''
    def labelText(self):
        '''QString QInputDialog.labelText()'''
        return QString()
    def setLabelText(self, text):
        '''void QInputDialog.setLabelText(QString text)'''
    def inputMode(self):
        '''QInputDialog.InputMode QInputDialog.inputMode()'''
        return QInputDialog.InputMode()
    def setInputMode(self, mode):
        '''void QInputDialog.setInputMode(QInputDialog.InputMode mode)'''
    def getItem(self, parent, title, label, list, current = 0, editable = True, ok = None, flags = 0):
        '''static QString QInputDialog.getItem(QWidget parent, QString title, QString label, QStringList list, int current = 0, bool editable = True, bool ok, Qt.WindowFlags flags = 0)'''
        return QString()
    def getItem(self, parent, title, label, list, current, editable, ok, flags, inputMethodHints):
        '''static QString QInputDialog.getItem(QWidget parent, QString title, QString label, QStringList list, int current, bool editable, bool ok, Qt.WindowFlags flags, Qt.InputMethodHints inputMethodHints)'''
        return QString()
    def getDouble(self, parent, title, label, value = 0, min = None, max = 2147483647, decimals = 1, ok = None, flags = 0):
        '''static float QInputDialog.getDouble(QWidget parent, QString title, QString label, float value = 0, float min = -2147483647, float max = 2147483647, int decimals = 1, bool ok, Qt.WindowFlags flags = 0)'''
        return float()
    def getInteger(self, parent, title, label, value = 0, min = None, max = 2147483647, step = 1, ok = None, flags = 0):
        '''static int QInputDialog.getInteger(QWidget parent, QString title, QString label, int value = 0, int min = -2147483647, int max = 2147483647, int step = 1, bool ok, Qt.WindowFlags flags = 0)'''
        return int()
    def getInt(self, parent, title, label, value = 0, min = None, max = 2147483647, step = 1, ok = None, flags = 0):
        '''static int QInputDialog.getInt(QWidget parent, QString title, QString label, int value = 0, int min = -2147483647, int max = 2147483647, int step = 1, bool ok, Qt.WindowFlags flags = 0)'''
        return int()
    def getText(self, parent, title, label, mode = None, text = QString(), ok = None, flags = 0):
        '''static QString QInputDialog.getText(QWidget parent, QString title, QString label, QLineEdit.EchoMode mode = QLineEdit.Normal, QString text = QString(), bool ok, Qt.WindowFlags flags = 0)'''
        return QString()
    def getText(self, parent, title, label, mode, text, ok, flags, inputMethodHints):
        '''static QString QInputDialog.getText(QWidget parent, QString title, QString label, QLineEdit.EchoMode mode, QString text, bool ok, Qt.WindowFlags flags, Qt.InputMethodHints inputMethodHints)'''
        return QString()
    class InputDialogOptions():
        """"""
        def __init__(self):
            '''QInputDialog.InputDialogOptions QInputDialog.InputDialogOptions.__init__()'''
            return QInputDialog.InputDialogOptions()
        def __init__(self):
            '''int QInputDialog.InputDialogOptions.__init__()'''
            return int()
        def __init__(self):
            '''void QInputDialog.InputDialogOptions.__init__()'''
        def __bool__(self):
            '''int QInputDialog.InputDialogOptions.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QInputDialog.InputDialogOptions.__ne__(QInputDialog.InputDialogOptions f)'''
            return bool()
        def __eq__(self, f):
            '''bool QInputDialog.InputDialogOptions.__eq__(QInputDialog.InputDialogOptions f)'''
            return bool()
        def __invert__(self):
            '''QInputDialog.InputDialogOptions QInputDialog.InputDialogOptions.__invert__()'''
            return QInputDialog.InputDialogOptions()
        def __and__(self, mask):
            '''QInputDialog.InputDialogOptions QInputDialog.InputDialogOptions.__and__(int mask)'''
            return QInputDialog.InputDialogOptions()
        def __xor__(self, f):
            '''QInputDialog.InputDialogOptions QInputDialog.InputDialogOptions.__xor__(QInputDialog.InputDialogOptions f)'''
            return QInputDialog.InputDialogOptions()
        def __xor__(self, f):
            '''QInputDialog.InputDialogOptions QInputDialog.InputDialogOptions.__xor__(int f)'''
            return QInputDialog.InputDialogOptions()
        def __or__(self, f):
            '''QInputDialog.InputDialogOptions QInputDialog.InputDialogOptions.__or__(QInputDialog.InputDialogOptions f)'''
            return QInputDialog.InputDialogOptions()
        def __or__(self, f):
            '''QInputDialog.InputDialogOptions QInputDialog.InputDialogOptions.__or__(int f)'''
            return QInputDialog.InputDialogOptions()
        def __int__(self):
            '''int QInputDialog.InputDialogOptions.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QInputDialog.InputDialogOptions QInputDialog.InputDialogOptions.__ixor__(QInputDialog.InputDialogOptions f)'''
            return QInputDialog.InputDialogOptions()
        def __ior__(self, f):
            '''QInputDialog.InputDialogOptions QInputDialog.InputDialogOptions.__ior__(QInputDialog.InputDialogOptions f)'''
            return QInputDialog.InputDialogOptions()
        def __iand__(self, mask):
            '''QInputDialog.InputDialogOptions QInputDialog.InputDialogOptions.__iand__(int mask)'''
            return QInputDialog.InputDialogOptions()


class QItemDelegate(QAbstractItemDelegate):
    """"""
    def __init__(self, parent = None):
        '''void QItemDelegate.__init__(QObject parent = None)'''
    def editorEvent(self, event, model, option, index):
        '''bool QItemDelegate.editorEvent(QEvent event, QAbstractItemModel model, QStyleOptionViewItem option, QModelIndex index)'''
        return bool()
    def eventFilter(self, object, event):
        '''bool QItemDelegate.eventFilter(QObject object, QEvent event)'''
        return bool()
    def drawFocus(self, painter, option, rect):
        '''void QItemDelegate.drawFocus(QPainter painter, QStyleOptionViewItem option, QRect rect)'''
    def drawDisplay(self, painter, option, rect, text):
        '''void QItemDelegate.drawDisplay(QPainter painter, QStyleOptionViewItem option, QRect rect, QString text)'''
    def drawDecoration(self, painter, option, rect, pixmap):
        '''void QItemDelegate.drawDecoration(QPainter painter, QStyleOptionViewItem option, QRect rect, QPixmap pixmap)'''
    def drawCheck(self, painter, option, rect, state):
        '''void QItemDelegate.drawCheck(QPainter painter, QStyleOptionViewItem option, QRect rect, Qt.CheckState state)'''
    def drawBackground(self, painter, option, index):
        '''void QItemDelegate.drawBackground(QPainter painter, QStyleOptionViewItem option, QModelIndex index)'''
    def setClipping(self, clip):
        '''void QItemDelegate.setClipping(bool clip)'''
    def hasClipping(self):
        '''bool QItemDelegate.hasClipping()'''
        return bool()
    def setItemEditorFactory(self, factory):
        '''void QItemDelegate.setItemEditorFactory(QItemEditorFactory factory)'''
    def itemEditorFactory(self):
        '''QItemEditorFactory QItemDelegate.itemEditorFactory()'''
        return QItemEditorFactory()
    def updateEditorGeometry(self, editor, option, index):
        '''void QItemDelegate.updateEditorGeometry(QWidget editor, QStyleOptionViewItem option, QModelIndex index)'''
    def setModelData(self, editor, model, index):
        '''void QItemDelegate.setModelData(QWidget editor, QAbstractItemModel model, QModelIndex index)'''
    def setEditorData(self, editor, index):
        '''void QItemDelegate.setEditorData(QWidget editor, QModelIndex index)'''
    def createEditor(self, parent, option, index):
        '''QWidget QItemDelegate.createEditor(QWidget parent, QStyleOptionViewItem option, QModelIndex index)'''
        return QWidget()
    def sizeHint(self, option, index):
        '''QSize QItemDelegate.sizeHint(QStyleOptionViewItem option, QModelIndex index)'''
        return QSize()
    def paint(self, painter, option, index):
        '''void QItemDelegate.paint(QPainter painter, QStyleOptionViewItem option, QModelIndex index)'''


class QItemEditorCreatorBase():
    """"""
    def __init__(self):
        '''void QItemEditorCreatorBase.__init__()'''
    def __init__(self):
        '''QItemEditorCreatorBase QItemEditorCreatorBase.__init__()'''
        return QItemEditorCreatorBase()
    def valuePropertyName(self):
        '''abstract QByteArray QItemEditorCreatorBase.valuePropertyName()'''
        return QByteArray()
    def createWidget(self, parent):
        '''abstract QWidget QItemEditorCreatorBase.createWidget(QWidget parent)'''
        return QWidget()


class QItemEditorFactory():
    """"""
    def __init__(self):
        '''void QItemEditorFactory.__init__()'''
    def __init__(self):
        '''QItemEditorFactory QItemEditorFactory.__init__()'''
        return QItemEditorFactory()
    def setDefaultFactory(self, factory):
        '''static void QItemEditorFactory.setDefaultFactory(QItemEditorFactory factory)'''
    def defaultFactory(self):
        '''static QItemEditorFactory QItemEditorFactory.defaultFactory()'''
        return QItemEditorFactory()
    def registerEditor(self, type, creator):
        '''void QItemEditorFactory.registerEditor(Type type, QItemEditorCreatorBase creator)'''
    def valuePropertyName(self, type):
        '''QByteArray QItemEditorFactory.valuePropertyName(Type type)'''
        return QByteArray()
    def createEditor(self, type, parent):
        '''QWidget QItemEditorFactory.createEditor(Type type, QWidget parent)'''
        return QWidget()


class QItemSelectionRange():
    """"""
    def __init__(self):
        '''void QItemSelectionRange.__init__()'''
    def __init__(self, other):
        '''void QItemSelectionRange.__init__(QItemSelectionRange other)'''
    def __init__(self, atopLeft, abottomRight):
        '''void QItemSelectionRange.__init__(QModelIndex atopLeft, QModelIndex abottomRight)'''
    def __init__(self, index):
        '''void QItemSelectionRange.__init__(QModelIndex index)'''
    def __ge__(self, other):
        '''bool QItemSelectionRange.__ge__(QItemSelectionRange other)'''
        return bool()
    def __lt__(self, other):
        '''bool QItemSelectionRange.__lt__(QItemSelectionRange other)'''
        return bool()
    def isEmpty(self):
        '''bool QItemSelectionRange.isEmpty()'''
        return bool()
    def __hash__(self):
        '''int QItemSelectionRange.__hash__()'''
        return int()
    def intersected(self, other):
        '''QItemSelectionRange QItemSelectionRange.intersected(QItemSelectionRange other)'''
        return QItemSelectionRange()
    def indexes(self):
        '''list-of-QModelIndex QItemSelectionRange.indexes()'''
        return [QModelIndex()]
    def isValid(self):
        '''bool QItemSelectionRange.isValid()'''
        return bool()
    def __ne__(self, other):
        '''bool QItemSelectionRange.__ne__(QItemSelectionRange other)'''
        return bool()
    def __eq__(self, other):
        '''bool QItemSelectionRange.__eq__(QItemSelectionRange other)'''
        return bool()
    def intersect(self, other):
        '''QItemSelectionRange QItemSelectionRange.intersect(QItemSelectionRange other)'''
        return QItemSelectionRange()
    def intersects(self, other):
        '''bool QItemSelectionRange.intersects(QItemSelectionRange other)'''
        return bool()
    def contains(self, index):
        '''bool QItemSelectionRange.contains(QModelIndex index)'''
        return bool()
    def contains(self, row, column, parentIndex):
        '''bool QItemSelectionRange.contains(int row, int column, QModelIndex parentIndex)'''
        return bool()
    def model(self):
        '''QAbstractItemModel QItemSelectionRange.model()'''
        return QAbstractItemModel()
    def parent(self):
        '''QModelIndex QItemSelectionRange.parent()'''
        return QModelIndex()
    def bottomRight(self):
        '''QModelIndex QItemSelectionRange.bottomRight()'''
        return QModelIndex()
    def topLeft(self):
        '''QModelIndex QItemSelectionRange.topLeft()'''
        return QModelIndex()
    def height(self):
        '''int QItemSelectionRange.height()'''
        return int()
    def width(self):
        '''int QItemSelectionRange.width()'''
        return int()
    def right(self):
        '''int QItemSelectionRange.right()'''
        return int()
    def bottom(self):
        '''int QItemSelectionRange.bottom()'''
        return int()
    def left(self):
        '''int QItemSelectionRange.left()'''
        return int()
    def top(self):
        '''int QItemSelectionRange.top()'''
        return int()


class QItemSelectionModel(QObject):
    """"""
    # Enum QItemSelectionModel.SelectionFlag
    NoUpdate = 0
    Clear = 0
    Select = 0
    Deselect = 0
    Toggle = 0
    Current = 0
    Rows = 0
    Columns = 0
    SelectCurrent = 0
    ToggleCurrent = 0
    ClearAndSelect = 0

    def __init__(self, model):
        '''void QItemSelectionModel.__init__(QAbstractItemModel model)'''
    def __init__(self, model, parent):
        '''void QItemSelectionModel.__init__(QAbstractItemModel model, QObject parent)'''
    def selectedColumns(self, row = 0):
        '''list-of-QModelIndex QItemSelectionModel.selectedColumns(int row = 0)'''
        return [QModelIndex()]
    def selectedRows(self, column = 0):
        '''list-of-QModelIndex QItemSelectionModel.selectedRows(int column = 0)'''
        return [QModelIndex()]
    def hasSelection(self):
        '''bool QItemSelectionModel.hasSelection()'''
        return bool()
    def emitSelectionChanged(self, newSelection, oldSelection):
        '''void QItemSelectionModel.emitSelectionChanged(QItemSelection newSelection, QItemSelection oldSelection)'''
    currentColumnChanged = pyqtSignal() # void currentColumnChanged(const QModelIndexamp;,const QModelIndexamp;) - signal
    currentRowChanged = pyqtSignal() # void currentRowChanged(const QModelIndexamp;,const QModelIndexamp;) - signal
    currentChanged = pyqtSignal() # void currentChanged(const QModelIndexamp;,const QModelIndexamp;) - signal
    selectionChanged = pyqtSignal() # void selectionChanged(const QItemSelectionamp;,const QItemSelectionamp;) - signal
    def setCurrentIndex(self, index, command):
        '''void QItemSelectionModel.setCurrentIndex(QModelIndex index, QItemSelectionModel.SelectionFlags command)'''
    def select(self, index, command):
        '''void QItemSelectionModel.select(QModelIndex index, QItemSelectionModel.SelectionFlags command)'''
    def select(self, selection, command):
        '''void QItemSelectionModel.select(QItemSelection selection, QItemSelectionModel.SelectionFlags command)'''
    def reset(self):
        '''void QItemSelectionModel.reset()'''
    def clearSelection(self):
        '''void QItemSelectionModel.clearSelection()'''
    def clear(self):
        '''void QItemSelectionModel.clear()'''
    def model(self):
        '''QAbstractItemModel QItemSelectionModel.model()'''
        return QAbstractItemModel()
    def selection(self):
        '''QItemSelection QItemSelectionModel.selection()'''
        return QItemSelection()
    def selectedIndexes(self):
        '''list-of-QModelIndex QItemSelectionModel.selectedIndexes()'''
        return [QModelIndex()]
    def columnIntersectsSelection(self, column, parent):
        '''bool QItemSelectionModel.columnIntersectsSelection(int column, QModelIndex parent)'''
        return bool()
    def rowIntersectsSelection(self, row, parent):
        '''bool QItemSelectionModel.rowIntersectsSelection(int row, QModelIndex parent)'''
        return bool()
    def isColumnSelected(self, column, parent):
        '''bool QItemSelectionModel.isColumnSelected(int column, QModelIndex parent)'''
        return bool()
    def isRowSelected(self, row, parent):
        '''bool QItemSelectionModel.isRowSelected(int row, QModelIndex parent)'''
        return bool()
    def isSelected(self, index):
        '''bool QItemSelectionModel.isSelected(QModelIndex index)'''
        return bool()
    def currentIndex(self):
        '''QModelIndex QItemSelectionModel.currentIndex()'''
        return QModelIndex()
    class SelectionFlags():
        """"""
        def __init__(self):
            '''QItemSelectionModel.SelectionFlags QItemSelectionModel.SelectionFlags.__init__()'''
            return QItemSelectionModel.SelectionFlags()
        def __init__(self):
            '''int QItemSelectionModel.SelectionFlags.__init__()'''
            return int()
        def __init__(self):
            '''void QItemSelectionModel.SelectionFlags.__init__()'''
        def __bool__(self):
            '''int QItemSelectionModel.SelectionFlags.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QItemSelectionModel.SelectionFlags.__ne__(QItemSelectionModel.SelectionFlags f)'''
            return bool()
        def __eq__(self, f):
            '''bool QItemSelectionModel.SelectionFlags.__eq__(QItemSelectionModel.SelectionFlags f)'''
            return bool()
        def __invert__(self):
            '''QItemSelectionModel.SelectionFlags QItemSelectionModel.SelectionFlags.__invert__()'''
            return QItemSelectionModel.SelectionFlags()
        def __and__(self, mask):
            '''QItemSelectionModel.SelectionFlags QItemSelectionModel.SelectionFlags.__and__(int mask)'''
            return QItemSelectionModel.SelectionFlags()
        def __xor__(self, f):
            '''QItemSelectionModel.SelectionFlags QItemSelectionModel.SelectionFlags.__xor__(QItemSelectionModel.SelectionFlags f)'''
            return QItemSelectionModel.SelectionFlags()
        def __xor__(self, f):
            '''QItemSelectionModel.SelectionFlags QItemSelectionModel.SelectionFlags.__xor__(int f)'''
            return QItemSelectionModel.SelectionFlags()
        def __or__(self, f):
            '''QItemSelectionModel.SelectionFlags QItemSelectionModel.SelectionFlags.__or__(QItemSelectionModel.SelectionFlags f)'''
            return QItemSelectionModel.SelectionFlags()
        def __or__(self, f):
            '''QItemSelectionModel.SelectionFlags QItemSelectionModel.SelectionFlags.__or__(int f)'''
            return QItemSelectionModel.SelectionFlags()
        def __int__(self):
            '''int QItemSelectionModel.SelectionFlags.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QItemSelectionModel.SelectionFlags QItemSelectionModel.SelectionFlags.__ixor__(QItemSelectionModel.SelectionFlags f)'''
            return QItemSelectionModel.SelectionFlags()
        def __ior__(self, f):
            '''QItemSelectionModel.SelectionFlags QItemSelectionModel.SelectionFlags.__ior__(QItemSelectionModel.SelectionFlags f)'''
            return QItemSelectionModel.SelectionFlags()
        def __iand__(self, mask):
            '''QItemSelectionModel.SelectionFlags QItemSelectionModel.SelectionFlags.__iand__(int mask)'''
            return QItemSelectionModel.SelectionFlags()


class QItemSelection():
    """"""
    def __init__(self):
        '''void QItemSelection.__init__()'''
    def __init__(self, topLeft, bottomRight):
        '''void QItemSelection.__init__(QModelIndex topLeft, QModelIndex bottomRight)'''
    def __init__(self):
        '''QItemSelection QItemSelection.__init__()'''
        return QItemSelection()
    def __iadd__(self, other):
        '''QItemSelection QItemSelection.__iadd__(QItemSelection other)'''
        return QItemSelection()
    def __iadd__(self, value):
        '''QItemSelection QItemSelection.__iadd__(QItemSelectionRange value)'''
        return QItemSelection()
    def lastIndexOf(self, value, from_ = None):
        '''int QItemSelection.lastIndexOf(QItemSelectionRange value, int from = -1)'''
        return int()
    def indexOf(self, value, from_ = 0):
        '''int QItemSelection.indexOf(QItemSelectionRange value, int from = 0)'''
        return int()
    def last(self):
        '''QItemSelectionRange QItemSelection.last()'''
        return QItemSelectionRange()
    def first(self):
        '''QItemSelectionRange QItemSelection.first()'''
        return QItemSelectionRange()
    def __len__(self):
        '''None QItemSelection.__len__()'''
        return None()
    def count(self, range):
        '''int QItemSelection.count(QItemSelectionRange range)'''
        return int()
    def count(self):
        '''int QItemSelection.count()'''
        return int()
    def swap(self, i, j):
        '''void QItemSelection.swap(int i, int j)'''
    def move(self, from_, to):
        '''void QItemSelection.move(int from, int to)'''
    def takeLast(self):
        '''QItemSelectionRange QItemSelection.takeLast()'''
        return QItemSelectionRange()
    def takeFirst(self):
        '''QItemSelectionRange QItemSelection.takeFirst()'''
        return QItemSelectionRange()
    def takeAt(self, i):
        '''QItemSelectionRange QItemSelection.takeAt(int i)'''
        return QItemSelectionRange()
    def removeAll(self, range):
        '''int QItemSelection.removeAll(QItemSelectionRange range)'''
        return int()
    def removeAt(self, i):
        '''void QItemSelection.removeAt(int i)'''
    def replace(self, i, range):
        '''void QItemSelection.replace(int i, QItemSelectionRange range)'''
    def insert(self, i, range):
        '''void QItemSelection.insert(int i, QItemSelectionRange range)'''
    def prepend(self, range):
        '''void QItemSelection.prepend(QItemSelectionRange range)'''
    def append(self, range):
        '''void QItemSelection.append(QItemSelectionRange range)'''
    def isEmpty(self):
        '''bool QItemSelection.isEmpty()'''
        return bool()
    def clear(self):
        '''void QItemSelection.clear()'''
    def __eq__(self, other):
        '''bool QItemSelection.__eq__(QItemSelection other)'''
        return bool()
    def __ne__(self, other):
        '''bool QItemSelection.__ne__(QItemSelection other)'''
        return bool()
    def __getitem__(self, i):
        '''QItemSelectionRange QItemSelection.__getitem__(int i)'''
        return QItemSelectionRange()
    def __getitem__(self, slice):
        '''QItemSelection QItemSelection.__getitem__(slice slice)'''
        return QItemSelection()
    def __delitem__(self, i):
        '''void QItemSelection.__delitem__(int i)'''
    def __delitem__(self, slice):
        '''void QItemSelection.__delitem__(slice slice)'''
    def __setitem__(self, i, range):
        '''void QItemSelection.__setitem__(int i, QItemSelectionRange range)'''
    def __setitem__(self, slice, list):
        '''void QItemSelection.__setitem__(slice slice, QItemSelection list)'''
    def split(self, range, other, result):
        '''static void QItemSelection.split(QItemSelectionRange range, QItemSelectionRange other, QItemSelection result)'''
    def merge(self, other, command):
        '''void QItemSelection.merge(QItemSelection other, QItemSelectionModel.SelectionFlags command)'''
    def indexes(self):
        '''list-of-QModelIndex QItemSelection.indexes()'''
        return [QModelIndex()]
    def __contains__(self, index):
        '''int QItemSelection.__contains__(QModelIndex index)'''
        return int()
    def contains(self, index):
        '''bool QItemSelection.contains(QModelIndex index)'''
        return bool()
    def select(self, topLeft, bottomRight):
        '''void QItemSelection.select(QModelIndex topLeft, QModelIndex bottomRight)'''


class QKeyEventTransition(QEventTransition):
    """"""
    def __init__(self, sourceState = None):
        '''void QKeyEventTransition.__init__(QState sourceState = None)'''
    def __init__(self, object, type, key, sourceState = None):
        '''void QKeyEventTransition.__init__(QObject object, QEvent.Type type, int key, QState sourceState = None)'''
    def eventTest(self, event):
        '''bool QKeyEventTransition.eventTest(QEvent event)'''
        return bool()
    def onTransition(self, event):
        '''void QKeyEventTransition.onTransition(QEvent event)'''
    def setModifierMask(self, modifiers):
        '''void QKeyEventTransition.setModifierMask(Qt.KeyboardModifiers modifiers)'''
    def modifierMask(self):
        '''Qt.KeyboardModifiers QKeyEventTransition.modifierMask()'''
        return Qt.KeyboardModifiers()
    def setKey(self, key):
        '''void QKeyEventTransition.setKey(int key)'''
    def key(self):
        '''int QKeyEventTransition.key()'''
        return int()


class QKeySequence():
    """"""
    # Enum QKeySequence.StandardKey
    UnknownKey = 0
    HelpContents = 0
    WhatsThis = 0
    Open = 0
    Close = 0
    Save = 0
    New = 0
    Delete = 0
    Cut = 0
    Copy = 0
    Paste = 0
    Undo = 0
    Redo = 0
    Back = 0
    Forward = 0
    Refresh = 0
    ZoomIn = 0
    ZoomOut = 0
    Print = 0
    AddTab = 0
    NextChild = 0
    PreviousChild = 0
    Find = 0
    FindNext = 0
    FindPrevious = 0
    Replace = 0
    SelectAll = 0
    Bold = 0
    Italic = 0
    Underline = 0
    MoveToNextChar = 0
    MoveToPreviousChar = 0
    MoveToNextWord = 0
    MoveToPreviousWord = 0
    MoveToNextLine = 0
    MoveToPreviousLine = 0
    MoveToNextPage = 0
    MoveToPreviousPage = 0
    MoveToStartOfLine = 0
    MoveToEndOfLine = 0
    MoveToStartOfBlock = 0
    MoveToEndOfBlock = 0
    MoveToStartOfDocument = 0
    MoveToEndOfDocument = 0
    SelectNextChar = 0
    SelectPreviousChar = 0
    SelectNextWord = 0
    SelectPreviousWord = 0
    SelectNextLine = 0
    SelectPreviousLine = 0
    SelectNextPage = 0
    SelectPreviousPage = 0
    SelectStartOfLine = 0
    SelectEndOfLine = 0
    SelectStartOfBlock = 0
    SelectEndOfBlock = 0
    SelectStartOfDocument = 0
    SelectEndOfDocument = 0
    DeleteStartOfWord = 0
    DeleteEndOfWord = 0
    DeleteEndOfLine = 0
    InsertParagraphSeparator = 0
    InsertLineSeparator = 0
    SaveAs = 0
    Preferences = 0
    Quit = 0

    # Enum QKeySequence.SequenceMatch
    NoMatch = 0
    PartialMatch = 0
    ExactMatch = 0

    # Enum QKeySequence.SequenceFormat
    NativeText = 0
    PortableText = 0

    def __init__(self):
        '''void QKeySequence.__init__()'''
    def __init__(self, ks):
        '''void QKeySequence.__init__(QKeySequence ks)'''
    def __init__(self, key, format):
        '''void QKeySequence.__init__(QString key, QKeySequence.SequenceFormat format)'''
    def __init__(self, k1, key2 = 0, key3 = 0, key4 = 0):
        '''void QKeySequence.__init__(int k1, int key2 = 0, int key3 = 0, int key4 = 0)'''
    def __init__(self, variant):
        '''void QKeySequence.__init__(QVariant variant)'''
    def swap(self, other):
        '''void QKeySequence.swap(QKeySequence other)'''
    def keyBindings(self, key):
        '''static list-of-QKeySequence QKeySequence.keyBindings(QKeySequence.StandardKey key)'''
        return [QKeySequence()]
    def fromString(self, str, format = None):
        '''static QKeySequence QKeySequence.fromString(QString str, QKeySequence.SequenceFormat format = QKeySequence.PortableText)'''
        return QKeySequence()
    def toString(self, format = None):
        '''QString QKeySequence.toString(QKeySequence.SequenceFormat format = QKeySequence.PortableText)'''
        return QString()
    def isDetached(self):
        '''bool QKeySequence.isDetached()'''
        return bool()
    def __ge__(self, other):
        '''bool QKeySequence.__ge__(QKeySequence other)'''
        return bool()
    def __le__(self, other):
        '''bool QKeySequence.__le__(QKeySequence other)'''
        return bool()
    def __gt__(self, other):
        '''bool QKeySequence.__gt__(QKeySequence other)'''
        return bool()
    def __lt__(self, ks):
        '''bool QKeySequence.__lt__(QKeySequence ks)'''
        return bool()
    def __ne__(self, other):
        '''bool QKeySequence.__ne__(QKeySequence other)'''
        return bool()
    def __eq__(self, other):
        '''bool QKeySequence.__eq__(QKeySequence other)'''
        return bool()
    def __getitem__(self, i):
        '''int QKeySequence.__getitem__(int i)'''
        return int()
    def __int__(self):
        '''int QKeySequence.__int__()'''
        return int()
    def mnemonic(self, text):
        '''static QKeySequence QKeySequence.mnemonic(QString text)'''
        return QKeySequence()
    def matches(self, seq):
        '''QKeySequence.SequenceMatch QKeySequence.matches(QKeySequence seq)'''
        return QKeySequence.SequenceMatch()
    def isEmpty(self):
        '''bool QKeySequence.isEmpty()'''
        return bool()
    def __len__(self):
        '''None QKeySequence.__len__()'''
        return None()
    def count(self):
        '''int QKeySequence.count()'''
        return int()


class QLabel(QFrame):
    """"""
    def __init__(self, parent = None, flags = 0):
        '''void QLabel.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def __init__(self, text, parent = None, flags = 0):
        '''void QLabel.__init__(QString text, QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def selectionStart(self):
        '''int QLabel.selectionStart()'''
        return int()
    def selectedText(self):
        '''QString QLabel.selectedText()'''
        return QString()
    def hasSelectedText(self):
        '''bool QLabel.hasSelectedText()'''
        return bool()
    def setSelection(self):
        '''int QLabel.setSelection()'''
        return int()
    def focusNextPrevChild(self, next):
        '''bool QLabel.focusNextPrevChild(bool next)'''
        return bool()
    def focusOutEvent(self, ev):
        '''void QLabel.focusOutEvent(QFocusEvent ev)'''
    def focusInEvent(self, ev):
        '''void QLabel.focusInEvent(QFocusEvent ev)'''
    def contextMenuEvent(self, ev):
        '''void QLabel.contextMenuEvent(QContextMenuEvent ev)'''
    def mouseReleaseEvent(self, ev):
        '''void QLabel.mouseReleaseEvent(QMouseEvent ev)'''
    def mouseMoveEvent(self, ev):
        '''void QLabel.mouseMoveEvent(QMouseEvent ev)'''
    def mousePressEvent(self, ev):
        '''void QLabel.mousePressEvent(QMouseEvent ev)'''
    def keyPressEvent(self, ev):
        '''void QLabel.keyPressEvent(QKeyEvent ev)'''
    def changeEvent(self):
        '''QEvent QLabel.changeEvent()'''
        return QEvent()
    def paintEvent(self):
        '''QPaintEvent QLabel.paintEvent()'''
        return QPaintEvent()
    def event(self, e):
        '''bool QLabel.event(QEvent e)'''
        return bool()
    linkHovered = pyqtSignal() # void linkHovered(const QStringamp;) - signal
    linkActivated = pyqtSignal() # void linkActivated(const QStringamp;) - signal
    def setText(self):
        '''QString QLabel.setText()'''
        return QString()
    def setPixmap(self):
        '''QPixmap QLabel.setPixmap()'''
        return QPixmap()
    def setPicture(self):
        '''QPicture QLabel.setPicture()'''
        return QPicture()
    def setNum(self):
        '''float QLabel.setNum()'''
        return float()
    def setNum(self):
        '''int QLabel.setNum()'''
        return int()
    def setMovie(self, movie):
        '''void QLabel.setMovie(QMovie movie)'''
    def clear(self):
        '''void QLabel.clear()'''
    def setOpenExternalLinks(self, open):
        '''void QLabel.setOpenExternalLinks(bool open)'''
    def textInteractionFlags(self):
        '''Qt.TextInteractionFlags QLabel.textInteractionFlags()'''
        return Qt.TextInteractionFlags()
    def setTextInteractionFlags(self, flags):
        '''void QLabel.setTextInteractionFlags(Qt.TextInteractionFlags flags)'''
    def openExternalLinks(self):
        '''bool QLabel.openExternalLinks()'''
        return bool()
    def heightForWidth(self):
        '''int QLabel.heightForWidth()'''
        return int()
    def buddy(self):
        '''QWidget QLabel.buddy()'''
        return QWidget()
    def setBuddy(self):
        '''QWidget QLabel.setBuddy()'''
        return QWidget()
    def minimumSizeHint(self):
        '''QSize QLabel.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QLabel.sizeHint()'''
        return QSize()
    def setScaledContents(self):
        '''bool QLabel.setScaledContents()'''
        return bool()
    def hasScaledContents(self):
        '''bool QLabel.hasScaledContents()'''
        return bool()
    def setMargin(self):
        '''int QLabel.setMargin()'''
        return int()
    def margin(self):
        '''int QLabel.margin()'''
        return int()
    def setIndent(self):
        '''int QLabel.setIndent()'''
        return int()
    def indent(self):
        '''int QLabel.indent()'''
        return int()
    def wordWrap(self):
        '''bool QLabel.wordWrap()'''
        return bool()
    def setWordWrap(self, on):
        '''void QLabel.setWordWrap(bool on)'''
    def setAlignment(self):
        '''Qt.Alignment QLabel.setAlignment()'''
        return Qt.Alignment()
    def alignment(self):
        '''Qt.Alignment QLabel.alignment()'''
        return Qt.Alignment()
    def setTextFormat(self):
        '''Qt.TextFormat QLabel.setTextFormat()'''
        return Qt.TextFormat()
    def textFormat(self):
        '''Qt.TextFormat QLabel.textFormat()'''
        return Qt.TextFormat()
    def movie(self):
        '''QMovie QLabel.movie()'''
        return QMovie()
    def picture(self):
        '''QPicture QLabel.picture()'''
        return QPicture()
    def pixmap(self):
        '''QPixmap QLabel.pixmap()'''
        return QPixmap()
    def text(self):
        '''QString QLabel.text()'''
        return QString()


class QSpacerItem(QLayoutItem):
    """"""
    def __init__(self, w, h, hPolicy = None, vPolicy = None):
        '''void QSpacerItem.__init__(int w, int h, QSizePolicy.Policy hPolicy = QSizePolicy.Minimum, QSizePolicy.Policy vPolicy = QSizePolicy.Minimum)'''
    def __init__(self):
        '''QSpacerItem QSpacerItem.__init__()'''
        return QSpacerItem()
    def spacerItem(self):
        '''QSpacerItem QSpacerItem.spacerItem()'''
        return QSpacerItem()
    def geometry(self):
        '''QRect QSpacerItem.geometry()'''
        return QRect()
    def setGeometry(self):
        '''QRect QSpacerItem.setGeometry()'''
        return QRect()
    def isEmpty(self):
        '''bool QSpacerItem.isEmpty()'''
        return bool()
    def expandingDirections(self):
        '''Qt.Orientations QSpacerItem.expandingDirections()'''
        return Qt.Orientations()
    def maximumSize(self):
        '''QSize QSpacerItem.maximumSize()'''
        return QSize()
    def minimumSize(self):
        '''QSize QSpacerItem.minimumSize()'''
        return QSize()
    def sizeHint(self):
        '''QSize QSpacerItem.sizeHint()'''
        return QSize()
    def changeSize(self, w, h, hPolicy = None, vPolicy = None):
        '''void QSpacerItem.changeSize(int w, int h, QSizePolicy.Policy hPolicy = QSizePolicy.Minimum, QSizePolicy.Policy vPolicy = QSizePolicy.Minimum)'''


class QWidgetItem(QLayoutItem):
    """"""
    def __init__(self, w):
        '''void QWidgetItem.__init__(QWidget w)'''
    def heightForWidth(self):
        '''int QWidgetItem.heightForWidth()'''
        return int()
    def hasHeightForWidth(self):
        '''bool QWidgetItem.hasHeightForWidth()'''
        return bool()
    def widget(self):
        '''QWidget QWidgetItem.widget()'''
        return QWidget()
    def geometry(self):
        '''QRect QWidgetItem.geometry()'''
        return QRect()
    def setGeometry(self):
        '''QRect QWidgetItem.setGeometry()'''
        return QRect()
    def isEmpty(self):
        '''bool QWidgetItem.isEmpty()'''
        return bool()
    def expandingDirections(self):
        '''Qt.Orientations QWidgetItem.expandingDirections()'''
        return Qt.Orientations()
    def maximumSize(self):
        '''QSize QWidgetItem.maximumSize()'''
        return QSize()
    def minimumSize(self):
        '''QSize QWidgetItem.minimumSize()'''
        return QSize()
    def sizeHint(self):
        '''QSize QWidgetItem.sizeHint()'''
        return QSize()


class QLCDNumber(QFrame):
    """"""
    # Enum QLCDNumber.SegmentStyle
    Outline = 0
    Filled = 0
    Flat = 0

    # Enum QLCDNumber.Mode
    Hex = 0
    Dec = 0
    Oct = 0
    Bin = 0

    def __init__(self, parent = None):
        '''void QLCDNumber.__init__(QWidget parent = None)'''
    def __init__(self, numDigits, parent = None):
        '''void QLCDNumber.__init__(int numDigits, QWidget parent = None)'''
    def setDigitCount(self, nDigits):
        '''void QLCDNumber.setDigitCount(int nDigits)'''
    def digitCount(self):
        '''int QLCDNumber.digitCount()'''
        return int()
    def paintEvent(self):
        '''QPaintEvent QLCDNumber.paintEvent()'''
        return QPaintEvent()
    def event(self, e):
        '''bool QLCDNumber.event(QEvent e)'''
        return bool()
    overflow = pyqtSignal() # void overflow() - signal
    def setSmallDecimalPoint(self):
        '''bool QLCDNumber.setSmallDecimalPoint()'''
        return bool()
    def setBinMode(self):
        '''void QLCDNumber.setBinMode()'''
    def setOctMode(self):
        '''void QLCDNumber.setOctMode()'''
    def setDecMode(self):
        '''void QLCDNumber.setDecMode()'''
    def setHexMode(self):
        '''void QLCDNumber.setHexMode()'''
    def display(self, str):
        '''void QLCDNumber.display(QString str)'''
    def display(self, num):
        '''void QLCDNumber.display(float num)'''
    def display(self, num):
        '''void QLCDNumber.display(int num)'''
    def sizeHint(self):
        '''QSize QLCDNumber.sizeHint()'''
        return QSize()
    def intValue(self):
        '''int QLCDNumber.intValue()'''
        return int()
    def value(self):
        '''float QLCDNumber.value()'''
        return float()
    def setSegmentStyle(self):
        '''QLCDNumber.SegmentStyle QLCDNumber.setSegmentStyle()'''
        return QLCDNumber.SegmentStyle()
    def segmentStyle(self):
        '''QLCDNumber.SegmentStyle QLCDNumber.segmentStyle()'''
        return QLCDNumber.SegmentStyle()
    def setMode(self):
        '''QLCDNumber.Mode QLCDNumber.setMode()'''
        return QLCDNumber.Mode()
    def mode(self):
        '''QLCDNumber.Mode QLCDNumber.mode()'''
        return QLCDNumber.Mode()
    def checkOverflow(self, num):
        '''bool QLCDNumber.checkOverflow(float num)'''
        return bool()
    def checkOverflow(self, num):
        '''bool QLCDNumber.checkOverflow(int num)'''
        return bool()
    def setNumDigits(self, nDigits):
        '''void QLCDNumber.setNumDigits(int nDigits)'''
    def numDigits(self):
        '''int QLCDNumber.numDigits()'''
        return int()
    def smallDecimalPoint(self):
        '''bool QLCDNumber.smallDecimalPoint()'''
        return bool()


class QLineEdit(QWidget):
    """"""
    # Enum QLineEdit.EchoMode
    Normal = 0
    NoEcho = 0
    Password = 0
    PasswordEchoOnEdit = 0

    def __init__(self, parent = None):
        '''void QLineEdit.__init__(QWidget parent = None)'''
    def __init__(self, contents, parent = None):
        '''void QLineEdit.__init__(QString contents, QWidget parent = None)'''
    def cursorMoveStyle(self):
        '''Qt.CursorMoveStyle QLineEdit.cursorMoveStyle()'''
        return Qt.CursorMoveStyle()
    def setCursorMoveStyle(self, style):
        '''void QLineEdit.setCursorMoveStyle(Qt.CursorMoveStyle style)'''
    def setPlaceholderText(self):
        '''QString QLineEdit.setPlaceholderText()'''
        return QString()
    def placeholderText(self):
        '''QString QLineEdit.placeholderText()'''
        return QString()
    def textMargins(self):
        '''QMargins QLineEdit.textMargins()'''
        return QMargins()
    def getTextMargins(self, left, top, right, bottom):
        '''void QLineEdit.getTextMargins(int left, int top, int right, int bottom)'''
    def setTextMargins(self, left, top, right, bottom):
        '''void QLineEdit.setTextMargins(int left, int top, int right, int bottom)'''
    def setTextMargins(self, margins):
        '''void QLineEdit.setTextMargins(QMargins margins)'''
    def completer(self):
        '''QCompleter QLineEdit.completer()'''
        return QCompleter()
    def setCompleter(self, completer):
        '''void QLineEdit.setCompleter(QCompleter completer)'''
    def event(self):
        '''QEvent QLineEdit.event()'''
        return QEvent()
    def inputMethodQuery(self):
        '''Qt.InputMethodQuery QLineEdit.inputMethodQuery()'''
        return Qt.InputMethodQuery()
    def cursorRect(self):
        '''QRect QLineEdit.cursorRect()'''
        return QRect()
    def inputMethodEvent(self):
        '''QInputMethodEvent QLineEdit.inputMethodEvent()'''
        return QInputMethodEvent()
    def contextMenuEvent(self):
        '''QContextMenuEvent QLineEdit.contextMenuEvent()'''
        return QContextMenuEvent()
    def changeEvent(self):
        '''QEvent QLineEdit.changeEvent()'''
        return QEvent()
    def dropEvent(self):
        '''QDropEvent QLineEdit.dropEvent()'''
        return QDropEvent()
    def dragLeaveEvent(self, e):
        '''void QLineEdit.dragLeaveEvent(QDragLeaveEvent e)'''
    def dragMoveEvent(self, e):
        '''void QLineEdit.dragMoveEvent(QDragMoveEvent e)'''
    def dragEnterEvent(self):
        '''QDragEnterEvent QLineEdit.dragEnterEvent()'''
        return QDragEnterEvent()
    def paintEvent(self):
        '''QPaintEvent QLineEdit.paintEvent()'''
        return QPaintEvent()
    def focusOutEvent(self):
        '''QFocusEvent QLineEdit.focusOutEvent()'''
        return QFocusEvent()
    def focusInEvent(self):
        '''QFocusEvent QLineEdit.focusInEvent()'''
        return QFocusEvent()
    def keyPressEvent(self):
        '''QKeyEvent QLineEdit.keyPressEvent()'''
        return QKeyEvent()
    def mouseDoubleClickEvent(self):
        '''QMouseEvent QLineEdit.mouseDoubleClickEvent()'''
        return QMouseEvent()
    def mouseReleaseEvent(self):
        '''QMouseEvent QLineEdit.mouseReleaseEvent()'''
        return QMouseEvent()
    def mouseMoveEvent(self):
        '''QMouseEvent QLineEdit.mouseMoveEvent()'''
        return QMouseEvent()
    def mousePressEvent(self):
        '''QMouseEvent QLineEdit.mousePressEvent()'''
        return QMouseEvent()
    def initStyleOption(self, option):
        '''void QLineEdit.initStyleOption(QStyleOptionFrame option)'''
    selectionChanged = pyqtSignal() # void selectionChanged() - signal
    editingFinished = pyqtSignal() # void editingFinished() - signal
    returnPressed = pyqtSignal() # void returnPressed() - signal
    cursorPositionChanged = pyqtSignal() # void cursorPositionChanged(int,int) - signal
    textEdited = pyqtSignal() # void textEdited(const QStringamp;) - signal
    textChanged = pyqtSignal() # void textChanged(const QStringamp;) - signal
    def createStandardContextMenu(self):
        '''QMenu QLineEdit.createStandardContextMenu()'''
        return QMenu()
    def insert(self):
        '''QString QLineEdit.insert()'''
        return QString()
    def deselect(self):
        '''void QLineEdit.deselect()'''
    def paste(self):
        '''void QLineEdit.paste()'''
    def copy(self):
        '''void QLineEdit.copy()'''
    def cut(self):
        '''void QLineEdit.cut()'''
    def redo(self):
        '''void QLineEdit.redo()'''
    def undo(self):
        '''void QLineEdit.undo()'''
    def selectAll(self):
        '''void QLineEdit.selectAll()'''
    def clear(self):
        '''void QLineEdit.clear()'''
    def setText(self):
        '''QString QLineEdit.setText()'''
        return QString()
    def hasAcceptableInput(self):
        '''bool QLineEdit.hasAcceptableInput()'''
        return bool()
    def setInputMask(self, inputMask):
        '''void QLineEdit.setInputMask(QString inputMask)'''
    def inputMask(self):
        '''QString QLineEdit.inputMask()'''
        return QString()
    def dragEnabled(self):
        '''bool QLineEdit.dragEnabled()'''
        return bool()
    def setDragEnabled(self, b):
        '''void QLineEdit.setDragEnabled(bool b)'''
    def isRedoAvailable(self):
        '''bool QLineEdit.isRedoAvailable()'''
        return bool()
    def isUndoAvailable(self):
        '''bool QLineEdit.isUndoAvailable()'''
        return bool()
    def selectionStart(self):
        '''int QLineEdit.selectionStart()'''
        return int()
    def selectedText(self):
        '''QString QLineEdit.selectedText()'''
        return QString()
    def hasSelectedText(self):
        '''bool QLineEdit.hasSelectedText()'''
        return bool()
    def setSelection(self):
        '''int QLineEdit.setSelection()'''
        return int()
    def setModified(self):
        '''bool QLineEdit.setModified()'''
        return bool()
    def isModified(self):
        '''bool QLineEdit.isModified()'''
        return bool()
    def end(self, mark):
        '''void QLineEdit.end(bool mark)'''
    def home(self, mark):
        '''void QLineEdit.home(bool mark)'''
    def del_(self):
        '''void QLineEdit.del_()'''
    def backspace(self):
        '''void QLineEdit.backspace()'''
    def cursorWordBackward(self, mark):
        '''void QLineEdit.cursorWordBackward(bool mark)'''
    def cursorWordForward(self, mark):
        '''void QLineEdit.cursorWordForward(bool mark)'''
    def cursorBackward(self, mark, steps = 1):
        '''void QLineEdit.cursorBackward(bool mark, int steps = 1)'''
    def cursorForward(self, mark, steps = 1):
        '''void QLineEdit.cursorForward(bool mark, int steps = 1)'''
    def alignment(self):
        '''Qt.Alignment QLineEdit.alignment()'''
        return Qt.Alignment()
    def setAlignment(self, flag):
        '''void QLineEdit.setAlignment(Qt.Alignment flag)'''
    def cursorPositionAt(self, pos):
        '''int QLineEdit.cursorPositionAt(QPoint pos)'''
        return int()
    def setCursorPosition(self):
        '''int QLineEdit.setCursorPosition()'''
        return int()
    def cursorPosition(self):
        '''int QLineEdit.cursorPosition()'''
        return int()
    def minimumSizeHint(self):
        '''QSize QLineEdit.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QLineEdit.sizeHint()'''
        return QSize()
    def validator(self):
        '''QValidator QLineEdit.validator()'''
        return QValidator()
    def setValidator(self):
        '''QValidator QLineEdit.setValidator()'''
        return QValidator()
    def setReadOnly(self):
        '''bool QLineEdit.setReadOnly()'''
        return bool()
    def isReadOnly(self):
        '''bool QLineEdit.isReadOnly()'''
        return bool()
    def setEchoMode(self):
        '''QLineEdit.EchoMode QLineEdit.setEchoMode()'''
        return QLineEdit.EchoMode()
    def echoMode(self):
        '''QLineEdit.EchoMode QLineEdit.echoMode()'''
        return QLineEdit.EchoMode()
    def hasFrame(self):
        '''bool QLineEdit.hasFrame()'''
        return bool()
    def setFrame(self):
        '''bool QLineEdit.setFrame()'''
        return bool()
    def setMaxLength(self):
        '''int QLineEdit.setMaxLength()'''
        return int()
    def maxLength(self):
        '''int QLineEdit.maxLength()'''
        return int()
    def displayText(self):
        '''QString QLineEdit.displayText()'''
        return QString()
    def text(self):
        '''QString QLineEdit.text()'''
        return QString()


class QListView(QAbstractItemView):
    """"""
    # Enum QListView.ViewMode
    ListMode = 0
    IconMode = 0

    # Enum QListView.LayoutMode
    SinglePass = 0
    Batched = 0

    # Enum QListView.ResizeMode
    Fixed = 0
    Adjust = 0

    # Enum QListView.Flow
    LeftToRight = 0
    TopToBottom = 0

    # Enum QListView.Movement
    Static = 0
    Free = 0
    Snap = 0

    def __init__(self, parent = None):
        '''void QListView.__init__(QWidget parent = None)'''
    def currentChanged(self, current, previous):
        '''void QListView.currentChanged(QModelIndex current, QModelIndex previous)'''
    def selectionChanged(self, selected, deselected):
        '''void QListView.selectionChanged(QItemSelection selected, QItemSelection deselected)'''
    def isSelectionRectVisible(self):
        '''bool QListView.isSelectionRectVisible()'''
        return bool()
    def setSelectionRectVisible(self, show):
        '''void QListView.setSelectionRectVisible(bool show)'''
    def wordWrap(self):
        '''bool QListView.wordWrap()'''
        return bool()
    def setWordWrap(self, on):
        '''void QListView.setWordWrap(bool on)'''
    def batchSize(self):
        '''int QListView.batchSize()'''
        return int()
    def setBatchSize(self, batchSize):
        '''void QListView.setBatchSize(int batchSize)'''
    def isIndexHidden(self, index):
        '''bool QListView.isIndexHidden(QModelIndex index)'''
        return bool()
    def updateGeometries(self):
        '''void QListView.updateGeometries()'''
    def selectedIndexes(self):
        '''list-of-QModelIndex QListView.selectedIndexes()'''
        return [QModelIndex()]
    def visualRegionForSelection(self, selection):
        '''QRegion QListView.visualRegionForSelection(QItemSelection selection)'''
        return QRegion()
    def setSelection(self, rect, command):
        '''void QListView.setSelection(QRect rect, QItemSelectionModel.SelectionFlags command)'''
    def setPositionForIndex(self, position, index):
        '''void QListView.setPositionForIndex(QPoint position, QModelIndex index)'''
    def rectForIndex(self, index):
        '''QRect QListView.rectForIndex(QModelIndex index)'''
        return QRect()
    def moveCursor(self, cursorAction, modifiers):
        '''QModelIndex QListView.moveCursor(QAbstractItemView.CursorAction cursorAction, Qt.KeyboardModifiers modifiers)'''
        return QModelIndex()
    def verticalOffset(self):
        '''int QListView.verticalOffset()'''
        return int()
    def horizontalOffset(self):
        '''int QListView.horizontalOffset()'''
        return int()
    def paintEvent(self, e):
        '''void QListView.paintEvent(QPaintEvent e)'''
    def viewOptions(self):
        '''QStyleOptionViewItem QListView.viewOptions()'''
        return QStyleOptionViewItem()
    def startDrag(self, supportedActions):
        '''void QListView.startDrag(Qt.DropActions supportedActions)'''
    def dropEvent(self, e):
        '''void QListView.dropEvent(QDropEvent e)'''
    def dragLeaveEvent(self, e):
        '''void QListView.dragLeaveEvent(QDragLeaveEvent e)'''
    def dragMoveEvent(self, e):
        '''void QListView.dragMoveEvent(QDragMoveEvent e)'''
    def resizeEvent(self, e):
        '''void QListView.resizeEvent(QResizeEvent e)'''
    def timerEvent(self, e):
        '''void QListView.timerEvent(QTimerEvent e)'''
    def mouseReleaseEvent(self, e):
        '''void QListView.mouseReleaseEvent(QMouseEvent e)'''
    def mouseMoveEvent(self, e):
        '''void QListView.mouseMoveEvent(QMouseEvent e)'''
    def event(self, e):
        '''bool QListView.event(QEvent e)'''
        return bool()
    def rowsAboutToBeRemoved(self, parent, start, end):
        '''void QListView.rowsAboutToBeRemoved(QModelIndex parent, int start, int end)'''
    def rowsInserted(self, parent, start, end):
        '''void QListView.rowsInserted(QModelIndex parent, int start, int end)'''
    def dataChanged(self, topLeft, bottomRight):
        '''void QListView.dataChanged(QModelIndex topLeft, QModelIndex bottomRight)'''
    def scrollContentsBy(self, dx, dy):
        '''void QListView.scrollContentsBy(int dx, int dy)'''
    indexesMoved = pyqtSignal() # void indexesMoved(const QModelIndexListamp;) - signal
    def setRootIndex(self, index):
        '''void QListView.setRootIndex(QModelIndex index)'''
    def reset(self):
        '''void QListView.reset()'''
    def indexAt(self, p):
        '''QModelIndex QListView.indexAt(QPoint p)'''
        return QModelIndex()
    def scrollTo(self, index, hint = None):
        '''void QListView.scrollTo(QModelIndex index, QAbstractItemView.ScrollHint hint = QAbstractItemView.EnsureVisible)'''
    def visualRect(self, index):
        '''QRect QListView.visualRect(QModelIndex index)'''
        return QRect()
    def uniformItemSizes(self):
        '''bool QListView.uniformItemSizes()'''
        return bool()
    def setUniformItemSizes(self, enable):
        '''void QListView.setUniformItemSizes(bool enable)'''
    def modelColumn(self):
        '''int QListView.modelColumn()'''
        return int()
    def setModelColumn(self, column):
        '''void QListView.setModelColumn(int column)'''
    def setRowHidden(self, row, hide):
        '''void QListView.setRowHidden(int row, bool hide)'''
    def isRowHidden(self, row):
        '''bool QListView.isRowHidden(int row)'''
        return bool()
    def clearPropertyFlags(self):
        '''void QListView.clearPropertyFlags()'''
    def viewMode(self):
        '''QListView.ViewMode QListView.viewMode()'''
        return QListView.ViewMode()
    def setViewMode(self, mode):
        '''void QListView.setViewMode(QListView.ViewMode mode)'''
    def gridSize(self):
        '''QSize QListView.gridSize()'''
        return QSize()
    def setGridSize(self, size):
        '''void QListView.setGridSize(QSize size)'''
    def spacing(self):
        '''int QListView.spacing()'''
        return int()
    def setSpacing(self, space):
        '''void QListView.setSpacing(int space)'''
    def layoutMode(self):
        '''QListView.LayoutMode QListView.layoutMode()'''
        return QListView.LayoutMode()
    def setLayoutMode(self, mode):
        '''void QListView.setLayoutMode(QListView.LayoutMode mode)'''
    def resizeMode(self):
        '''QListView.ResizeMode QListView.resizeMode()'''
        return QListView.ResizeMode()
    def setResizeMode(self, mode):
        '''void QListView.setResizeMode(QListView.ResizeMode mode)'''
    def isWrapping(self):
        '''bool QListView.isWrapping()'''
        return bool()
    def setWrapping(self, enable):
        '''void QListView.setWrapping(bool enable)'''
    def flow(self):
        '''QListView.Flow QListView.flow()'''
        return QListView.Flow()
    def setFlow(self, flow):
        '''void QListView.setFlow(QListView.Flow flow)'''
    def movement(self):
        '''QListView.Movement QListView.movement()'''
        return QListView.Movement()
    def setMovement(self, movement):
        '''void QListView.setMovement(QListView.Movement movement)'''


class QListWidgetItem():
    """"""
    # Enum QListWidgetItem.ItemType
    Type = 0
    UserType = 0

    def __init__(self, parent = None, type = None):
        '''void QListWidgetItem.__init__(QListWidget parent = None, int type = QListWidgetItem.Type)'''
    def __init__(self, text, parent = None, type = None):
        '''void QListWidgetItem.__init__(QString text, QListWidget parent = None, int type = QListWidgetItem.Type)'''
    def __init__(self, icon, text, parent = None, type = None):
        '''void QListWidgetItem.__init__(QIcon icon, QString text, QListWidget parent = None, int type = QListWidgetItem.Type)'''
    def __init__(self, other):
        '''void QListWidgetItem.__init__(QListWidgetItem other)'''
    def __ge__(self, other):
        '''bool QListWidgetItem.__ge__(QListWidgetItem other)'''
        return bool()
    def isHidden(self):
        '''bool QListWidgetItem.isHidden()'''
        return bool()
    def setHidden(self, ahide):
        '''void QListWidgetItem.setHidden(bool ahide)'''
    def isSelected(self):
        '''bool QListWidgetItem.isSelected()'''
        return bool()
    def setSelected(self, aselect):
        '''void QListWidgetItem.setSelected(bool aselect)'''
    def setForeground(self, brush):
        '''void QListWidgetItem.setForeground(QBrush brush)'''
    def foreground(self):
        '''QBrush QListWidgetItem.foreground()'''
        return QBrush()
    def setBackground(self, brush):
        '''void QListWidgetItem.setBackground(QBrush brush)'''
    def background(self):
        '''QBrush QListWidgetItem.background()'''
        return QBrush()
    def setFont(self, afont):
        '''void QListWidgetItem.setFont(QFont afont)'''
    def setWhatsThis(self, awhatsThis):
        '''void QListWidgetItem.setWhatsThis(QString awhatsThis)'''
    def setToolTip(self, atoolTip):
        '''void QListWidgetItem.setToolTip(QString atoolTip)'''
    def setStatusTip(self, astatusTip):
        '''void QListWidgetItem.setStatusTip(QString astatusTip)'''
    def setIcon(self, aicon):
        '''void QListWidgetItem.setIcon(QIcon aicon)'''
    def setText(self, atext):
        '''void QListWidgetItem.setText(QString atext)'''
    def setFlags(self, aflags):
        '''void QListWidgetItem.setFlags(Qt.ItemFlags aflags)'''
    def type(self):
        '''int QListWidgetItem.type()'''
        return int()
    def write(self, out):
        '''void QListWidgetItem.write(QDataStream out)'''
    def read(self, in_):
        '''void QListWidgetItem.read(QDataStream in)'''
    def __lt__(self, other):
        '''bool QListWidgetItem.__lt__(QListWidgetItem other)'''
        return bool()
    def setData(self, role, value):
        '''void QListWidgetItem.setData(int role, QVariant value)'''
    def data(self, role):
        '''QVariant QListWidgetItem.data(int role)'''
        return QVariant()
    def setSizeHint(self, size):
        '''void QListWidgetItem.setSizeHint(QSize size)'''
    def sizeHint(self):
        '''QSize QListWidgetItem.sizeHint()'''
        return QSize()
    def setCheckState(self, state):
        '''void QListWidgetItem.setCheckState(Qt.CheckState state)'''
    def checkState(self):
        '''Qt.CheckState QListWidgetItem.checkState()'''
        return Qt.CheckState()
    def setTextColor(self, color):
        '''void QListWidgetItem.setTextColor(QColor color)'''
    def textColor(self):
        '''QColor QListWidgetItem.textColor()'''
        return QColor()
    def setBackgroundColor(self, color):
        '''void QListWidgetItem.setBackgroundColor(QColor color)'''
    def backgroundColor(self):
        '''QColor QListWidgetItem.backgroundColor()'''
        return QColor()
    def setTextAlignment(self, alignment):
        '''void QListWidgetItem.setTextAlignment(int alignment)'''
    def textAlignment(self):
        '''int QListWidgetItem.textAlignment()'''
        return int()
    def font(self):
        '''QFont QListWidgetItem.font()'''
        return QFont()
    def whatsThis(self):
        '''QString QListWidgetItem.whatsThis()'''
        return QString()
    def toolTip(self):
        '''QString QListWidgetItem.toolTip()'''
        return QString()
    def statusTip(self):
        '''QString QListWidgetItem.statusTip()'''
        return QString()
    def icon(self):
        '''QIcon QListWidgetItem.icon()'''
        return QIcon()
    def text(self):
        '''QString QListWidgetItem.text()'''
        return QString()
    def flags(self):
        '''Qt.ItemFlags QListWidgetItem.flags()'''
        return Qt.ItemFlags()
    def listWidget(self):
        '''QListWidget QListWidgetItem.listWidget()'''
        return QListWidget()
    def clone(self):
        '''QListWidgetItem QListWidgetItem.clone()'''
        return QListWidgetItem()


class QListWidget(QListView):
    """"""
    def __init__(self, parent = None):
        '''void QListWidget.__init__(QWidget parent = None)'''
    def removeItemWidget(self, aItem):
        '''void QListWidget.removeItemWidget(QListWidgetItem aItem)'''
    def dropEvent(self, event):
        '''void QListWidget.dropEvent(QDropEvent event)'''
    def isSortingEnabled(self):
        '''bool QListWidget.isSortingEnabled()'''
        return bool()
    def setSortingEnabled(self, enable):
        '''void QListWidget.setSortingEnabled(bool enable)'''
    def event(self, e):
        '''bool QListWidget.event(QEvent e)'''
        return bool()
    def itemFromIndex(self, index):
        '''QListWidgetItem QListWidget.itemFromIndex(QModelIndex index)'''
        return QListWidgetItem()
    def indexFromItem(self, item):
        '''QModelIndex QListWidget.indexFromItem(QListWidgetItem item)'''
        return QModelIndex()
    def items(self, data):
        '''list-of-QListWidgetItem QListWidget.items(QMimeData data)'''
        return [QListWidgetItem()]
    def supportedDropActions(self):
        '''Qt.DropActions QListWidget.supportedDropActions()'''
        return Qt.DropActions()
    def dropMimeData(self, index, data, action):
        '''bool QListWidget.dropMimeData(int index, QMimeData data, Qt.DropAction action)'''
        return bool()
    def mimeData(self, items):
        '''QMimeData QListWidget.mimeData(list-of-QListWidgetItem items)'''
        return QMimeData()
    def mimeTypes(self):
        '''QStringList QListWidget.mimeTypes()'''
        return QStringList()
    itemSelectionChanged = pyqtSignal() # void itemSelectionChanged() - signal
    currentRowChanged = pyqtSignal() # void currentRowChanged(int) - signal
    currentTextChanged = pyqtSignal() # void currentTextChanged(const QStringamp;) - signal
    currentItemChanged = pyqtSignal() # void currentItemChanged(QListWidgetItem *,QListWidgetItem *) - signal
    itemChanged = pyqtSignal() # void itemChanged(QListWidgetItem *) - signal
    itemEntered = pyqtSignal() # void itemEntered(QListWidgetItem *) - signal
    itemActivated = pyqtSignal() # void itemActivated(QListWidgetItem *) - signal
    itemDoubleClicked = pyqtSignal() # void itemDoubleClicked(QListWidgetItem *) - signal
    itemClicked = pyqtSignal() # void itemClicked(QListWidgetItem *) - signal
    itemPressed = pyqtSignal() # void itemPressed(QListWidgetItem *) - signal
    def scrollToItem(self, item, hint = None):
        '''void QListWidget.scrollToItem(QListWidgetItem item, QAbstractItemView.ScrollHint hint = QAbstractItemView.EnsureVisible)'''
    def clear(self):
        '''void QListWidget.clear()'''
    def setItemHidden(self, item, hide):
        '''void QListWidget.setItemHidden(QListWidgetItem item, bool hide)'''
    def isItemHidden(self, item):
        '''bool QListWidget.isItemHidden(QListWidgetItem item)'''
        return bool()
    def findItems(self, text, flags):
        '''list-of-QListWidgetItem QListWidget.findItems(QString text, Qt.MatchFlags flags)'''
        return [QListWidgetItem()]
    def selectedItems(self):
        '''list-of-QListWidgetItem QListWidget.selectedItems()'''
        return [QListWidgetItem()]
    def setItemSelected(self, item, select):
        '''void QListWidget.setItemSelected(QListWidgetItem item, bool select)'''
    def isItemSelected(self, item):
        '''bool QListWidget.isItemSelected(QListWidgetItem item)'''
        return bool()
    def closePersistentEditor(self, item):
        '''void QListWidget.closePersistentEditor(QListWidgetItem item)'''
    def openPersistentEditor(self, item):
        '''void QListWidget.openPersistentEditor(QListWidgetItem item)'''
    def editItem(self, item):
        '''void QListWidget.editItem(QListWidgetItem item)'''
    def sortItems(self, order = None):
        '''void QListWidget.sortItems(Qt.SortOrder order = Qt.AscendingOrder)'''
    def visualItemRect(self, item):
        '''QRect QListWidget.visualItemRect(QListWidgetItem item)'''
        return QRect()
    def setItemWidget(self, item, widget):
        '''void QListWidget.setItemWidget(QListWidgetItem item, QWidget widget)'''
    def itemWidget(self, item):
        '''QWidget QListWidget.itemWidget(QListWidgetItem item)'''
        return QWidget()
    def itemAt(self, p):
        '''QListWidgetItem QListWidget.itemAt(QPoint p)'''
        return QListWidgetItem()
    def itemAt(self, ax, ay):
        '''QListWidgetItem QListWidget.itemAt(int ax, int ay)'''
        return QListWidgetItem()
    def setCurrentRow(self, row):
        '''void QListWidget.setCurrentRow(int row)'''
    def setCurrentRow(self, row, command):
        '''void QListWidget.setCurrentRow(int row, QItemSelectionModel.SelectionFlags command)'''
    def currentRow(self):
        '''int QListWidget.currentRow()'''
        return int()
    def setCurrentItem(self, item):
        '''void QListWidget.setCurrentItem(QListWidgetItem item)'''
    def setCurrentItem(self, item, command):
        '''void QListWidget.setCurrentItem(QListWidgetItem item, QItemSelectionModel.SelectionFlags command)'''
    def currentItem(self):
        '''QListWidgetItem QListWidget.currentItem()'''
        return QListWidgetItem()
    def __len__(self):
        '''None QListWidget.__len__()'''
        return None()
    def count(self):
        '''int QListWidget.count()'''
        return int()
    def takeItem(self, row):
        '''QListWidgetItem QListWidget.takeItem(int row)'''
        return QListWidgetItem()
    def addItems(self, labels):
        '''void QListWidget.addItems(QStringList labels)'''
    def addItem(self, aitem):
        '''void QListWidget.addItem(QListWidgetItem aitem)'''
    def addItem(self, label):
        '''void QListWidget.addItem(QString label)'''
    def insertItems(self, row, labels):
        '''void QListWidget.insertItems(int row, QStringList labels)'''
    def insertItem(self, row, item):
        '''void QListWidget.insertItem(int row, QListWidgetItem item)'''
    def insertItem(self, row, label):
        '''void QListWidget.insertItem(int row, QString label)'''
    def row(self, item):
        '''int QListWidget.row(QListWidgetItem item)'''
        return int()
    def item(self, row):
        '''QListWidgetItem QListWidget.item(int row)'''
        return QListWidgetItem()


class QMainWindow(QWidget):
    """"""
    # Enum QMainWindow.DockOption
    AnimatedDocks = 0
    AllowNestedDocks = 0
    AllowTabbedDocks = 0
    ForceTabbedDocks = 0
    VerticalTabs = 0

    def __init__(self, parent = None, flags = 0):
        '''void QMainWindow.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def tabifiedDockWidgets(self, dockwidget):
        '''list-of-QDockWidget QMainWindow.tabifiedDockWidgets(QDockWidget dockwidget)'''
        return [QDockWidget()]
    def setTabPosition(self, areas, tabPosition):
        '''void QMainWindow.setTabPosition(Qt.DockWidgetAreas areas, QTabWidget.TabPosition tabPosition)'''
    def tabPosition(self, area):
        '''QTabWidget.TabPosition QMainWindow.tabPosition(Qt.DockWidgetArea area)'''
        return QTabWidget.TabPosition()
    def setTabShape(self, tabShape):
        '''void QMainWindow.setTabShape(QTabWidget.TabShape tabShape)'''
    def tabShape(self):
        '''QTabWidget.TabShape QMainWindow.tabShape()'''
        return QTabWidget.TabShape()
    def setDocumentMode(self, enabled):
        '''void QMainWindow.setDocumentMode(bool enabled)'''
    def documentMode(self):
        '''bool QMainWindow.documentMode()'''
        return bool()
    def restoreDockWidget(self, dockwidget):
        '''bool QMainWindow.restoreDockWidget(QDockWidget dockwidget)'''
        return bool()
    def unifiedTitleAndToolBarOnMac(self):
        '''bool QMainWindow.unifiedTitleAndToolBarOnMac()'''
        return bool()
    def setUnifiedTitleAndToolBarOnMac(self, set):
        '''void QMainWindow.setUnifiedTitleAndToolBarOnMac(bool set)'''
    def toolBarBreak(self, toolbar):
        '''bool QMainWindow.toolBarBreak(QToolBar toolbar)'''
        return bool()
    def removeToolBarBreak(self, before):
        '''void QMainWindow.removeToolBarBreak(QToolBar before)'''
    def dockOptions(self):
        '''QMainWindow.DockOptions QMainWindow.dockOptions()'''
        return QMainWindow.DockOptions()
    def setDockOptions(self, options):
        '''void QMainWindow.setDockOptions(QMainWindow.DockOptions options)'''
    def tabifyDockWidget(self, first, second):
        '''void QMainWindow.tabifyDockWidget(QDockWidget first, QDockWidget second)'''
    def setMenuWidget(self, menubar):
        '''void QMainWindow.setMenuWidget(QWidget menubar)'''
    def menuWidget(self):
        '''QWidget QMainWindow.menuWidget()'''
        return QWidget()
    def isSeparator(self, pos):
        '''bool QMainWindow.isSeparator(QPoint pos)'''
        return bool()
    def isDockNestingEnabled(self):
        '''bool QMainWindow.isDockNestingEnabled()'''
        return bool()
    def isAnimated(self):
        '''bool QMainWindow.isAnimated()'''
        return bool()
    def event(self, event):
        '''bool QMainWindow.event(QEvent event)'''
        return bool()
    def contextMenuEvent(self, event):
        '''void QMainWindow.contextMenuEvent(QContextMenuEvent event)'''
    toolButtonStyleChanged = pyqtSignal() # void toolButtonStyleChanged(Qt::ToolButtonStyle) - signal
    iconSizeChanged = pyqtSignal() # void iconSizeChanged(const QSizeamp;) - signal
    def setDockNestingEnabled(self, enabled):
        '''void QMainWindow.setDockNestingEnabled(bool enabled)'''
    def setAnimated(self, enabled):
        '''void QMainWindow.setAnimated(bool enabled)'''
    def createPopupMenu(self):
        '''QMenu QMainWindow.createPopupMenu()'''
        return QMenu()
    def restoreState(self, state, version = 0):
        '''bool QMainWindow.restoreState(QByteArray state, int version = 0)'''
        return bool()
    def saveState(self, version = 0):
        '''QByteArray QMainWindow.saveState(int version = 0)'''
        return QByteArray()
    def dockWidgetArea(self, dockwidget):
        '''Qt.DockWidgetArea QMainWindow.dockWidgetArea(QDockWidget dockwidget)'''
        return Qt.DockWidgetArea()
    def removeDockWidget(self, dockwidget):
        '''void QMainWindow.removeDockWidget(QDockWidget dockwidget)'''
    def splitDockWidget(self, after, dockwidget, orientation):
        '''void QMainWindow.splitDockWidget(QDockWidget after, QDockWidget dockwidget, Qt.Orientation orientation)'''
    def addDockWidget(self, area, dockwidget):
        '''void QMainWindow.addDockWidget(Qt.DockWidgetArea area, QDockWidget dockwidget)'''
    def addDockWidget(self, area, dockwidget, orientation):
        '''void QMainWindow.addDockWidget(Qt.DockWidgetArea area, QDockWidget dockwidget, Qt.Orientation orientation)'''
    def toolBarArea(self, toolbar):
        '''Qt.ToolBarArea QMainWindow.toolBarArea(QToolBar toolbar)'''
        return Qt.ToolBarArea()
    def removeToolBar(self, toolbar):
        '''void QMainWindow.removeToolBar(QToolBar toolbar)'''
    def insertToolBar(self, before, toolbar):
        '''void QMainWindow.insertToolBar(QToolBar before, QToolBar toolbar)'''
    def addToolBar(self, area, toolbar):
        '''void QMainWindow.addToolBar(Qt.ToolBarArea area, QToolBar toolbar)'''
    def addToolBar(self, toolbar):
        '''void QMainWindow.addToolBar(QToolBar toolbar)'''
    def addToolBar(self, title):
        '''QToolBar QMainWindow.addToolBar(QString title)'''
        return QToolBar()
    def insertToolBarBreak(self, before):
        '''void QMainWindow.insertToolBarBreak(QToolBar before)'''
    def addToolBarBreak(self, area = None):
        '''void QMainWindow.addToolBarBreak(Qt.ToolBarArea area = Qt.TopToolBarArea)'''
    def corner(self, corner):
        '''Qt.DockWidgetArea QMainWindow.corner(Qt.Corner corner)'''
        return Qt.DockWidgetArea()
    def setCorner(self, corner, area):
        '''void QMainWindow.setCorner(Qt.Corner corner, Qt.DockWidgetArea area)'''
    def setCentralWidget(self, widget):
        '''void QMainWindow.setCentralWidget(QWidget widget)'''
    def centralWidget(self):
        '''QWidget QMainWindow.centralWidget()'''
        return QWidget()
    def setStatusBar(self, statusbar):
        '''void QMainWindow.setStatusBar(QStatusBar statusbar)'''
    def statusBar(self):
        '''QStatusBar QMainWindow.statusBar()'''
        return QStatusBar()
    def setMenuBar(self, menubar):
        '''void QMainWindow.setMenuBar(QMenuBar menubar)'''
    def menuBar(self):
        '''QMenuBar QMainWindow.menuBar()'''
        return QMenuBar()
    def setToolButtonStyle(self, toolButtonStyle):
        '''void QMainWindow.setToolButtonStyle(Qt.ToolButtonStyle toolButtonStyle)'''
    def toolButtonStyle(self):
        '''Qt.ToolButtonStyle QMainWindow.toolButtonStyle()'''
        return Qt.ToolButtonStyle()
    def setIconSize(self, iconSize):
        '''void QMainWindow.setIconSize(QSize iconSize)'''
    def iconSize(self):
        '''QSize QMainWindow.iconSize()'''
        return QSize()
    class DockOptions():
        """"""
        def __init__(self):
            '''QMainWindow.DockOptions QMainWindow.DockOptions.__init__()'''
            return QMainWindow.DockOptions()
        def __init__(self):
            '''int QMainWindow.DockOptions.__init__()'''
            return int()
        def __init__(self):
            '''void QMainWindow.DockOptions.__init__()'''
        def __bool__(self):
            '''int QMainWindow.DockOptions.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QMainWindow.DockOptions.__ne__(QMainWindow.DockOptions f)'''
            return bool()
        def __eq__(self, f):
            '''bool QMainWindow.DockOptions.__eq__(QMainWindow.DockOptions f)'''
            return bool()
        def __invert__(self):
            '''QMainWindow.DockOptions QMainWindow.DockOptions.__invert__()'''
            return QMainWindow.DockOptions()
        def __and__(self, mask):
            '''QMainWindow.DockOptions QMainWindow.DockOptions.__and__(int mask)'''
            return QMainWindow.DockOptions()
        def __xor__(self, f):
            '''QMainWindow.DockOptions QMainWindow.DockOptions.__xor__(QMainWindow.DockOptions f)'''
            return QMainWindow.DockOptions()
        def __xor__(self, f):
            '''QMainWindow.DockOptions QMainWindow.DockOptions.__xor__(int f)'''
            return QMainWindow.DockOptions()
        def __or__(self, f):
            '''QMainWindow.DockOptions QMainWindow.DockOptions.__or__(QMainWindow.DockOptions f)'''
            return QMainWindow.DockOptions()
        def __or__(self, f):
            '''QMainWindow.DockOptions QMainWindow.DockOptions.__or__(int f)'''
            return QMainWindow.DockOptions()
        def __int__(self):
            '''int QMainWindow.DockOptions.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QMainWindow.DockOptions QMainWindow.DockOptions.__ixor__(QMainWindow.DockOptions f)'''
            return QMainWindow.DockOptions()
        def __ior__(self, f):
            '''QMainWindow.DockOptions QMainWindow.DockOptions.__ior__(QMainWindow.DockOptions f)'''
            return QMainWindow.DockOptions()
        def __iand__(self, mask):
            '''QMainWindow.DockOptions QMainWindow.DockOptions.__iand__(int mask)'''
            return QMainWindow.DockOptions()


class QMatrix():
    """"""
    def __init__(self):
        '''void QMatrix.__init__()'''
    def __init__(self, m11, m12, m21, m22, dx, dy):
        '''void QMatrix.__init__(float m11, float m12, float m21, float m22, float dx, float dy)'''
    def __init__(self, matrix):
        '''void QMatrix.__init__(QMatrix matrix)'''
    def determinant(self):
        '''float QMatrix.determinant()'''
        return float()
    def isIdentity(self):
        '''bool QMatrix.isIdentity()'''
        return bool()
    def __mul__(self, o):
        '''QMatrix QMatrix.__mul__(QMatrix o)'''
        return QMatrix()
    def __imul__(self):
        '''QMatrix QMatrix.__imul__()'''
        return QMatrix()
    def __ne__(self):
        '''QMatrix QMatrix.__ne__()'''
        return QMatrix()
    def __eq__(self):
        '''QMatrix QMatrix.__eq__()'''
        return QMatrix()
    def inverted(self, invertible):
        '''QMatrix QMatrix.inverted(bool invertible)'''
        return QMatrix()
    def det(self):
        '''float QMatrix.det()'''
        return float()
    def isInvertible(self):
        '''bool QMatrix.isInvertible()'''
        return bool()
    def rotate(self, a):
        '''QMatrix QMatrix.rotate(float a)'''
        return QMatrix()
    def shear(self, sh, sv):
        '''QMatrix QMatrix.shear(float sh, float sv)'''
        return QMatrix()
    def scale(self, sx, sy):
        '''QMatrix QMatrix.scale(float sx, float sy)'''
        return QMatrix()
    def translate(self, dx, dy):
        '''QMatrix QMatrix.translate(float dx, float dy)'''
        return QMatrix()
    def reset(self):
        '''void QMatrix.reset()'''
    def mapToPolygon(self, r):
        '''QPolygon QMatrix.mapToPolygon(QRect r)'''
        return QPolygon()
    def mapRect(self):
        '''QRect QMatrix.mapRect()'''
        return QRect()
    def mapRect(self):
        '''QRectF QMatrix.mapRect()'''
        return QRectF()
    def map(self, x, y, tx, ty):
        '''void QMatrix.map(int x, int y, int tx, int ty)'''
    def map(self, x, y, tx, ty):
        '''void QMatrix.map(float x, float y, float tx, float ty)'''
    def map(self, p):
        '''QPoint QMatrix.map(QPoint p)'''
        return QPoint()
    def map(self, p):
        '''QPointF QMatrix.map(QPointF p)'''
        return QPointF()
    def map(self, l):
        '''QLine QMatrix.map(QLine l)'''
        return QLine()
    def map(self, l):
        '''QLineF QMatrix.map(QLineF l)'''
        return QLineF()
    def map(self, a):
        '''QPolygonF QMatrix.map(QPolygonF a)'''
        return QPolygonF()
    def map(self, a):
        '''QPolygon QMatrix.map(QPolygon a)'''
        return QPolygon()
    def map(self, r):
        '''QRegion QMatrix.map(QRegion r)'''
        return QRegion()
    def map(self, p):
        '''QPainterPath QMatrix.map(QPainterPath p)'''
        return QPainterPath()
    def dy(self):
        '''float QMatrix.dy()'''
        return float()
    def dx(self):
        '''float QMatrix.dx()'''
        return float()
    def m22(self):
        '''float QMatrix.m22()'''
        return float()
    def m21(self):
        '''float QMatrix.m21()'''
        return float()
    def m12(self):
        '''float QMatrix.m12()'''
        return float()
    def m11(self):
        '''float QMatrix.m11()'''
        return float()
    def setMatrix(self, m11, m12, m21, m22, dx, dy):
        '''void QMatrix.setMatrix(float m11, float m12, float m21, float m22, float dx, float dy)'''


class QMatrix4x4():
    """"""
    def __init__(self):
        '''void QMatrix4x4.__init__()'''
    def __init__(self, values):
        '''void QMatrix4x4.__init__(sequence-of-float values)'''
    def __init__(self, m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44):
        '''void QMatrix4x4.__init__(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44)'''
    def __init__(self, transform):
        '''void QMatrix4x4.__init__(QTransform transform)'''
    def __init__(self, matrix):
        '''void QMatrix4x4.__init__(QMatrix matrix)'''
    def __init__(self):
        '''QMatrix4x4 QMatrix4x4.__init__()'''
        return QMatrix4x4()
    def __mul__(self, m2):
        '''QMatrix4x4 QMatrix4x4.__mul__(QMatrix4x4 m2)'''
        return QMatrix4x4()
    def __mul__(self, vector):
        '''QVector3D QMatrix4x4.__mul__(QVector3D vector)'''
        return QVector3D()
    def __mul__(self, vector):
        '''QVector4D QMatrix4x4.__mul__(QVector4D vector)'''
        return QVector4D()
    def __mul__(self, point):
        '''QPoint QMatrix4x4.__mul__(QPoint point)'''
        return QPoint()
    def __mul__(self, point):
        '''QPointF QMatrix4x4.__mul__(QPointF point)'''
        return QPointF()
    def __mul__(self, matrix):
        '''QMatrix4x4 QMatrix4x4.__mul__(QMatrix4x4 matrix)'''
        return QMatrix4x4()
    def __mul__(self, factor):
        '''QMatrix4x4 QMatrix4x4.__mul__(float factor)'''
        return QMatrix4x4()
    def __div__(self, divisor):
        '''QMatrix4x4 QMatrix4x4.__div__(float divisor)'''
        return QMatrix4x4()
    def __add__(self, m2):
        '''QMatrix4x4 QMatrix4x4.__add__(QMatrix4x4 m2)'''
        return QMatrix4x4()
    def __sub__(self, m2):
        '''QMatrix4x4 QMatrix4x4.__sub__(QMatrix4x4 m2)'''
        return QMatrix4x4()
    def __neg__(self):
        '''QMatrix4x4 QMatrix4x4.__neg__()'''
        return QMatrix4x4()
    def mapVector(self, vector):
        '''QVector3D QMatrix4x4.mapVector(QVector3D vector)'''
        return QVector3D()
    def map(self, point):
        '''QPoint QMatrix4x4.map(QPoint point)'''
        return QPoint()
    def map(self, point):
        '''QPointF QMatrix4x4.map(QPointF point)'''
        return QPointF()
    def map(self, point):
        '''QVector3D QMatrix4x4.map(QVector3D point)'''
        return QVector3D()
    def map(self, point):
        '''QVector4D QMatrix4x4.map(QVector4D point)'''
        return QVector4D()
    def __ne__(self, other):
        '''bool QMatrix4x4.__ne__(QMatrix4x4 other)'''
        return bool()
    def __eq__(self, other):
        '''bool QMatrix4x4.__eq__(QMatrix4x4 other)'''
        return bool()
    def __idiv__(self, divisor):
        '''QMatrix4x4 QMatrix4x4.__idiv__(float divisor)'''
        return QMatrix4x4()
    def __imul__(self, other):
        '''QMatrix4x4 QMatrix4x4.__imul__(QMatrix4x4 other)'''
        return QMatrix4x4()
    def __imul__(self, factor):
        '''QMatrix4x4 QMatrix4x4.__imul__(float factor)'''
        return QMatrix4x4()
    def __isub__(self, other):
        '''QMatrix4x4 QMatrix4x4.__isub__(QMatrix4x4 other)'''
        return QMatrix4x4()
    def __iadd__(self, other):
        '''QMatrix4x4 QMatrix4x4.__iadd__(QMatrix4x4 other)'''
        return QMatrix4x4()
    def fill(self, value):
        '''void QMatrix4x4.fill(float value)'''
    def setToIdentity(self):
        '''void QMatrix4x4.setToIdentity()'''
    def isIdentity(self):
        '''bool QMatrix4x4.isIdentity()'''
        return bool()
    def setRow(self, index, value):
        '''void QMatrix4x4.setRow(int index, QVector4D value)'''
    def row(self, index):
        '''QVector4D QMatrix4x4.row(int index)'''
        return QVector4D()
    def setColumn(self, index, value):
        '''void QMatrix4x4.setColumn(int index, QVector4D value)'''
    def column(self, index):
        '''QVector4D QMatrix4x4.column(int index)'''
        return QVector4D()
    def __setitem__(self):
        '''float QMatrix4x4.__setitem__()'''
        return float()
    def __getitem__(self):
        '''object QMatrix4x4.__getitem__()'''
        return object()
    def optimize(self):
        '''void QMatrix4x4.optimize()'''
    def data(self):
        '''list-of-float QMatrix4x4.data()'''
        return [float()]
    def mapRect(self, rect):
        '''QRect QMatrix4x4.mapRect(QRect rect)'''
        return QRect()
    def mapRect(self, rect):
        '''QRectF QMatrix4x4.mapRect(QRectF rect)'''
        return QRectF()
    def toTransform(self):
        '''QTransform QMatrix4x4.toTransform()'''
        return QTransform()
    def toTransform(self, distanceToPlane):
        '''QTransform QMatrix4x4.toTransform(float distanceToPlane)'''
        return QTransform()
    def toAffine(self):
        '''QMatrix QMatrix4x4.toAffine()'''
        return QMatrix()
    def copyDataTo(self):
        '''list-of-float QMatrix4x4.copyDataTo()'''
        return [float()]
    def flipCoordinates(self):
        '''void QMatrix4x4.flipCoordinates()'''
    def lookAt(self, eye, center, up):
        '''void QMatrix4x4.lookAt(QVector3D eye, QVector3D center, QVector3D up)'''
    def perspective(self, angle, aspect, nearPlane, farPlane):
        '''void QMatrix4x4.perspective(float angle, float aspect, float nearPlane, float farPlane)'''
    def frustum(self, left, right, bottom, top, nearPlane, farPlane):
        '''void QMatrix4x4.frustum(float left, float right, float bottom, float top, float nearPlane, float farPlane)'''
    def ortho(self, rect):
        '''void QMatrix4x4.ortho(QRect rect)'''
    def ortho(self, rect):
        '''void QMatrix4x4.ortho(QRectF rect)'''
    def ortho(self, left, right, bottom, top, nearPlane, farPlane):
        '''void QMatrix4x4.ortho(float left, float right, float bottom, float top, float nearPlane, float farPlane)'''
    def rotate(self, angle, vector):
        '''void QMatrix4x4.rotate(float angle, QVector3D vector)'''
    def rotate(self, angle, x, y, z = 0):
        '''void QMatrix4x4.rotate(float angle, float x, float y, float z = 0)'''
    def rotate(self, quaternion):
        '''void QMatrix4x4.rotate(QQuaternion quaternion)'''
    def translate(self, vector):
        '''void QMatrix4x4.translate(QVector3D vector)'''
    def translate(self, x, y):
        '''void QMatrix4x4.translate(float x, float y)'''
    def translate(self, x, y, z):
        '''void QMatrix4x4.translate(float x, float y, float z)'''
    def scale(self, vector):
        '''void QMatrix4x4.scale(QVector3D vector)'''
    def scale(self, x, y):
        '''void QMatrix4x4.scale(float x, float y)'''
    def scale(self, x, y, z):
        '''void QMatrix4x4.scale(float x, float y, float z)'''
    def scale(self, factor):
        '''void QMatrix4x4.scale(float factor)'''
    def normalMatrix(self):
        '''QMatrix3x3 QMatrix4x4.normalMatrix()'''
        return QMatrix3x3()
    def transposed(self):
        '''QMatrix4x4 QMatrix4x4.transposed()'''
        return QMatrix4x4()
    def inverted(self, invertible):
        '''QMatrix4x4 QMatrix4x4.inverted(bool invertible)'''
        return QMatrix4x4()
    def determinant(self):
        '''float QMatrix4x4.determinant()'''
        return float()
    def __repr__(self):
        '''str QMatrix4x4.__repr__()'''
        return str()


class QMdiArea(QAbstractScrollArea):
    """"""
    # Enum QMdiArea.WindowOrder
    CreationOrder = 0
    StackingOrder = 0
    ActivationHistoryOrder = 0

    # Enum QMdiArea.ViewMode
    SubWindowView = 0
    TabbedView = 0

    # Enum QMdiArea.AreaOption
    DontMaximizeSubWindowOnActivation = 0

    def __init__(self, parent = None):
        '''void QMdiArea.__init__(QWidget parent = None)'''
    def tabsMovable(self):
        '''bool QMdiArea.tabsMovable()'''
        return bool()
    def setTabsMovable(self, movable):
        '''void QMdiArea.setTabsMovable(bool movable)'''
    def tabsClosable(self):
        '''bool QMdiArea.tabsClosable()'''
        return bool()
    def setTabsClosable(self, closable):
        '''void QMdiArea.setTabsClosable(bool closable)'''
    def setDocumentMode(self, enabled):
        '''void QMdiArea.setDocumentMode(bool enabled)'''
    def documentMode(self):
        '''bool QMdiArea.documentMode()'''
        return bool()
    def tabPosition(self):
        '''QTabWidget.TabPosition QMdiArea.tabPosition()'''
        return QTabWidget.TabPosition()
    def setTabPosition(self, position):
        '''void QMdiArea.setTabPosition(QTabWidget.TabPosition position)'''
    def tabShape(self):
        '''QTabWidget.TabShape QMdiArea.tabShape()'''
        return QTabWidget.TabShape()
    def setTabShape(self, shape):
        '''void QMdiArea.setTabShape(QTabWidget.TabShape shape)'''
    def viewMode(self):
        '''QMdiArea.ViewMode QMdiArea.viewMode()'''
        return QMdiArea.ViewMode()
    def setViewMode(self, mode):
        '''void QMdiArea.setViewMode(QMdiArea.ViewMode mode)'''
    def setActivationOrder(self, order):
        '''void QMdiArea.setActivationOrder(QMdiArea.WindowOrder order)'''
    def activationOrder(self):
        '''QMdiArea.WindowOrder QMdiArea.activationOrder()'''
        return QMdiArea.WindowOrder()
    def scrollContentsBy(self, dx, dy):
        '''void QMdiArea.scrollContentsBy(int dx, int dy)'''
    def viewportEvent(self, event):
        '''bool QMdiArea.viewportEvent(QEvent event)'''
        return bool()
    def showEvent(self, showEvent):
        '''void QMdiArea.showEvent(QShowEvent showEvent)'''
    def timerEvent(self, timerEvent):
        '''void QMdiArea.timerEvent(QTimerEvent timerEvent)'''
    def resizeEvent(self, resizeEvent):
        '''void QMdiArea.resizeEvent(QResizeEvent resizeEvent)'''
    def childEvent(self, childEvent):
        '''void QMdiArea.childEvent(QChildEvent childEvent)'''
    def paintEvent(self, paintEvent):
        '''void QMdiArea.paintEvent(QPaintEvent paintEvent)'''
    def eventFilter(self, object, event):
        '''bool QMdiArea.eventFilter(QObject object, QEvent event)'''
        return bool()
    def event(self, event):
        '''bool QMdiArea.event(QEvent event)'''
        return bool()
    def setupViewport(self, viewport):
        '''void QMdiArea.setupViewport(QWidget viewport)'''
    def activatePreviousSubWindow(self):
        '''void QMdiArea.activatePreviousSubWindow()'''
    def activateNextSubWindow(self):
        '''void QMdiArea.activateNextSubWindow()'''
    def closeAllSubWindows(self):
        '''void QMdiArea.closeAllSubWindows()'''
    def closeActiveSubWindow(self):
        '''void QMdiArea.closeActiveSubWindow()'''
    def cascadeSubWindows(self):
        '''void QMdiArea.cascadeSubWindows()'''
    def tileSubWindows(self):
        '''void QMdiArea.tileSubWindows()'''
    def setActiveSubWindow(self, window):
        '''void QMdiArea.setActiveSubWindow(QMdiSubWindow window)'''
    subWindowActivated = pyqtSignal() # void subWindowActivated(QMdiSubWindow *) - signal
    def testOption(self, opton):
        '''bool QMdiArea.testOption(QMdiArea.AreaOption opton)'''
        return bool()
    def setOption(self, option, on = True):
        '''void QMdiArea.setOption(QMdiArea.AreaOption option, bool on = True)'''
    def setBackground(self, background):
        '''void QMdiArea.setBackground(QBrush background)'''
    def background(self):
        '''QBrush QMdiArea.background()'''
        return QBrush()
    def removeSubWindow(self, widget):
        '''void QMdiArea.removeSubWindow(QWidget widget)'''
    def currentSubWindow(self):
        '''QMdiSubWindow QMdiArea.currentSubWindow()'''
        return QMdiSubWindow()
    def subWindowList(self, order = None):
        '''list-of-QMdiSubWindow QMdiArea.subWindowList(QMdiArea.WindowOrder order = QMdiArea.CreationOrder)'''
        return [QMdiSubWindow()]
    def addSubWindow(self, widget, flags = 0):
        '''QMdiSubWindow QMdiArea.addSubWindow(QWidget widget, Qt.WindowFlags flags = 0)'''
        return QMdiSubWindow()
    def activeSubWindow(self):
        '''QMdiSubWindow QMdiArea.activeSubWindow()'''
        return QMdiSubWindow()
    def minimumSizeHint(self):
        '''QSize QMdiArea.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QMdiArea.sizeHint()'''
        return QSize()
    class AreaOptions():
        """"""
        def __init__(self):
            '''QMdiArea.AreaOptions QMdiArea.AreaOptions.__init__()'''
            return QMdiArea.AreaOptions()
        def __init__(self):
            '''int QMdiArea.AreaOptions.__init__()'''
            return int()
        def __init__(self):
            '''void QMdiArea.AreaOptions.__init__()'''
        def __bool__(self):
            '''int QMdiArea.AreaOptions.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QMdiArea.AreaOptions.__ne__(QMdiArea.AreaOptions f)'''
            return bool()
        def __eq__(self, f):
            '''bool QMdiArea.AreaOptions.__eq__(QMdiArea.AreaOptions f)'''
            return bool()
        def __invert__(self):
            '''QMdiArea.AreaOptions QMdiArea.AreaOptions.__invert__()'''
            return QMdiArea.AreaOptions()
        def __and__(self, mask):
            '''QMdiArea.AreaOptions QMdiArea.AreaOptions.__and__(int mask)'''
            return QMdiArea.AreaOptions()
        def __xor__(self, f):
            '''QMdiArea.AreaOptions QMdiArea.AreaOptions.__xor__(QMdiArea.AreaOptions f)'''
            return QMdiArea.AreaOptions()
        def __xor__(self, f):
            '''QMdiArea.AreaOptions QMdiArea.AreaOptions.__xor__(int f)'''
            return QMdiArea.AreaOptions()
        def __or__(self, f):
            '''QMdiArea.AreaOptions QMdiArea.AreaOptions.__or__(QMdiArea.AreaOptions f)'''
            return QMdiArea.AreaOptions()
        def __or__(self, f):
            '''QMdiArea.AreaOptions QMdiArea.AreaOptions.__or__(int f)'''
            return QMdiArea.AreaOptions()
        def __int__(self):
            '''int QMdiArea.AreaOptions.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QMdiArea.AreaOptions QMdiArea.AreaOptions.__ixor__(QMdiArea.AreaOptions f)'''
            return QMdiArea.AreaOptions()
        def __ior__(self, f):
            '''QMdiArea.AreaOptions QMdiArea.AreaOptions.__ior__(QMdiArea.AreaOptions f)'''
            return QMdiArea.AreaOptions()
        def __iand__(self, mask):
            '''QMdiArea.AreaOptions QMdiArea.AreaOptions.__iand__(int mask)'''
            return QMdiArea.AreaOptions()


class QMdiSubWindow(QWidget):
    """"""
    # Enum QMdiSubWindow.SubWindowOption
    RubberBandResize = 0
    RubberBandMove = 0

    def __init__(self, parent = None, flags = 0):
        '''void QMdiSubWindow.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def childEvent(self, childEvent):
        '''void QMdiSubWindow.childEvent(QChildEvent childEvent)'''
    def focusOutEvent(self, focusOutEvent):
        '''void QMdiSubWindow.focusOutEvent(QFocusEvent focusOutEvent)'''
    def focusInEvent(self, focusInEvent):
        '''void QMdiSubWindow.focusInEvent(QFocusEvent focusInEvent)'''
    def contextMenuEvent(self, contextMenuEvent):
        '''void QMdiSubWindow.contextMenuEvent(QContextMenuEvent contextMenuEvent)'''
    def keyPressEvent(self, keyEvent):
        '''void QMdiSubWindow.keyPressEvent(QKeyEvent keyEvent)'''
    def mouseMoveEvent(self, mouseEvent):
        '''void QMdiSubWindow.mouseMoveEvent(QMouseEvent mouseEvent)'''
    def mouseReleaseEvent(self, mouseEvent):
        '''void QMdiSubWindow.mouseReleaseEvent(QMouseEvent mouseEvent)'''
    def mouseDoubleClickEvent(self, mouseEvent):
        '''void QMdiSubWindow.mouseDoubleClickEvent(QMouseEvent mouseEvent)'''
    def mousePressEvent(self, mouseEvent):
        '''void QMdiSubWindow.mousePressEvent(QMouseEvent mouseEvent)'''
    def paintEvent(self, paintEvent):
        '''void QMdiSubWindow.paintEvent(QPaintEvent paintEvent)'''
    def moveEvent(self, moveEvent):
        '''void QMdiSubWindow.moveEvent(QMoveEvent moveEvent)'''
    def timerEvent(self, timerEvent):
        '''void QMdiSubWindow.timerEvent(QTimerEvent timerEvent)'''
    def resizeEvent(self, resizeEvent):
        '''void QMdiSubWindow.resizeEvent(QResizeEvent resizeEvent)'''
    def leaveEvent(self, leaveEvent):
        '''void QMdiSubWindow.leaveEvent(QEvent leaveEvent)'''
    def closeEvent(self, closeEvent):
        '''void QMdiSubWindow.closeEvent(QCloseEvent closeEvent)'''
    def changeEvent(self, changeEvent):
        '''void QMdiSubWindow.changeEvent(QEvent changeEvent)'''
    def hideEvent(self, hideEvent):
        '''void QMdiSubWindow.hideEvent(QHideEvent hideEvent)'''
    def showEvent(self, showEvent):
        '''void QMdiSubWindow.showEvent(QShowEvent showEvent)'''
    def event(self, event):
        '''bool QMdiSubWindow.event(QEvent event)'''
        return bool()
    def eventFilter(self, object, event):
        '''bool QMdiSubWindow.eventFilter(QObject object, QEvent event)'''
        return bool()
    def showShaded(self):
        '''void QMdiSubWindow.showShaded()'''
    def showSystemMenu(self):
        '''void QMdiSubWindow.showSystemMenu()'''
    aboutToActivate = pyqtSignal() # void aboutToActivate() - signal
    windowStateChanged = pyqtSignal() # void windowStateChanged(Qt::WindowStates,Qt::WindowStates) - signal
    def mdiArea(self):
        '''QMdiArea QMdiSubWindow.mdiArea()'''
        return QMdiArea()
    def systemMenu(self):
        '''QMenu QMdiSubWindow.systemMenu()'''
        return QMenu()
    def setSystemMenu(self, systemMenu):
        '''void QMdiSubWindow.setSystemMenu(QMenu systemMenu)'''
    def keyboardPageStep(self):
        '''int QMdiSubWindow.keyboardPageStep()'''
        return int()
    def setKeyboardPageStep(self, step):
        '''void QMdiSubWindow.setKeyboardPageStep(int step)'''
    def keyboardSingleStep(self):
        '''int QMdiSubWindow.keyboardSingleStep()'''
        return int()
    def setKeyboardSingleStep(self, step):
        '''void QMdiSubWindow.setKeyboardSingleStep(int step)'''
    def testOption(self):
        '''QMdiSubWindow.SubWindowOption QMdiSubWindow.testOption()'''
        return QMdiSubWindow.SubWindowOption()
    def setOption(self, option, on = True):
        '''void QMdiSubWindow.setOption(QMdiSubWindow.SubWindowOption option, bool on = True)'''
    def isShaded(self):
        '''bool QMdiSubWindow.isShaded()'''
        return bool()
    def widget(self):
        '''QWidget QMdiSubWindow.widget()'''
        return QWidget()
    def setWidget(self, widget):
        '''void QMdiSubWindow.setWidget(QWidget widget)'''
    def minimumSizeHint(self):
        '''QSize QMdiSubWindow.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QMdiSubWindow.sizeHint()'''
        return QSize()
    class SubWindowOptions():
        """"""
        def __init__(self):
            '''QMdiSubWindow.SubWindowOptions QMdiSubWindow.SubWindowOptions.__init__()'''
            return QMdiSubWindow.SubWindowOptions()
        def __init__(self):
            '''int QMdiSubWindow.SubWindowOptions.__init__()'''
            return int()
        def __init__(self):
            '''void QMdiSubWindow.SubWindowOptions.__init__()'''
        def __bool__(self):
            '''int QMdiSubWindow.SubWindowOptions.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QMdiSubWindow.SubWindowOptions.__ne__(QMdiSubWindow.SubWindowOptions f)'''
            return bool()
        def __eq__(self, f):
            '''bool QMdiSubWindow.SubWindowOptions.__eq__(QMdiSubWindow.SubWindowOptions f)'''
            return bool()
        def __invert__(self):
            '''QMdiSubWindow.SubWindowOptions QMdiSubWindow.SubWindowOptions.__invert__()'''
            return QMdiSubWindow.SubWindowOptions()
        def __and__(self, mask):
            '''QMdiSubWindow.SubWindowOptions QMdiSubWindow.SubWindowOptions.__and__(int mask)'''
            return QMdiSubWindow.SubWindowOptions()
        def __xor__(self, f):
            '''QMdiSubWindow.SubWindowOptions QMdiSubWindow.SubWindowOptions.__xor__(QMdiSubWindow.SubWindowOptions f)'''
            return QMdiSubWindow.SubWindowOptions()
        def __xor__(self, f):
            '''QMdiSubWindow.SubWindowOptions QMdiSubWindow.SubWindowOptions.__xor__(int f)'''
            return QMdiSubWindow.SubWindowOptions()
        def __or__(self, f):
            '''QMdiSubWindow.SubWindowOptions QMdiSubWindow.SubWindowOptions.__or__(QMdiSubWindow.SubWindowOptions f)'''
            return QMdiSubWindow.SubWindowOptions()
        def __or__(self, f):
            '''QMdiSubWindow.SubWindowOptions QMdiSubWindow.SubWindowOptions.__or__(int f)'''
            return QMdiSubWindow.SubWindowOptions()
        def __int__(self):
            '''int QMdiSubWindow.SubWindowOptions.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QMdiSubWindow.SubWindowOptions QMdiSubWindow.SubWindowOptions.__ixor__(QMdiSubWindow.SubWindowOptions f)'''
            return QMdiSubWindow.SubWindowOptions()
        def __ior__(self, f):
            '''QMdiSubWindow.SubWindowOptions QMdiSubWindow.SubWindowOptions.__ior__(QMdiSubWindow.SubWindowOptions f)'''
            return QMdiSubWindow.SubWindowOptions()
        def __iand__(self, mask):
            '''QMdiSubWindow.SubWindowOptions QMdiSubWindow.SubWindowOptions.__iand__(int mask)'''
            return QMdiSubWindow.SubWindowOptions()


class QMenu(QWidget):
    """"""
    def __init__(self, parent = None):
        '''void QMenu.__init__(QWidget parent = None)'''
    def __init__(self, title, parent = None):
        '''void QMenu.__init__(QString title, QWidget parent = None)'''
    def setSeparatorsCollapsible(self, collapse):
        '''void QMenu.setSeparatorsCollapsible(bool collapse)'''
    def separatorsCollapsible(self):
        '''bool QMenu.separatorsCollapsible()'''
        return bool()
    def isEmpty(self):
        '''bool QMenu.isEmpty()'''
        return bool()
    def focusNextPrevChild(self, next):
        '''bool QMenu.focusNextPrevChild(bool next)'''
        return bool()
    def event(self):
        '''QEvent QMenu.event()'''
        return QEvent()
    def timerEvent(self):
        '''QTimerEvent QMenu.timerEvent()'''
        return QTimerEvent()
    def actionEvent(self):
        '''QActionEvent QMenu.actionEvent()'''
        return QActionEvent()
    def paintEvent(self):
        '''QPaintEvent QMenu.paintEvent()'''
        return QPaintEvent()
    def hideEvent(self):
        '''QHideEvent QMenu.hideEvent()'''
        return QHideEvent()
    def leaveEvent(self):
        '''QEvent QMenu.leaveEvent()'''
        return QEvent()
    def enterEvent(self):
        '''QEvent QMenu.enterEvent()'''
        return QEvent()
    def wheelEvent(self):
        '''QWheelEvent QMenu.wheelEvent()'''
        return QWheelEvent()
    def mouseMoveEvent(self):
        '''QMouseEvent QMenu.mouseMoveEvent()'''
        return QMouseEvent()
    def mousePressEvent(self):
        '''QMouseEvent QMenu.mousePressEvent()'''
        return QMouseEvent()
    def mouseReleaseEvent(self):
        '''QMouseEvent QMenu.mouseReleaseEvent()'''
        return QMouseEvent()
    def keyPressEvent(self):
        '''QKeyEvent QMenu.keyPressEvent()'''
        return QKeyEvent()
    def changeEvent(self):
        '''QEvent QMenu.changeEvent()'''
        return QEvent()
    def initStyleOption(self, option, action):
        '''void QMenu.initStyleOption(QStyleOptionMenuItem option, QAction action)'''
    def columnCount(self):
        '''int QMenu.columnCount()'''
        return int()
    triggered = pyqtSignal() # void triggered(QAction *) - signal
    hovered = pyqtSignal() # void hovered(QAction *) - signal
    aboutToShow = pyqtSignal() # void aboutToShow() - signal
    aboutToHide = pyqtSignal() # void aboutToHide() - signal
    def setNoReplayFor(self, widget):
        '''void QMenu.setNoReplayFor(QWidget widget)'''
    def setIcon(self, icon):
        '''void QMenu.setIcon(QIcon icon)'''
    def icon(self):
        '''QIcon QMenu.icon()'''
        return QIcon()
    def setTitle(self, title):
        '''void QMenu.setTitle(QString title)'''
    def title(self):
        '''QString QMenu.title()'''
        return QString()
    def menuAction(self):
        '''QAction QMenu.menuAction()'''
        return QAction()
    def actionAt(self):
        '''QPoint QMenu.actionAt()'''
        return QPoint()
    def actionGeometry(self):
        '''QAction QMenu.actionGeometry()'''
        return QAction()
    def sizeHint(self):
        '''QSize QMenu.sizeHint()'''
        return QSize()
    def exec_(self):
        '''QAction QMenu.exec_()'''
        return QAction()
    def exec_(self, p, action = None):
        '''QAction QMenu.exec_(QPoint p, QAction action = None)'''
        return QAction()
    def exec_(self, actions, pos, action = None):
        '''static QAction QMenu.exec_(list-of-QAction actions, QPoint pos, QAction action = None)'''
        return QAction()
    def exec_(self, actions, pos, at, parent):
        '''static QAction QMenu.exec_(list-of-QAction actions, QPoint pos, QAction at, QWidget parent)'''
        return QAction()
    def popup(self, p, action = None):
        '''void QMenu.popup(QPoint p, QAction action = None)'''
    def activeAction(self):
        '''QAction QMenu.activeAction()'''
        return QAction()
    def setActiveAction(self, act):
        '''void QMenu.setActiveAction(QAction act)'''
    def defaultAction(self):
        '''QAction QMenu.defaultAction()'''
        return QAction()
    def setDefaultAction(self):
        '''QAction QMenu.setDefaultAction()'''
        return QAction()
    def hideTearOffMenu(self):
        '''void QMenu.hideTearOffMenu()'''
    def isTearOffMenuVisible(self):
        '''bool QMenu.isTearOffMenuVisible()'''
        return bool()
    def isTearOffEnabled(self):
        '''bool QMenu.isTearOffEnabled()'''
        return bool()
    def setTearOffEnabled(self):
        '''bool QMenu.setTearOffEnabled()'''
        return bool()
    def clear(self):
        '''void QMenu.clear()'''
    def insertSeparator(self, before):
        '''QAction QMenu.insertSeparator(QAction before)'''
        return QAction()
    def insertMenu(self, before, menu):
        '''QAction QMenu.insertMenu(QAction before, QMenu menu)'''
        return QAction()
    def addSeparator(self):
        '''QAction QMenu.addSeparator()'''
        return QAction()
    def addMenu(self, menu):
        '''QAction QMenu.addMenu(QMenu menu)'''
        return QAction()
    def addMenu(self, title):
        '''QMenu QMenu.addMenu(QString title)'''
        return QMenu()
    def addMenu(self, icon, title):
        '''QMenu QMenu.addMenu(QIcon icon, QString title)'''
        return QMenu()
    def addAction(self, action):
        '''void QMenu.addAction(QAction action)'''
    def addAction(self, text):
        '''QAction QMenu.addAction(QString text)'''
        return QAction()
    def addAction(self, icon, text):
        '''QAction QMenu.addAction(QIcon icon, QString text)'''
        return QAction()
    def addAction(self, text, receiver, member, shortcut = 0):
        '''QAction QMenu.addAction(QString text, QObject receiver, SLOT() member, QKeySequence shortcut = 0)'''
        return QAction()
    def addAction(self, text, receiver, shortcut = 0):
        '''QAction QMenu.addAction(QString text, callable receiver, QKeySequence shortcut = 0)'''
        return QAction()
    def addAction(self, icon, text, receiver, member, shortcut = 0):
        '''QAction QMenu.addAction(QIcon icon, QString text, QObject receiver, SLOT() member, QKeySequence shortcut = 0)'''
        return QAction()
    def addAction(self, icon, text, receiver, shortcut = 0):
        '''QAction QMenu.addAction(QIcon icon, QString text, callable receiver, QKeySequence shortcut = 0)'''
        return QAction()


class QMenuBar(QWidget):
    """"""
    def __init__(self, parent = None):
        '''void QMenuBar.__init__(QWidget parent = None)'''
    def setNativeMenuBar(self, nativeMenuBar):
        '''void QMenuBar.setNativeMenuBar(bool nativeMenuBar)'''
    def isNativeMenuBar(self):
        '''bool QMenuBar.isNativeMenuBar()'''
        return bool()
    def timerEvent(self):
        '''QTimerEvent QMenuBar.timerEvent()'''
        return QTimerEvent()
    def event(self):
        '''QEvent QMenuBar.event()'''
        return QEvent()
    def eventFilter(self):
        '''QEvent QMenuBar.eventFilter()'''
        return QEvent()
    def focusInEvent(self):
        '''QFocusEvent QMenuBar.focusInEvent()'''
        return QFocusEvent()
    def focusOutEvent(self):
        '''QFocusEvent QMenuBar.focusOutEvent()'''
        return QFocusEvent()
    def actionEvent(self):
        '''QActionEvent QMenuBar.actionEvent()'''
        return QActionEvent()
    def resizeEvent(self):
        '''QResizeEvent QMenuBar.resizeEvent()'''
        return QResizeEvent()
    def paintEvent(self):
        '''QPaintEvent QMenuBar.paintEvent()'''
        return QPaintEvent()
    def leaveEvent(self):
        '''QEvent QMenuBar.leaveEvent()'''
        return QEvent()
    def mouseMoveEvent(self):
        '''QMouseEvent QMenuBar.mouseMoveEvent()'''
        return QMouseEvent()
    def mousePressEvent(self):
        '''QMouseEvent QMenuBar.mousePressEvent()'''
        return QMouseEvent()
    def mouseReleaseEvent(self):
        '''QMouseEvent QMenuBar.mouseReleaseEvent()'''
        return QMouseEvent()
    def keyPressEvent(self):
        '''QKeyEvent QMenuBar.keyPressEvent()'''
        return QKeyEvent()
    def changeEvent(self):
        '''QEvent QMenuBar.changeEvent()'''
        return QEvent()
    def initStyleOption(self, option, action):
        '''void QMenuBar.initStyleOption(QStyleOptionMenuItem option, QAction action)'''
    hovered = pyqtSignal() # void hovered(QAction *) - signal
    triggered = pyqtSignal() # void triggered(QAction *) - signal
    def setVisible(self, visible):
        '''void QMenuBar.setVisible(bool visible)'''
    def cornerWidget(self, corner = None):
        '''QWidget QMenuBar.cornerWidget(Qt.Corner corner = Qt.TopRightCorner)'''
        return QWidget()
    def setCornerWidget(self, widget, corner = None):
        '''void QMenuBar.setCornerWidget(QWidget widget, Qt.Corner corner = Qt.TopRightCorner)'''
    def actionAt(self):
        '''QPoint QMenuBar.actionAt()'''
        return QPoint()
    def actionGeometry(self):
        '''QAction QMenuBar.actionGeometry()'''
        return QAction()
    def heightForWidth(self):
        '''int QMenuBar.heightForWidth()'''
        return int()
    def minimumSizeHint(self):
        '''QSize QMenuBar.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QMenuBar.sizeHint()'''
        return QSize()
    def isDefaultUp(self):
        '''bool QMenuBar.isDefaultUp()'''
        return bool()
    def setDefaultUp(self):
        '''bool QMenuBar.setDefaultUp()'''
        return bool()
    def setActiveAction(self, action):
        '''void QMenuBar.setActiveAction(QAction action)'''
    def activeAction(self):
        '''QAction QMenuBar.activeAction()'''
        return QAction()
    def clear(self):
        '''void QMenuBar.clear()'''
    def insertSeparator(self, before):
        '''QAction QMenuBar.insertSeparator(QAction before)'''
        return QAction()
    def insertMenu(self, before, menu):
        '''QAction QMenuBar.insertMenu(QAction before, QMenu menu)'''
        return QAction()
    def addSeparator(self):
        '''QAction QMenuBar.addSeparator()'''
        return QAction()
    def addMenu(self, menu):
        '''QAction QMenuBar.addMenu(QMenu menu)'''
        return QAction()
    def addMenu(self, title):
        '''QMenu QMenuBar.addMenu(QString title)'''
        return QMenu()
    def addMenu(self, icon, title):
        '''QMenu QMenuBar.addMenu(QIcon icon, QString title)'''
        return QMenu()
    def addAction(self, action):
        '''void QMenuBar.addAction(QAction action)'''
    def addAction(self, text):
        '''QAction QMenuBar.addAction(QString text)'''
        return QAction()
    def addAction(self, text, receiver, member):
        '''QAction QMenuBar.addAction(QString text, QObject receiver, SLOT() member)'''
        return QAction()
    def addAction(self, text, receiver):
        '''QAction QMenuBar.addAction(QString text, callable receiver)'''
        return QAction()


class QMessageBox(QDialog):
    """"""
    # Enum QMessageBox.StandardButton
    NoButton = 0
    Ok = 0
    Save = 0
    SaveAll = 0
    Open = 0
    Yes = 0
    YesToAll = 0
    No = 0
    NoToAll = 0
    Abort = 0
    Retry = 0
    Ignore = 0
    Close = 0
    Cancel = 0
    Discard = 0
    Help = 0
    Apply = 0
    Reset = 0
    RestoreDefaults = 0
    FirstButton = 0
    LastButton = 0
    YesAll = 0
    NoAll = 0
    Default = 0
    Escape = 0
    FlagMask = 0
    ButtonMask = 0

    # Enum QMessageBox.Icon
    NoIcon = 0
    Information = 0
    Warning = 0
    Critical = 0
    Question = 0

    # Enum QMessageBox.ButtonRole
    InvalidRole = 0
    AcceptRole = 0
    RejectRole = 0
    DestructiveRole = 0
    ActionRole = 0
    HelpRole = 0
    YesRole = 0
    NoRole = 0
    ResetRole = 0
    ApplyRole = 0

    def __init__(self, parent = None):
        '''void QMessageBox.__init__(QWidget parent = None)'''
    def __init__(self, icon, title, text, buttons = None, parent = None, flags = None):
        '''void QMessageBox.__init__(QMessageBox.Icon icon, QString title, QString text, QMessageBox.StandardButtons buttons = QMessageBox.NoButton, QWidget parent = None, Qt.WindowFlags flags = Qt.Dialog|Qt.MSWindowsFixedSizeDialogHint)'''
    def __init__(self, title, text, icon, button0, button1, button2, parent = None, flags = None):
        '''void QMessageBox.__init__(QString title, QString text, QMessageBox.Icon icon, int button0, int button1, int button2, QWidget parent = None, Qt.WindowFlags flags = Qt.Dialog|Qt.MSWindowsFixedSizeDialogHint)'''
    buttonClicked = pyqtSignal() # void buttonClicked(QAbstractButton *) - signal
    def buttonRole(self, button):
        '''QMessageBox.ButtonRole QMessageBox.buttonRole(QAbstractButton button)'''
        return QMessageBox.ButtonRole()
    def buttons(self):
        '''list-of-QAbstractButton QMessageBox.buttons()'''
        return [QAbstractButton()]
    def open(self):
        '''void QMessageBox.open()'''
    def open(self, receiver, member):
        '''void QMessageBox.open(QObject receiver, SLOT() member)'''
    def open(self, receiver):
        '''void QMessageBox.open(callable receiver)'''
    def setWindowModality(self, windowModality):
        '''void QMessageBox.setWindowModality(Qt.WindowModality windowModality)'''
    def setWindowTitle(self, title):
        '''void QMessageBox.setWindowTitle(QString title)'''
    def setDetailedText(self, text):
        '''void QMessageBox.setDetailedText(QString text)'''
    def detailedText(self):
        '''QString QMessageBox.detailedText()'''
        return QString()
    def setInformativeText(self, text):
        '''void QMessageBox.setInformativeText(QString text)'''
    def informativeText(self):
        '''QString QMessageBox.informativeText()'''
        return QString()
    def clickedButton(self):
        '''QAbstractButton QMessageBox.clickedButton()'''
        return QAbstractButton()
    def setEscapeButton(self, button):
        '''void QMessageBox.setEscapeButton(QAbstractButton button)'''
    def setEscapeButton(self, button):
        '''void QMessageBox.setEscapeButton(QMessageBox.StandardButton button)'''
    def escapeButton(self):
        '''QAbstractButton QMessageBox.escapeButton()'''
        return QAbstractButton()
    def setDefaultButton(self, button):
        '''void QMessageBox.setDefaultButton(QPushButton button)'''
    def setDefaultButton(self, button):
        '''void QMessageBox.setDefaultButton(QMessageBox.StandardButton button)'''
    def defaultButton(self):
        '''QPushButton QMessageBox.defaultButton()'''
        return QPushButton()
    def button(self, which):
        '''QAbstractButton QMessageBox.button(QMessageBox.StandardButton which)'''
        return QAbstractButton()
    def standardButton(self, button):
        '''QMessageBox.StandardButton QMessageBox.standardButton(QAbstractButton button)'''
        return QMessageBox.StandardButton()
    def standardButtons(self):
        '''QMessageBox.StandardButtons QMessageBox.standardButtons()'''
        return QMessageBox.StandardButtons()
    def setStandardButtons(self, buttons):
        '''void QMessageBox.setStandardButtons(QMessageBox.StandardButtons buttons)'''
    def removeButton(self, button):
        '''void QMessageBox.removeButton(QAbstractButton button)'''
    def addButton(self, button, role):
        '''void QMessageBox.addButton(QAbstractButton button, QMessageBox.ButtonRole role)'''
    def addButton(self, text, role):
        '''QPushButton QMessageBox.addButton(QString text, QMessageBox.ButtonRole role)'''
        return QPushButton()
    def addButton(self, button):
        '''QPushButton QMessageBox.addButton(QMessageBox.StandardButton button)'''
        return QPushButton()
    def changeEvent(self):
        '''QEvent QMessageBox.changeEvent()'''
        return QEvent()
    def keyPressEvent(self):
        '''QKeyEvent QMessageBox.keyPressEvent()'''
        return QKeyEvent()
    def closeEvent(self):
        '''QCloseEvent QMessageBox.closeEvent()'''
        return QCloseEvent()
    def showEvent(self):
        '''QShowEvent QMessageBox.showEvent()'''
        return QShowEvent()
    def resizeEvent(self):
        '''QResizeEvent QMessageBox.resizeEvent()'''
        return QResizeEvent()
    def event(self, e):
        '''bool QMessageBox.event(QEvent e)'''
        return bool()
    def standardIcon(self, icon):
        '''static QPixmap QMessageBox.standardIcon(QMessageBox.Icon icon)'''
        return QPixmap()
    def sizeHint(self):
        '''QSize QMessageBox.sizeHint()'''
        return QSize()
    def aboutQt(self, parent, title = QString()):
        '''static void QMessageBox.aboutQt(QWidget parent, QString title = QString())'''
    def about(self, parent, caption, text):
        '''static void QMessageBox.about(QWidget parent, QString caption, QString text)'''
    def critical(self, parent, title, text, buttons = None, defaultButton = None):
        '''static QMessageBox.StandardButton QMessageBox.critical(QWidget parent, QString title, QString text, QMessageBox.StandardButtons buttons = QMessageBox.Ok, QMessageBox.StandardButton defaultButton = QMessageBox.NoButton)'''
        return QMessageBox.StandardButton()
    def critical(self, parent, title, text, button0, button1, button2 = 0):
        '''static int QMessageBox.critical(QWidget parent, QString title, QString text, int button0, int button1, int button2 = 0)'''
        return int()
    def critical(self, parent, title, text, button0Text, button1Text = QString(), button2Text = QString(), defaultButtonNumber = 0, escapeButtonNumber = None):
        '''static int QMessageBox.critical(QWidget parent, QString title, QString text, QString button0Text, QString button1Text = QString(), QString button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1)'''
        return int()
    def warning(self, parent, title, text, buttons = None, defaultButton = None):
        '''static QMessageBox.StandardButton QMessageBox.warning(QWidget parent, QString title, QString text, QMessageBox.StandardButtons buttons = QMessageBox.Ok, QMessageBox.StandardButton defaultButton = QMessageBox.NoButton)'''
        return QMessageBox.StandardButton()
    def warning(self, parent, title, text, button0, button1, button2 = 0):
        '''static int QMessageBox.warning(QWidget parent, QString title, QString text, int button0, int button1, int button2 = 0)'''
        return int()
    def warning(self, parent, title, text, button0Text, button1Text = QString(), button2Text = QString(), defaultButtonNumber = 0, escapeButtonNumber = None):
        '''static int QMessageBox.warning(QWidget parent, QString title, QString text, QString button0Text, QString button1Text = QString(), QString button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1)'''
        return int()
    def question(self, parent, title, text, buttons = None, defaultButton = None):
        '''static QMessageBox.StandardButton QMessageBox.question(QWidget parent, QString title, QString text, QMessageBox.StandardButtons buttons = QMessageBox.Ok, QMessageBox.StandardButton defaultButton = QMessageBox.NoButton)'''
        return QMessageBox.StandardButton()
    def question(self, parent, title, text, button0, button1 = 0, button2 = 0):
        '''static int QMessageBox.question(QWidget parent, QString title, QString text, int button0, int button1 = 0, int button2 = 0)'''
        return int()
    def question(self, parent, title, text, button0Text, button1Text = QString(), button2Text = QString(), defaultButtonNumber = 0, escapeButtonNumber = None):
        '''static int QMessageBox.question(QWidget parent, QString title, QString text, QString button0Text, QString button1Text = QString(), QString button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1)'''
        return int()
    def information(self, parent, title, text, buttons = None, defaultButton = None):
        '''static QMessageBox.StandardButton QMessageBox.information(QWidget parent, QString title, QString text, QMessageBox.StandardButtons buttons = QMessageBox.Ok, QMessageBox.StandardButton defaultButton = QMessageBox.NoButton)'''
        return QMessageBox.StandardButton()
    def information(self, parent, title, text, button0, button1 = 0, button2 = 0):
        '''static int QMessageBox.information(QWidget parent, QString title, QString text, int button0, int button1 = 0, int button2 = 0)'''
        return int()
    def information(self, parent, title, text, button0Text, button1Text = QString(), button2Text = QString(), defaultButtonNumber = 0, escapeButtonNumber = None):
        '''static int QMessageBox.information(QWidget parent, QString title, QString text, QString button0Text, QString button1Text = QString(), QString button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1)'''
        return int()
    def setTextFormat(self):
        '''Qt.TextFormat QMessageBox.setTextFormat()'''
        return Qt.TextFormat()
    def textFormat(self):
        '''Qt.TextFormat QMessageBox.textFormat()'''
        return Qt.TextFormat()
    def setButtonText(self, button):
        '''QString QMessageBox.setButtonText(int button)'''
        return QString()
    def buttonText(self, button):
        '''QString QMessageBox.buttonText(int button)'''
        return QString()
    def setIconPixmap(self):
        '''QPixmap QMessageBox.setIconPixmap()'''
        return QPixmap()
    def iconPixmap(self):
        '''QPixmap QMessageBox.iconPixmap()'''
        return QPixmap()
    def setIcon(self):
        '''QMessageBox.Icon QMessageBox.setIcon()'''
        return QMessageBox.Icon()
    def icon(self):
        '''QMessageBox.Icon QMessageBox.icon()'''
        return QMessageBox.Icon()
    def setText(self):
        '''QString QMessageBox.setText()'''
        return QString()
    def text(self):
        '''QString QMessageBox.text()'''
        return QString()
    class StandardButtons():
        """"""
        def __init__(self):
            '''QMessageBox.StandardButtons QMessageBox.StandardButtons.__init__()'''
            return QMessageBox.StandardButtons()
        def __init__(self):
            '''int QMessageBox.StandardButtons.__init__()'''
            return int()
        def __init__(self):
            '''void QMessageBox.StandardButtons.__init__()'''
        def __bool__(self):
            '''int QMessageBox.StandardButtons.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QMessageBox.StandardButtons.__ne__(QMessageBox.StandardButtons f)'''
            return bool()
        def __eq__(self, f):
            '''bool QMessageBox.StandardButtons.__eq__(QMessageBox.StandardButtons f)'''
            return bool()
        def __invert__(self):
            '''QMessageBox.StandardButtons QMessageBox.StandardButtons.__invert__()'''
            return QMessageBox.StandardButtons()
        def __and__(self, mask):
            '''QMessageBox.StandardButtons QMessageBox.StandardButtons.__and__(int mask)'''
            return QMessageBox.StandardButtons()
        def __xor__(self, f):
            '''QMessageBox.StandardButtons QMessageBox.StandardButtons.__xor__(QMessageBox.StandardButtons f)'''
            return QMessageBox.StandardButtons()
        def __xor__(self, f):
            '''QMessageBox.StandardButtons QMessageBox.StandardButtons.__xor__(int f)'''
            return QMessageBox.StandardButtons()
        def __or__(self, f):
            '''QMessageBox.StandardButtons QMessageBox.StandardButtons.__or__(QMessageBox.StandardButtons f)'''
            return QMessageBox.StandardButtons()
        def __or__(self, f):
            '''QMessageBox.StandardButtons QMessageBox.StandardButtons.__or__(int f)'''
            return QMessageBox.StandardButtons()
        def __int__(self):
            '''int QMessageBox.StandardButtons.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QMessageBox.StandardButtons QMessageBox.StandardButtons.__ixor__(QMessageBox.StandardButtons f)'''
            return QMessageBox.StandardButtons()
        def __ior__(self, f):
            '''QMessageBox.StandardButtons QMessageBox.StandardButtons.__ior__(QMessageBox.StandardButtons f)'''
            return QMessageBox.StandardButtons()
        def __iand__(self, mask):
            '''QMessageBox.StandardButtons QMessageBox.StandardButtons.__iand__(int mask)'''
            return QMessageBox.StandardButtons()


class QMouseEventTransition(QEventTransition):
    """"""
    def __init__(self, sourceState = None):
        '''void QMouseEventTransition.__init__(QState sourceState = None)'''
    def __init__(self, object, type, button, sourceState = None):
        '''void QMouseEventTransition.__init__(QObject object, QEvent.Type type, Qt.MouseButton button, QState sourceState = None)'''
    def eventTest(self, event):
        '''bool QMouseEventTransition.eventTest(QEvent event)'''
        return bool()
    def onTransition(self, event):
        '''void QMouseEventTransition.onTransition(QEvent event)'''
    def setHitTestPath(self, path):
        '''void QMouseEventTransition.setHitTestPath(QPainterPath path)'''
    def hitTestPath(self):
        '''QPainterPath QMouseEventTransition.hitTestPath()'''
        return QPainterPath()
    def setModifierMask(self, modifiers):
        '''void QMouseEventTransition.setModifierMask(Qt.KeyboardModifiers modifiers)'''
    def modifierMask(self):
        '''Qt.KeyboardModifiers QMouseEventTransition.modifierMask()'''
        return Qt.KeyboardModifiers()
    def setButton(self, button):
        '''void QMouseEventTransition.setButton(Qt.MouseButton button)'''
    def button(self):
        '''Qt.MouseButton QMouseEventTransition.button()'''
        return Qt.MouseButton()


class QMovie(QObject):
    """"""
    # Enum QMovie.CacheMode
    CacheNone = 0
    CacheAll = 0

    # Enum QMovie.MovieState
    NotRunning = 0
    Paused = 0
    Running = 0

    def __init__(self, parent = None):
        '''void QMovie.__init__(QObject parent = None)'''
    def __init__(self, device, format = QByteArray(), parent = None):
        '''void QMovie.__init__(QIODevice device, QByteArray format = QByteArray(), QObject parent = None)'''
    def __init__(self, fileName, format = QByteArray(), parent = None):
        '''void QMovie.__init__(QString fileName, QByteArray format = QByteArray(), QObject parent = None)'''
    def stop(self):
        '''void QMovie.stop()'''
    def setPaused(self, paused):
        '''void QMovie.setPaused(bool paused)'''
    def jumpToNextFrame(self):
        '''bool QMovie.jumpToNextFrame()'''
        return bool()
    def start(self):
        '''void QMovie.start()'''
    frameChanged = pyqtSignal() # void frameChanged(int) - signal
    finished = pyqtSignal() # void finished() - signal
    error = pyqtSignal() # void error(QImageReader::ImageReaderError) - signal
    stateChanged = pyqtSignal() # void stateChanged(QMovie::MovieState) - signal
    updated = pyqtSignal() # void updated(const QRectamp;) - signal
    resized = pyqtSignal() # void resized(const QSizeamp;) - signal
    started = pyqtSignal() # void started() - signal
    def setCacheMode(self, mode):
        '''void QMovie.setCacheMode(QMovie.CacheMode mode)'''
    def cacheMode(self):
        '''QMovie.CacheMode QMovie.cacheMode()'''
        return QMovie.CacheMode()
    def setScaledSize(self, size):
        '''void QMovie.setScaledSize(QSize size)'''
    def scaledSize(self):
        '''QSize QMovie.scaledSize()'''
        return QSize()
    def speed(self):
        '''int QMovie.speed()'''
        return int()
    def setSpeed(self, percentSpeed):
        '''void QMovie.setSpeed(int percentSpeed)'''
    def currentFrameNumber(self):
        '''int QMovie.currentFrameNumber()'''
        return int()
    def nextFrameDelay(self):
        '''int QMovie.nextFrameDelay()'''
        return int()
    def frameCount(self):
        '''int QMovie.frameCount()'''
        return int()
    def loopCount(self):
        '''int QMovie.loopCount()'''
        return int()
    def jumpToFrame(self, frameNumber):
        '''bool QMovie.jumpToFrame(int frameNumber)'''
        return bool()
    def isValid(self):
        '''bool QMovie.isValid()'''
        return bool()
    def currentPixmap(self):
        '''QPixmap QMovie.currentPixmap()'''
        return QPixmap()
    def currentImage(self):
        '''QImage QMovie.currentImage()'''
        return QImage()
    def frameRect(self):
        '''QRect QMovie.frameRect()'''
        return QRect()
    def state(self):
        '''QMovie.MovieState QMovie.state()'''
        return QMovie.MovieState()
    def backgroundColor(self):
        '''QColor QMovie.backgroundColor()'''
        return QColor()
    def setBackgroundColor(self, color):
        '''void QMovie.setBackgroundColor(QColor color)'''
    def format(self):
        '''QByteArray QMovie.format()'''
        return QByteArray()
    def setFormat(self, format):
        '''void QMovie.setFormat(QByteArray format)'''
    def fileName(self):
        '''QString QMovie.fileName()'''
        return QString()
    def setFileName(self, fileName):
        '''void QMovie.setFileName(QString fileName)'''
    def device(self):
        '''QIODevice QMovie.device()'''
        return QIODevice()
    def setDevice(self, device):
        '''void QMovie.setDevice(QIODevice device)'''
    def supportedFormats(self):
        '''static list-of-QByteArray QMovie.supportedFormats()'''
        return [QByteArray()]


class QPageSetupDialog(QDialog):
    """"""
    # Enum QPageSetupDialog.PageSetupDialogOption
    DontUseSheet = 0

    def __init__(self, parent = None):
        '''void QPageSetupDialog.__init__(QWidget parent = None)'''
    def __init__(self, printer, parent = None):
        '''void QPageSetupDialog.__init__(QPrinter printer, QWidget parent = None)'''
    def open(self):
        '''void QPageSetupDialog.open()'''
    def open(self, receiver, member):
        '''void QPageSetupDialog.open(QObject receiver, SLOT() member)'''
    def open(self, receiver):
        '''void QPageSetupDialog.open(callable receiver)'''
    def options(self):
        '''QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.options()'''
        return QPageSetupDialog.PageSetupDialogOptions()
    def setOptions(self, options):
        '''void QPageSetupDialog.setOptions(QPageSetupDialog.PageSetupDialogOptions options)'''
    def testOption(self, option):
        '''bool QPageSetupDialog.testOption(QPageSetupDialog.PageSetupDialogOption option)'''
        return bool()
    def setOption(self, option, on = True):
        '''void QPageSetupDialog.setOption(QPageSetupDialog.PageSetupDialogOption option, bool on = True)'''
    def isOptionEnabled(self, option):
        '''bool QPageSetupDialog.isOptionEnabled(QPageSetupDialog.PageSetupDialogOption option)'''
        return bool()
    def enabledOptions(self):
        '''QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.enabledOptions()'''
        return QPageSetupDialog.PageSetupDialogOptions()
    def setEnabledOptions(self, options):
        '''void QPageSetupDialog.setEnabledOptions(QPageSetupDialog.PageSetupDialogOptions options)'''
    def addEnabledOption(self, option):
        '''void QPageSetupDialog.addEnabledOption(QPageSetupDialog.PageSetupDialogOption option)'''
    def printer(self):
        '''QPrinter QPageSetupDialog.printer()'''
        return QPrinter()
    def exec_(self):
        '''int QPageSetupDialog.exec_()'''
        return int()
    class PageSetupDialogOptions():
        """"""
        def __init__(self):
            '''QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.PageSetupDialogOptions.__init__()'''
            return QPageSetupDialog.PageSetupDialogOptions()
        def __init__(self):
            '''int QPageSetupDialog.PageSetupDialogOptions.__init__()'''
            return int()
        def __init__(self):
            '''void QPageSetupDialog.PageSetupDialogOptions.__init__()'''
        def __bool__(self):
            '''int QPageSetupDialog.PageSetupDialogOptions.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QPageSetupDialog.PageSetupDialogOptions.__ne__(QPageSetupDialog.PageSetupDialogOptions f)'''
            return bool()
        def __eq__(self, f):
            '''bool QPageSetupDialog.PageSetupDialogOptions.__eq__(QPageSetupDialog.PageSetupDialogOptions f)'''
            return bool()
        def __invert__(self):
            '''QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.PageSetupDialogOptions.__invert__()'''
            return QPageSetupDialog.PageSetupDialogOptions()
        def __and__(self, mask):
            '''QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.PageSetupDialogOptions.__and__(int mask)'''
            return QPageSetupDialog.PageSetupDialogOptions()
        def __xor__(self, f):
            '''QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.PageSetupDialogOptions.__xor__(QPageSetupDialog.PageSetupDialogOptions f)'''
            return QPageSetupDialog.PageSetupDialogOptions()
        def __xor__(self, f):
            '''QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.PageSetupDialogOptions.__xor__(int f)'''
            return QPageSetupDialog.PageSetupDialogOptions()
        def __or__(self, f):
            '''QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.PageSetupDialogOptions.__or__(QPageSetupDialog.PageSetupDialogOptions f)'''
            return QPageSetupDialog.PageSetupDialogOptions()
        def __or__(self, f):
            '''QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.PageSetupDialogOptions.__or__(int f)'''
            return QPageSetupDialog.PageSetupDialogOptions()
        def __int__(self):
            '''int QPageSetupDialog.PageSetupDialogOptions.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.PageSetupDialogOptions.__ixor__(QPageSetupDialog.PageSetupDialogOptions f)'''
            return QPageSetupDialog.PageSetupDialogOptions()
        def __ior__(self, f):
            '''QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.PageSetupDialogOptions.__ior__(QPageSetupDialog.PageSetupDialogOptions f)'''
            return QPageSetupDialog.PageSetupDialogOptions()
        def __iand__(self, mask):
            '''QPageSetupDialog.PageSetupDialogOptions QPageSetupDialog.PageSetupDialogOptions.__iand__(int mask)'''
            return QPageSetupDialog.PageSetupDialogOptions()


class QPainter():
    """"""
    # Enum QPainter.PixmapFragmentHint
    OpaqueHint = 0

    # Enum QPainter.CompositionMode
    CompositionMode_SourceOver = 0
    CompositionMode_DestinationOver = 0
    CompositionMode_Clear = 0
    CompositionMode_Source = 0
    CompositionMode_Destination = 0
    CompositionMode_SourceIn = 0
    CompositionMode_DestinationIn = 0
    CompositionMode_SourceOut = 0
    CompositionMode_DestinationOut = 0
    CompositionMode_SourceAtop = 0
    CompositionMode_DestinationAtop = 0
    CompositionMode_Xor = 0
    CompositionMode_Plus = 0
    CompositionMode_Multiply = 0
    CompositionMode_Screen = 0
    CompositionMode_Overlay = 0
    CompositionMode_Darken = 0
    CompositionMode_Lighten = 0
    CompositionMode_ColorDodge = 0
    CompositionMode_ColorBurn = 0
    CompositionMode_HardLight = 0
    CompositionMode_SoftLight = 0
    CompositionMode_Difference = 0
    CompositionMode_Exclusion = 0
    RasterOp_SourceOrDestination = 0
    RasterOp_SourceAndDestination = 0
    RasterOp_SourceXorDestination = 0
    RasterOp_NotSourceAndNotDestination = 0
    RasterOp_NotSourceOrNotDestination = 0
    RasterOp_NotSourceXorDestination = 0
    RasterOp_NotSource = 0
    RasterOp_NotSourceAndDestination = 0
    RasterOp_SourceAndNotDestination = 0

    # Enum QPainter.RenderHint
    Antialiasing = 0
    TextAntialiasing = 0
    SmoothPixmapTransform = 0
    HighQualityAntialiasing = 0
    NonCosmeticDefaultPen = 0

    def __init__(self):
        '''void QPainter.__init__()'''
    def __init__(self):
        '''QPaintDevice QPainter.__init__()'''
        return QPaintDevice()
    def drawGlyphRun(self, position, glyphRun):
        '''void QPainter.drawGlyphRun(QPointF position, QGlyphRun glyphRun)'''
    def clipBoundingRect(self):
        '''QRectF QPainter.clipBoundingRect()'''
        return QRectF()
    def drawStaticText(self, topLeftPosition, staticText):
        '''void QPainter.drawStaticText(QPointF topLeftPosition, QStaticText staticText)'''
    def drawStaticText(self, p, staticText):
        '''void QPainter.drawStaticText(QPoint p, QStaticText staticText)'''
    def drawStaticText(self, x, y, staticText):
        '''void QPainter.drawStaticText(int x, int y, QStaticText staticText)'''
    def drawPixmapFragments(self, fragments, pixmap, hints = 0):
        '''void QPainter.drawPixmapFragments(list-of-QPainter.PixmapFragment fragments, QPixmap pixmap, QPainter.PixmapFragmentHints hints = 0)'''
    def drawPixmapFragments(self, targetRects, sourceRects, pixmap, hints = 0):
        '''void QPainter.drawPixmapFragments(list-of-QRectF targetRects, list-of-QRectF sourceRects, QPixmap pixmap, QPainter.PixmapFragmentHints hints = 0)'''
    def endNativePainting(self):
        '''void QPainter.endNativePainting()'''
    def beginNativePainting(self):
        '''void QPainter.beginNativePainting()'''
    def drawRoundedRect(self, rect, xRadius, yRadius, mode = None):
        '''void QPainter.drawRoundedRect(QRectF rect, float xRadius, float yRadius, Qt.SizeMode mode = Qt.AbsoluteSize)'''
    def drawRoundedRect(self, x, y, w, h, xRadius, yRadius, mode = None):
        '''void QPainter.drawRoundedRect(int x, int y, int w, int h, float xRadius, float yRadius, Qt.SizeMode mode = Qt.AbsoluteSize)'''
    def drawRoundedRect(self, rect, xRadius, yRadius, mode = None):
        '''void QPainter.drawRoundedRect(QRect rect, float xRadius, float yRadius, Qt.SizeMode mode = Qt.AbsoluteSize)'''
    def testRenderHint(self, hint):
        '''bool QPainter.testRenderHint(QPainter.RenderHint hint)'''
        return bool()
    def combinedTransform(self):
        '''QTransform QPainter.combinedTransform()'''
        return QTransform()
    def worldTransform(self):
        '''QTransform QPainter.worldTransform()'''
        return QTransform()
    def setWorldTransform(self, matrix, combine = False):
        '''void QPainter.setWorldTransform(QTransform matrix, bool combine = False)'''
    def resetTransform(self):
        '''void QPainter.resetTransform()'''
    def deviceTransform(self):
        '''QTransform QPainter.deviceTransform()'''
        return QTransform()
    def transform(self):
        '''QTransform QPainter.transform()'''
        return QTransform()
    def setTransform(self, transform, combine = False):
        '''void QPainter.setTransform(QTransform transform, bool combine = False)'''
    def setWorldMatrixEnabled(self, enabled):
        '''void QPainter.setWorldMatrixEnabled(bool enabled)'''
    def worldMatrixEnabled(self):
        '''bool QPainter.worldMatrixEnabled()'''
        return bool()
    def setWorldMatrix(self, matrix, combine = False):
        '''void QPainter.setWorldMatrix(QMatrix matrix, bool combine = False)'''
    def worldMatrix(self):
        '''QMatrix QPainter.worldMatrix()'''
        return QMatrix()
    def setOpacity(self, opacity):
        '''void QPainter.setOpacity(float opacity)'''
    def opacity(self):
        '''float QPainter.opacity()'''
        return float()
    def combinedMatrix(self):
        '''QMatrix QPainter.combinedMatrix()'''
        return QMatrix()
    def drawImage(self, targetRect, image, sourceRect, flags = None):
        '''void QPainter.drawImage(QRectF targetRect, QImage image, QRectF sourceRect, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
    def drawImage(self, targetRect, image, sourceRect, flags = None):
        '''void QPainter.drawImage(QRect targetRect, QImage image, QRect sourceRect, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
    def drawImage(self, p, image, sr, flags = None):
        '''void QPainter.drawImage(QPointF p, QImage image, QRectF sr, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
    def drawImage(self, p, image, sr, flags = None):
        '''void QPainter.drawImage(QPoint p, QImage image, QRect sr, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
    def drawImage(self, r, image):
        '''void QPainter.drawImage(QRectF r, QImage image)'''
    def drawImage(self, r, image):
        '''void QPainter.drawImage(QRect r, QImage image)'''
    def drawImage(self, p, image):
        '''void QPainter.drawImage(QPointF p, QImage image)'''
    def drawImage(self, p, image):
        '''void QPainter.drawImage(QPoint p, QImage image)'''
    def drawImage(self, x, y, image, sx = 0, sy = 0, sw = None, sh = None, flags = None):
        '''void QPainter.drawImage(int x, int y, QImage image, int sx = 0, int sy = 0, int sw = -1, int sh = -1, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
    def drawPoint(self, p):
        '''void QPainter.drawPoint(QPointF p)'''
    def drawPoint(self, x, y):
        '''void QPainter.drawPoint(int x, int y)'''
    def drawPoint(self, p):
        '''void QPainter.drawPoint(QPoint p)'''
    def drawRect(self, rect):
        '''void QPainter.drawRect(QRectF rect)'''
    def drawRect(self, x, y, w, h):
        '''void QPainter.drawRect(int x, int y, int w, int h)'''
    def drawRect(self, r):
        '''void QPainter.drawRect(QRect r)'''
    def drawLine(self, l):
        '''void QPainter.drawLine(QLineF l)'''
    def drawLine(self, line):
        '''void QPainter.drawLine(QLine line)'''
    def drawLine(self, x1, y1, x2, y2):
        '''void QPainter.drawLine(int x1, int y1, int x2, int y2)'''
    def drawLine(self, p1, p2):
        '''void QPainter.drawLine(QPoint p1, QPoint p2)'''
    def drawLine(self, p1, p2):
        '''void QPainter.drawLine(QPointF p1, QPointF p2)'''
    def restoreRedirected(self, device):
        '''static void QPainter.restoreRedirected(QPaintDevice device)'''
    def redirected(self, device, offset = None):
        '''static QPaintDevice QPainter.redirected(QPaintDevice device, QPoint offset = None)'''
        return QPaintDevice()
    def setRedirected(self, device, replacement, offset = QPoint()):
        '''static void QPainter.setRedirected(QPaintDevice device, QPaintDevice replacement, QPoint offset = QPoint())'''
    def paintEngine(self):
        '''QPaintEngine QPainter.paintEngine()'''
        return QPaintEngine()
    def setRenderHints(self, hints, on = True):
        '''void QPainter.setRenderHints(QPainter.RenderHints hints, bool on = True)'''
    def renderHints(self):
        '''QPainter.RenderHints QPainter.renderHints()'''
        return QPainter.RenderHints()
    def setRenderHint(self, hint, on = True):
        '''void QPainter.setRenderHint(QPainter.RenderHint hint, bool on = True)'''
    def eraseRect(self):
        '''QRectF QPainter.eraseRect()'''
        return QRectF()
    def eraseRect(self, rect):
        '''void QPainter.eraseRect(QRect rect)'''
    def eraseRect(self, x, y, w, h):
        '''void QPainter.eraseRect(int x, int y, int w, int h)'''
    def fillRect(self):
        '''QBrush QPainter.fillRect()'''
        return QBrush()
    def fillRect(self):
        '''QBrush QPainter.fillRect()'''
        return QBrush()
    def fillRect(self, x, y, w, h, b):
        '''void QPainter.fillRect(int x, int y, int w, int h, QBrush b)'''
    def fillRect(self, color):
        '''QRectF QPainter.fillRect(QColor color)'''
        return QRectF()
    def fillRect(self, color):
        '''QRect QPainter.fillRect(QColor color)'''
        return QRect()
    def fillRect(self, x, y, w, h, b):
        '''void QPainter.fillRect(int x, int y, int w, int h, QColor b)'''
    def fillRect(self, x, y, w, h, c):
        '''void QPainter.fillRect(int x, int y, int w, int h, Qt.GlobalColor c)'''
    def fillRect(self, r, c):
        '''void QPainter.fillRect(QRect r, Qt.GlobalColor c)'''
    def fillRect(self, r, c):
        '''void QPainter.fillRect(QRectF r, Qt.GlobalColor c)'''
    def fillRect(self, x, y, w, h, style):
        '''void QPainter.fillRect(int x, int y, int w, int h, Qt.BrushStyle style)'''
    def fillRect(self, r, style):
        '''void QPainter.fillRect(QRect r, Qt.BrushStyle style)'''
    def fillRect(self, r, style):
        '''void QPainter.fillRect(QRectF r, Qt.BrushStyle style)'''
    def boundingRect(self, rect, flags, text):
        '''QRectF QPainter.boundingRect(QRectF rect, int flags, QString text)'''
        return QRectF()
    def boundingRect(self, rect, flags, text):
        '''QRect QPainter.boundingRect(QRect rect, int flags, QString text)'''
        return QRect()
    def boundingRect(self, rectangle, text, option = QTextOption()):
        '''QRectF QPainter.boundingRect(QRectF rectangle, QString text, QTextOption option = QTextOption())'''
        return QRectF()
    def boundingRect(self, x, y, w, h, flags, text):
        '''QRect QPainter.boundingRect(int x, int y, int w, int h, int flags, QString text)'''
        return QRect()
    def drawText(self, p, s):
        '''void QPainter.drawText(QPointF p, QString s)'''
    def drawText(self, rectangle, flags, text, boundingRect):
        '''void QPainter.drawText(QRectF rectangle, int flags, QString text, QRectF boundingRect)'''
    def drawText(self, rectangle, flags, text, boundingRect):
        '''void QPainter.drawText(QRect rectangle, int flags, QString text, QRect boundingRect)'''
    def drawText(self, rectangle, text, option = QTextOption()):
        '''void QPainter.drawText(QRectF rectangle, QString text, QTextOption option = QTextOption())'''
    def drawText(self, p, s):
        '''void QPainter.drawText(QPoint p, QString s)'''
    def drawText(self, x, y, width, height, flags, text, boundingRect):
        '''void QPainter.drawText(int x, int y, int width, int height, int flags, QString text, QRect boundingRect)'''
    def drawText(self, x, y, s):
        '''void QPainter.drawText(int x, int y, QString s)'''
    def layoutDirection(self):
        '''Qt.LayoutDirection QPainter.layoutDirection()'''
        return Qt.LayoutDirection()
    def setLayoutDirection(self, direction):
        '''void QPainter.setLayoutDirection(Qt.LayoutDirection direction)'''
    def drawPixmap(self, targetRect, pixmap, sourceRect):
        '''void QPainter.drawPixmap(QRectF targetRect, QPixmap pixmap, QRectF sourceRect)'''
    def drawPixmap(self, targetRect, pixmap, sourceRect):
        '''void QPainter.drawPixmap(QRect targetRect, QPixmap pixmap, QRect sourceRect)'''
    def drawPixmap(self, p, pm):
        '''void QPainter.drawPixmap(QPointF p, QPixmap pm)'''
    def drawPixmap(self, p, pm):
        '''void QPainter.drawPixmap(QPoint p, QPixmap pm)'''
    def drawPixmap(self, r, pm):
        '''void QPainter.drawPixmap(QRect r, QPixmap pm)'''
    def drawPixmap(self, x, y, pm):
        '''void QPainter.drawPixmap(int x, int y, QPixmap pm)'''
    def drawPixmap(self, x, y, w, h, pm):
        '''void QPainter.drawPixmap(int x, int y, int w, int h, QPixmap pm)'''
    def drawPixmap(self, x, y, w, h, pm, sx, sy, sw, sh):
        '''void QPainter.drawPixmap(int x, int y, int w, int h, QPixmap pm, int sx, int sy, int sw, int sh)'''
    def drawPixmap(self, x, y, pm, sx, sy, sw, sh):
        '''void QPainter.drawPixmap(int x, int y, QPixmap pm, int sx, int sy, int sw, int sh)'''
    def drawPixmap(self, p, pm, sr):
        '''void QPainter.drawPixmap(QPointF p, QPixmap pm, QRectF sr)'''
    def drawPixmap(self, p, pm, sr):
        '''void QPainter.drawPixmap(QPoint p, QPixmap pm, QRect sr)'''
    def drawPicture(self, p, picture):
        '''void QPainter.drawPicture(QPointF p, QPicture picture)'''
    def drawPicture(self, x, y, p):
        '''void QPainter.drawPicture(int x, int y, QPicture p)'''
    def drawPicture(self, pt, p):
        '''void QPainter.drawPicture(QPoint pt, QPicture p)'''
    def drawTiledPixmap(self, rectangle, pixmap, pos = QPointF()):
        '''void QPainter.drawTiledPixmap(QRectF rectangle, QPixmap pixmap, QPointF pos = QPointF())'''
    def drawTiledPixmap(self, rectangle, pixmap, pos = QPoint()):
        '''void QPainter.drawTiledPixmap(QRect rectangle, QPixmap pixmap, QPoint pos = QPoint())'''
    def drawTiledPixmap(self, x, y, width, height, pixmap, sx = 0, sy = 0):
        '''void QPainter.drawTiledPixmap(int x, int y, int width, int height, QPixmap pixmap, int sx = 0, int sy = 0)'''
    def drawRoundRect(self, r, xRound = 25, yRound = 25):
        '''void QPainter.drawRoundRect(QRectF r, int xRound = 25, int yRound = 25)'''
    def drawRoundRect(self, x, y, w, h, xRound = 25, yRound = 25):
        '''void QPainter.drawRoundRect(int x, int y, int w, int h, int xRound = 25, int yRound = 25)'''
    def drawRoundRect(self, r, xRound = 25, yRound = 25):
        '''void QPainter.drawRoundRect(QRect r, int xRound = 25, int yRound = 25)'''
    def drawChord(self, rect, a, alen):
        '''void QPainter.drawChord(QRectF rect, int a, int alen)'''
    def drawChord(self, rect, a, alen):
        '''void QPainter.drawChord(QRect rect, int a, int alen)'''
    def drawChord(self, x, y, w, h, a, alen):
        '''void QPainter.drawChord(int x, int y, int w, int h, int a, int alen)'''
    def drawPie(self, rect, a, alen):
        '''void QPainter.drawPie(QRectF rect, int a, int alen)'''
    def drawPie(self, rect, a, alen):
        '''void QPainter.drawPie(QRect rect, int a, int alen)'''
    def drawPie(self, x, y, w, h, a, alen):
        '''void QPainter.drawPie(int x, int y, int w, int h, int a, int alen)'''
    def drawArc(self, rect, a, alen):
        '''void QPainter.drawArc(QRectF rect, int a, int alen)'''
    def drawArc(self, r, a, alen):
        '''void QPainter.drawArc(QRect r, int a, int alen)'''
    def drawArc(self, x, y, w, h, a, alen):
        '''void QPainter.drawArc(int x, int y, int w, int h, int a, int alen)'''
    def drawConvexPolygon(self, point, *args):
        '''void QPainter.drawConvexPolygon(QPointF point, ... *args)'''
    def drawConvexPolygon(self, poly):
        '''void QPainter.drawConvexPolygon(QPolygonF poly)'''
    def drawConvexPolygon(self, point, *args):
        '''void QPainter.drawConvexPolygon(QPoint point, ... *args)'''
    def drawConvexPolygon(self, poly):
        '''void QPainter.drawConvexPolygon(QPolygon poly)'''
    def drawPolygon(self, point, *args):
        '''void QPainter.drawPolygon(QPointF point, ... *args)'''
    def drawPolygon(self, points, fillRule = None):
        '''void QPainter.drawPolygon(QPolygonF points, Qt.FillRule fillRule = Qt.OddEvenFill)'''
    def drawPolygon(self, point, *args):
        '''void QPainter.drawPolygon(QPoint point, ... *args)'''
    def drawPolygon(self, points, fillRule = None):
        '''void QPainter.drawPolygon(QPolygon points, Qt.FillRule fillRule = Qt.OddEvenFill)'''
    def drawPolyline(self, point, *args):
        '''void QPainter.drawPolyline(QPointF point, ... *args)'''
    def drawPolyline(self, polyline):
        '''void QPainter.drawPolyline(QPolygonF polyline)'''
    def drawPolyline(self, point, *args):
        '''void QPainter.drawPolyline(QPoint point, ... *args)'''
    def drawPolyline(self, polyline):
        '''void QPainter.drawPolyline(QPolygon polyline)'''
    def drawEllipse(self, r):
        '''void QPainter.drawEllipse(QRectF r)'''
    def drawEllipse(self, r):
        '''void QPainter.drawEllipse(QRect r)'''
    def drawEllipse(self, x, y, w, h):
        '''void QPainter.drawEllipse(int x, int y, int w, int h)'''
    def drawEllipse(self, center, rx, ry):
        '''void QPainter.drawEllipse(QPointF center, float rx, float ry)'''
    def drawEllipse(self, center, rx, ry):
        '''void QPainter.drawEllipse(QPoint center, int rx, int ry)'''
    def drawRects(self, rect, *args):
        '''void QPainter.drawRects(QRectF rect, ... *args)'''
    def drawRects(self, rects):
        '''void QPainter.drawRects(list-of-QRectF rects)'''
    def drawRects(self, rect, *args):
        '''void QPainter.drawRects(QRect rect, ... *args)'''
    def drawRects(self, rects):
        '''void QPainter.drawRects(list-of-QRect rects)'''
    def drawLines(self, line, *args):
        '''void QPainter.drawLines(QLineF line, ... *args)'''
    def drawLines(self, lines):
        '''void QPainter.drawLines(list-of-QLineF lines)'''
    def drawLines(self, pointPair, *args):
        '''void QPainter.drawLines(QPointF pointPair, ... *args)'''
    def drawLines(self, pointPairs):
        '''void QPainter.drawLines(list-of-QPointF pointPairs)'''
    def drawLines(self, line, *args):
        '''void QPainter.drawLines(QLine line, ... *args)'''
    def drawLines(self, lines):
        '''void QPainter.drawLines(list-of-QLine lines)'''
    def drawLines(self, pointPair, *args):
        '''void QPainter.drawLines(QPoint pointPair, ... *args)'''
    def drawLines(self, pointPairs):
        '''void QPainter.drawLines(list-of-QPoint pointPairs)'''
    def drawPoints(self, point, *args):
        '''void QPainter.drawPoints(QPointF point, ... *args)'''
    def drawPoints(self, points):
        '''void QPainter.drawPoints(QPolygonF points)'''
    def drawPoints(self, point, *args):
        '''void QPainter.drawPoints(QPoint point, ... *args)'''
    def drawPoints(self, points):
        '''void QPainter.drawPoints(QPolygon points)'''
    def drawPath(self, path):
        '''void QPainter.drawPath(QPainterPath path)'''
    def fillPath(self, path, brush):
        '''void QPainter.fillPath(QPainterPath path, QBrush brush)'''
    def strokePath(self, path, pen):
        '''void QPainter.strokePath(QPainterPath path, QPen pen)'''
    def viewTransformEnabled(self):
        '''bool QPainter.viewTransformEnabled()'''
        return bool()
    def setViewTransformEnabled(self, enable):
        '''void QPainter.setViewTransformEnabled(bool enable)'''
    def setViewport(self, viewport):
        '''void QPainter.setViewport(QRect viewport)'''
    def setViewport(self, x, y, w, h):
        '''void QPainter.setViewport(int x, int y, int w, int h)'''
    def viewport(self):
        '''QRect QPainter.viewport()'''
        return QRect()
    def setWindow(self, window):
        '''void QPainter.setWindow(QRect window)'''
    def setWindow(self, x, y, w, h):
        '''void QPainter.setWindow(int x, int y, int w, int h)'''
    def window(self):
        '''QRect QPainter.window()'''
        return QRect()
    def translate(self, offset):
        '''void QPainter.translate(QPointF offset)'''
    def translate(self, dx, dy):
        '''void QPainter.translate(float dx, float dy)'''
    def translate(self, offset):
        '''void QPainter.translate(QPoint offset)'''
    def rotate(self, a):
        '''void QPainter.rotate(float a)'''
    def shear(self, sh, sv):
        '''void QPainter.shear(float sh, float sv)'''
    def scale(self, sx, sy):
        '''void QPainter.scale(float sx, float sy)'''
    def matrixEnabled(self):
        '''bool QPainter.matrixEnabled()'''
        return bool()
    def setMatrixEnabled(self, enabled):
        '''void QPainter.setMatrixEnabled(bool enabled)'''
    def resetMatrix(self):
        '''void QPainter.resetMatrix()'''
    def deviceMatrix(self):
        '''QMatrix QPainter.deviceMatrix()'''
        return QMatrix()
    def matrix(self):
        '''QMatrix QPainter.matrix()'''
        return QMatrix()
    def setMatrix(self, matrix, combine = False):
        '''void QPainter.setMatrix(QMatrix matrix, bool combine = False)'''
    def restore(self):
        '''void QPainter.restore()'''
    def save(self):
        '''void QPainter.save()'''
    def hasClipping(self):
        '''bool QPainter.hasClipping()'''
        return bool()
    def setClipping(self, enable):
        '''void QPainter.setClipping(bool enable)'''
    def setClipPath(self, path, operation = None):
        '''void QPainter.setClipPath(QPainterPath path, Qt.ClipOperation operation = Qt.ReplaceClip)'''
    def setClipRegion(self, region, operation = None):
        '''void QPainter.setClipRegion(QRegion region, Qt.ClipOperation operation = Qt.ReplaceClip)'''
    def setClipRect(self, rectangle, operation = None):
        '''void QPainter.setClipRect(QRectF rectangle, Qt.ClipOperation operation = Qt.ReplaceClip)'''
    def setClipRect(self, x, y, width, height, operation = None):
        '''void QPainter.setClipRect(int x, int y, int width, int height, Qt.ClipOperation operation = Qt.ReplaceClip)'''
    def setClipRect(self, rectangle, operation = None):
        '''void QPainter.setClipRect(QRect rectangle, Qt.ClipOperation operation = Qt.ReplaceClip)'''
    def clipPath(self):
        '''QPainterPath QPainter.clipPath()'''
        return QPainterPath()
    def clipRegion(self):
        '''QRegion QPainter.clipRegion()'''
        return QRegion()
    def background(self):
        '''QBrush QPainter.background()'''
        return QBrush()
    def setBackground(self, bg):
        '''void QPainter.setBackground(QBrush bg)'''
    def setBrushOrigin(self):
        '''QPointF QPainter.setBrushOrigin()'''
        return QPointF()
    def setBrushOrigin(self, x, y):
        '''void QPainter.setBrushOrigin(int x, int y)'''
    def setBrushOrigin(self, p):
        '''void QPainter.setBrushOrigin(QPoint p)'''
    def brushOrigin(self):
        '''QPoint QPainter.brushOrigin()'''
        return QPoint()
    def backgroundMode(self):
        '''Qt.BGMode QPainter.backgroundMode()'''
        return Qt.BGMode()
    def setBackgroundMode(self, mode):
        '''void QPainter.setBackgroundMode(Qt.BGMode mode)'''
    def brush(self):
        '''QBrush QPainter.brush()'''
        return QBrush()
    def setBrush(self, brush):
        '''void QPainter.setBrush(QBrush brush)'''
    def setBrush(self, style):
        '''void QPainter.setBrush(Qt.BrushStyle style)'''
    def pen(self):
        '''QPen QPainter.pen()'''
        return QPen()
    def setPen(self, color):
        '''void QPainter.setPen(QColor color)'''
    def setPen(self, pen):
        '''void QPainter.setPen(QPen pen)'''
    def setPen(self, style):
        '''void QPainter.setPen(Qt.PenStyle style)'''
    def fontInfo(self):
        '''QFontInfo QPainter.fontInfo()'''
        return QFontInfo()
    def fontMetrics(self):
        '''QFontMetrics QPainter.fontMetrics()'''
        return QFontMetrics()
    def setFont(self, f):
        '''void QPainter.setFont(QFont f)'''
    def font(self):
        '''QFont QPainter.font()'''
        return QFont()
    def compositionMode(self):
        '''QPainter.CompositionMode QPainter.compositionMode()'''
        return QPainter.CompositionMode()
    def setCompositionMode(self, mode):
        '''void QPainter.setCompositionMode(QPainter.CompositionMode mode)'''
    def initFrom(self, widget):
        '''void QPainter.initFrom(QWidget widget)'''
    def isActive(self):
        '''bool QPainter.isActive()'''
        return bool()
    def end(self):
        '''bool QPainter.end()'''
        return bool()
    def begin(self):
        '''QPaintDevice QPainter.begin()'''
        return QPaintDevice()
    def device(self):
        '''QPaintDevice QPainter.device()'''
        return QPaintDevice()
    def __exit__(self, type, value, traceback):
        '''void QPainter.__exit__(object type, object value, object traceback)'''
    def __enter__(self):
        '''object QPainter.__enter__()'''
        return object()
    class PixmapFragment():
        """"""
        height = None # float - member
        opacity = None # float - member
        rotation = None # float - member
        scaleX = None # float - member
        scaleY = None # float - member
        sourceLeft = None # float - member
        sourceTop = None # float - member
        width = None # float - member
        x = None # float - member
        y = None # float - member
        def __init__(self):
            '''void QPainter.PixmapFragment.__init__()'''
        def __init__(self):
            '''QPainter.PixmapFragment QPainter.PixmapFragment.__init__()'''
            return QPainter.PixmapFragment()
        def create(self, pos, sourceRect, scaleX = 1, scaleY = 1, rotation = 0, opacity = 1):
            '''static QPainter.PixmapFragment QPainter.PixmapFragment.create(QPointF pos, QRectF sourceRect, float scaleX = 1, float scaleY = 1, float rotation = 0, float opacity = 1)'''
            return QPainter.PixmapFragment()
    class PixmapFragmentHints():
        """"""
        def __init__(self):
            '''QPainter.PixmapFragmentHints QPainter.PixmapFragmentHints.__init__()'''
            return QPainter.PixmapFragmentHints()
        def __init__(self):
            '''int QPainter.PixmapFragmentHints.__init__()'''
            return int()
        def __init__(self):
            '''void QPainter.PixmapFragmentHints.__init__()'''
        def __bool__(self):
            '''int QPainter.PixmapFragmentHints.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QPainter.PixmapFragmentHints.__ne__(QPainter.PixmapFragmentHints f)'''
            return bool()
        def __eq__(self, f):
            '''bool QPainter.PixmapFragmentHints.__eq__(QPainter.PixmapFragmentHints f)'''
            return bool()
        def __invert__(self):
            '''QPainter.PixmapFragmentHints QPainter.PixmapFragmentHints.__invert__()'''
            return QPainter.PixmapFragmentHints()
        def __and__(self, mask):
            '''QPainter.PixmapFragmentHints QPainter.PixmapFragmentHints.__and__(int mask)'''
            return QPainter.PixmapFragmentHints()
        def __xor__(self, f):
            '''QPainter.PixmapFragmentHints QPainter.PixmapFragmentHints.__xor__(QPainter.PixmapFragmentHints f)'''
            return QPainter.PixmapFragmentHints()
        def __xor__(self, f):
            '''QPainter.PixmapFragmentHints QPainter.PixmapFragmentHints.__xor__(int f)'''
            return QPainter.PixmapFragmentHints()
        def __or__(self, f):
            '''QPainter.PixmapFragmentHints QPainter.PixmapFragmentHints.__or__(QPainter.PixmapFragmentHints f)'''
            return QPainter.PixmapFragmentHints()
        def __or__(self, f):
            '''QPainter.PixmapFragmentHints QPainter.PixmapFragmentHints.__or__(int f)'''
            return QPainter.PixmapFragmentHints()
        def __int__(self):
            '''int QPainter.PixmapFragmentHints.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QPainter.PixmapFragmentHints QPainter.PixmapFragmentHints.__ixor__(QPainter.PixmapFragmentHints f)'''
            return QPainter.PixmapFragmentHints()
        def __ior__(self, f):
            '''QPainter.PixmapFragmentHints QPainter.PixmapFragmentHints.__ior__(QPainter.PixmapFragmentHints f)'''
            return QPainter.PixmapFragmentHints()
        def __iand__(self, mask):
            '''QPainter.PixmapFragmentHints QPainter.PixmapFragmentHints.__iand__(int mask)'''
            return QPainter.PixmapFragmentHints()
    class RenderHints():
        """"""
        def __init__(self):
            '''QPainter.RenderHints QPainter.RenderHints.__init__()'''
            return QPainter.RenderHints()
        def __init__(self):
            '''int QPainter.RenderHints.__init__()'''
            return int()
        def __init__(self):
            '''void QPainter.RenderHints.__init__()'''
        def __bool__(self):
            '''int QPainter.RenderHints.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QPainter.RenderHints.__ne__(QPainter.RenderHints f)'''
            return bool()
        def __eq__(self, f):
            '''bool QPainter.RenderHints.__eq__(QPainter.RenderHints f)'''
            return bool()
        def __invert__(self):
            '''QPainter.RenderHints QPainter.RenderHints.__invert__()'''
            return QPainter.RenderHints()
        def __and__(self, mask):
            '''QPainter.RenderHints QPainter.RenderHints.__and__(int mask)'''
            return QPainter.RenderHints()
        def __xor__(self, f):
            '''QPainter.RenderHints QPainter.RenderHints.__xor__(QPainter.RenderHints f)'''
            return QPainter.RenderHints()
        def __xor__(self, f):
            '''QPainter.RenderHints QPainter.RenderHints.__xor__(int f)'''
            return QPainter.RenderHints()
        def __or__(self, f):
            '''QPainter.RenderHints QPainter.RenderHints.__or__(QPainter.RenderHints f)'''
            return QPainter.RenderHints()
        def __or__(self, f):
            '''QPainter.RenderHints QPainter.RenderHints.__or__(int f)'''
            return QPainter.RenderHints()
        def __int__(self):
            '''int QPainter.RenderHints.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QPainter.RenderHints QPainter.RenderHints.__ixor__(QPainter.RenderHints f)'''
            return QPainter.RenderHints()
        def __ior__(self, f):
            '''QPainter.RenderHints QPainter.RenderHints.__ior__(QPainter.RenderHints f)'''
            return QPainter.RenderHints()
        def __iand__(self, mask):
            '''QPainter.RenderHints QPainter.RenderHints.__iand__(int mask)'''
            return QPainter.RenderHints()


class QTextItem():
    """"""
    # Enum QTextItem.RenderFlag
    RightToLeft = 0
    Overline = 0
    Underline = 0
    StrikeOut = 0

    def __init__(self):
        '''void QTextItem.__init__()'''
    def __init__(self):
        '''QTextItem QTextItem.__init__()'''
        return QTextItem()
    def font(self):
        '''QFont QTextItem.font()'''
        return QFont()
    def text(self):
        '''QString QTextItem.text()'''
        return QString()
    def renderFlags(self):
        '''QTextItem.RenderFlags QTextItem.renderFlags()'''
        return QTextItem.RenderFlags()
    def width(self):
        '''float QTextItem.width()'''
        return float()
    def ascent(self):
        '''float QTextItem.ascent()'''
        return float()
    def descent(self):
        '''float QTextItem.descent()'''
        return float()
    class RenderFlags():
        """"""
        def __init__(self):
            '''QTextItem.RenderFlags QTextItem.RenderFlags.__init__()'''
            return QTextItem.RenderFlags()
        def __init__(self):
            '''int QTextItem.RenderFlags.__init__()'''
            return int()
        def __init__(self):
            '''void QTextItem.RenderFlags.__init__()'''
        def __bool__(self):
            '''int QTextItem.RenderFlags.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QTextItem.RenderFlags.__ne__(QTextItem.RenderFlags f)'''
            return bool()
        def __eq__(self, f):
            '''bool QTextItem.RenderFlags.__eq__(QTextItem.RenderFlags f)'''
            return bool()
        def __invert__(self):
            '''QTextItem.RenderFlags QTextItem.RenderFlags.__invert__()'''
            return QTextItem.RenderFlags()
        def __and__(self, mask):
            '''QTextItem.RenderFlags QTextItem.RenderFlags.__and__(int mask)'''
            return QTextItem.RenderFlags()
        def __xor__(self, f):
            '''QTextItem.RenderFlags QTextItem.RenderFlags.__xor__(QTextItem.RenderFlags f)'''
            return QTextItem.RenderFlags()
        def __xor__(self, f):
            '''QTextItem.RenderFlags QTextItem.RenderFlags.__xor__(int f)'''
            return QTextItem.RenderFlags()
        def __or__(self, f):
            '''QTextItem.RenderFlags QTextItem.RenderFlags.__or__(QTextItem.RenderFlags f)'''
            return QTextItem.RenderFlags()
        def __or__(self, f):
            '''QTextItem.RenderFlags QTextItem.RenderFlags.__or__(int f)'''
            return QTextItem.RenderFlags()
        def __int__(self):
            '''int QTextItem.RenderFlags.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QTextItem.RenderFlags QTextItem.RenderFlags.__ixor__(QTextItem.RenderFlags f)'''
            return QTextItem.RenderFlags()
        def __ior__(self, f):
            '''QTextItem.RenderFlags QTextItem.RenderFlags.__ior__(QTextItem.RenderFlags f)'''
            return QTextItem.RenderFlags()
        def __iand__(self, mask):
            '''QTextItem.RenderFlags QTextItem.RenderFlags.__iand__(int mask)'''
            return QTextItem.RenderFlags()


class QPaintEngine():
    """"""
    # Enum QPaintEngine.Type
    X11 = 0
    Windows = 0
    QuickDraw = 0
    CoreGraphics = 0
    MacPrinter = 0
    QWindowSystem = 0
    PostScript = 0
    OpenGL = 0
    Picture = 0
    SVG = 0
    Raster = 0
    Direct3D = 0
    Pdf = 0
    OpenVG = 0
    OpenGL2 = 0
    PaintBuffer = 0
    Blitter = 0
    User = 0
    MaxUser = 0

    # Enum QPaintEngine.PolygonDrawMode
    OddEvenMode = 0
    WindingMode = 0
    ConvexMode = 0
    PolylineMode = 0

    # Enum QPaintEngine.DirtyFlag
    DirtyPen = 0
    DirtyBrush = 0
    DirtyBrushOrigin = 0
    DirtyFont = 0
    DirtyBackground = 0
    DirtyBackgroundMode = 0
    DirtyTransform = 0
    DirtyClipRegion = 0
    DirtyClipPath = 0
    DirtyHints = 0
    DirtyCompositionMode = 0
    DirtyClipEnabled = 0
    DirtyOpacity = 0
    AllDirty = 0

    # Enum QPaintEngine.PaintEngineFeature
    PrimitiveTransform = 0
    PatternTransform = 0
    PixmapTransform = 0
    PatternBrush = 0
    LinearGradientFill = 0
    RadialGradientFill = 0
    ConicalGradientFill = 0
    AlphaBlend = 0
    PorterDuff = 0
    PainterPaths = 0
    Antialiasing = 0
    BrushStroke = 0
    ConstantOpacity = 0
    MaskedBrush = 0
    PaintOutsidePaintEvent = 0
    PerspectiveTransform = 0
    BlendModes = 0
    ObjectBoundingModeGradients = 0
    RasterOpModes = 0
    AllFeatures = 0

    def __init__(self, features = 0):
        '''void QPaintEngine.__init__(QPaintEngine.PaintEngineFeatures features = 0)'''
    def painter(self):
        '''QPainter QPaintEngine.painter()'''
        return QPainter()
    def hasFeature(self, feature):
        '''bool QPaintEngine.hasFeature(QPaintEngine.PaintEngineFeatures feature)'''
        return bool()
    def type(self):
        '''abstract QPaintEngine.Type QPaintEngine.type()'''
        return QPaintEngine.Type()
    def paintDevice(self):
        '''QPaintDevice QPaintEngine.paintDevice()'''
        return QPaintDevice()
    def setPaintDevice(self, device):
        '''void QPaintEngine.setPaintDevice(QPaintDevice device)'''
    def drawImage(self, r, pm, sr, flags = None):
        '''void QPaintEngine.drawImage(QRectF r, QImage pm, QRectF sr, Qt.ImageConversionFlags flags = Qt.AutoColor)'''
    def drawTiledPixmap(self, r, pixmap, s):
        '''void QPaintEngine.drawTiledPixmap(QRectF r, QPixmap pixmap, QPointF s)'''
    def drawTextItem(self, p, textItem):
        '''void QPaintEngine.drawTextItem(QPointF p, QTextItem textItem)'''
    def drawPixmap(self, r, pm, sr):
        '''abstract void QPaintEngine.drawPixmap(QRectF r, QPixmap pm, QRectF sr)'''
    def drawPolygon(self, points, mode):
        '''void QPaintEngine.drawPolygon(QPointF points, QPaintEngine.PolygonDrawMode mode)'''
    def drawPolygon(self, points, mode):
        '''void QPaintEngine.drawPolygon(QPoint points, QPaintEngine.PolygonDrawMode mode)'''
    def drawPoints(self, points):
        '''void QPaintEngine.drawPoints(QPointF points)'''
    def drawPoints(self, points):
        '''void QPaintEngine.drawPoints(QPoint points)'''
    def drawPath(self, path):
        '''void QPaintEngine.drawPath(QPainterPath path)'''
    def drawEllipse(self, r):
        '''void QPaintEngine.drawEllipse(QRectF r)'''
    def drawEllipse(self, r):
        '''void QPaintEngine.drawEllipse(QRect r)'''
    def drawLines(self, lines):
        '''void QPaintEngine.drawLines(QLine lines)'''
    def drawLines(self, lines):
        '''void QPaintEngine.drawLines(QLineF lines)'''
    def drawRects(self, rects):
        '''void QPaintEngine.drawRects(QRect rects)'''
    def drawRects(self, rects):
        '''void QPaintEngine.drawRects(QRectF rects)'''
    def updateState(self, state):
        '''abstract void QPaintEngine.updateState(QPaintEngineState state)'''
    def end(self):
        '''abstract bool QPaintEngine.end()'''
        return bool()
    def begin(self, pdev):
        '''abstract bool QPaintEngine.begin(QPaintDevice pdev)'''
        return bool()
    def setActive(self, newState):
        '''void QPaintEngine.setActive(bool newState)'''
    def isActive(self):
        '''bool QPaintEngine.isActive()'''
        return bool()
    class PaintEngineFeatures():
        """"""
        def __init__(self):
            '''QPaintEngine.PaintEngineFeatures QPaintEngine.PaintEngineFeatures.__init__()'''
            return QPaintEngine.PaintEngineFeatures()
        def __init__(self):
            '''int QPaintEngine.PaintEngineFeatures.__init__()'''
            return int()
        def __init__(self):
            '''void QPaintEngine.PaintEngineFeatures.__init__()'''
        def __bool__(self):
            '''int QPaintEngine.PaintEngineFeatures.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QPaintEngine.PaintEngineFeatures.__ne__(QPaintEngine.PaintEngineFeatures f)'''
            return bool()
        def __eq__(self, f):
            '''bool QPaintEngine.PaintEngineFeatures.__eq__(QPaintEngine.PaintEngineFeatures f)'''
            return bool()
        def __invert__(self):
            '''QPaintEngine.PaintEngineFeatures QPaintEngine.PaintEngineFeatures.__invert__()'''
            return QPaintEngine.PaintEngineFeatures()
        def __and__(self, mask):
            '''QPaintEngine.PaintEngineFeatures QPaintEngine.PaintEngineFeatures.__and__(int mask)'''
            return QPaintEngine.PaintEngineFeatures()
        def __xor__(self, f):
            '''QPaintEngine.PaintEngineFeatures QPaintEngine.PaintEngineFeatures.__xor__(QPaintEngine.PaintEngineFeatures f)'''
            return QPaintEngine.PaintEngineFeatures()
        def __xor__(self, f):
            '''QPaintEngine.PaintEngineFeatures QPaintEngine.PaintEngineFeatures.__xor__(int f)'''
            return QPaintEngine.PaintEngineFeatures()
        def __or__(self, f):
            '''QPaintEngine.PaintEngineFeatures QPaintEngine.PaintEngineFeatures.__or__(QPaintEngine.PaintEngineFeatures f)'''
            return QPaintEngine.PaintEngineFeatures()
        def __or__(self, f):
            '''QPaintEngine.PaintEngineFeatures QPaintEngine.PaintEngineFeatures.__or__(int f)'''
            return QPaintEngine.PaintEngineFeatures()
        def __int__(self):
            '''int QPaintEngine.PaintEngineFeatures.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QPaintEngine.PaintEngineFeatures QPaintEngine.PaintEngineFeatures.__ixor__(QPaintEngine.PaintEngineFeatures f)'''
            return QPaintEngine.PaintEngineFeatures()
        def __ior__(self, f):
            '''QPaintEngine.PaintEngineFeatures QPaintEngine.PaintEngineFeatures.__ior__(QPaintEngine.PaintEngineFeatures f)'''
            return QPaintEngine.PaintEngineFeatures()
        def __iand__(self, mask):
            '''QPaintEngine.PaintEngineFeatures QPaintEngine.PaintEngineFeatures.__iand__(int mask)'''
            return QPaintEngine.PaintEngineFeatures()
    class DirtyFlags():
        """"""
        def __init__(self):
            '''QPaintEngine.DirtyFlags QPaintEngine.DirtyFlags.__init__()'''
            return QPaintEngine.DirtyFlags()
        def __init__(self):
            '''int QPaintEngine.DirtyFlags.__init__()'''
            return int()
        def __init__(self):
            '''void QPaintEngine.DirtyFlags.__init__()'''
        def __bool__(self):
            '''int QPaintEngine.DirtyFlags.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QPaintEngine.DirtyFlags.__ne__(QPaintEngine.DirtyFlags f)'''
            return bool()
        def __eq__(self, f):
            '''bool QPaintEngine.DirtyFlags.__eq__(QPaintEngine.DirtyFlags f)'''
            return bool()
        def __invert__(self):
            '''QPaintEngine.DirtyFlags QPaintEngine.DirtyFlags.__invert__()'''
            return QPaintEngine.DirtyFlags()
        def __and__(self, mask):
            '''QPaintEngine.DirtyFlags QPaintEngine.DirtyFlags.__and__(int mask)'''
            return QPaintEngine.DirtyFlags()
        def __xor__(self, f):
            '''QPaintEngine.DirtyFlags QPaintEngine.DirtyFlags.__xor__(QPaintEngine.DirtyFlags f)'''
            return QPaintEngine.DirtyFlags()
        def __xor__(self, f):
            '''QPaintEngine.DirtyFlags QPaintEngine.DirtyFlags.__xor__(int f)'''
            return QPaintEngine.DirtyFlags()
        def __or__(self, f):
            '''QPaintEngine.DirtyFlags QPaintEngine.DirtyFlags.__or__(QPaintEngine.DirtyFlags f)'''
            return QPaintEngine.DirtyFlags()
        def __or__(self, f):
            '''QPaintEngine.DirtyFlags QPaintEngine.DirtyFlags.__or__(int f)'''
            return QPaintEngine.DirtyFlags()
        def __int__(self):
            '''int QPaintEngine.DirtyFlags.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QPaintEngine.DirtyFlags QPaintEngine.DirtyFlags.__ixor__(QPaintEngine.DirtyFlags f)'''
            return QPaintEngine.DirtyFlags()
        def __ior__(self, f):
            '''QPaintEngine.DirtyFlags QPaintEngine.DirtyFlags.__ior__(QPaintEngine.DirtyFlags f)'''
            return QPaintEngine.DirtyFlags()
        def __iand__(self, mask):
            '''QPaintEngine.DirtyFlags QPaintEngine.DirtyFlags.__iand__(int mask)'''
            return QPaintEngine.DirtyFlags()


class QPaintEngineState():
    """"""
    def __init__(self):
        '''void QPaintEngineState.__init__()'''
    def __init__(self):
        '''QPaintEngineState QPaintEngineState.__init__()'''
        return QPaintEngineState()
    def penNeedsResolving(self):
        '''bool QPaintEngineState.penNeedsResolving()'''
        return bool()
    def brushNeedsResolving(self):
        '''bool QPaintEngineState.brushNeedsResolving()'''
        return bool()
    def transform(self):
        '''QTransform QPaintEngineState.transform()'''
        return QTransform()
    def painter(self):
        '''QPainter QPaintEngineState.painter()'''
        return QPainter()
    def compositionMode(self):
        '''QPainter.CompositionMode QPaintEngineState.compositionMode()'''
        return QPainter.CompositionMode()
    def renderHints(self):
        '''QPainter.RenderHints QPaintEngineState.renderHints()'''
        return QPainter.RenderHints()
    def isClipEnabled(self):
        '''bool QPaintEngineState.isClipEnabled()'''
        return bool()
    def clipPath(self):
        '''QPainterPath QPaintEngineState.clipPath()'''
        return QPainterPath()
    def clipRegion(self):
        '''QRegion QPaintEngineState.clipRegion()'''
        return QRegion()
    def clipOperation(self):
        '''Qt.ClipOperation QPaintEngineState.clipOperation()'''
        return Qt.ClipOperation()
    def opacity(self):
        '''float QPaintEngineState.opacity()'''
        return float()
    def matrix(self):
        '''QMatrix QPaintEngineState.matrix()'''
        return QMatrix()
    def font(self):
        '''QFont QPaintEngineState.font()'''
        return QFont()
    def backgroundMode(self):
        '''Qt.BGMode QPaintEngineState.backgroundMode()'''
        return Qt.BGMode()
    def backgroundBrush(self):
        '''QBrush QPaintEngineState.backgroundBrush()'''
        return QBrush()
    def brushOrigin(self):
        '''QPointF QPaintEngineState.brushOrigin()'''
        return QPointF()
    def brush(self):
        '''QBrush QPaintEngineState.brush()'''
        return QBrush()
    def pen(self):
        '''QPen QPaintEngineState.pen()'''
        return QPen()
    def state(self):
        '''QPaintEngine.DirtyFlags QPaintEngineState.state()'''
        return QPaintEngine.DirtyFlags()


class QPainterPath():
    """"""
    # Enum QPainterPath.ElementType
    MoveToElement = 0
    LineToElement = 0
    CurveToElement = 0
    CurveToDataElement = 0

    def __init__(self):
        '''void QPainterPath.__init__()'''
    def __init__(self, startPoint):
        '''void QPainterPath.__init__(QPointF startPoint)'''
    def __init__(self, other):
        '''void QPainterPath.__init__(QPainterPath other)'''
    def __mul__(self, m):
        '''QPainterPath QPainterPath.__mul__(QMatrix m)'''
        return QPainterPath()
    def __mul__(self, m):
        '''QPainterPath QPainterPath.__mul__(QTransform m)'''
        return QPainterPath()
    def swap(self, other):
        '''void QPainterPath.swap(QPainterPath other)'''
    def translated(self, dx, dy):
        '''QPainterPath QPainterPath.translated(float dx, float dy)'''
        return QPainterPath()
    def translated(self, offset):
        '''QPainterPath QPainterPath.translated(QPointF offset)'''
        return QPainterPath()
    def translate(self, dx, dy):
        '''void QPainterPath.translate(float dx, float dy)'''
    def translate(self, offset):
        '''void QPainterPath.translate(QPointF offset)'''
    def __isub__(self, other):
        '''QPainterPath QPainterPath.__isub__(QPainterPath other)'''
        return QPainterPath()
    def __iadd__(self, other):
        '''QPainterPath QPainterPath.__iadd__(QPainterPath other)'''
        return QPainterPath()
    def __ior__(self, other):
        '''QPainterPath QPainterPath.__ior__(QPainterPath other)'''
        return QPainterPath()
    def __iand__(self, other):
        '''QPainterPath QPainterPath.__iand__(QPainterPath other)'''
        return QPainterPath()
    def __sub__(self, other):
        '''QPainterPath QPainterPath.__sub__(QPainterPath other)'''
        return QPainterPath()
    def __add__(self, other):
        '''QPainterPath QPainterPath.__add__(QPainterPath other)'''
        return QPainterPath()
    def __or__(self, other):
        '''QPainterPath QPainterPath.__or__(QPainterPath other)'''
        return QPainterPath()
    def __and__(self, other):
        '''QPainterPath QPainterPath.__and__(QPainterPath other)'''
        return QPainterPath()
    def simplified(self):
        '''QPainterPath QPainterPath.simplified()'''
        return QPainterPath()
    def addRoundedRect(self, rect, xRadius, yRadius, mode = None):
        '''void QPainterPath.addRoundedRect(QRectF rect, float xRadius, float yRadius, Qt.SizeMode mode = Qt.AbsoluteSize)'''
    def addRoundedRect(self, x, y, w, h, xRadius, yRadius, mode = None):
        '''void QPainterPath.addRoundedRect(float x, float y, float w, float h, float xRadius, float yRadius, Qt.SizeMode mode = Qt.AbsoluteSize)'''
    def subtractedInverted(self, r):
        '''QPainterPath QPainterPath.subtractedInverted(QPainterPath r)'''
        return QPainterPath()
    def subtracted(self, r):
        '''QPainterPath QPainterPath.subtracted(QPainterPath r)'''
        return QPainterPath()
    def intersected(self, r):
        '''QPainterPath QPainterPath.intersected(QPainterPath r)'''
        return QPainterPath()
    def united(self, r):
        '''QPainterPath QPainterPath.united(QPainterPath r)'''
        return QPainterPath()
    def slopeAtPercent(self, t):
        '''float QPainterPath.slopeAtPercent(float t)'''
        return float()
    def angleAtPercent(self, t):
        '''float QPainterPath.angleAtPercent(float t)'''
        return float()
    def pointAtPercent(self, t):
        '''QPointF QPainterPath.pointAtPercent(float t)'''
        return QPointF()
    def percentAtLength(self, t):
        '''float QPainterPath.percentAtLength(float t)'''
        return float()
    def length(self):
        '''float QPainterPath.length()'''
        return float()
    def addRoundRect(self, rect, xRnd, yRnd):
        '''void QPainterPath.addRoundRect(QRectF rect, int xRnd, int yRnd)'''
    def addRoundRect(self, x, y, w, h, xRnd, yRnd):
        '''void QPainterPath.addRoundRect(float x, float y, float w, float h, int xRnd, int yRnd)'''
    def addRoundRect(self, rect, roundness):
        '''void QPainterPath.addRoundRect(QRectF rect, int roundness)'''
    def addRoundRect(self, x, y, w, h, roundness):
        '''void QPainterPath.addRoundRect(float x, float y, float w, float h, int roundness)'''
    def setElementPositionAt(self, i, x, y):
        '''void QPainterPath.setElementPositionAt(int i, float x, float y)'''
    def elementAt(self, i):
        '''QPainterPath.Element QPainterPath.elementAt(int i)'''
        return QPainterPath.Element()
    def elementCount(self):
        '''int QPainterPath.elementCount()'''
        return int()
    def isEmpty(self):
        '''bool QPainterPath.isEmpty()'''
        return bool()
    def arcMoveTo(self, rect, angle):
        '''void QPainterPath.arcMoveTo(QRectF rect, float angle)'''
    def arcMoveTo(self, x, y, w, h, angle):
        '''void QPainterPath.arcMoveTo(float x, float y, float w, float h, float angle)'''
    def __ne__(self, other):
        '''bool QPainterPath.__ne__(QPainterPath other)'''
        return bool()
    def __eq__(self, other):
        '''bool QPainterPath.__eq__(QPainterPath other)'''
        return bool()
    def toFillPolygon(self, matrix = QMatrix()):
        '''QPolygonF QPainterPath.toFillPolygon(QMatrix matrix = QMatrix())'''
        return QPolygonF()
    def toFillPolygon(self, matrix):
        '''QPolygonF QPainterPath.toFillPolygon(QTransform matrix)'''
        return QPolygonF()
    def toFillPolygons(self, matrix = QMatrix()):
        '''list-of-QPolygonF QPainterPath.toFillPolygons(QMatrix matrix = QMatrix())'''
        return [QPolygonF()]
    def toFillPolygons(self, matrix):
        '''list-of-QPolygonF QPainterPath.toFillPolygons(QTransform matrix)'''
        return [QPolygonF()]
    def toSubpathPolygons(self, matrix = QMatrix()):
        '''list-of-QPolygonF QPainterPath.toSubpathPolygons(QMatrix matrix = QMatrix())'''
        return [QPolygonF()]
    def toSubpathPolygons(self, matrix):
        '''list-of-QPolygonF QPainterPath.toSubpathPolygons(QTransform matrix)'''
        return [QPolygonF()]
    def toReversed(self):
        '''QPainterPath QPainterPath.toReversed()'''
        return QPainterPath()
    def setFillRule(self, fillRule):
        '''void QPainterPath.setFillRule(Qt.FillRule fillRule)'''
    def fillRule(self):
        '''Qt.FillRule QPainterPath.fillRule()'''
        return Qt.FillRule()
    def controlPointRect(self):
        '''QRectF QPainterPath.controlPointRect()'''
        return QRectF()
    def boundingRect(self):
        '''QRectF QPainterPath.boundingRect()'''
        return QRectF()
    def intersects(self, rect):
        '''bool QPainterPath.intersects(QRectF rect)'''
        return bool()
    def intersects(self, p):
        '''bool QPainterPath.intersects(QPainterPath p)'''
        return bool()
    def contains(self, pt):
        '''bool QPainterPath.contains(QPointF pt)'''
        return bool()
    def contains(self, rect):
        '''bool QPainterPath.contains(QRectF rect)'''
        return bool()
    def contains(self, p):
        '''bool QPainterPath.contains(QPainterPath p)'''
        return bool()
    def connectPath(self, path):
        '''void QPainterPath.connectPath(QPainterPath path)'''
    def addRegion(self, region):
        '''void QPainterPath.addRegion(QRegion region)'''
    def addPath(self, path):
        '''void QPainterPath.addPath(QPainterPath path)'''
    def addText(self, point, f, text):
        '''void QPainterPath.addText(QPointF point, QFont f, QString text)'''
    def addText(self, x, y, f, text):
        '''void QPainterPath.addText(float x, float y, QFont f, QString text)'''
    def addPolygon(self, polygon):
        '''void QPainterPath.addPolygon(QPolygonF polygon)'''
    def addEllipse(self, rect):
        '''void QPainterPath.addEllipse(QRectF rect)'''
    def addEllipse(self, x, y, w, h):
        '''void QPainterPath.addEllipse(float x, float y, float w, float h)'''
    def addEllipse(self, center, rx, ry):
        '''void QPainterPath.addEllipse(QPointF center, float rx, float ry)'''
    def addRect(self, rect):
        '''void QPainterPath.addRect(QRectF rect)'''
    def addRect(self, x, y, w, h):
        '''void QPainterPath.addRect(float x, float y, float w, float h)'''
    def currentPosition(self):
        '''QPointF QPainterPath.currentPosition()'''
        return QPointF()
    def quadTo(self, ctrlPt, endPt):
        '''void QPainterPath.quadTo(QPointF ctrlPt, QPointF endPt)'''
    def quadTo(self, ctrlPtx, ctrlPty, endPtx, endPty):
        '''void QPainterPath.quadTo(float ctrlPtx, float ctrlPty, float endPtx, float endPty)'''
    def cubicTo(self, ctrlPt1, ctrlPt2, endPt):
        '''void QPainterPath.cubicTo(QPointF ctrlPt1, QPointF ctrlPt2, QPointF endPt)'''
    def cubicTo(self, ctrlPt1x, ctrlPt1y, ctrlPt2x, ctrlPt2y, endPtx, endPty):
        '''void QPainterPath.cubicTo(float ctrlPt1x, float ctrlPt1y, float ctrlPt2x, float ctrlPt2y, float endPtx, float endPty)'''
    def arcTo(self, rect, startAngle, arcLength):
        '''void QPainterPath.arcTo(QRectF rect, float startAngle, float arcLength)'''
    def arcTo(self, x, y, w, h, startAngle, arcLenght):
        '''void QPainterPath.arcTo(float x, float y, float w, float h, float startAngle, float arcLenght)'''
    def lineTo(self, p):
        '''void QPainterPath.lineTo(QPointF p)'''
    def lineTo(self, x, y):
        '''void QPainterPath.lineTo(float x, float y)'''
    def moveTo(self, p):
        '''void QPainterPath.moveTo(QPointF p)'''
    def moveTo(self, x, y):
        '''void QPainterPath.moveTo(float x, float y)'''
    def closeSubpath(self):
        '''void QPainterPath.closeSubpath()'''
    class Element():
        """"""
        type = None # QPainterPath.ElementType - member
        x = None # float - member
        y = None # float - member
        def __init__(self):
            '''void QPainterPath.Element.__init__()'''
        def __init__(self):
            '''QPainterPath.Element QPainterPath.Element.__init__()'''
            return QPainterPath.Element()
        def __ne__(self, e):
            '''bool QPainterPath.Element.__ne__(QPainterPath.Element e)'''
            return bool()
        def __eq__(self, e):
            '''bool QPainterPath.Element.__eq__(QPainterPath.Element e)'''
            return bool()
        def isCurveTo(self):
            '''bool QPainterPath.Element.isCurveTo()'''
            return bool()
        def isLineTo(self):
            '''bool QPainterPath.Element.isLineTo()'''
            return bool()
        def isMoveTo(self):
            '''bool QPainterPath.Element.isMoveTo()'''
            return bool()


class QPainterPathStroker():
    """"""
    def __init__(self):
        '''void QPainterPathStroker.__init__()'''
    def dashOffset(self):
        '''float QPainterPathStroker.dashOffset()'''
        return float()
    def setDashOffset(self, offset):
        '''void QPainterPathStroker.setDashOffset(float offset)'''
    def createStroke(self, path):
        '''QPainterPath QPainterPathStroker.createStroke(QPainterPath path)'''
        return QPainterPath()
    def dashPattern(self):
        '''list-of-float QPainterPathStroker.dashPattern()'''
        return [float()]
    def setDashPattern(self):
        '''Qt.PenStyle QPainterPathStroker.setDashPattern()'''
        return Qt.PenStyle()
    def setDashPattern(self, dashPattern):
        '''void QPainterPathStroker.setDashPattern(list-of-float dashPattern)'''
    def curveThreshold(self):
        '''float QPainterPathStroker.curveThreshold()'''
        return float()
    def setCurveThreshold(self, threshold):
        '''void QPainterPathStroker.setCurveThreshold(float threshold)'''
    def miterLimit(self):
        '''float QPainterPathStroker.miterLimit()'''
        return float()
    def setMiterLimit(self, length):
        '''void QPainterPathStroker.setMiterLimit(float length)'''
    def joinStyle(self):
        '''Qt.PenJoinStyle QPainterPathStroker.joinStyle()'''
        return Qt.PenJoinStyle()
    def setJoinStyle(self, style):
        '''void QPainterPathStroker.setJoinStyle(Qt.PenJoinStyle style)'''
    def capStyle(self):
        '''Qt.PenCapStyle QPainterPathStroker.capStyle()'''
        return Qt.PenCapStyle()
    def setCapStyle(self, style):
        '''void QPainterPathStroker.setCapStyle(Qt.PenCapStyle style)'''
    def width(self):
        '''float QPainterPathStroker.width()'''
        return float()
    def setWidth(self, width):
        '''void QPainterPathStroker.setWidth(float width)'''


class QPalette():
    """"""
    # Enum QPalette.ColorRole
    WindowText = 0
    Foreground = 0
    Button = 0
    Light = 0
    Midlight = 0
    Dark = 0
    Mid = 0
    Text = 0
    BrightText = 0
    ButtonText = 0
    Base = 0
    Window = 0
    Background = 0
    Shadow = 0
    Highlight = 0
    HighlightedText = 0
    Link = 0
    LinkVisited = 0
    AlternateBase = 0
    ToolTipBase = 0
    ToolTipText = 0
    NColorRoles = 0
    NoRole = 0

    # Enum QPalette.ColorGroup
    Active = 0
    Disabled = 0
    Inactive = 0
    NColorGroups = 0
    Current = 0
    All = 0
    Normal = 0

    def __init__(self):
        '''void QPalette.__init__()'''
    def __init__(self, button):
        '''void QPalette.__init__(QColor button)'''
    def __init__(self, button):
        '''void QPalette.__init__(Qt.GlobalColor button)'''
    def __init__(self, button, background):
        '''void QPalette.__init__(QColor button, QColor background)'''
    def __init__(self, foreground, button, light, dark, mid, text, bright_text, base, background):
        '''void QPalette.__init__(QBrush foreground, QBrush button, QBrush light, QBrush dark, QBrush mid, QBrush text, QBrush bright_text, QBrush base, QBrush background)'''
    def __init__(self, foreground, background, light, dark, mid, text, base):
        '''void QPalette.__init__(QColor foreground, QColor background, QColor light, QColor dark, QColor mid, QColor text, QColor base)'''
    def __init__(self, palette):
        '''void QPalette.__init__(QPalette palette)'''
    def __init__(self, variant):
        '''void QPalette.__init__(QVariant variant)'''
    def cacheKey(self):
        '''int QPalette.cacheKey()'''
        return int()
    def isBrushSet(self, cg, cr):
        '''bool QPalette.isBrushSet(QPalette.ColorGroup cg, QPalette.ColorRole cr)'''
        return bool()
    def setColor(self, acg, acr, acolor):
        '''void QPalette.setColor(QPalette.ColorGroup acg, QPalette.ColorRole acr, QColor acolor)'''
    def setColor(self, acr, acolor):
        '''void QPalette.setColor(QPalette.ColorRole acr, QColor acolor)'''
    def resolve(self):
        '''QPalette QPalette.resolve()'''
        return QPalette()
    def resolve(self):
        '''int QPalette.resolve()'''
        return int()
    def resolve(self, mask):
        '''void QPalette.resolve(int mask)'''
    def serialNumber(self):
        '''int QPalette.serialNumber()'''
        return int()
    def isCopyOf(self, p):
        '''bool QPalette.isCopyOf(QPalette p)'''
        return bool()
    def __ne__(self, p):
        '''bool QPalette.__ne__(QPalette p)'''
        return bool()
    def __eq__(self, p):
        '''bool QPalette.__eq__(QPalette p)'''
        return bool()
    def toolTipText(self):
        '''QBrush QPalette.toolTipText()'''
        return QBrush()
    def toolTipBase(self):
        '''QBrush QPalette.toolTipBase()'''
        return QBrush()
    def linkVisited(self):
        '''QBrush QPalette.linkVisited()'''
        return QBrush()
    def link(self):
        '''QBrush QPalette.link()'''
        return QBrush()
    def highlightedText(self):
        '''QBrush QPalette.highlightedText()'''
        return QBrush()
    def highlight(self):
        '''QBrush QPalette.highlight()'''
        return QBrush()
    def shadow(self):
        '''QBrush QPalette.shadow()'''
        return QBrush()
    def buttonText(self):
        '''QBrush QPalette.buttonText()'''
        return QBrush()
    def brightText(self):
        '''QBrush QPalette.brightText()'''
        return QBrush()
    def midlight(self):
        '''QBrush QPalette.midlight()'''
        return QBrush()
    def background(self):
        '''QBrush QPalette.background()'''
        return QBrush()
    def window(self):
        '''QBrush QPalette.window()'''
        return QBrush()
    def alternateBase(self):
        '''QBrush QPalette.alternateBase()'''
        return QBrush()
    def base(self):
        '''QBrush QPalette.base()'''
        return QBrush()
    def text(self):
        '''QBrush QPalette.text()'''
        return QBrush()
    def mid(self):
        '''QBrush QPalette.mid()'''
        return QBrush()
    def dark(self):
        '''QBrush QPalette.dark()'''
        return QBrush()
    def light(self):
        '''QBrush QPalette.light()'''
        return QBrush()
    def button(self):
        '''QBrush QPalette.button()'''
        return QBrush()
    def windowText(self):
        '''QBrush QPalette.windowText()'''
        return QBrush()
    def foreground(self):
        '''QBrush QPalette.foreground()'''
        return QBrush()
    def isEqual(self, cr1, cr2):
        '''bool QPalette.isEqual(QPalette.ColorGroup cr1, QPalette.ColorGroup cr2)'''
        return bool()
    def setColorGroup(self, cr, foreground, button, light, dark, mid, text, bright_text, base, background):
        '''void QPalette.setColorGroup(QPalette.ColorGroup cr, QBrush foreground, QBrush button, QBrush light, QBrush dark, QBrush mid, QBrush text, QBrush bright_text, QBrush base, QBrush background)'''
    def setBrush(self, cg, cr, brush):
        '''void QPalette.setBrush(QPalette.ColorGroup cg, QPalette.ColorRole cr, QBrush brush)'''
    def setBrush(self, acr, abrush):
        '''void QPalette.setBrush(QPalette.ColorRole acr, QBrush abrush)'''
    def brush(self, cg, cr):
        '''QBrush QPalette.brush(QPalette.ColorGroup cg, QPalette.ColorRole cr)'''
        return QBrush()
    def brush(self, cr):
        '''QBrush QPalette.brush(QPalette.ColorRole cr)'''
        return QBrush()
    def color(self, cg, cr):
        '''QColor QPalette.color(QPalette.ColorGroup cg, QPalette.ColorRole cr)'''
        return QColor()
    def color(self, cr):
        '''QColor QPalette.color(QPalette.ColorRole cr)'''
        return QColor()
    def setCurrentColorGroup(self, cg):
        '''void QPalette.setCurrentColorGroup(QPalette.ColorGroup cg)'''
    def currentColorGroup(self):
        '''QPalette.ColorGroup QPalette.currentColorGroup()'''
        return QPalette.ColorGroup()


class QPen():
    """"""
    def __init__(self):
        '''void QPen.__init__()'''
    def __init__(self):
        '''Qt.PenStyle QPen.__init__()'''
        return Qt.PenStyle()
    def __init__(self, color):
        '''void QPen.__init__(QColor color)'''
    def __init__(self, brush, width, style = None, cap = None, join = None):
        '''void QPen.__init__(QBrush brush, float width, Qt.PenStyle style = Qt.SolidLine, Qt.PenCapStyle cap = Qt.SquareCap, Qt.PenJoinStyle join = Qt.BevelJoin)'''
    def __init__(self, pen):
        '''void QPen.__init__(QPen pen)'''
    def __init__(self, variant):
        '''void QPen.__init__(QVariant variant)'''
    def swap(self, other):
        '''void QPen.swap(QPen other)'''
    def setCosmetic(self, cosmetic):
        '''void QPen.setCosmetic(bool cosmetic)'''
    def isCosmetic(self):
        '''bool QPen.isCosmetic()'''
        return bool()
    def setDashOffset(self, doffset):
        '''void QPen.setDashOffset(float doffset)'''
    def dashOffset(self):
        '''float QPen.dashOffset()'''
        return float()
    def __ne__(self, p):
        '''bool QPen.__ne__(QPen p)'''
        return bool()
    def __eq__(self, p):
        '''bool QPen.__eq__(QPen p)'''
        return bool()
    def setMiterLimit(self, limit):
        '''void QPen.setMiterLimit(float limit)'''
    def miterLimit(self):
        '''float QPen.miterLimit()'''
        return float()
    def setDashPattern(self, pattern):
        '''void QPen.setDashPattern(list-of-float pattern)'''
    def dashPattern(self):
        '''list-of-float QPen.dashPattern()'''
        return [float()]
    def setJoinStyle(self, pcs):
        '''void QPen.setJoinStyle(Qt.PenJoinStyle pcs)'''
    def joinStyle(self):
        '''Qt.PenJoinStyle QPen.joinStyle()'''
        return Qt.PenJoinStyle()
    def setCapStyle(self, pcs):
        '''void QPen.setCapStyle(Qt.PenCapStyle pcs)'''
    def capStyle(self):
        '''Qt.PenCapStyle QPen.capStyle()'''
        return Qt.PenCapStyle()
    def isSolid(self):
        '''bool QPen.isSolid()'''
        return bool()
    def setBrush(self, brush):
        '''void QPen.setBrush(QBrush brush)'''
    def brush(self):
        '''QBrush QPen.brush()'''
        return QBrush()
    def setColor(self, color):
        '''void QPen.setColor(QColor color)'''
    def color(self):
        '''QColor QPen.color()'''
        return QColor()
    def setWidth(self, width):
        '''void QPen.setWidth(int width)'''
    def width(self):
        '''int QPen.width()'''
        return int()
    def setWidthF(self, width):
        '''void QPen.setWidthF(float width)'''
    def widthF(self):
        '''float QPen.widthF()'''
        return float()
    def setStyle(self):
        '''Qt.PenStyle QPen.setStyle()'''
        return Qt.PenStyle()
    def style(self):
        '''Qt.PenStyle QPen.style()'''
        return Qt.PenStyle()


class QPicture(QPaintDevice):
    """"""
    def __init__(self, formatVersion = None):
        '''void QPicture.__init__(int formatVersion = -1)'''
    def __init__(self):
        '''QPicture QPicture.__init__()'''
        return QPicture()
    def swap(self, other):
        '''void QPicture.swap(QPicture other)'''
    def metric(self, m):
        '''int QPicture.metric(QPaintDevice.PaintDeviceMetric m)'''
        return int()
    def paintEngine(self):
        '''QPaintEngine QPicture.paintEngine()'''
        return QPaintEngine()
    def outputFormatList(self):
        '''static QStringList QPicture.outputFormatList()'''
        return QStringList()
    def inputFormatList(self):
        '''static QStringList QPicture.inputFormatList()'''
        return QStringList()
    def outputFormats(self):
        '''static list-of-QByteArray QPicture.outputFormats()'''
        return [QByteArray()]
    def inputFormats(self):
        '''static list-of-QByteArray QPicture.inputFormats()'''
        return [QByteArray()]
    def pictureFormat(self, fileName):
        '''static str QPicture.pictureFormat(QString fileName)'''
        return str()
    def isDetached(self):
        '''bool QPicture.isDetached()'''
        return bool()
    def detach(self):
        '''void QPicture.detach()'''
    def setBoundingRect(self, r):
        '''void QPicture.setBoundingRect(QRect r)'''
    def boundingRect(self):
        '''QRect QPicture.boundingRect()'''
        return QRect()
    def save(self, dev, format = None):
        '''bool QPicture.save(QIODevice dev, str format = None)'''
        return bool()
    def save(self, fileName, format = None):
        '''bool QPicture.save(QString fileName, str format = None)'''
        return bool()
    def load(self, dev, format = None):
        '''bool QPicture.load(QIODevice dev, str format = None)'''
        return bool()
    def load(self, fileName, format = None):
        '''bool QPicture.load(QString fileName, str format = None)'''
        return bool()
    def play(self, p):
        '''bool QPicture.play(QPainter p)'''
        return bool()
    def setData(self, data):
        '''void QPicture.setData(str data)'''
    def data(self):
        '''str QPicture.data()'''
        return str()
    def size(self):
        '''int QPicture.size()'''
        return int()
    def devType(self):
        '''int QPicture.devType()'''
        return int()
    def isNull(self):
        '''bool QPicture.isNull()'''
        return bool()


class QPictureIO():
    """"""
    def __init__(self):
        '''void QPictureIO.__init__()'''
    def __init__(self, ioDevice, format):
        '''void QPictureIO.__init__(QIODevice ioDevice, str format)'''
    def __init__(self, fileName, format):
        '''void QPictureIO.__init__(QString fileName, str format)'''
    def defineIOHandler(self, format, header, flags, read_picture, write_picture):
        '''static void QPictureIO.defineIOHandler(str format, str header, str flags, callable read_picture, callable write_picture)'''
    def outputFormats(self):
        '''static list-of-QByteArray QPictureIO.outputFormats()'''
        return [QByteArray()]
    def inputFormats(self):
        '''static list-of-QByteArray QPictureIO.inputFormats()'''
        return [QByteArray()]
    def pictureFormat(self, fileName):
        '''static QByteArray QPictureIO.pictureFormat(QString fileName)'''
        return QByteArray()
    def pictureFormat(self):
        '''static QIODevice QPictureIO.pictureFormat()'''
        return QIODevice()
    def write(self):
        '''bool QPictureIO.write()'''
        return bool()
    def read(self):
        '''bool QPictureIO.read()'''
        return bool()
    def setGamma(self):
        '''float QPictureIO.setGamma()'''
        return float()
    def setParameters(self):
        '''str QPictureIO.setParameters()'''
        return str()
    def setDescription(self):
        '''QString QPictureIO.setDescription()'''
        return QString()
    def setQuality(self):
        '''int QPictureIO.setQuality()'''
        return int()
    def setFileName(self):
        '''QString QPictureIO.setFileName()'''
        return QString()
    def setIODevice(self):
        '''QIODevice QPictureIO.setIODevice()'''
        return QIODevice()
    def setFormat(self):
        '''str QPictureIO.setFormat()'''
        return str()
    def setStatus(self):
        '''int QPictureIO.setStatus()'''
        return int()
    def setPicture(self):
        '''QPicture QPictureIO.setPicture()'''
        return QPicture()
    def gamma(self):
        '''float QPictureIO.gamma()'''
        return float()
    def parameters(self):
        '''str QPictureIO.parameters()'''
        return str()
    def description(self):
        '''QString QPictureIO.description()'''
        return QString()
    def quality(self):
        '''int QPictureIO.quality()'''
        return int()
    def fileName(self):
        '''QString QPictureIO.fileName()'''
        return QString()
    def ioDevice(self):
        '''QIODevice QPictureIO.ioDevice()'''
        return QIODevice()
    def format(self):
        '''str QPictureIO.format()'''
        return str()
    def status(self):
        '''int QPictureIO.status()'''
        return int()
    def picture(self):
        '''QPicture QPictureIO.picture()'''
        return QPicture()


class QPixmapCache():
    """"""
    def __init__(self):
        '''void QPixmapCache.__init__()'''
    def __init__(self):
        '''QPixmapCache QPixmapCache.__init__()'''
        return QPixmapCache()
    def setCacheLimit(self):
        '''static int QPixmapCache.setCacheLimit()'''
        return int()
    def replace(self, key, pixmap):
        '''static bool QPixmapCache.replace(QPixmapCache.Key key, QPixmap pixmap)'''
        return bool()
    def remove(self, key):
        '''static void QPixmapCache.remove(QString key)'''
    def remove(self, key):
        '''static void QPixmapCache.remove(QPixmapCache.Key key)'''
    def insert(self, key):
        '''static QPixmap QPixmapCache.insert(QString key)'''
        return QPixmap()
    def insert(self, pixmap):
        '''static QPixmapCache.Key QPixmapCache.insert(QPixmap pixmap)'''
        return QPixmapCache.Key()
    def find(self, key):
        '''static QPixmap QPixmapCache.find(QString key)'''
        return QPixmap()
    def find(self, key, pixmap):
        '''static bool QPixmapCache.find(QString key, QPixmap pixmap)'''
        return bool()
    def find(self, key, pixmap):
        '''static bool QPixmapCache.find(QPixmapCache.Key key, QPixmap pixmap)'''
        return bool()
    def clear(self):
        '''static void QPixmapCache.clear()'''
    def cacheLimit(self):
        '''static int QPixmapCache.cacheLimit()'''
        return int()
    class Key():
        """"""
        def __init__(self):
            '''void QPixmapCache.Key.__init__()'''
        def __init__(self, other):
            '''void QPixmapCache.Key.__init__(QPixmapCache.Key other)'''
        def __ne__(self, key):
            '''bool QPixmapCache.Key.__ne__(QPixmapCache.Key key)'''
            return bool()
        def __eq__(self, key):
            '''bool QPixmapCache.Key.__eq__(QPixmapCache.Key key)'''
            return bool()


class QPlainTextEdit(QAbstractScrollArea):
    """"""
    # Enum QPlainTextEdit.LineWrapMode
    NoWrap = 0
    WidgetWidth = 0

    def __init__(self, parent = None):
        '''void QPlainTextEdit.__init__(QWidget parent = None)'''
    def __init__(self, text, parent = None):
        '''void QPlainTextEdit.__init__(QString text, QWidget parent = None)'''
    def anchorAt(self, pos):
        '''QString QPlainTextEdit.anchorAt(QPoint pos)'''
        return QString()
    def getPaintContext(self):
        '''QAbstractTextDocumentLayout.PaintContext QPlainTextEdit.getPaintContext()'''
        return QAbstractTextDocumentLayout.PaintContext()
    def blockBoundingGeometry(self, block):
        '''QRectF QPlainTextEdit.blockBoundingGeometry(QTextBlock block)'''
        return QRectF()
    def blockBoundingRect(self, block):
        '''QRectF QPlainTextEdit.blockBoundingRect(QTextBlock block)'''
        return QRectF()
    def contentOffset(self):
        '''QPointF QPlainTextEdit.contentOffset()'''
        return QPointF()
    def firstVisibleBlock(self):
        '''QTextBlock QPlainTextEdit.firstVisibleBlock()'''
        return QTextBlock()
    def scrollContentsBy(self, dx, dy):
        '''void QPlainTextEdit.scrollContentsBy(int dx, int dy)'''
    def insertFromMimeData(self, source):
        '''void QPlainTextEdit.insertFromMimeData(QMimeData source)'''
    def canInsertFromMimeData(self, source):
        '''bool QPlainTextEdit.canInsertFromMimeData(QMimeData source)'''
        return bool()
    def createMimeDataFromSelection(self):
        '''QMimeData QPlainTextEdit.createMimeDataFromSelection()'''
        return QMimeData()
    def inputMethodQuery(self, property):
        '''QVariant QPlainTextEdit.inputMethodQuery(Qt.InputMethodQuery property)'''
        return QVariant()
    def inputMethodEvent(self):
        '''QInputMethodEvent QPlainTextEdit.inputMethodEvent()'''
        return QInputMethodEvent()
    def wheelEvent(self, e):
        '''void QPlainTextEdit.wheelEvent(QWheelEvent e)'''
    def changeEvent(self, e):
        '''void QPlainTextEdit.changeEvent(QEvent e)'''
    def showEvent(self):
        '''QShowEvent QPlainTextEdit.showEvent()'''
        return QShowEvent()
    def focusOutEvent(self, e):
        '''void QPlainTextEdit.focusOutEvent(QFocusEvent e)'''
    def focusInEvent(self, e):
        '''void QPlainTextEdit.focusInEvent(QFocusEvent e)'''
    def dropEvent(self, e):
        '''void QPlainTextEdit.dropEvent(QDropEvent e)'''
    def dragMoveEvent(self, e):
        '''void QPlainTextEdit.dragMoveEvent(QDragMoveEvent e)'''
    def dragLeaveEvent(self, e):
        '''void QPlainTextEdit.dragLeaveEvent(QDragLeaveEvent e)'''
    def dragEnterEvent(self, e):
        '''void QPlainTextEdit.dragEnterEvent(QDragEnterEvent e)'''
    def contextMenuEvent(self, e):
        '''void QPlainTextEdit.contextMenuEvent(QContextMenuEvent e)'''
    def focusNextPrevChild(self, next):
        '''bool QPlainTextEdit.focusNextPrevChild(bool next)'''
        return bool()
    def mouseDoubleClickEvent(self, e):
        '''void QPlainTextEdit.mouseDoubleClickEvent(QMouseEvent e)'''
    def mouseReleaseEvent(self, e):
        '''void QPlainTextEdit.mouseReleaseEvent(QMouseEvent e)'''
    def mouseMoveEvent(self, e):
        '''void QPlainTextEdit.mouseMoveEvent(QMouseEvent e)'''
    def mousePressEvent(self, e):
        '''void QPlainTextEdit.mousePressEvent(QMouseEvent e)'''
    def paintEvent(self, e):
        '''void QPlainTextEdit.paintEvent(QPaintEvent e)'''
    def resizeEvent(self, e):
        '''void QPlainTextEdit.resizeEvent(QResizeEvent e)'''
    def keyReleaseEvent(self, e):
        '''void QPlainTextEdit.keyReleaseEvent(QKeyEvent e)'''
    def keyPressEvent(self, e):
        '''void QPlainTextEdit.keyPressEvent(QKeyEvent e)'''
    def timerEvent(self, e):
        '''void QPlainTextEdit.timerEvent(QTimerEvent e)'''
    def event(self, e):
        '''bool QPlainTextEdit.event(QEvent e)'''
        return bool()
    modificationChanged = pyqtSignal() # void modificationChanged(bool) - signal
    blockCountChanged = pyqtSignal() # void blockCountChanged(int) - signal
    updateRequest = pyqtSignal() # void updateRequest(const QRectamp;,int) - signal
    cursorPositionChanged = pyqtSignal() # void cursorPositionChanged() - signal
    selectionChanged = pyqtSignal() # void selectionChanged() - signal
    copyAvailable = pyqtSignal() # void copyAvailable(bool) - signal
    redoAvailable = pyqtSignal() # void redoAvailable(bool) - signal
    undoAvailable = pyqtSignal() # void undoAvailable(bool) - signal
    textChanged = pyqtSignal() # void textChanged() - signal
    def centerCursor(self):
        '''void QPlainTextEdit.centerCursor()'''
    def appendHtml(self, html):
        '''void QPlainTextEdit.appendHtml(QString html)'''
    def appendPlainText(self, text):
        '''void QPlainTextEdit.appendPlainText(QString text)'''
    def insertPlainText(self, text):
        '''void QPlainTextEdit.insertPlainText(QString text)'''
    def selectAll(self):
        '''void QPlainTextEdit.selectAll()'''
    def clear(self):
        '''void QPlainTextEdit.clear()'''
    def redo(self):
        '''void QPlainTextEdit.redo()'''
    def undo(self):
        '''void QPlainTextEdit.undo()'''
    def paste(self):
        '''void QPlainTextEdit.paste()'''
    def copy(self):
        '''void QPlainTextEdit.copy()'''
    def cut(self):
        '''void QPlainTextEdit.cut()'''
    def setPlainText(self, text):
        '''void QPlainTextEdit.setPlainText(QString text)'''
    def blockCount(self):
        '''int QPlainTextEdit.blockCount()'''
        return int()
    def print_(self, printer):
        '''void QPlainTextEdit.print_(QPrinter printer)'''
    def canPaste(self):
        '''bool QPlainTextEdit.canPaste()'''
        return bool()
    def moveCursor(self, operation, mode = None):
        '''void QPlainTextEdit.moveCursor(QTextCursor.MoveOperation operation, QTextCursor.MoveMode mode = QTextCursor.MoveAnchor)'''
    def extraSelections(self):
        '''list-of-QTextEdit.ExtraSelection QPlainTextEdit.extraSelections()'''
        return [QTextEdit.ExtraSelection()]
    def setExtraSelections(self, selections):
        '''void QPlainTextEdit.setExtraSelections(list-of-QTextEdit.ExtraSelection selections)'''
    def setCursorWidth(self, width):
        '''void QPlainTextEdit.setCursorWidth(int width)'''
    def cursorWidth(self):
        '''int QPlainTextEdit.cursorWidth()'''
        return int()
    def setTabStopWidth(self, width):
        '''void QPlainTextEdit.setTabStopWidth(int width)'''
    def tabStopWidth(self):
        '''int QPlainTextEdit.tabStopWidth()'''
        return int()
    def setOverwriteMode(self, overwrite):
        '''void QPlainTextEdit.setOverwriteMode(bool overwrite)'''
    def overwriteMode(self):
        '''bool QPlainTextEdit.overwriteMode()'''
        return bool()
    def cursorRect(self, cursor):
        '''QRect QPlainTextEdit.cursorRect(QTextCursor cursor)'''
        return QRect()
    def cursorRect(self):
        '''QRect QPlainTextEdit.cursorRect()'''
        return QRect()
    def cursorForPosition(self, pos):
        '''QTextCursor QPlainTextEdit.cursorForPosition(QPoint pos)'''
        return QTextCursor()
    def createStandardContextMenu(self):
        '''QMenu QPlainTextEdit.createStandardContextMenu()'''
        return QMenu()
    def loadResource(self, type, name):
        '''QVariant QPlainTextEdit.loadResource(int type, QUrl name)'''
        return QVariant()
    def ensureCursorVisible(self):
        '''void QPlainTextEdit.ensureCursorVisible()'''
    def toPlainText(self):
        '''QString QPlainTextEdit.toPlainText()'''
        return QString()
    def find(self, exp, options = 0):
        '''bool QPlainTextEdit.find(QString exp, QTextDocument.FindFlags options = 0)'''
        return bool()
    def centerOnScroll(self):
        '''bool QPlainTextEdit.centerOnScroll()'''
        return bool()
    def setCenterOnScroll(self, enabled):
        '''void QPlainTextEdit.setCenterOnScroll(bool enabled)'''
    def backgroundVisible(self):
        '''bool QPlainTextEdit.backgroundVisible()'''
        return bool()
    def setBackgroundVisible(self, visible):
        '''void QPlainTextEdit.setBackgroundVisible(bool visible)'''
    def setWordWrapMode(self, policy):
        '''void QPlainTextEdit.setWordWrapMode(QTextOption.WrapMode policy)'''
    def wordWrapMode(self):
        '''QTextOption.WrapMode QPlainTextEdit.wordWrapMode()'''
        return QTextOption.WrapMode()
    def setLineWrapMode(self, mode):
        '''void QPlainTextEdit.setLineWrapMode(QPlainTextEdit.LineWrapMode mode)'''
    def lineWrapMode(self):
        '''QPlainTextEdit.LineWrapMode QPlainTextEdit.lineWrapMode()'''
        return QPlainTextEdit.LineWrapMode()
    def maximumBlockCount(self):
        '''int QPlainTextEdit.maximumBlockCount()'''
        return int()
    def setMaximumBlockCount(self, maximum):
        '''void QPlainTextEdit.setMaximumBlockCount(int maximum)'''
    def setUndoRedoEnabled(self, enable):
        '''void QPlainTextEdit.setUndoRedoEnabled(bool enable)'''
    def isUndoRedoEnabled(self):
        '''bool QPlainTextEdit.isUndoRedoEnabled()'''
        return bool()
    def documentTitle(self):
        '''QString QPlainTextEdit.documentTitle()'''
        return QString()
    def setDocumentTitle(self, title):
        '''void QPlainTextEdit.setDocumentTitle(QString title)'''
    def setTabChangesFocus(self, b):
        '''void QPlainTextEdit.setTabChangesFocus(bool b)'''
    def tabChangesFocus(self):
        '''bool QPlainTextEdit.tabChangesFocus()'''
        return bool()
    def currentCharFormat(self):
        '''QTextCharFormat QPlainTextEdit.currentCharFormat()'''
        return QTextCharFormat()
    def setCurrentCharFormat(self, format):
        '''void QPlainTextEdit.setCurrentCharFormat(QTextCharFormat format)'''
    def mergeCurrentCharFormat(self, modifier):
        '''void QPlainTextEdit.mergeCurrentCharFormat(QTextCharFormat modifier)'''
    def textInteractionFlags(self):
        '''Qt.TextInteractionFlags QPlainTextEdit.textInteractionFlags()'''
        return Qt.TextInteractionFlags()
    def setTextInteractionFlags(self, flags):
        '''void QPlainTextEdit.setTextInteractionFlags(Qt.TextInteractionFlags flags)'''
    def setReadOnly(self, ro):
        '''void QPlainTextEdit.setReadOnly(bool ro)'''
    def isReadOnly(self):
        '''bool QPlainTextEdit.isReadOnly()'''
        return bool()
    def textCursor(self):
        '''QTextCursor QPlainTextEdit.textCursor()'''
        return QTextCursor()
    def setTextCursor(self, cursor):
        '''void QPlainTextEdit.setTextCursor(QTextCursor cursor)'''
    def document(self):
        '''QTextDocument QPlainTextEdit.document()'''
        return QTextDocument()
    def setDocument(self, document):
        '''void QPlainTextEdit.setDocument(QTextDocument document)'''


class QPlainTextDocumentLayout(QAbstractTextDocumentLayout):
    """"""
    def __init__(self, document):
        '''void QPlainTextDocumentLayout.__init__(QTextDocument document)'''
    def documentChanged(self, from_, charsAdded):
        '''int QPlainTextDocumentLayout.documentChanged(int from, int charsAdded)'''
        return int()
    def requestUpdate(self):
        '''void QPlainTextDocumentLayout.requestUpdate()'''
    def cursorWidth(self):
        '''int QPlainTextDocumentLayout.cursorWidth()'''
        return int()
    def setCursorWidth(self, width):
        '''void QPlainTextDocumentLayout.setCursorWidth(int width)'''
    def ensureBlockLayout(self, block):
        '''void QPlainTextDocumentLayout.ensureBlockLayout(QTextBlock block)'''
    def blockBoundingRect(self, block):
        '''QRectF QPlainTextDocumentLayout.blockBoundingRect(QTextBlock block)'''
        return QRectF()
    def frameBoundingRect(self):
        '''QTextFrame QPlainTextDocumentLayout.frameBoundingRect()'''
        return QTextFrame()
    def documentSize(self):
        '''QSizeF QPlainTextDocumentLayout.documentSize()'''
        return QSizeF()
    def pageCount(self):
        '''int QPlainTextDocumentLayout.pageCount()'''
        return int()
    def hitTest(self):
        '''Qt.HitTestAccuracy QPlainTextDocumentLayout.hitTest()'''
        return Qt.HitTestAccuracy()
    def draw(self):
        '''QAbstractTextDocumentLayout.PaintContext QPlainTextDocumentLayout.draw()'''
        return QAbstractTextDocumentLayout.PaintContext()


class QPolygon():
    """"""
    def __init__(self):
        '''void QPolygon.__init__()'''
    def __init__(self, a):
        '''void QPolygon.__init__(QPolygon a)'''
    def __init__(self, v):
        '''void QPolygon.__init__(list-of-QPoint v)'''
    def __init__(self, rectangle, closed = False):
        '''void QPolygon.__init__(QRect rectangle, bool closed = False)'''
    def __init__(self, asize):
        '''void QPolygon.__init__(int asize)'''
    def __init__(self, points):
        '''void QPolygon.__init__(list-of-int points)'''
    def __init__(self, variant):
        '''void QPolygon.__init__(QVariant variant)'''
    def __mul__(self, m):
        '''QPolygon QPolygon.__mul__(QMatrix m)'''
        return QPolygon()
    def __mul__(self, m):
        '''QPolygon QPolygon.__mul__(QTransform m)'''
        return QPolygon()
    def swap(self, other):
        '''void QPolygon.swap(QPolygon other)'''
    def __contains__(self, value):
        '''int QPolygon.__contains__(QPoint value)'''
        return int()
    def __delitem__(self, i):
        '''void QPolygon.__delitem__(int i)'''
    def __delitem__(self, slice):
        '''void QPolygon.__delitem__(slice slice)'''
    def __setitem__(self, i, value):
        '''void QPolygon.__setitem__(int i, QPoint value)'''
    def __setitem__(self, slice, list):
        '''void QPolygon.__setitem__(slice slice, QPolygon list)'''
    def __getitem__(self, i):
        '''QPoint QPolygon.__getitem__(int i)'''
        return QPoint()
    def __getitem__(self, slice):
        '''QPolygon QPolygon.__getitem__(slice slice)'''
        return QPolygon()
    def __lshift__(self, value):
        '''object QPolygon.__lshift__(QPoint value)'''
        return object()
    def __eq__(self, other):
        '''bool QPolygon.__eq__(QPolygon other)'''
        return bool()
    def __iadd__(self, other):
        '''QPolygon QPolygon.__iadd__(QPolygon other)'''
        return QPolygon()
    def __iadd__(self, value):
        '''QPolygon QPolygon.__iadd__(QPoint value)'''
        return QPolygon()
    def __add__(self, other):
        '''QPolygon QPolygon.__add__(QPolygon other)'''
        return QPolygon()
    def __ne__(self, other):
        '''bool QPolygon.__ne__(QPolygon other)'''
        return bool()
    def value(self, i):
        '''QPoint QPolygon.value(int i)'''
        return QPoint()
    def value(self, i, defaultValue):
        '''QPoint QPolygon.value(int i, QPoint defaultValue)'''
        return QPoint()
    def size(self):
        '''int QPolygon.size()'''
        return int()
    def replace(self, i, value):
        '''void QPolygon.replace(int i, QPoint value)'''
    def remove(self, i):
        '''void QPolygon.remove(int i)'''
    def remove(self, i, count):
        '''void QPolygon.remove(int i, int count)'''
    def prepend(self, value):
        '''void QPolygon.prepend(QPoint value)'''
    def mid(self, pos, length = None):
        '''QPolygon QPolygon.mid(int pos, int length = -1)'''
        return QPolygon()
    def lastIndexOf(self, value, from_ = None):
        '''int QPolygon.lastIndexOf(QPoint value, int from = -1)'''
        return int()
    def last(self):
        '''QPoint QPolygon.last()'''
        return QPoint()
    def isEmpty(self):
        '''bool QPolygon.isEmpty()'''
        return bool()
    def insert(self, i, value):
        '''void QPolygon.insert(int i, QPoint value)'''
    def indexOf(self, value, from_ = 0):
        '''int QPolygon.indexOf(QPoint value, int from = 0)'''
        return int()
    def first(self):
        '''QPoint QPolygon.first()'''
        return QPoint()
    def fill(self, value, size = None):
        '''void QPolygon.fill(QPoint value, int size = -1)'''
    def data(self):
        '''sip.voidptr QPolygon.data()'''
        return sip.voidptr()
    def __len__(self):
        '''None QPolygon.__len__()'''
        return None()
    def count(self, value):
        '''int QPolygon.count(QPoint value)'''
        return int()
    def count(self):
        '''int QPolygon.count()'''
        return int()
    def contains(self, value):
        '''bool QPolygon.contains(QPoint value)'''
        return bool()
    def clear(self):
        '''void QPolygon.clear()'''
    def at(self, i):
        '''QPoint QPolygon.at(int i)'''
        return QPoint()
    def append(self, value):
        '''void QPolygon.append(QPoint value)'''
    def translated(self, dx, dy):
        '''QPolygon QPolygon.translated(int dx, int dy)'''
        return QPolygon()
    def translated(self, offset):
        '''QPolygon QPolygon.translated(QPoint offset)'''
        return QPolygon()
    def subtracted(self, r):
        '''QPolygon QPolygon.subtracted(QPolygon r)'''
        return QPolygon()
    def intersected(self, r):
        '''QPolygon QPolygon.intersected(QPolygon r)'''
        return QPolygon()
    def united(self, r):
        '''QPolygon QPolygon.united(QPolygon r)'''
        return QPolygon()
    def containsPoint(self, pt, fillRule):
        '''bool QPolygon.containsPoint(QPoint pt, Qt.FillRule fillRule)'''
        return bool()
    def setPoint(self, index, pt):
        '''void QPolygon.setPoint(int index, QPoint pt)'''
    def setPoint(self, index, x, y):
        '''void QPolygon.setPoint(int index, int x, int y)'''
    def putPoints(self, index, firstx, firsty, *args):
        '''void QPolygon.putPoints(int index, int firstx, int firsty, ... *args)'''
    def putPoints(self, index, nPoints, fromPolygon, from_ = 0):
        '''void QPolygon.putPoints(int index, int nPoints, QPolygon fromPolygon, int from = 0)'''
    def setPoints(self, points):
        '''void QPolygon.setPoints(list-of-int points)'''
    def setPoints(self, firstx, firsty, *args):
        '''void QPolygon.setPoints(int firstx, int firsty, ... *args)'''
    def point(self, index):
        '''QPoint QPolygon.point(int index)'''
        return QPoint()
    def boundingRect(self):
        '''QRect QPolygon.boundingRect()'''
        return QRect()
    def translate(self, dx, dy):
        '''void QPolygon.translate(int dx, int dy)'''
    def translate(self, offset):
        '''void QPolygon.translate(QPoint offset)'''


class QPolygonF():
    """"""
    def __init__(self):
        '''void QPolygonF.__init__()'''
    def __init__(self, a):
        '''void QPolygonF.__init__(QPolygonF a)'''
    def __init__(self, v):
        '''void QPolygonF.__init__(list-of-QPointF v)'''
    def __init__(self, r):
        '''void QPolygonF.__init__(QRectF r)'''
    def __init__(self, a):
        '''void QPolygonF.__init__(QPolygon a)'''
    def __init__(self, asize):
        '''void QPolygonF.__init__(int asize)'''
    def __mul__(self, m):
        '''QPolygonF QPolygonF.__mul__(QMatrix m)'''
        return QPolygonF()
    def __mul__(self, m):
        '''QPolygonF QPolygonF.__mul__(QTransform m)'''
        return QPolygonF()
    def swap(self, other):
        '''void QPolygonF.swap(QPolygonF other)'''
    def __contains__(self, value):
        '''int QPolygonF.__contains__(QPointF value)'''
        return int()
    def __delitem__(self, i):
        '''void QPolygonF.__delitem__(int i)'''
    def __delitem__(self, slice):
        '''void QPolygonF.__delitem__(slice slice)'''
    def __setitem__(self, i, value):
        '''void QPolygonF.__setitem__(int i, QPointF value)'''
    def __setitem__(self, slice, list):
        '''void QPolygonF.__setitem__(slice slice, QPolygonF list)'''
    def __getitem__(self, i):
        '''QPointF QPolygonF.__getitem__(int i)'''
        return QPointF()
    def __getitem__(self, slice):
        '''QPolygonF QPolygonF.__getitem__(slice slice)'''
        return QPolygonF()
    def __lshift__(self, value):
        '''object QPolygonF.__lshift__(QPointF value)'''
        return object()
    def __eq__(self, other):
        '''bool QPolygonF.__eq__(QPolygonF other)'''
        return bool()
    def __iadd__(self, other):
        '''QPolygonF QPolygonF.__iadd__(QPolygonF other)'''
        return QPolygonF()
    def __iadd__(self, value):
        '''QPolygonF QPolygonF.__iadd__(QPointF value)'''
        return QPolygonF()
    def __add__(self, other):
        '''QPolygonF QPolygonF.__add__(QPolygonF other)'''
        return QPolygonF()
    def __ne__(self, other):
        '''bool QPolygonF.__ne__(QPolygonF other)'''
        return bool()
    def value(self, i):
        '''QPointF QPolygonF.value(int i)'''
        return QPointF()
    def value(self, i, defaultValue):
        '''QPointF QPolygonF.value(int i, QPointF defaultValue)'''
        return QPointF()
    def size(self):
        '''int QPolygonF.size()'''
        return int()
    def replace(self, i, value):
        '''void QPolygonF.replace(int i, QPointF value)'''
    def remove(self, i):
        '''void QPolygonF.remove(int i)'''
    def remove(self, i, count):
        '''void QPolygonF.remove(int i, int count)'''
    def prepend(self, value):
        '''void QPolygonF.prepend(QPointF value)'''
    def mid(self, pos, length = None):
        '''QPolygonF QPolygonF.mid(int pos, int length = -1)'''
        return QPolygonF()
    def lastIndexOf(self, value, from_ = None):
        '''int QPolygonF.lastIndexOf(QPointF value, int from = -1)'''
        return int()
    def last(self):
        '''QPointF QPolygonF.last()'''
        return QPointF()
    def isEmpty(self):
        '''bool QPolygonF.isEmpty()'''
        return bool()
    def insert(self, i, value):
        '''void QPolygonF.insert(int i, QPointF value)'''
    def indexOf(self, value, from_ = 0):
        '''int QPolygonF.indexOf(QPointF value, int from = 0)'''
        return int()
    def first(self):
        '''QPointF QPolygonF.first()'''
        return QPointF()
    def fill(self, value, size = None):
        '''void QPolygonF.fill(QPointF value, int size = -1)'''
    def data(self):
        '''sip.voidptr QPolygonF.data()'''
        return sip.voidptr()
    def __len__(self):
        '''None QPolygonF.__len__()'''
        return None()
    def count(self, value):
        '''int QPolygonF.count(QPointF value)'''
        return int()
    def count(self):
        '''int QPolygonF.count()'''
        return int()
    def contains(self, value):
        '''bool QPolygonF.contains(QPointF value)'''
        return bool()
    def clear(self):
        '''void QPolygonF.clear()'''
    def at(self, i):
        '''QPointF QPolygonF.at(int i)'''
        return QPointF()
    def append(self, value):
        '''void QPolygonF.append(QPointF value)'''
    def translated(self, offset):
        '''QPolygonF QPolygonF.translated(QPointF offset)'''
        return QPolygonF()
    def translated(self, dx, dy):
        '''QPolygonF QPolygonF.translated(float dx, float dy)'''
        return QPolygonF()
    def subtracted(self, r):
        '''QPolygonF QPolygonF.subtracted(QPolygonF r)'''
        return QPolygonF()
    def intersected(self, r):
        '''QPolygonF QPolygonF.intersected(QPolygonF r)'''
        return QPolygonF()
    def united(self, r):
        '''QPolygonF QPolygonF.united(QPolygonF r)'''
        return QPolygonF()
    def containsPoint(self, pt, fillRule):
        '''bool QPolygonF.containsPoint(QPointF pt, Qt.FillRule fillRule)'''
        return bool()
    def boundingRect(self):
        '''QRectF QPolygonF.boundingRect()'''
        return QRectF()
    def isClosed(self):
        '''bool QPolygonF.isClosed()'''
        return bool()
    def toPolygon(self):
        '''QPolygon QPolygonF.toPolygon()'''
        return QPolygon()
    def translate(self, offset):
        '''void QPolygonF.translate(QPointF offset)'''
    def translate(self, dx, dy):
        '''void QPolygonF.translate(float dx, float dy)'''


class QPrinter(QPaintDevice):
    """"""
    # Enum QPrinter.Unit
    Millimeter = 0
    Point = 0
    Inch = 0
    Pica = 0
    Didot = 0
    Cicero = 0
    DevicePixel = 0

    # Enum QPrinter.DuplexMode
    DuplexNone = 0
    DuplexAuto = 0
    DuplexLongSide = 0
    DuplexShortSide = 0

    # Enum QPrinter.PrintRange
    AllPages = 0
    Selection = 0
    PageRange = 0
    CurrentPage = 0

    # Enum QPrinter.OutputFormat
    NativeFormat = 0
    PdfFormat = 0
    PostScriptFormat = 0

    # Enum QPrinter.PrinterState
    Idle = 0
    Active = 0
    Aborted = 0
    Error = 0

    # Enum QPrinter.PaperSource
    OnlyOne = 0
    Lower = 0
    Middle = 0
    Manual = 0
    Envelope = 0
    EnvelopeManual = 0
    Auto = 0
    Tractor = 0
    SmallFormat = 0
    LargeFormat = 0
    LargeCapacity = 0
    Cassette = 0
    FormSource = 0
    MaxPageSource = 0

    # Enum QPrinter.ColorMode
    GrayScale = 0
    Color = 0

    # Enum QPrinter.PageOrder
    FirstPageFirst = 0
    LastPageFirst = 0

    # Enum QPrinter.PageSize
    A4 = 0
    B5 = 0
    Letter = 0
    Legal = 0
    Executive = 0
    A0 = 0
    A1 = 0
    A2 = 0
    A3 = 0
    A5 = 0
    A6 = 0
    A7 = 0
    A8 = 0
    A9 = 0
    B0 = 0
    B1 = 0
    B10 = 0
    B2 = 0
    B3 = 0
    B4 = 0
    B6 = 0
    B7 = 0
    B8 = 0
    B9 = 0
    C5E = 0
    Comm10E = 0
    DLE = 0
    Folio = 0
    Ledger = 0
    Tabloid = 0
    Custom = 0

    # Enum QPrinter.Orientation
    Portrait = 0
    Landscape = 0

    # Enum QPrinter.PrinterMode
    ScreenResolution = 0
    PrinterResolution = 0
    HighResolution = 0

    def __init__(self, mode = None):
        '''void QPrinter.__init__(QPrinter.PrinterMode mode = QPrinter.ScreenResolution)'''
    def __init__(self, printer, mode = None):
        '''void QPrinter.__init__(QPrinterInfo printer, QPrinter.PrinterMode mode = QPrinter.ScreenResolution)'''
    def supportsMultipleCopies(self):
        '''bool QPrinter.supportsMultipleCopies()'''
        return bool()
    def copyCount(self):
        '''int QPrinter.copyCount()'''
        return int()
    def setCopyCount(self):
        '''int QPrinter.setCopyCount()'''
        return int()
    def setEngines(self, printEngine, paintEngine):
        '''void QPrinter.setEngines(QPrintEngine printEngine, QPaintEngine paintEngine)'''
    def metric(self):
        '''QPaintDevice.PaintDeviceMetric QPrinter.metric()'''
        return QPaintDevice.PaintDeviceMetric()
    def actualNumCopies(self):
        '''int QPrinter.actualNumCopies()'''
        return int()
    def getPageMargins(self, left, top, right, bottom, unit):
        '''void QPrinter.getPageMargins(float left, float top, float right, float bottom, QPrinter.Unit unit)'''
    def setPageMargins(self, left, top, right, bottom, unit):
        '''void QPrinter.setPageMargins(float left, float top, float right, float bottom, QPrinter.Unit unit)'''
    def duplex(self):
        '''QPrinter.DuplexMode QPrinter.duplex()'''
        return QPrinter.DuplexMode()
    def setDuplex(self, duplex):
        '''void QPrinter.setDuplex(QPrinter.DuplexMode duplex)'''
    def paperSize(self):
        '''QPrinter.PageSize QPrinter.paperSize()'''
        return QPrinter.PageSize()
    def paperSize(self, unit):
        '''QSizeF QPrinter.paperSize(QPrinter.Unit unit)'''
        return QSizeF()
    def setPaperSize(self):
        '''QPrinter.PageSize QPrinter.setPaperSize()'''
        return QPrinter.PageSize()
    def setPaperSize(self, paperSize, unit):
        '''void QPrinter.setPaperSize(QSizeF paperSize, QPrinter.Unit unit)'''
    def isValid(self):
        '''bool QPrinter.isValid()'''
        return bool()
    def doubleSidedPrinting(self):
        '''bool QPrinter.doubleSidedPrinting()'''
        return bool()
    def setDoubleSidedPrinting(self, enable):
        '''void QPrinter.setDoubleSidedPrinting(bool enable)'''
    def printRange(self):
        '''QPrinter.PrintRange QPrinter.printRange()'''
        return QPrinter.PrintRange()
    def setPrintRange(self, range):
        '''void QPrinter.setPrintRange(QPrinter.PrintRange range)'''
    def toPage(self):
        '''int QPrinter.toPage()'''
        return int()
    def fromPage(self):
        '''int QPrinter.fromPage()'''
        return int()
    def setFromTo(self, fromPage, toPage):
        '''void QPrinter.setFromTo(int fromPage, int toPage)'''
    def printEngine(self):
        '''QPrintEngine QPrinter.printEngine()'''
        return QPrintEngine()
    def fontEmbeddingEnabled(self):
        '''bool QPrinter.fontEmbeddingEnabled()'''
        return bool()
    def setFontEmbeddingEnabled(self, enable):
        '''void QPrinter.setFontEmbeddingEnabled(bool enable)'''
    def outputFormat(self):
        '''QPrinter.OutputFormat QPrinter.outputFormat()'''
        return QPrinter.OutputFormat()
    def setOutputFormat(self, format):
        '''void QPrinter.setOutputFormat(QPrinter.OutputFormat format)'''
    def paintEngine(self):
        '''QPaintEngine QPrinter.paintEngine()'''
        return QPaintEngine()
    def printerState(self):
        '''QPrinter.PrinterState QPrinter.printerState()'''
        return QPrinter.PrinterState()
    def abort(self):
        '''bool QPrinter.abort()'''
        return bool()
    def newPage(self):
        '''bool QPrinter.newPage()'''
        return bool()
    def setPrinterSelectionOption(self):
        '''QString QPrinter.setPrinterSelectionOption()'''
        return QString()
    def printerSelectionOption(self):
        '''QString QPrinter.printerSelectionOption()'''
        return QString()
    def pageRect(self):
        '''QRect QPrinter.pageRect()'''
        return QRect()
    def pageRect(self):
        '''QPrinter.Unit QPrinter.pageRect()'''
        return QPrinter.Unit()
    def paperRect(self):
        '''QRect QPrinter.paperRect()'''
        return QRect()
    def paperRect(self):
        '''QPrinter.Unit QPrinter.paperRect()'''
        return QPrinter.Unit()
    def supportedResolutions(self):
        '''list-of-int QPrinter.supportedResolutions()'''
        return [int()]
    def paperSource(self):
        '''QPrinter.PaperSource QPrinter.paperSource()'''
        return QPrinter.PaperSource()
    def setPaperSource(self):
        '''QPrinter.PaperSource QPrinter.setPaperSource()'''
        return QPrinter.PaperSource()
    def numCopies(self):
        '''int QPrinter.numCopies()'''
        return int()
    def setNumCopies(self):
        '''int QPrinter.setNumCopies()'''
        return int()
    def fullPage(self):
        '''bool QPrinter.fullPage()'''
        return bool()
    def setFullPage(self):
        '''bool QPrinter.setFullPage()'''
        return bool()
    def collateCopies(self):
        '''bool QPrinter.collateCopies()'''
        return bool()
    def setCollateCopies(self, collate):
        '''void QPrinter.setCollateCopies(bool collate)'''
    def colorMode(self):
        '''QPrinter.ColorMode QPrinter.colorMode()'''
        return QPrinter.ColorMode()
    def setColorMode(self):
        '''QPrinter.ColorMode QPrinter.setColorMode()'''
        return QPrinter.ColorMode()
    def resolution(self):
        '''int QPrinter.resolution()'''
        return int()
    def setResolution(self):
        '''int QPrinter.setResolution()'''
        return int()
    def pageOrder(self):
        '''QPrinter.PageOrder QPrinter.pageOrder()'''
        return QPrinter.PageOrder()
    def setPageOrder(self):
        '''QPrinter.PageOrder QPrinter.setPageOrder()'''
        return QPrinter.PageOrder()
    def pageSize(self):
        '''QPrinter.PageSize QPrinter.pageSize()'''
        return QPrinter.PageSize()
    def setPageSize(self):
        '''QPrinter.PageSize QPrinter.setPageSize()'''
        return QPrinter.PageSize()
    def orientation(self):
        '''QPrinter.Orientation QPrinter.orientation()'''
        return QPrinter.Orientation()
    def setOrientation(self):
        '''QPrinter.Orientation QPrinter.setOrientation()'''
        return QPrinter.Orientation()
    def creator(self):
        '''QString QPrinter.creator()'''
        return QString()
    def setCreator(self):
        '''QString QPrinter.setCreator()'''
        return QString()
    def docName(self):
        '''QString QPrinter.docName()'''
        return QString()
    def setDocName(self):
        '''QString QPrinter.setDocName()'''
        return QString()
    def printProgram(self):
        '''QString QPrinter.printProgram()'''
        return QString()
    def setPrintProgram(self):
        '''QString QPrinter.setPrintProgram()'''
        return QString()
    def outputFileName(self):
        '''QString QPrinter.outputFileName()'''
        return QString()
    def setOutputFileName(self):
        '''QString QPrinter.setOutputFileName()'''
        return QString()
    def printerName(self):
        '''QString QPrinter.printerName()'''
        return QString()
    def setPrinterName(self):
        '''QString QPrinter.setPrinterName()'''
        return QString()


class QPrintDialog(QAbstractPrintDialog):
    """"""
    def __init__(self, printer, parent = None):
        '''void QPrintDialog.__init__(QPrinter printer, QWidget parent = None)'''
    def __init__(self, parent = None):
        '''void QPrintDialog.__init__(QWidget parent = None)'''
    def accepted(self):
        '''void QPrintDialog.accepted()'''
    accepted = pyqtSignal() # void accepted(QPrinter *) - signal
    def open(self):
        '''void QPrintDialog.open()'''
    def open(self, receiver, member):
        '''void QPrintDialog.open(QObject receiver, SLOT() member)'''
    def open(self, receiver):
        '''void QPrintDialog.open(callable receiver)'''
    def setVisible(self, visible):
        '''void QPrintDialog.setVisible(bool visible)'''
    def options(self):
        '''QAbstractPrintDialog.PrintDialogOptions QPrintDialog.options()'''
        return QAbstractPrintDialog.PrintDialogOptions()
    def setOptions(self, options):
        '''void QPrintDialog.setOptions(QAbstractPrintDialog.PrintDialogOptions options)'''
    def testOption(self, option):
        '''bool QPrintDialog.testOption(QAbstractPrintDialog.PrintDialogOption option)'''
        return bool()
    def setOption(self, option, on = True):
        '''void QPrintDialog.setOption(QAbstractPrintDialog.PrintDialogOption option, bool on = True)'''
    def done(self, result):
        '''void QPrintDialog.done(int result)'''
    def accept(self):
        '''void QPrintDialog.accept()'''
    def exec_(self):
        '''int QPrintDialog.exec_()'''
        return int()


class QPrintEngine():
    """"""
    # Enum QPrintEngine.PrintEnginePropertyKey
    PPK_CollateCopies = 0
    PPK_ColorMode = 0
    PPK_Creator = 0
    PPK_DocumentName = 0
    PPK_FullPage = 0
    PPK_NumberOfCopies = 0
    PPK_Orientation = 0
    PPK_OutputFileName = 0
    PPK_PageOrder = 0
    PPK_PageRect = 0
    PPK_PageSize = 0
    PPK_PaperRect = 0
    PPK_PaperSource = 0
    PPK_PrinterName = 0
    PPK_PrinterProgram = 0
    PPK_Resolution = 0
    PPK_SelectionOption = 0
    PPK_SupportedResolutions = 0
    PPK_WindowsPageSize = 0
    PPK_FontEmbedding = 0
    PPK_SuppressSystemPrintStatus = 0
    PPK_Duplex = 0
    PPK_PaperSources = 0
    PPK_CustomPaperSize = 0
    PPK_PageMargins = 0
    PPK_PaperSize = 0
    PPK_CopyCount = 0
    PPK_SupportsMultipleCopies = 0
    PPK_CustomBase = 0

    def __init__(self):
        '''void QPrintEngine.__init__()'''
    def __init__(self):
        '''QPrintEngine QPrintEngine.__init__()'''
        return QPrintEngine()
    def printerState(self):
        '''abstract QPrinter.PrinterState QPrintEngine.printerState()'''
        return QPrinter.PrinterState()
    def metric(self):
        '''abstract QPaintDevice.PaintDeviceMetric QPrintEngine.metric()'''
        return QPaintDevice.PaintDeviceMetric()
    def abort(self):
        '''abstract bool QPrintEngine.abort()'''
        return bool()
    def newPage(self):
        '''abstract bool QPrintEngine.newPage()'''
        return bool()
    def property(self, key):
        '''abstract QVariant QPrintEngine.property(QPrintEngine.PrintEnginePropertyKey key)'''
        return QVariant()
    def setProperty(self, key, value):
        '''abstract void QPrintEngine.setProperty(QPrintEngine.PrintEnginePropertyKey key, QVariant value)'''


class QPrinterInfo():
    """"""
    def __init__(self):
        '''void QPrinterInfo.__init__()'''
    def __init__(self, src):
        '''void QPrinterInfo.__init__(QPrinterInfo src)'''
    def __init__(self, printer):
        '''void QPrinterInfo.__init__(QPrinter printer)'''
    def defaultPrinter(self):
        '''static QPrinterInfo QPrinterInfo.defaultPrinter()'''
        return QPrinterInfo()
    def availablePrinters(self):
        '''static list-of-QPrinterInfo QPrinterInfo.availablePrinters()'''
        return [QPrinterInfo()]
    def supportedPaperSizes(self):
        '''list-of-QPrinter.PageSize QPrinterInfo.supportedPaperSizes()'''
        return [QPrinter.PageSize()]
    def isDefault(self):
        '''bool QPrinterInfo.isDefault()'''
        return bool()
    def isNull(self):
        '''bool QPrinterInfo.isNull()'''
        return bool()
    def printerName(self):
        '''QString QPrinterInfo.printerName()'''
        return QString()


class QPrintPreviewDialog(QDialog):
    """"""
    def __init__(self, parent = None, flags = 0):
        '''void QPrintPreviewDialog.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def __init__(self, printer, parent = None, flags = 0):
        '''void QPrintPreviewDialog.__init__(QPrinter printer, QWidget parent = None, Qt.WindowFlags flags = 0)'''
    paintRequested = pyqtSignal() # void paintRequested(QPrinter *) - signal
    def done(self, result):
        '''void QPrintPreviewDialog.done(int result)'''
    def printer(self):
        '''QPrinter QPrintPreviewDialog.printer()'''
        return QPrinter()
    def open(self):
        '''void QPrintPreviewDialog.open()'''
    def open(self, receiver, member):
        '''void QPrintPreviewDialog.open(QObject receiver, SLOT() member)'''
    def open(self, receiver):
        '''void QPrintPreviewDialog.open(callable receiver)'''
    def setVisible(self, visible):
        '''void QPrintPreviewDialog.setVisible(bool visible)'''


class QPrintPreviewWidget(QWidget):
    """"""
    # Enum QPrintPreviewWidget.ZoomMode
    CustomZoom = 0
    FitToWidth = 0
    FitInView = 0

    # Enum QPrintPreviewWidget.ViewMode
    SinglePageView = 0
    FacingPagesView = 0
    AllPagesView = 0

    def __init__(self, printer, parent = None, flags = 0):
        '''void QPrintPreviewWidget.__init__(QPrinter printer, QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def __init__(self, parent = None, flags = 0):
        '''void QPrintPreviewWidget.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def pageCount(self):
        '''int QPrintPreviewWidget.pageCount()'''
        return int()
    previewChanged = pyqtSignal() # void previewChanged() - signal
    paintRequested = pyqtSignal() # void paintRequested(QPrinter *) - signal
    def updatePreview(self):
        '''void QPrintPreviewWidget.updatePreview()'''
    def setAllPagesViewMode(self):
        '''void QPrintPreviewWidget.setAllPagesViewMode()'''
    def setFacingPagesViewMode(self):
        '''void QPrintPreviewWidget.setFacingPagesViewMode()'''
    def setSinglePageViewMode(self):
        '''void QPrintPreviewWidget.setSinglePageViewMode()'''
    def setPortraitOrientation(self):
        '''void QPrintPreviewWidget.setPortraitOrientation()'''
    def setLandscapeOrientation(self):
        '''void QPrintPreviewWidget.setLandscapeOrientation()'''
    def fitInView(self):
        '''void QPrintPreviewWidget.fitInView()'''
    def fitToWidth(self):
        '''void QPrintPreviewWidget.fitToWidth()'''
    def setCurrentPage(self, pageNumber):
        '''void QPrintPreviewWidget.setCurrentPage(int pageNumber)'''
    def setZoomMode(self, zoomMode):
        '''void QPrintPreviewWidget.setZoomMode(QPrintPreviewWidget.ZoomMode zoomMode)'''
    def setViewMode(self, viewMode):
        '''void QPrintPreviewWidget.setViewMode(QPrintPreviewWidget.ViewMode viewMode)'''
    def setOrientation(self, orientation):
        '''void QPrintPreviewWidget.setOrientation(QPrinter.Orientation orientation)'''
    def setZoomFactor(self, zoomFactor):
        '''void QPrintPreviewWidget.setZoomFactor(float zoomFactor)'''
    def zoomOut(self, factor = None):
        '''void QPrintPreviewWidget.zoomOut(float factor = 1.1)'''
    def zoomIn(self, factor = None):
        '''void QPrintPreviewWidget.zoomIn(float factor = 1.1)'''
    def print_(self):
        '''void QPrintPreviewWidget.print_()'''
    def setVisible(self, visible):
        '''void QPrintPreviewWidget.setVisible(bool visible)'''
    def numPages(self):
        '''int QPrintPreviewWidget.numPages()'''
        return int()
    def currentPage(self):
        '''int QPrintPreviewWidget.currentPage()'''
        return int()
    def zoomMode(self):
        '''QPrintPreviewWidget.ZoomMode QPrintPreviewWidget.zoomMode()'''
        return QPrintPreviewWidget.ZoomMode()
    def viewMode(self):
        '''QPrintPreviewWidget.ViewMode QPrintPreviewWidget.viewMode()'''
        return QPrintPreviewWidget.ViewMode()
    def orientation(self):
        '''QPrinter.Orientation QPrintPreviewWidget.orientation()'''
        return QPrinter.Orientation()
    def zoomFactor(self):
        '''float QPrintPreviewWidget.zoomFactor()'''
        return float()


class QProgressBar(QWidget):
    """"""
    # Enum QProgressBar.Direction
    TopToBottom = 0
    BottomToTop = 0

    def __init__(self, parent = None):
        '''void QProgressBar.__init__(QWidget parent = None)'''
    def paintEvent(self):
        '''QPaintEvent QProgressBar.paintEvent()'''
        return QPaintEvent()
    def event(self, e):
        '''bool QProgressBar.event(QEvent e)'''
        return bool()
    def initStyleOption(self, option):
        '''void QProgressBar.initStyleOption(QStyleOptionProgressBar option)'''
    valueChanged = pyqtSignal() # void valueChanged(int) - signal
    def setOrientation(self):
        '''Qt.Orientation QProgressBar.setOrientation()'''
        return Qt.Orientation()
    def setValue(self, value):
        '''void QProgressBar.setValue(int value)'''
    def setMaximum(self, maximum):
        '''void QProgressBar.setMaximum(int maximum)'''
    def setMinimum(self, minimum):
        '''void QProgressBar.setMinimum(int minimum)'''
    def reset(self):
        '''void QProgressBar.reset()'''
    def format(self):
        '''QString QProgressBar.format()'''
        return QString()
    def setFormat(self, format):
        '''void QProgressBar.setFormat(QString format)'''
    def textDirection(self):
        '''QProgressBar.Direction QProgressBar.textDirection()'''
        return QProgressBar.Direction()
    def setTextDirection(self, textDirection):
        '''void QProgressBar.setTextDirection(QProgressBar.Direction textDirection)'''
    def invertedAppearance(self):
        '''bool QProgressBar.invertedAppearance()'''
        return bool()
    def setInvertedAppearance(self, invert):
        '''void QProgressBar.setInvertedAppearance(bool invert)'''
    def orientation(self):
        '''Qt.Orientation QProgressBar.orientation()'''
        return Qt.Orientation()
    def minimumSizeHint(self):
        '''QSize QProgressBar.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QProgressBar.sizeHint()'''
        return QSize()
    def setAlignment(self, alignment):
        '''void QProgressBar.setAlignment(Qt.Alignment alignment)'''
    def alignment(self):
        '''Qt.Alignment QProgressBar.alignment()'''
        return Qt.Alignment()
    def isTextVisible(self):
        '''bool QProgressBar.isTextVisible()'''
        return bool()
    def setTextVisible(self, visible):
        '''void QProgressBar.setTextVisible(bool visible)'''
    def text(self):
        '''QString QProgressBar.text()'''
        return QString()
    def value(self):
        '''int QProgressBar.value()'''
        return int()
    def setRange(self, minimum, maximum):
        '''void QProgressBar.setRange(int minimum, int maximum)'''
    def maximum(self):
        '''int QProgressBar.maximum()'''
        return int()
    def minimum(self):
        '''int QProgressBar.minimum()'''
        return int()


class QProgressDialog(QDialog):
    """"""
    def __init__(self, parent = None, flags = 0):
        '''void QProgressDialog.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def __init__(self, labelText, cancelButtonText, minimum, maximum, parent = None, flags = 0):
        '''void QProgressDialog.__init__(QString labelText, QString cancelButtonText, int minimum, int maximum, QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def open(self):
        '''void QProgressDialog.open()'''
    def open(self, receiver, member):
        '''void QProgressDialog.open(QObject receiver, SLOT() member)'''
    def open(self, receiver):
        '''void QProgressDialog.open(callable receiver)'''
    def forceShow(self):
        '''void QProgressDialog.forceShow()'''
    def showEvent(self, e):
        '''void QProgressDialog.showEvent(QShowEvent e)'''
    def changeEvent(self):
        '''QEvent QProgressDialog.changeEvent()'''
        return QEvent()
    def closeEvent(self):
        '''QCloseEvent QProgressDialog.closeEvent()'''
        return QCloseEvent()
    def resizeEvent(self):
        '''QResizeEvent QProgressDialog.resizeEvent()'''
        return QResizeEvent()
    canceled = pyqtSignal() # void canceled() - signal
    def setMinimumDuration(self, ms):
        '''void QProgressDialog.setMinimumDuration(int ms)'''
    def setCancelButtonText(self):
        '''QString QProgressDialog.setCancelButtonText()'''
        return QString()
    def setLabelText(self):
        '''QString QProgressDialog.setLabelText()'''
        return QString()
    def setValue(self, progress):
        '''void QProgressDialog.setValue(int progress)'''
    def setMinimum(self, minimum):
        '''void QProgressDialog.setMinimum(int minimum)'''
    def setMaximum(self, maximum):
        '''void QProgressDialog.setMaximum(int maximum)'''
    def reset(self):
        '''void QProgressDialog.reset()'''
    def cancel(self):
        '''void QProgressDialog.cancel()'''
    def autoClose(self):
        '''bool QProgressDialog.autoClose()'''
        return bool()
    def setAutoClose(self, b):
        '''void QProgressDialog.setAutoClose(bool b)'''
    def autoReset(self):
        '''bool QProgressDialog.autoReset()'''
        return bool()
    def setAutoReset(self, b):
        '''void QProgressDialog.setAutoReset(bool b)'''
    def minimumDuration(self):
        '''int QProgressDialog.minimumDuration()'''
        return int()
    def labelText(self):
        '''QString QProgressDialog.labelText()'''
        return QString()
    def sizeHint(self):
        '''QSize QProgressDialog.sizeHint()'''
        return QSize()
    def value(self):
        '''int QProgressDialog.value()'''
        return int()
    def setRange(self, minimum, maximum):
        '''void QProgressDialog.setRange(int minimum, int maximum)'''
    def maximum(self):
        '''int QProgressDialog.maximum()'''
        return int()
    def minimum(self):
        '''int QProgressDialog.minimum()'''
        return int()
    def wasCanceled(self):
        '''bool QProgressDialog.wasCanceled()'''
        return bool()
    def setBar(self, bar):
        '''void QProgressDialog.setBar(QProgressBar bar)'''
    def setCancelButton(self, button):
        '''void QProgressDialog.setCancelButton(QPushButton button)'''
    def setLabel(self, label):
        '''void QProgressDialog.setLabel(QLabel label)'''


class QProxyModel(QAbstractItemModel):
    """"""
    def __init__(self, parent = None):
        '''void QProxyModel.__init__(QObject parent = None)'''
    def revert(self):
        '''void QProxyModel.revert()'''
    def submit(self):
        '''bool QProxyModel.submit()'''
        return bool()
    def span(self, index):
        '''QSize QProxyModel.span(QModelIndex index)'''
        return QSize()
    def match(self, start, role, value, hits = 1, flags = None):
        '''list-of-QModelIndex QProxyModel.match(QModelIndex start, int role, QVariant value, int hits = 1, Qt.MatchFlags flags = Qt.MatchFlags(Qt.MatchStartsWith|Qt.MatchWrap))'''
        return [QModelIndex()]
    def sort(self, column, order = None):
        '''void QProxyModel.sort(int column, Qt.SortOrder order = Qt.AscendingOrder)'''
    def flags(self, index):
        '''Qt.ItemFlags QProxyModel.flags(QModelIndex index)'''
        return Qt.ItemFlags()
    def fetchMore(self, parent):
        '''void QProxyModel.fetchMore(QModelIndex parent)'''
    def insertColumns(self, column, count, parent = QModelIndex()):
        '''bool QProxyModel.insertColumns(int column, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def insertRows(self, row, count, parent = QModelIndex()):
        '''bool QProxyModel.insertRows(int row, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def supportedDropActions(self):
        '''Qt.DropActions QProxyModel.supportedDropActions()'''
        return Qt.DropActions()
    def dropMimeData(self, data, action, row, column, parent):
        '''bool QProxyModel.dropMimeData(QMimeData data, Qt.DropAction action, int row, int column, QModelIndex parent)'''
        return bool()
    def mimeData(self, indexes):
        '''QMimeData QProxyModel.mimeData(list-of-QModelIndex indexes)'''
        return QMimeData()
    def mimeTypes(self):
        '''QStringList QProxyModel.mimeTypes()'''
        return QStringList()
    def setHeaderData(self, section, orientation, value, role = None):
        '''bool QProxyModel.setHeaderData(int section, Qt.Orientation orientation, QVariant value, int role = Qt.EditRole)'''
        return bool()
    def headerData(self, section, orientation, role = None):
        '''QVariant QProxyModel.headerData(int section, Qt.Orientation orientation, int role = Qt.DisplayRole)'''
        return QVariant()
    def setData(self, index, value, role = None):
        '''bool QProxyModel.setData(QModelIndex index, QVariant value, int role = Qt.EditRole)'''
        return bool()
    def data(self, index, role = None):
        '''QVariant QProxyModel.data(QModelIndex index, int role = Qt.DisplayRole)'''
        return QVariant()
    def hasChildren(self, parent = QModelIndex()):
        '''bool QProxyModel.hasChildren(QModelIndex parent = QModelIndex())'''
        return bool()
    def columnCount(self, parent = QModelIndex()):
        '''int QProxyModel.columnCount(QModelIndex parent = QModelIndex())'''
        return int()
    def rowCount(self, parent = QModelIndex()):
        '''int QProxyModel.rowCount(QModelIndex parent = QModelIndex())'''
        return int()
    def parent(self, child):
        '''QModelIndex QProxyModel.parent(QModelIndex child)'''
        return QModelIndex()
    def parent(self):
        '''QObject QProxyModel.parent()'''
        return QObject()
    def index(self, row, column, parent = QModelIndex()):
        '''QModelIndex QProxyModel.index(int row, int column, QModelIndex parent = QModelIndex())'''
        return QModelIndex()
    def model(self):
        '''QAbstractItemModel QProxyModel.model()'''
        return QAbstractItemModel()
    def setModel(self, model):
        '''void QProxyModel.setModel(QAbstractItemModel model)'''


class QQuaternion():
    """"""
    def __init__(self):
        '''void QQuaternion.__init__()'''
    def __init__(self, aScalar, xpos, ypos, zpos):
        '''void QQuaternion.__init__(float aScalar, float xpos, float ypos, float zpos)'''
    def __init__(self, aScalar, aVector):
        '''void QQuaternion.__init__(float aScalar, QVector3D aVector)'''
    def __init__(self, aVector):
        '''void QQuaternion.__init__(QVector4D aVector)'''
    def __init__(self):
        '''QQuaternion QQuaternion.__init__()'''
        return QQuaternion()
    def __eq__(self, q2):
        '''bool QQuaternion.__eq__(QQuaternion q2)'''
        return bool()
    def __mul__(self, q2):
        '''QQuaternion QQuaternion.__mul__(QQuaternion q2)'''
        return QQuaternion()
    def __mul__(self, quaternion):
        '''QQuaternion QQuaternion.__mul__(QQuaternion quaternion)'''
        return QQuaternion()
    def __mul__(self, factor):
        '''QQuaternion QQuaternion.__mul__(float factor)'''
        return QQuaternion()
    def __div__(self, divisor):
        '''QQuaternion QQuaternion.__div__(float divisor)'''
        return QQuaternion()
    def __add__(self, q2):
        '''QQuaternion QQuaternion.__add__(QQuaternion q2)'''
        return QQuaternion()
    def __sub__(self, q2):
        '''QQuaternion QQuaternion.__sub__(QQuaternion q2)'''
        return QQuaternion()
    def __neg__(self):
        '''QQuaternion QQuaternion.__neg__()'''
        return QQuaternion()
    def __ne__(self, q2):
        '''bool QQuaternion.__ne__(QQuaternion q2)'''
        return bool()
    def toVector4D(self):
        '''QVector4D QQuaternion.toVector4D()'''
        return QVector4D()
    def vector(self):
        '''QVector3D QQuaternion.vector()'''
        return QVector3D()
    def setVector(self, aVector):
        '''void QQuaternion.setVector(QVector3D aVector)'''
    def setVector(self, aX, aY, aZ):
        '''void QQuaternion.setVector(float aX, float aY, float aZ)'''
    def __idiv__(self, divisor):
        '''QQuaternion QQuaternion.__idiv__(float divisor)'''
        return QQuaternion()
    def __imul__(self, factor):
        '''QQuaternion QQuaternion.__imul__(float factor)'''
        return QQuaternion()
    def __imul__(self, quaternion):
        '''QQuaternion QQuaternion.__imul__(QQuaternion quaternion)'''
        return QQuaternion()
    def __isub__(self, quaternion):
        '''QQuaternion QQuaternion.__isub__(QQuaternion quaternion)'''
        return QQuaternion()
    def __iadd__(self, quaternion):
        '''QQuaternion QQuaternion.__iadd__(QQuaternion quaternion)'''
        return QQuaternion()
    def conjugate(self):
        '''QQuaternion QQuaternion.conjugate()'''
        return QQuaternion()
    def setScalar(self, aScalar):
        '''void QQuaternion.setScalar(float aScalar)'''
    def setZ(self, aZ):
        '''void QQuaternion.setZ(float aZ)'''
    def setY(self, aY):
        '''void QQuaternion.setY(float aY)'''
    def setX(self, aX):
        '''void QQuaternion.setX(float aX)'''
    def scalar(self):
        '''float QQuaternion.scalar()'''
        return float()
    def z(self):
        '''float QQuaternion.z()'''
        return float()
    def y(self):
        '''float QQuaternion.y()'''
        return float()
    def x(self):
        '''float QQuaternion.x()'''
        return float()
    def isIdentity(self):
        '''bool QQuaternion.isIdentity()'''
        return bool()
    def isNull(self):
        '''bool QQuaternion.isNull()'''
        return bool()
    def nlerp(self, q1, q2, t):
        '''static QQuaternion QQuaternion.nlerp(QQuaternion q1, QQuaternion q2, float t)'''
        return QQuaternion()
    def slerp(self, q1, q2, t):
        '''static QQuaternion QQuaternion.slerp(QQuaternion q1, QQuaternion q2, float t)'''
        return QQuaternion()
    def fromAxisAndAngle(self, axis, angle):
        '''static QQuaternion QQuaternion.fromAxisAndAngle(QVector3D axis, float angle)'''
        return QQuaternion()
    def fromAxisAndAngle(self, x, y, z, angle):
        '''static QQuaternion QQuaternion.fromAxisAndAngle(float x, float y, float z, float angle)'''
        return QQuaternion()
    def rotatedVector(self, vector):
        '''QVector3D QQuaternion.rotatedVector(QVector3D vector)'''
        return QVector3D()
    def normalize(self):
        '''void QQuaternion.normalize()'''
    def normalized(self):
        '''QQuaternion QQuaternion.normalized()'''
        return QQuaternion()
    def lengthSquared(self):
        '''float QQuaternion.lengthSquared()'''
        return float()
    def length(self):
        '''float QQuaternion.length()'''
        return float()
    def __repr__(self):
        '''str QQuaternion.__repr__()'''
        return str()


class QRadioButton(QAbstractButton):
    """"""
    def __init__(self, parent = None):
        '''void QRadioButton.__init__(QWidget parent = None)'''
    def __init__(self, text, parent = None):
        '''void QRadioButton.__init__(QString text, QWidget parent = None)'''
    def mouseMoveEvent(self):
        '''QMouseEvent QRadioButton.mouseMoveEvent()'''
        return QMouseEvent()
    def paintEvent(self):
        '''QPaintEvent QRadioButton.paintEvent()'''
        return QPaintEvent()
    def event(self, e):
        '''bool QRadioButton.event(QEvent e)'''
        return bool()
    def hitButton(self):
        '''QPoint QRadioButton.hitButton()'''
        return QPoint()
    def initStyleOption(self, button):
        '''void QRadioButton.initStyleOption(QStyleOptionButton button)'''
    def minimumSizeHint(self):
        '''QSize QRadioButton.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QRadioButton.sizeHint()'''
        return QSize()


class QRawFont():
    """"""
    # Enum QRawFont.AntialiasingType
    PixelAntialiasing = 0
    SubPixelAntialiasing = 0

    def __init__(self):
        '''void QRawFont.__init__()'''
    def __init__(self, fileName, pixelSize, hintingPreference = None):
        '''void QRawFont.__init__(QString fileName, float pixelSize, QFont.HintingPreference hintingPreference = QFont.PreferDefaultHinting)'''
    def __init__(self, fontData, pixelSize, hintingPreference = None):
        '''void QRawFont.__init__(QByteArray fontData, float pixelSize, QFont.HintingPreference hintingPreference = QFont.PreferDefaultHinting)'''
    def __init__(self, other):
        '''void QRawFont.__init__(QRawFont other)'''
    def fromFont(self, font, writingSystem = None):
        '''static QRawFont QRawFont.fromFont(QFont font, QFontDatabase.WritingSystem writingSystem = QFontDatabase.Any)'''
        return QRawFont()
    def fontTable(self, tagName):
        '''QByteArray QRawFont.fontTable(str tagName)'''
        return QByteArray()
    def supportedWritingSystems(self):
        '''list-of-QFontDatabase.WritingSystem QRawFont.supportedWritingSystems()'''
        return [QFontDatabase.WritingSystem()]
    def supportsCharacter(self, ucs4):
        '''bool QRawFont.supportsCharacter(int ucs4)'''
        return bool()
    def supportsCharacter(self, character):
        '''bool QRawFont.supportsCharacter(QChar character)'''
        return bool()
    def loadFromData(self, fontData, pixelSize, hintingPreference):
        '''void QRawFont.loadFromData(QByteArray fontData, float pixelSize, QFont.HintingPreference hintingPreference)'''
    def loadFromFile(self, fileName, pixelSize, hintingPreference):
        '''void QRawFont.loadFromFile(QString fileName, float pixelSize, QFont.HintingPreference hintingPreference)'''
    def unitsPerEm(self):
        '''float QRawFont.unitsPerEm()'''
        return float()
    def maxCharWidth(self):
        '''float QRawFont.maxCharWidth()'''
        return float()
    def averageCharWidth(self):
        '''float QRawFont.averageCharWidth()'''
        return float()
    def xHeight(self):
        '''float QRawFont.xHeight()'''
        return float()
    def leading(self):
        '''float QRawFont.leading()'''
        return float()
    def descent(self):
        '''float QRawFont.descent()'''
        return float()
    def ascent(self):
        '''float QRawFont.ascent()'''
        return float()
    def hintingPreference(self):
        '''QFont.HintingPreference QRawFont.hintingPreference()'''
        return QFont.HintingPreference()
    def pixelSize(self):
        '''float QRawFont.pixelSize()'''
        return float()
    def setPixelSize(self, pixelSize):
        '''void QRawFont.setPixelSize(float pixelSize)'''
    def pathForGlyph(self, glyphIndex):
        '''QPainterPath QRawFont.pathForGlyph(int glyphIndex)'''
        return QPainterPath()
    def alphaMapForGlyph(self, glyphIndex, antialiasingType = None, transform = QTransform()):
        '''QImage QRawFont.alphaMapForGlyph(int glyphIndex, QRawFont.AntialiasingType antialiasingType = QRawFont.SubPixelAntialiasing, QTransform transform = QTransform())'''
        return QImage()
    def advancesForGlyphIndexes(self, glyphIndexes):
        '''list-of-QPointF QRawFont.advancesForGlyphIndexes(list-of-int glyphIndexes)'''
        return [QPointF()]
    def glyphIndexesForString(self, text):
        '''list-of-int QRawFont.glyphIndexesForString(QString text)'''
        return [int()]
    def weight(self):
        '''int QRawFont.weight()'''
        return int()
    def style(self):
        '''QFont.Style QRawFont.style()'''
        return QFont.Style()
    def styleName(self):
        '''QString QRawFont.styleName()'''
        return QString()
    def familyName(self):
        '''QString QRawFont.familyName()'''
        return QString()
    def __ne__(self, other):
        '''bool QRawFont.__ne__(QRawFont other)'''
        return bool()
    def __eq__(self, other):
        '''bool QRawFont.__eq__(QRawFont other)'''
        return bool()
    def isValid(self):
        '''bool QRawFont.isValid()'''
        return bool()


class QRegion():
    """"""
    # Enum QRegion.RegionType
    Rectangle = 0
    Ellipse = 0

    def __init__(self):
        '''void QRegion.__init__()'''
    def __init__(self, x, y, w, h, type = None):
        '''void QRegion.__init__(int x, int y, int w, int h, QRegion.RegionType type = QRegion.Rectangle)'''
    def __init__(self, r, type = None):
        '''void QRegion.__init__(QRect r, QRegion.RegionType type = QRegion.Rectangle)'''
    def __init__(self, a, fillRule = None):
        '''void QRegion.__init__(QPolygon a, Qt.FillRule fillRule = Qt.OddEvenFill)'''
    def __init__(self, bitmap):
        '''void QRegion.__init__(QBitmap bitmap)'''
    def __init__(self, region):
        '''void QRegion.__init__(QRegion region)'''
    def __init__(self, variant):
        '''void QRegion.__init__(QVariant variant)'''
    def __mul__(self, m):
        '''QRegion QRegion.__mul__(QMatrix m)'''
        return QRegion()
    def __mul__(self, m):
        '''QRegion QRegion.__mul__(QTransform m)'''
        return QRegion()
    def swap(self, other):
        '''void QRegion.swap(QRegion other)'''
    def rectCount(self):
        '''int QRegion.rectCount()'''
        return int()
    def numRects(self):
        '''int QRegion.numRects()'''
        return int()
    def intersects(self, r):
        '''bool QRegion.intersects(QRegion r)'''
        return bool()
    def intersects(self, r):
        '''bool QRegion.intersects(QRect r)'''
        return bool()
    def xored(self, r):
        '''QRegion QRegion.xored(QRegion r)'''
        return QRegion()
    def subtracted(self, r):
        '''QRegion QRegion.subtracted(QRegion r)'''
        return QRegion()
    def intersected(self, r):
        '''QRegion QRegion.intersected(QRegion r)'''
        return QRegion()
    def intersected(self, r):
        '''QRegion QRegion.intersected(QRect r)'''
        return QRegion()
    def __ne__(self, r):
        '''bool QRegion.__ne__(QRegion r)'''
        return bool()
    def __eq__(self, r):
        '''bool QRegion.__eq__(QRegion r)'''
        return bool()
    def __ixor__(self, r):
        '''QRegion QRegion.__ixor__(QRegion r)'''
        return QRegion()
    def __isub__(self, r):
        '''QRegion QRegion.__isub__(QRegion r)'''
        return QRegion()
    def __iand__(self, r):
        '''QRegion QRegion.__iand__(QRegion r)'''
        return QRegion()
    def __iand__(self, r):
        '''QRegion QRegion.__iand__(QRect r)'''
        return QRegion()
    def __iadd__(self, r):
        '''QRegion QRegion.__iadd__(QRegion r)'''
        return QRegion()
    def __iadd__(self, r):
        '''QRegion QRegion.__iadd__(QRect r)'''
        return QRegion()
    def __ior__(self, r):
        '''QRegion QRegion.__ior__(QRegion r)'''
        return QRegion()
    def __xor__(self, r):
        '''QRegion QRegion.__xor__(QRegion r)'''
        return QRegion()
    def __sub__(self, r):
        '''QRegion QRegion.__sub__(QRegion r)'''
        return QRegion()
    def __and__(self, r):
        '''QRegion QRegion.__and__(QRegion r)'''
        return QRegion()
    def __and__(self, r):
        '''QRegion QRegion.__and__(QRect r)'''
        return QRegion()
    def __add__(self, r):
        '''QRegion QRegion.__add__(QRegion r)'''
        return QRegion()
    def __add__(self, r):
        '''QRegion QRegion.__add__(QRect r)'''
        return QRegion()
    def __or__(self, r):
        '''QRegion QRegion.__or__(QRegion r)'''
        return QRegion()
    def rects(self):
        '''list-of-QRect QRegion.rects()'''
        return [QRect()]
    def boundingRect(self):
        '''QRect QRegion.boundingRect()'''
        return QRect()
    def eor(self, r):
        '''QRegion QRegion.eor(QRegion r)'''
        return QRegion()
    def subtract(self, r):
        '''QRegion QRegion.subtract(QRegion r)'''
        return QRegion()
    def intersect(self, r):
        '''QRegion QRegion.intersect(QRegion r)'''
        return QRegion()
    def united(self, r):
        '''QRegion QRegion.united(QRegion r)'''
        return QRegion()
    def united(self, r):
        '''QRegion QRegion.united(QRect r)'''
        return QRegion()
    def unite(self, r):
        '''QRegion QRegion.unite(QRegion r)'''
        return QRegion()
    def translated(self, dx, dy):
        '''QRegion QRegion.translated(int dx, int dy)'''
        return QRegion()
    def translated(self, p):
        '''QRegion QRegion.translated(QPoint p)'''
        return QRegion()
    def translate(self, dx, dy):
        '''void QRegion.translate(int dx, int dy)'''
    def translate(self, p):
        '''void QRegion.translate(QPoint p)'''
    def __contains__(self, p):
        '''int QRegion.__contains__(QPoint p)'''
        return int()
    def __contains__(self, r):
        '''int QRegion.__contains__(QRect r)'''
        return int()
    def contains(self, p):
        '''bool QRegion.contains(QPoint p)'''
        return bool()
    def contains(self, r):
        '''bool QRegion.contains(QRect r)'''
        return bool()
    def __bool__(self):
        '''int QRegion.__bool__()'''
        return int()
    def isEmpty(self):
        '''bool QRegion.isEmpty()'''
        return bool()


class QRubberBand(QWidget):
    """"""
    # Enum QRubberBand.Shape
    Line = 0
    Rectangle = 0

    def __init__(self, parent = None):
        '''QRubberBand.Shape QRubberBand.__init__(QWidget parent = None)'''
        return QRubberBand.Shape()
    def moveEvent(self):
        '''QMoveEvent QRubberBand.moveEvent()'''
        return QMoveEvent()
    def resizeEvent(self):
        '''QResizeEvent QRubberBand.resizeEvent()'''
        return QResizeEvent()
    def showEvent(self):
        '''QShowEvent QRubberBand.showEvent()'''
        return QShowEvent()
    def changeEvent(self):
        '''QEvent QRubberBand.changeEvent()'''
        return QEvent()
    def paintEvent(self):
        '''QPaintEvent QRubberBand.paintEvent()'''
        return QPaintEvent()
    def event(self, e):
        '''bool QRubberBand.event(QEvent e)'''
        return bool()
    def initStyleOption(self, option):
        '''void QRubberBand.initStyleOption(QStyleOptionRubberBand option)'''
    def resize(self, w, h):
        '''void QRubberBand.resize(int w, int h)'''
    def resize(self, s):
        '''void QRubberBand.resize(QSize s)'''
    def move(self, p):
        '''void QRubberBand.move(QPoint p)'''
    def move(self, ax, ay):
        '''void QRubberBand.move(int ax, int ay)'''
    def setGeometry(self, r):
        '''void QRubberBand.setGeometry(QRect r)'''
    def setGeometry(self, ax, ay, aw, ah):
        '''void QRubberBand.setGeometry(int ax, int ay, int aw, int ah)'''
    def shape(self):
        '''QRubberBand.Shape QRubberBand.shape()'''
        return QRubberBand.Shape()


class QScrollArea(QAbstractScrollArea):
    """"""
    def __init__(self, parent = None):
        '''void QScrollArea.__init__(QWidget parent = None)'''
    def scrollContentsBy(self, dx, dy):
        '''void QScrollArea.scrollContentsBy(int dx, int dy)'''
    def resizeEvent(self):
        '''QResizeEvent QScrollArea.resizeEvent()'''
        return QResizeEvent()
    def eventFilter(self):
        '''QEvent QScrollArea.eventFilter()'''
        return QEvent()
    def event(self):
        '''QEvent QScrollArea.event()'''
        return QEvent()
    def ensureWidgetVisible(self, childWidget, xMargin = 50, yMargin = 50):
        '''void QScrollArea.ensureWidgetVisible(QWidget childWidget, int xMargin = 50, int yMargin = 50)'''
    def ensureVisible(self, x, y, xMargin = 50, yMargin = 50):
        '''void QScrollArea.ensureVisible(int x, int y, int xMargin = 50, int yMargin = 50)'''
    def focusNextPrevChild(self, next):
        '''bool QScrollArea.focusNextPrevChild(bool next)'''
        return bool()
    def sizeHint(self):
        '''QSize QScrollArea.sizeHint()'''
        return QSize()
    def setAlignment(self):
        '''Qt.Alignment QScrollArea.setAlignment()'''
        return Qt.Alignment()
    def alignment(self):
        '''Qt.Alignment QScrollArea.alignment()'''
        return Qt.Alignment()
    def setWidgetResizable(self, resizable):
        '''void QScrollArea.setWidgetResizable(bool resizable)'''
    def widgetResizable(self):
        '''bool QScrollArea.widgetResizable()'''
        return bool()
    def takeWidget(self):
        '''QWidget QScrollArea.takeWidget()'''
        return QWidget()
    def setWidget(self, w):
        '''void QScrollArea.setWidget(QWidget w)'''
    def widget(self):
        '''QWidget QScrollArea.widget()'''
        return QWidget()


class QScrollBar(QAbstractSlider):
    """"""
    def __init__(self, parent = None):
        '''void QScrollBar.__init__(QWidget parent = None)'''
    def __init__(self, orientation, parent = None):
        '''void QScrollBar.__init__(Qt.Orientation orientation, QWidget parent = None)'''
    def sliderChange(self, change):
        '''void QScrollBar.sliderChange(QAbstractSlider.SliderChange change)'''
    def contextMenuEvent(self):
        '''QContextMenuEvent QScrollBar.contextMenuEvent()'''
        return QContextMenuEvent()
    def hideEvent(self):
        '''QHideEvent QScrollBar.hideEvent()'''
        return QHideEvent()
    def mouseMoveEvent(self):
        '''QMouseEvent QScrollBar.mouseMoveEvent()'''
        return QMouseEvent()
    def mouseReleaseEvent(self):
        '''QMouseEvent QScrollBar.mouseReleaseEvent()'''
        return QMouseEvent()
    def mousePressEvent(self):
        '''QMouseEvent QScrollBar.mousePressEvent()'''
        return QMouseEvent()
    def paintEvent(self):
        '''QPaintEvent QScrollBar.paintEvent()'''
        return QPaintEvent()
    def initStyleOption(self, option):
        '''void QScrollBar.initStyleOption(QStyleOptionSlider option)'''
    def event(self, event):
        '''bool QScrollBar.event(QEvent event)'''
        return bool()
    def sizeHint(self):
        '''QSize QScrollBar.sizeHint()'''
        return QSize()


class QSessionManager(QObject):
    """"""
    # Enum QSessionManager.RestartHint
    RestartIfRunning = 0
    RestartAnyway = 0
    RestartImmediately = 0
    RestartNever = 0

    def requestPhase2(self):
        '''void QSessionManager.requestPhase2()'''
    def isPhase2(self):
        '''bool QSessionManager.isPhase2()'''
        return bool()
    def setManagerProperty(self, name, value):
        '''void QSessionManager.setManagerProperty(QString name, QString value)'''
    def setManagerProperty(self, name, value):
        '''void QSessionManager.setManagerProperty(QString name, QStringList value)'''
    def discardCommand(self):
        '''QStringList QSessionManager.discardCommand()'''
        return QStringList()
    def setDiscardCommand(self):
        '''QStringList QSessionManager.setDiscardCommand()'''
        return QStringList()
    def restartCommand(self):
        '''QStringList QSessionManager.restartCommand()'''
        return QStringList()
    def setRestartCommand(self):
        '''QStringList QSessionManager.setRestartCommand()'''
        return QStringList()
    def restartHint(self):
        '''QSessionManager.RestartHint QSessionManager.restartHint()'''
        return QSessionManager.RestartHint()
    def setRestartHint(self):
        '''QSessionManager.RestartHint QSessionManager.setRestartHint()'''
        return QSessionManager.RestartHint()
    def cancel(self):
        '''void QSessionManager.cancel()'''
    def release(self):
        '''void QSessionManager.release()'''
    def allowsErrorInteraction(self):
        '''bool QSessionManager.allowsErrorInteraction()'''
        return bool()
    def allowsInteraction(self):
        '''bool QSessionManager.allowsInteraction()'''
        return bool()
    def sessionKey(self):
        '''QString QSessionManager.sessionKey()'''
        return QString()
    def sessionId(self):
        '''QString QSessionManager.sessionId()'''
        return QString()


class QShortcut(QObject):
    """"""
    def __init__(self, parent):
        '''void QShortcut.__init__(QWidget parent)'''
    def __init__(self, key, parent, member = 0, ambiguousMember = 0, context = None):
        '''void QShortcut.__init__(QKeySequence key, QWidget parent, SLOT() member = 0, SLOT() ambiguousMember = 0, Qt.ShortcutContext context = Qt.WindowShortcut)'''
    def event(self, e):
        '''bool QShortcut.event(QEvent e)'''
        return bool()
    activatedAmbiguously = pyqtSignal() # void activatedAmbiguously() - signal
    activated = pyqtSignal() # void activated() - signal
    def autoRepeat(self):
        '''bool QShortcut.autoRepeat()'''
        return bool()
    def setAutoRepeat(self, on):
        '''void QShortcut.setAutoRepeat(bool on)'''
    def parentWidget(self):
        '''QWidget QShortcut.parentWidget()'''
        return QWidget()
    def id(self):
        '''int QShortcut.id()'''
        return int()
    def whatsThis(self):
        '''QString QShortcut.whatsThis()'''
        return QString()
    def setWhatsThis(self, text):
        '''void QShortcut.setWhatsThis(QString text)'''
    def context(self):
        '''Qt.ShortcutContext QShortcut.context()'''
        return Qt.ShortcutContext()
    def setContext(self, context):
        '''void QShortcut.setContext(Qt.ShortcutContext context)'''
    def isEnabled(self):
        '''bool QShortcut.isEnabled()'''
        return bool()
    def setEnabled(self, enable):
        '''void QShortcut.setEnabled(bool enable)'''
    def key(self):
        '''QKeySequence QShortcut.key()'''
        return QKeySequence()
    def setKey(self, key):
        '''void QShortcut.setKey(QKeySequence key)'''


class QSizeGrip(QWidget):
    """"""
    def __init__(self, parent):
        '''void QSizeGrip.__init__(QWidget parent)'''
    def hideEvent(self, hideEvent):
        '''void QSizeGrip.hideEvent(QHideEvent hideEvent)'''
    def showEvent(self, showEvent):
        '''void QSizeGrip.showEvent(QShowEvent showEvent)'''
    def moveEvent(self, moveEvent):
        '''void QSizeGrip.moveEvent(QMoveEvent moveEvent)'''
    def event(self):
        '''QEvent QSizeGrip.event()'''
        return QEvent()
    def eventFilter(self):
        '''QEvent QSizeGrip.eventFilter()'''
        return QEvent()
    def mouseMoveEvent(self):
        '''QMouseEvent QSizeGrip.mouseMoveEvent()'''
        return QMouseEvent()
    def mouseReleaseEvent(self, mouseEvent):
        '''void QSizeGrip.mouseReleaseEvent(QMouseEvent mouseEvent)'''
    def mousePressEvent(self):
        '''QMouseEvent QSizeGrip.mousePressEvent()'''
        return QMouseEvent()
    def paintEvent(self):
        '''QPaintEvent QSizeGrip.paintEvent()'''
        return QPaintEvent()
    def setVisible(self):
        '''bool QSizeGrip.setVisible()'''
        return bool()
    def sizeHint(self):
        '''QSize QSizeGrip.sizeHint()'''
        return QSize()


class QSizePolicy():
    """"""
    # Enum QSizePolicy.ControlType
    DefaultType = 0
    ButtonBox = 0
    CheckBox = 0
    ComboBox = 0
    Frame = 0
    GroupBox = 0
    Label = 0
    Line = 0
    LineEdit = 0
    PushButton = 0
    RadioButton = 0
    Slider = 0
    SpinBox = 0
    TabWidget = 0
    ToolButton = 0

    # Enum QSizePolicy.Policy
    Fixed = 0
    Minimum = 0
    Maximum = 0
    Preferred = 0
    MinimumExpanding = 0
    Expanding = 0
    Ignored = 0

    # Enum QSizePolicy.PolicyFlag
    GrowFlag = 0
    ExpandFlag = 0
    ShrinkFlag = 0
    IgnoreFlag = 0

    def __init__(self):
        '''void QSizePolicy.__init__()'''
    def __init__(self, horizontal, vertical):
        '''void QSizePolicy.__init__(QSizePolicy.Policy horizontal, QSizePolicy.Policy vertical)'''
    def __init__(self, variant):
        '''void QSizePolicy.__init__(QVariant variant)'''
    def __init__(self, horizontal, vertical, type):
        '''void QSizePolicy.__init__(QSizePolicy.Policy horizontal, QSizePolicy.Policy vertical, QSizePolicy.ControlType type)'''
    def __init__(self):
        '''QSizePolicy QSizePolicy.__init__()'''
        return QSizePolicy()
    def hasWidthForHeight(self):
        '''bool QSizePolicy.hasWidthForHeight()'''
        return bool()
    def setWidthForHeight(self, b):
        '''void QSizePolicy.setWidthForHeight(bool b)'''
    def setControlType(self, type):
        '''void QSizePolicy.setControlType(QSizePolicy.ControlType type)'''
    def controlType(self):
        '''QSizePolicy.ControlType QSizePolicy.controlType()'''
        return QSizePolicy.ControlType()
    def transpose(self):
        '''void QSizePolicy.transpose()'''
    def setVerticalStretch(self, stretchFactor):
        '''void QSizePolicy.setVerticalStretch(int stretchFactor)'''
    def setHorizontalStretch(self, stretchFactor):
        '''void QSizePolicy.setHorizontalStretch(int stretchFactor)'''
    def verticalStretch(self):
        '''int QSizePolicy.verticalStretch()'''
        return int()
    def horizontalStretch(self):
        '''int QSizePolicy.horizontalStretch()'''
        return int()
    def __ne__(self, s):
        '''bool QSizePolicy.__ne__(QSizePolicy s)'''
        return bool()
    def __eq__(self, s):
        '''bool QSizePolicy.__eq__(QSizePolicy s)'''
        return bool()
    def hasHeightForWidth(self):
        '''bool QSizePolicy.hasHeightForWidth()'''
        return bool()
    def setHeightForWidth(self, b):
        '''void QSizePolicy.setHeightForWidth(bool b)'''
    def expandingDirections(self):
        '''Qt.Orientations QSizePolicy.expandingDirections()'''
        return Qt.Orientations()
    def setVerticalPolicy(self, d):
        '''void QSizePolicy.setVerticalPolicy(QSizePolicy.Policy d)'''
    def setHorizontalPolicy(self, d):
        '''void QSizePolicy.setHorizontalPolicy(QSizePolicy.Policy d)'''
    def verticalPolicy(self):
        '''QSizePolicy.Policy QSizePolicy.verticalPolicy()'''
        return QSizePolicy.Policy()
    def horizontalPolicy(self):
        '''QSizePolicy.Policy QSizePolicy.horizontalPolicy()'''
        return QSizePolicy.Policy()
    class ControlTypes():
        """"""
        def __init__(self):
            '''QSizePolicy.ControlTypes QSizePolicy.ControlTypes.__init__()'''
            return QSizePolicy.ControlTypes()
        def __init__(self):
            '''int QSizePolicy.ControlTypes.__init__()'''
            return int()
        def __init__(self):
            '''void QSizePolicy.ControlTypes.__init__()'''
        def __bool__(self):
            '''int QSizePolicy.ControlTypes.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QSizePolicy.ControlTypes.__ne__(QSizePolicy.ControlTypes f)'''
            return bool()
        def __eq__(self, f):
            '''bool QSizePolicy.ControlTypes.__eq__(QSizePolicy.ControlTypes f)'''
            return bool()
        def __invert__(self):
            '''QSizePolicy.ControlTypes QSizePolicy.ControlTypes.__invert__()'''
            return QSizePolicy.ControlTypes()
        def __and__(self, mask):
            '''QSizePolicy.ControlTypes QSizePolicy.ControlTypes.__and__(int mask)'''
            return QSizePolicy.ControlTypes()
        def __xor__(self, f):
            '''QSizePolicy.ControlTypes QSizePolicy.ControlTypes.__xor__(QSizePolicy.ControlTypes f)'''
            return QSizePolicy.ControlTypes()
        def __xor__(self, f):
            '''QSizePolicy.ControlTypes QSizePolicy.ControlTypes.__xor__(int f)'''
            return QSizePolicy.ControlTypes()
        def __or__(self, f):
            '''QSizePolicy.ControlTypes QSizePolicy.ControlTypes.__or__(QSizePolicy.ControlTypes f)'''
            return QSizePolicy.ControlTypes()
        def __or__(self, f):
            '''QSizePolicy.ControlTypes QSizePolicy.ControlTypes.__or__(int f)'''
            return QSizePolicy.ControlTypes()
        def __int__(self):
            '''int QSizePolicy.ControlTypes.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QSizePolicy.ControlTypes QSizePolicy.ControlTypes.__ixor__(QSizePolicy.ControlTypes f)'''
            return QSizePolicy.ControlTypes()
        def __ior__(self, f):
            '''QSizePolicy.ControlTypes QSizePolicy.ControlTypes.__ior__(QSizePolicy.ControlTypes f)'''
            return QSizePolicy.ControlTypes()
        def __iand__(self, mask):
            '''QSizePolicy.ControlTypes QSizePolicy.ControlTypes.__iand__(int mask)'''
            return QSizePolicy.ControlTypes()


class QSlider(QAbstractSlider):
    """"""
    # Enum QSlider.TickPosition
    NoTicks = 0
    TicksAbove = 0
    TicksLeft = 0
    TicksBelow = 0
    TicksRight = 0
    TicksBothSides = 0

    def __init__(self, parent = None):
        '''void QSlider.__init__(QWidget parent = None)'''
    def __init__(self, orientation, parent = None):
        '''void QSlider.__init__(Qt.Orientation orientation, QWidget parent = None)'''
    def mouseMoveEvent(self, ev):
        '''void QSlider.mouseMoveEvent(QMouseEvent ev)'''
    def mouseReleaseEvent(self, ev):
        '''void QSlider.mouseReleaseEvent(QMouseEvent ev)'''
    def mousePressEvent(self, ev):
        '''void QSlider.mousePressEvent(QMouseEvent ev)'''
    def paintEvent(self, ev):
        '''void QSlider.paintEvent(QPaintEvent ev)'''
    def initStyleOption(self, option):
        '''void QSlider.initStyleOption(QStyleOptionSlider option)'''
    def event(self, event):
        '''bool QSlider.event(QEvent event)'''
        return bool()
    def tickInterval(self):
        '''int QSlider.tickInterval()'''
        return int()
    def setTickInterval(self, ti):
        '''void QSlider.setTickInterval(int ti)'''
    def tickPosition(self):
        '''QSlider.TickPosition QSlider.tickPosition()'''
        return QSlider.TickPosition()
    def setTickPosition(self, position):
        '''void QSlider.setTickPosition(QSlider.TickPosition position)'''
    def minimumSizeHint(self):
        '''QSize QSlider.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QSlider.sizeHint()'''
        return QSize()


class QSortFilterProxyModel(QAbstractProxyModel):
    """"""
    def __init__(self, parent = None):
        '''void QSortFilterProxyModel.__init__(QObject parent = None)'''
    def invalidateFilter(self):
        '''void QSortFilterProxyModel.invalidateFilter()'''
    def invalidate(self):
        '''void QSortFilterProxyModel.invalidate()'''
    def data(self, index, role = None):
        '''QVariant QSortFilterProxyModel.data(QModelIndex index, int role = Qt.DisplayRole)'''
        return QVariant()
    def setSortLocaleAware(self, on):
        '''void QSortFilterProxyModel.setSortLocaleAware(bool on)'''
    def isSortLocaleAware(self):
        '''bool QSortFilterProxyModel.isSortLocaleAware()'''
        return bool()
    def supportedDropActions(self):
        '''Qt.DropActions QSortFilterProxyModel.supportedDropActions()'''
        return Qt.DropActions()
    def mimeTypes(self):
        '''QStringList QSortFilterProxyModel.mimeTypes()'''
        return QStringList()
    def setFilterRole(self, role):
        '''void QSortFilterProxyModel.setFilterRole(int role)'''
    def filterRole(self):
        '''int QSortFilterProxyModel.filterRole()'''
        return int()
    def sortOrder(self):
        '''Qt.SortOrder QSortFilterProxyModel.sortOrder()'''
        return Qt.SortOrder()
    def sortColumn(self):
        '''int QSortFilterProxyModel.sortColumn()'''
        return int()
    def setSortRole(self, role):
        '''void QSortFilterProxyModel.setSortRole(int role)'''
    def sortRole(self):
        '''int QSortFilterProxyModel.sortRole()'''
        return int()
    def setDynamicSortFilter(self, enable):
        '''void QSortFilterProxyModel.setDynamicSortFilter(bool enable)'''
    def dynamicSortFilter(self):
        '''bool QSortFilterProxyModel.dynamicSortFilter()'''
        return bool()
    def setSortCaseSensitivity(self, cs):
        '''void QSortFilterProxyModel.setSortCaseSensitivity(Qt.CaseSensitivity cs)'''
    def sortCaseSensitivity(self):
        '''Qt.CaseSensitivity QSortFilterProxyModel.sortCaseSensitivity()'''
        return Qt.CaseSensitivity()
    def sort(self, column, order = None):
        '''void QSortFilterProxyModel.sort(int column, Qt.SortOrder order = Qt.AscendingOrder)'''
    def match(self, start, role, value, hits = 1, flags = None):
        '''list-of-QModelIndex QSortFilterProxyModel.match(QModelIndex start, int role, QVariant value, int hits = 1, Qt.MatchFlags flags = Qt.MatchStartsWith|Qt.MatchWrap)'''
        return [QModelIndex()]
    def span(self, index):
        '''QSize QSortFilterProxyModel.span(QModelIndex index)'''
        return QSize()
    def buddy(self, index):
        '''QModelIndex QSortFilterProxyModel.buddy(QModelIndex index)'''
        return QModelIndex()
    def flags(self, index):
        '''Qt.ItemFlags QSortFilterProxyModel.flags(QModelIndex index)'''
        return Qt.ItemFlags()
    def canFetchMore(self, parent):
        '''bool QSortFilterProxyModel.canFetchMore(QModelIndex parent)'''
        return bool()
    def fetchMore(self, parent):
        '''void QSortFilterProxyModel.fetchMore(QModelIndex parent)'''
    def removeColumns(self, column, count, parent = QModelIndex()):
        '''bool QSortFilterProxyModel.removeColumns(int column, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def removeRows(self, row, count, parent = QModelIndex()):
        '''bool QSortFilterProxyModel.removeRows(int row, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def insertColumns(self, column, count, parent = QModelIndex()):
        '''bool QSortFilterProxyModel.insertColumns(int column, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def insertRows(self, row, count, parent = QModelIndex()):
        '''bool QSortFilterProxyModel.insertRows(int row, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def dropMimeData(self, data, action, row, column, parent):
        '''bool QSortFilterProxyModel.dropMimeData(QMimeData data, Qt.DropAction action, int row, int column, QModelIndex parent)'''
        return bool()
    def mimeData(self, indexes):
        '''QMimeData QSortFilterProxyModel.mimeData(list-of-QModelIndex indexes)'''
        return QMimeData()
    def setHeaderData(self, section, orientation, value, role = None):
        '''bool QSortFilterProxyModel.setHeaderData(int section, Qt.Orientation orientation, QVariant value, int role = Qt.EditRole)'''
        return bool()
    def headerData(self, section, orientation, role = None):
        '''QVariant QSortFilterProxyModel.headerData(int section, Qt.Orientation orientation, int role = Qt.EditRole)'''
        return QVariant()
    def setData(self, index, value, role = None):
        '''bool QSortFilterProxyModel.setData(QModelIndex index, QVariant value, int role = Qt.EditRole)'''
        return bool()
    def hasChildren(self, parent = QModelIndex()):
        '''bool QSortFilterProxyModel.hasChildren(QModelIndex parent = QModelIndex())'''
        return bool()
    def columnCount(self, parent = QModelIndex()):
        '''int QSortFilterProxyModel.columnCount(QModelIndex parent = QModelIndex())'''
        return int()
    def rowCount(self, parent = QModelIndex()):
        '''int QSortFilterProxyModel.rowCount(QModelIndex parent = QModelIndex())'''
        return int()
    def parent(self, child):
        '''QModelIndex QSortFilterProxyModel.parent(QModelIndex child)'''
        return QModelIndex()
    def parent(self):
        '''QObject QSortFilterProxyModel.parent()'''
        return QObject()
    def index(self, row, column, parent = QModelIndex()):
        '''QModelIndex QSortFilterProxyModel.index(int row, int column, QModelIndex parent = QModelIndex())'''
        return QModelIndex()
    def lessThan(self, left, right):
        '''bool QSortFilterProxyModel.lessThan(QModelIndex left, QModelIndex right)'''
        return bool()
    def filterChanged(self):
        '''void QSortFilterProxyModel.filterChanged()'''
    def filterAcceptsColumn(self, source_column, source_parent):
        '''bool QSortFilterProxyModel.filterAcceptsColumn(int source_column, QModelIndex source_parent)'''
        return bool()
    def filterAcceptsRow(self, source_row, source_parent):
        '''bool QSortFilterProxyModel.filterAcceptsRow(int source_row, QModelIndex source_parent)'''
        return bool()
    def clear(self):
        '''void QSortFilterProxyModel.clear()'''
    def setFilterFixedString(self, pattern):
        '''void QSortFilterProxyModel.setFilterFixedString(QString pattern)'''
    def setFilterWildcard(self, pattern):
        '''void QSortFilterProxyModel.setFilterWildcard(QString pattern)'''
    def setFilterCaseSensitivity(self, cs):
        '''void QSortFilterProxyModel.setFilterCaseSensitivity(Qt.CaseSensitivity cs)'''
    def filterCaseSensitivity(self):
        '''Qt.CaseSensitivity QSortFilterProxyModel.filterCaseSensitivity()'''
        return Qt.CaseSensitivity()
    def setFilterKeyColumn(self, column):
        '''void QSortFilterProxyModel.setFilterKeyColumn(int column)'''
    def filterKeyColumn(self):
        '''int QSortFilterProxyModel.filterKeyColumn()'''
        return int()
    def setFilterRegExp(self, regExp):
        '''void QSortFilterProxyModel.setFilterRegExp(QRegExp regExp)'''
    def setFilterRegExp(self, pattern):
        '''void QSortFilterProxyModel.setFilterRegExp(QString pattern)'''
    def filterRegExp(self):
        '''QRegExp QSortFilterProxyModel.filterRegExp()'''
        return QRegExp()
    def mapSelectionFromSource(self, sourceSelection):
        '''QItemSelection QSortFilterProxyModel.mapSelectionFromSource(QItemSelection sourceSelection)'''
        return QItemSelection()
    def mapSelectionToSource(self, proxySelection):
        '''QItemSelection QSortFilterProxyModel.mapSelectionToSource(QItemSelection proxySelection)'''
        return QItemSelection()
    def mapFromSource(self, sourceIndex):
        '''QModelIndex QSortFilterProxyModel.mapFromSource(QModelIndex sourceIndex)'''
        return QModelIndex()
    def mapToSource(self, proxyIndex):
        '''QModelIndex QSortFilterProxyModel.mapToSource(QModelIndex proxyIndex)'''
        return QModelIndex()
    def setSourceModel(self, sourceModel):
        '''void QSortFilterProxyModel.setSourceModel(QAbstractItemModel sourceModel)'''


class QSound(QObject):
    """"""
    def __init__(self, filename, parent = None):
        '''void QSound.__init__(QString filename, QObject parent = None)'''
    def stop(self):
        '''void QSound.stop()'''
    def isFinished(self):
        '''bool QSound.isFinished()'''
        return bool()
    def fileName(self):
        '''QString QSound.fileName()'''
        return QString()
    def setLoops(self):
        '''int QSound.setLoops()'''
        return int()
    def loopsRemaining(self):
        '''int QSound.loopsRemaining()'''
        return int()
    def loops(self):
        '''int QSound.loops()'''
        return int()
    def play(self, filename):
        '''static void QSound.play(QString filename)'''
    def play(self):
        '''void QSound.play()'''
    def isAvailable(self):
        '''static bool QSound.isAvailable()'''
        return bool()


class QSpinBox(QAbstractSpinBox):
    """"""
    def __init__(self, parent = None):
        '''void QSpinBox.__init__(QWidget parent = None)'''
    valueChanged = pyqtSignal() # void valueChanged(int) - signal
    valueChanged = pyqtSignal() # void valueChanged(const QStringamp;) - signal
    def setValue(self, val):
        '''void QSpinBox.setValue(int val)'''
    def event(self, e):
        '''bool QSpinBox.event(QEvent e)'''
        return bool()
    def fixup(self, str):
        '''void QSpinBox.fixup(QString str)'''
    def fixup(self, str):
        '''void QSpinBox.fixup(QString str)'''
    def textFromValue(self, v):
        '''QString QSpinBox.textFromValue(int v)'''
        return QString()
    def valueFromText(self, text):
        '''int QSpinBox.valueFromText(QString text)'''
        return int()
    def validate(self, input, pos):
        '''QValidator.State QSpinBox.validate(QString input, int pos)'''
        return QValidator.State()
    def validate(self, input, pos):
        '''QValidator.State QSpinBox.validate(QString input, int pos)'''
        return QValidator.State()
    def setRange(self, min, max):
        '''void QSpinBox.setRange(int min, int max)'''
    def setMaximum(self, max):
        '''void QSpinBox.setMaximum(int max)'''
    def maximum(self):
        '''int QSpinBox.maximum()'''
        return int()
    def setMinimum(self, min):
        '''void QSpinBox.setMinimum(int min)'''
    def minimum(self):
        '''int QSpinBox.minimum()'''
        return int()
    def setSingleStep(self, val):
        '''void QSpinBox.setSingleStep(int val)'''
    def singleStep(self):
        '''int QSpinBox.singleStep()'''
        return int()
    def cleanText(self):
        '''QString QSpinBox.cleanText()'''
        return QString()
    def setSuffix(self, s):
        '''void QSpinBox.setSuffix(QString s)'''
    def suffix(self):
        '''QString QSpinBox.suffix()'''
        return QString()
    def setPrefix(self, p):
        '''void QSpinBox.setPrefix(QString p)'''
    def prefix(self):
        '''QString QSpinBox.prefix()'''
        return QString()
    def value(self):
        '''int QSpinBox.value()'''
        return int()


class QDoubleSpinBox(QAbstractSpinBox):
    """"""
    def __init__(self, parent = None):
        '''void QDoubleSpinBox.__init__(QWidget parent = None)'''
    valueChanged = pyqtSignal() # void valueChanged(double) - signal
    valueChanged = pyqtSignal() # void valueChanged(const QStringamp;) - signal
    def setValue(self, val):
        '''void QDoubleSpinBox.setValue(float val)'''
    def fixup(self, str):
        '''void QDoubleSpinBox.fixup(QString str)'''
    def fixup(self, str):
        '''void QDoubleSpinBox.fixup(QString str)'''
    def textFromValue(self, v):
        '''QString QDoubleSpinBox.textFromValue(float v)'''
        return QString()
    def valueFromText(self, text):
        '''float QDoubleSpinBox.valueFromText(QString text)'''
        return float()
    def validate(self, input, pos):
        '''QValidator.State QDoubleSpinBox.validate(QString input, int pos)'''
        return QValidator.State()
    def validate(self, input, pos):
        '''QValidator.State QDoubleSpinBox.validate(QString input, int pos)'''
        return QValidator.State()
    def setDecimals(self, prec):
        '''void QDoubleSpinBox.setDecimals(int prec)'''
    def decimals(self):
        '''int QDoubleSpinBox.decimals()'''
        return int()
    def setRange(self, min, max):
        '''void QDoubleSpinBox.setRange(float min, float max)'''
    def setMaximum(self, max):
        '''void QDoubleSpinBox.setMaximum(float max)'''
    def maximum(self):
        '''float QDoubleSpinBox.maximum()'''
        return float()
    def setMinimum(self, min):
        '''void QDoubleSpinBox.setMinimum(float min)'''
    def minimum(self):
        '''float QDoubleSpinBox.minimum()'''
        return float()
    def setSingleStep(self, val):
        '''void QDoubleSpinBox.setSingleStep(float val)'''
    def singleStep(self):
        '''float QDoubleSpinBox.singleStep()'''
        return float()
    def cleanText(self):
        '''QString QDoubleSpinBox.cleanText()'''
        return QString()
    def setSuffix(self, s):
        '''void QDoubleSpinBox.setSuffix(QString s)'''
    def suffix(self):
        '''QString QDoubleSpinBox.suffix()'''
        return QString()
    def setPrefix(self, p):
        '''void QDoubleSpinBox.setPrefix(QString p)'''
    def prefix(self):
        '''QString QDoubleSpinBox.prefix()'''
        return QString()
    def value(self):
        '''float QDoubleSpinBox.value()'''
        return float()


class QSplashScreen(QWidget):
    """"""
    def __init__(self, pixmap = QPixmap(), flags = 0):
        '''void QSplashScreen.__init__(QPixmap pixmap = QPixmap(), Qt.WindowFlags flags = 0)'''
    def __init__(self, parent, pixmap = QPixmap(), flags = 0):
        '''void QSplashScreen.__init__(QWidget parent, QPixmap pixmap = QPixmap(), Qt.WindowFlags flags = 0)'''
    def mousePressEvent(self):
        '''QMouseEvent QSplashScreen.mousePressEvent()'''
        return QMouseEvent()
    def event(self, e):
        '''bool QSplashScreen.event(QEvent e)'''
        return bool()
    def drawContents(self, painter):
        '''void QSplashScreen.drawContents(QPainter painter)'''
    messageChanged = pyqtSignal() # void messageChanged(const QStringamp;) - signal
    def clearMessage(self):
        '''void QSplashScreen.clearMessage()'''
    def showMessage(self, message, alignment = None, color = None):
        '''void QSplashScreen.showMessage(QString message, int alignment = Qt.AlignLeft, QColor color = Qt.black)'''
    def repaint(self):
        '''void QSplashScreen.repaint()'''
    def finish(self, w):
        '''void QSplashScreen.finish(QWidget w)'''
    def pixmap(self):
        '''QPixmap QSplashScreen.pixmap()'''
        return QPixmap()
    def setPixmap(self, pixmap):
        '''void QSplashScreen.setPixmap(QPixmap pixmap)'''


class QSplitter(QFrame):
    """"""
    def __init__(self, parent = None):
        '''void QSplitter.__init__(QWidget parent = None)'''
    def __init__(self, orientation, parent = None):
        '''void QSplitter.__init__(Qt.Orientation orientation, QWidget parent = None)'''
    def closestLegalPosition(self):
        '''int QSplitter.closestLegalPosition()'''
        return int()
    def setRubberBand(self, position):
        '''void QSplitter.setRubberBand(int position)'''
    def moveSplitter(self, pos, index):
        '''void QSplitter.moveSplitter(int pos, int index)'''
    def changeEvent(self):
        '''QEvent QSplitter.changeEvent()'''
        return QEvent()
    def resizeEvent(self):
        '''QResizeEvent QSplitter.resizeEvent()'''
        return QResizeEvent()
    def event(self):
        '''QEvent QSplitter.event()'''
        return QEvent()
    def childEvent(self):
        '''QChildEvent QSplitter.childEvent()'''
        return QChildEvent()
    def createHandle(self):
        '''QSplitterHandle QSplitter.createHandle()'''
        return QSplitterHandle()
    splitterMoved = pyqtSignal() # void splitterMoved(int,int) - signal
    def setStretchFactor(self, index, stretch):
        '''void QSplitter.setStretchFactor(int index, int stretch)'''
    def handle(self, index):
        '''QSplitterHandle QSplitter.handle(int index)'''
        return QSplitterHandle()
    def getRange(self, index):
        '''int QSplitter.getRange(int index)'''
        return int()
    def __len__(self):
        '''None QSplitter.__len__()'''
        return None()
    def count(self):
        '''int QSplitter.count()'''
        return int()
    def widget(self, index):
        '''QWidget QSplitter.widget(int index)'''
        return QWidget()
    def indexOf(self, w):
        '''int QSplitter.indexOf(QWidget w)'''
        return int()
    def setHandleWidth(self):
        '''int QSplitter.setHandleWidth()'''
        return int()
    def handleWidth(self):
        '''int QSplitter.handleWidth()'''
        return int()
    def restoreState(self, state):
        '''bool QSplitter.restoreState(QByteArray state)'''
        return bool()
    def saveState(self):
        '''QByteArray QSplitter.saveState()'''
        return QByteArray()
    def setSizes(self, list):
        '''void QSplitter.setSizes(list-of-int list)'''
    def sizes(self):
        '''list-of-int QSplitter.sizes()'''
        return [int()]
    def minimumSizeHint(self):
        '''QSize QSplitter.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QSplitter.sizeHint()'''
        return QSize()
    def refresh(self):
        '''void QSplitter.refresh()'''
    def opaqueResize(self):
        '''bool QSplitter.opaqueResize()'''
        return bool()
    def setOpaqueResize(self, opaque = True):
        '''void QSplitter.setOpaqueResize(bool opaque = True)'''
    def isCollapsible(self, index):
        '''bool QSplitter.isCollapsible(int index)'''
        return bool()
    def setCollapsible(self, index):
        '''bool QSplitter.setCollapsible(int index)'''
        return bool()
    def childrenCollapsible(self):
        '''bool QSplitter.childrenCollapsible()'''
        return bool()
    def setChildrenCollapsible(self):
        '''bool QSplitter.setChildrenCollapsible()'''
        return bool()
    def orientation(self):
        '''Qt.Orientation QSplitter.orientation()'''
        return Qt.Orientation()
    def setOrientation(self):
        '''Qt.Orientation QSplitter.setOrientation()'''
        return Qt.Orientation()
    def insertWidget(self, index, widget):
        '''void QSplitter.insertWidget(int index, QWidget widget)'''
    def addWidget(self, widget):
        '''void QSplitter.addWidget(QWidget widget)'''


class QSplitterHandle(QWidget):
    """"""
    def __init__(self, o, parent):
        '''void QSplitterHandle.__init__(Qt.Orientation o, QSplitter parent)'''
    def resizeEvent(self):
        '''QResizeEvent QSplitterHandle.resizeEvent()'''
        return QResizeEvent()
    def closestLegalPosition(self, p):
        '''int QSplitterHandle.closestLegalPosition(int p)'''
        return int()
    def moveSplitter(self, p):
        '''void QSplitterHandle.moveSplitter(int p)'''
    def event(self):
        '''QEvent QSplitterHandle.event()'''
        return QEvent()
    def mouseReleaseEvent(self):
        '''QMouseEvent QSplitterHandle.mouseReleaseEvent()'''
        return QMouseEvent()
    def mousePressEvent(self):
        '''QMouseEvent QSplitterHandle.mousePressEvent()'''
        return QMouseEvent()
    def mouseMoveEvent(self):
        '''QMouseEvent QSplitterHandle.mouseMoveEvent()'''
        return QMouseEvent()
    def paintEvent(self):
        '''QPaintEvent QSplitterHandle.paintEvent()'''
        return QPaintEvent()
    def sizeHint(self):
        '''QSize QSplitterHandle.sizeHint()'''
        return QSize()
    def splitter(self):
        '''QSplitter QSplitterHandle.splitter()'''
        return QSplitter()
    def opaqueResize(self):
        '''bool QSplitterHandle.opaqueResize()'''
        return bool()
    def orientation(self):
        '''Qt.Orientation QSplitterHandle.orientation()'''
        return Qt.Orientation()
    def setOrientation(self, o):
        '''void QSplitterHandle.setOrientation(Qt.Orientation o)'''


class QStackedLayout(QLayout):
    """"""
    # Enum QStackedLayout.StackingMode
    StackOne = 0
    StackAll = 0

    def __init__(self):
        '''void QStackedLayout.__init__()'''
    def __init__(self, parent):
        '''void QStackedLayout.__init__(QWidget parent)'''
    def __init__(self, parentLayout):
        '''void QStackedLayout.__init__(QLayout parentLayout)'''
    def setStackingMode(self, stackingMode):
        '''void QStackedLayout.setStackingMode(QStackedLayout.StackingMode stackingMode)'''
    def stackingMode(self):
        '''QStackedLayout.StackingMode QStackedLayout.stackingMode()'''
        return QStackedLayout.StackingMode()
    def setCurrentWidget(self, w):
        '''void QStackedLayout.setCurrentWidget(QWidget w)'''
    def setCurrentIndex(self, index):
        '''void QStackedLayout.setCurrentIndex(int index)'''
    currentChanged = pyqtSignal() # void currentChanged(int) - signal
    widgetRemoved = pyqtSignal() # void widgetRemoved(int) - signal
    def setGeometry(self, rect):
        '''void QStackedLayout.setGeometry(QRect rect)'''
    def takeAt(self):
        '''int QStackedLayout.takeAt()'''
        return int()
    def itemAt(self):
        '''int QStackedLayout.itemAt()'''
        return int()
    def minimumSize(self):
        '''QSize QStackedLayout.minimumSize()'''
        return QSize()
    def sizeHint(self):
        '''QSize QStackedLayout.sizeHint()'''
        return QSize()
    def addItem(self, item):
        '''void QStackedLayout.addItem(QLayoutItem item)'''
    def count(self):
        '''int QStackedLayout.count()'''
        return int()
    def widget(self):
        '''int QStackedLayout.widget()'''
        return int()
    def widget(self):
        '''QWidget QStackedLayout.widget()'''
        return QWidget()
    def currentIndex(self):
        '''int QStackedLayout.currentIndex()'''
        return int()
    def currentWidget(self):
        '''QWidget QStackedLayout.currentWidget()'''
        return QWidget()
    def insertWidget(self, index, w):
        '''int QStackedLayout.insertWidget(int index, QWidget w)'''
        return int()
    def addWidget(self, w):
        '''int QStackedLayout.addWidget(QWidget w)'''
        return int()


class QStackedWidget(QFrame):
    """"""
    def __init__(self, parent = None):
        '''void QStackedWidget.__init__(QWidget parent = None)'''
    def event(self, e):
        '''bool QStackedWidget.event(QEvent e)'''
        return bool()
    widgetRemoved = pyqtSignal() # void widgetRemoved(int) - signal
    currentChanged = pyqtSignal() # void currentChanged(int) - signal
    def setCurrentWidget(self, w):
        '''void QStackedWidget.setCurrentWidget(QWidget w)'''
    def setCurrentIndex(self, index):
        '''void QStackedWidget.setCurrentIndex(int index)'''
    def __len__(self):
        '''None QStackedWidget.__len__()'''
        return None()
    def count(self):
        '''int QStackedWidget.count()'''
        return int()
    def widget(self):
        '''int QStackedWidget.widget()'''
        return int()
    def indexOf(self):
        '''QWidget QStackedWidget.indexOf()'''
        return QWidget()
    def currentIndex(self):
        '''int QStackedWidget.currentIndex()'''
        return int()
    def currentWidget(self):
        '''QWidget QStackedWidget.currentWidget()'''
        return QWidget()
    def removeWidget(self, w):
        '''void QStackedWidget.removeWidget(QWidget w)'''
    def insertWidget(self, index, w):
        '''int QStackedWidget.insertWidget(int index, QWidget w)'''
        return int()
    def addWidget(self, w):
        '''int QStackedWidget.addWidget(QWidget w)'''
        return int()


class QStandardItemModel(QAbstractItemModel):
    """"""
    def __init__(self, parent = None):
        '''void QStandardItemModel.__init__(QObject parent = None)'''
    def __init__(self, rows, columns, parent = None):
        '''void QStandardItemModel.__init__(int rows, int columns, QObject parent = None)'''
    itemChanged = pyqtSignal() # void itemChanged(QStandardItem *) - signal
    def dropMimeData(self, data, action, row, column, parent):
        '''bool QStandardItemModel.dropMimeData(QMimeData data, Qt.DropAction action, int row, int column, QModelIndex parent)'''
        return bool()
    def mimeData(self, indexes):
        '''QMimeData QStandardItemModel.mimeData(list-of-QModelIndex indexes)'''
        return QMimeData()
    def mimeTypes(self):
        '''QStringList QStandardItemModel.mimeTypes()'''
        return QStringList()
    def setSortRole(self, role):
        '''void QStandardItemModel.setSortRole(int role)'''
    def sortRole(self):
        '''int QStandardItemModel.sortRole()'''
        return int()
    def findItems(self, text, flags = None, column = 0):
        '''list-of-QStandardItem QStandardItemModel.findItems(QString text, Qt.MatchFlags flags = Qt.MatchExactly, int column = 0)'''
        return [QStandardItem()]
    def setItemPrototype(self, item):
        '''void QStandardItemModel.setItemPrototype(QStandardItem item)'''
    def itemPrototype(self):
        '''QStandardItem QStandardItemModel.itemPrototype()'''
        return QStandardItem()
    def takeVerticalHeaderItem(self, row):
        '''QStandardItem QStandardItemModel.takeVerticalHeaderItem(int row)'''
        return QStandardItem()
    def takeHorizontalHeaderItem(self, column):
        '''QStandardItem QStandardItemModel.takeHorizontalHeaderItem(int column)'''
        return QStandardItem()
    def takeColumn(self, column):
        '''list-of-QStandardItem QStandardItemModel.takeColumn(int column)'''
        return [QStandardItem()]
    def takeRow(self, row):
        '''list-of-QStandardItem QStandardItemModel.takeRow(int row)'''
        return [QStandardItem()]
    def takeItem(self, row, column = 0):
        '''QStandardItem QStandardItemModel.takeItem(int row, int column = 0)'''
        return QStandardItem()
    def insertColumn(self, column, items):
        '''void QStandardItemModel.insertColumn(int column, list-of-QStandardItem items)'''
    def insertColumn(self, column, parent = QModelIndex()):
        '''bool QStandardItemModel.insertColumn(int column, QModelIndex parent = QModelIndex())'''
        return bool()
    def insertRow(self, row, items):
        '''void QStandardItemModel.insertRow(int row, list-of-QStandardItem items)'''
    def insertRow(self, arow, aitem):
        '''void QStandardItemModel.insertRow(int arow, QStandardItem aitem)'''
    def insertRow(self, row, parent = QModelIndex()):
        '''bool QStandardItemModel.insertRow(int row, QModelIndex parent = QModelIndex())'''
        return bool()
    def appendColumn(self, items):
        '''void QStandardItemModel.appendColumn(list-of-QStandardItem items)'''
    def appendRow(self, items):
        '''void QStandardItemModel.appendRow(list-of-QStandardItem items)'''
    def appendRow(self, aitem):
        '''void QStandardItemModel.appendRow(QStandardItem aitem)'''
    def setColumnCount(self, columns):
        '''void QStandardItemModel.setColumnCount(int columns)'''
    def setRowCount(self, rows):
        '''void QStandardItemModel.setRowCount(int rows)'''
    def setVerticalHeaderLabels(self, labels):
        '''void QStandardItemModel.setVerticalHeaderLabels(QStringList labels)'''
    def setHorizontalHeaderLabels(self, labels):
        '''void QStandardItemModel.setHorizontalHeaderLabels(QStringList labels)'''
    def setVerticalHeaderItem(self, row, item):
        '''void QStandardItemModel.setVerticalHeaderItem(int row, QStandardItem item)'''
    def verticalHeaderItem(self, row):
        '''QStandardItem QStandardItemModel.verticalHeaderItem(int row)'''
        return QStandardItem()
    def setHorizontalHeaderItem(self, column, item):
        '''void QStandardItemModel.setHorizontalHeaderItem(int column, QStandardItem item)'''
    def horizontalHeaderItem(self, column):
        '''QStandardItem QStandardItemModel.horizontalHeaderItem(int column)'''
        return QStandardItem()
    def invisibleRootItem(self):
        '''QStandardItem QStandardItemModel.invisibleRootItem()'''
        return QStandardItem()
    def setItem(self, row, column, item):
        '''void QStandardItemModel.setItem(int row, int column, QStandardItem item)'''
    def setItem(self, arow, aitem):
        '''void QStandardItemModel.setItem(int arow, QStandardItem aitem)'''
    def item(self, row, column = 0):
        '''QStandardItem QStandardItemModel.item(int row, int column = 0)'''
        return QStandardItem()
    def indexFromItem(self, item):
        '''QModelIndex QStandardItemModel.indexFromItem(QStandardItem item)'''
        return QModelIndex()
    def itemFromIndex(self, index):
        '''QStandardItem QStandardItemModel.itemFromIndex(QModelIndex index)'''
        return QStandardItem()
    def sort(self, column, order = None):
        '''void QStandardItemModel.sort(int column, Qt.SortOrder order = Qt.AscendingOrder)'''
    def setItemData(self, index, roles):
        '''bool QStandardItemModel.setItemData(QModelIndex index, dict-of-int-QVariant roles)'''
        return bool()
    def itemData(self, index):
        '''dict-of-int-QVariant QStandardItemModel.itemData(QModelIndex index)'''
        return dict-of-int-QVariant()
    def supportedDropActions(self):
        '''Qt.DropActions QStandardItemModel.supportedDropActions()'''
        return Qt.DropActions()
    def clear(self):
        '''void QStandardItemModel.clear()'''
    def flags(self, index):
        '''Qt.ItemFlags QStandardItemModel.flags(QModelIndex index)'''
        return Qt.ItemFlags()
    def removeColumns(self, column, count, parent = QModelIndex()):
        '''bool QStandardItemModel.removeColumns(int column, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def removeRows(self, row, count, parent = QModelIndex()):
        '''bool QStandardItemModel.removeRows(int row, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def insertColumns(self, column, count, parent = QModelIndex()):
        '''bool QStandardItemModel.insertColumns(int column, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def insertRows(self, row, count, parent = QModelIndex()):
        '''bool QStandardItemModel.insertRows(int row, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def setHeaderData(self, section, orientation, value, role = None):
        '''bool QStandardItemModel.setHeaderData(int section, Qt.Orientation orientation, QVariant value, int role = Qt.EditRole)'''
        return bool()
    def headerData(self, section, orientation, role = None):
        '''QVariant QStandardItemModel.headerData(int section, Qt.Orientation orientation, int role = Qt.DisplayRole)'''
        return QVariant()
    def setData(self, index, value, role = None):
        '''bool QStandardItemModel.setData(QModelIndex index, QVariant value, int role = Qt.EditRole)'''
        return bool()
    def data(self, index, role = None):
        '''QVariant QStandardItemModel.data(QModelIndex index, int role = Qt.DisplayRole)'''
        return QVariant()
    def hasChildren(self, parent = QModelIndex()):
        '''bool QStandardItemModel.hasChildren(QModelIndex parent = QModelIndex())'''
        return bool()
    def columnCount(self, parent = QModelIndex()):
        '''int QStandardItemModel.columnCount(QModelIndex parent = QModelIndex())'''
        return int()
    def rowCount(self, parent = QModelIndex()):
        '''int QStandardItemModel.rowCount(QModelIndex parent = QModelIndex())'''
        return int()
    def parent(self, child):
        '''QModelIndex QStandardItemModel.parent(QModelIndex child)'''
        return QModelIndex()
    def parent(self):
        '''QObject QStandardItemModel.parent()'''
        return QObject()
    def index(self, row, column, parent = QModelIndex()):
        '''QModelIndex QStandardItemModel.index(int row, int column, QModelIndex parent = QModelIndex())'''
        return QModelIndex()


class QStandardItem():
    """"""
    # Enum QStandardItem.ItemType
    Type = 0
    UserType = 0

    def __init__(self):
        '''void QStandardItem.__init__()'''
    def __init__(self, text):
        '''void QStandardItem.__init__(QString text)'''
    def __init__(self, icon, text):
        '''void QStandardItem.__init__(QIcon icon, QString text)'''
    def __init__(self, rows, columns = 1):
        '''void QStandardItem.__init__(int rows, int columns = 1)'''
    def __init__(self, other):
        '''void QStandardItem.__init__(QStandardItem other)'''
    def __ge__(self, other):
        '''bool QStandardItem.__ge__(QStandardItem other)'''
        return bool()
    def emitDataChanged(self):
        '''void QStandardItem.emitDataChanged()'''
    def appendRows(self, aitems):
        '''void QStandardItem.appendRows(list-of-QStandardItem aitems)'''
    def appendColumn(self, aitems):
        '''void QStandardItem.appendColumn(list-of-QStandardItem aitems)'''
    def appendRow(self, aitems):
        '''void QStandardItem.appendRow(list-of-QStandardItem aitems)'''
    def appendRow(self, aitem):
        '''void QStandardItem.appendRow(QStandardItem aitem)'''
    def setAccessibleDescription(self, aaccessibleDescription):
        '''void QStandardItem.setAccessibleDescription(QString aaccessibleDescription)'''
    def setAccessibleText(self, aaccessibleText):
        '''void QStandardItem.setAccessibleText(QString aaccessibleText)'''
    def setCheckState(self, acheckState):
        '''void QStandardItem.setCheckState(Qt.CheckState acheckState)'''
    def setForeground(self, abrush):
        '''void QStandardItem.setForeground(QBrush abrush)'''
    def setBackground(self, abrush):
        '''void QStandardItem.setBackground(QBrush abrush)'''
    def setTextAlignment(self, atextAlignment):
        '''void QStandardItem.setTextAlignment(Qt.Alignment atextAlignment)'''
    def setFont(self, afont):
        '''void QStandardItem.setFont(QFont afont)'''
    def setSizeHint(self, asizeHint):
        '''void QStandardItem.setSizeHint(QSize asizeHint)'''
    def setWhatsThis(self, awhatsThis):
        '''void QStandardItem.setWhatsThis(QString awhatsThis)'''
    def setStatusTip(self, astatusTip):
        '''void QStandardItem.setStatusTip(QString astatusTip)'''
    def setToolTip(self, atoolTip):
        '''void QStandardItem.setToolTip(QString atoolTip)'''
    def setIcon(self, aicon):
        '''void QStandardItem.setIcon(QIcon aicon)'''
    def setText(self, atext):
        '''void QStandardItem.setText(QString atext)'''
    def __lt__(self, other):
        '''bool QStandardItem.__lt__(QStandardItem other)'''
        return bool()
    def write(self, out):
        '''void QStandardItem.write(QDataStream out)'''
    def read(self, in_):
        '''void QStandardItem.read(QDataStream in)'''
    def type(self):
        '''int QStandardItem.type()'''
        return int()
    def clone(self):
        '''QStandardItem QStandardItem.clone()'''
        return QStandardItem()
    def sortChildren(self, column, order = None):
        '''void QStandardItem.sortChildren(int column, Qt.SortOrder order = Qt.AscendingOrder)'''
    def takeColumn(self, column):
        '''list-of-QStandardItem QStandardItem.takeColumn(int column)'''
        return [QStandardItem()]
    def takeRow(self, row):
        '''list-of-QStandardItem QStandardItem.takeRow(int row)'''
        return [QStandardItem()]
    def takeChild(self, row, column = 0):
        '''QStandardItem QStandardItem.takeChild(int row, int column = 0)'''
        return QStandardItem()
    def removeColumns(self, column, count):
        '''void QStandardItem.removeColumns(int column, int count)'''
    def removeRows(self, row, count):
        '''void QStandardItem.removeRows(int row, int count)'''
    def removeColumn(self, column):
        '''void QStandardItem.removeColumn(int column)'''
    def removeRow(self, row):
        '''void QStandardItem.removeRow(int row)'''
    def insertColumns(self, column, count):
        '''void QStandardItem.insertColumns(int column, int count)'''
    def insertColumn(self, column, items):
        '''void QStandardItem.insertColumn(int column, list-of-QStandardItem items)'''
    def insertRows(self, row, count):
        '''void QStandardItem.insertRows(int row, int count)'''
    def insertRows(self, row, items):
        '''void QStandardItem.insertRows(int row, list-of-QStandardItem items)'''
    def insertRow(self, row, items):
        '''void QStandardItem.insertRow(int row, list-of-QStandardItem items)'''
    def insertRow(self, arow, aitem):
        '''void QStandardItem.insertRow(int arow, QStandardItem aitem)'''
    def setChild(self, row, column, item):
        '''void QStandardItem.setChild(int row, int column, QStandardItem item)'''
    def setChild(self, arow, aitem):
        '''void QStandardItem.setChild(int arow, QStandardItem aitem)'''
    def child(self, row, column = 0):
        '''QStandardItem QStandardItem.child(int row, int column = 0)'''
        return QStandardItem()
    def hasChildren(self):
        '''bool QStandardItem.hasChildren()'''
        return bool()
    def setColumnCount(self, columns):
        '''void QStandardItem.setColumnCount(int columns)'''
    def columnCount(self):
        '''int QStandardItem.columnCount()'''
        return int()
    def setRowCount(self, rows):
        '''void QStandardItem.setRowCount(int rows)'''
    def rowCount(self):
        '''int QStandardItem.rowCount()'''
        return int()
    def model(self):
        '''QStandardItemModel QStandardItem.model()'''
        return QStandardItemModel()
    def index(self):
        '''QModelIndex QStandardItem.index()'''
        return QModelIndex()
    def column(self):
        '''int QStandardItem.column()'''
        return int()
    def row(self):
        '''int QStandardItem.row()'''
        return int()
    def parent(self):
        '''QStandardItem QStandardItem.parent()'''
        return QStandardItem()
    def setDropEnabled(self, dropEnabled):
        '''void QStandardItem.setDropEnabled(bool dropEnabled)'''
    def isDropEnabled(self):
        '''bool QStandardItem.isDropEnabled()'''
        return bool()
    def setDragEnabled(self, dragEnabled):
        '''void QStandardItem.setDragEnabled(bool dragEnabled)'''
    def isDragEnabled(self):
        '''bool QStandardItem.isDragEnabled()'''
        return bool()
    def setTristate(self, tristate):
        '''void QStandardItem.setTristate(bool tristate)'''
    def isTristate(self):
        '''bool QStandardItem.isTristate()'''
        return bool()
    def setCheckable(self, checkable):
        '''void QStandardItem.setCheckable(bool checkable)'''
    def isCheckable(self):
        '''bool QStandardItem.isCheckable()'''
        return bool()
    def setSelectable(self, selectable):
        '''void QStandardItem.setSelectable(bool selectable)'''
    def isSelectable(self):
        '''bool QStandardItem.isSelectable()'''
        return bool()
    def setEditable(self, editable):
        '''void QStandardItem.setEditable(bool editable)'''
    def isEditable(self):
        '''bool QStandardItem.isEditable()'''
        return bool()
    def setEnabled(self, enabled):
        '''void QStandardItem.setEnabled(bool enabled)'''
    def isEnabled(self):
        '''bool QStandardItem.isEnabled()'''
        return bool()
    def setFlags(self, flags):
        '''void QStandardItem.setFlags(Qt.ItemFlags flags)'''
    def flags(self):
        '''Qt.ItemFlags QStandardItem.flags()'''
        return Qt.ItemFlags()
    def accessibleDescription(self):
        '''QString QStandardItem.accessibleDescription()'''
        return QString()
    def accessibleText(self):
        '''QString QStandardItem.accessibleText()'''
        return QString()
    def checkState(self):
        '''Qt.CheckState QStandardItem.checkState()'''
        return Qt.CheckState()
    def foreground(self):
        '''QBrush QStandardItem.foreground()'''
        return QBrush()
    def background(self):
        '''QBrush QStandardItem.background()'''
        return QBrush()
    def textAlignment(self):
        '''Qt.Alignment QStandardItem.textAlignment()'''
        return Qt.Alignment()
    def font(self):
        '''QFont QStandardItem.font()'''
        return QFont()
    def sizeHint(self):
        '''QSize QStandardItem.sizeHint()'''
        return QSize()
    def whatsThis(self):
        '''QString QStandardItem.whatsThis()'''
        return QString()
    def statusTip(self):
        '''QString QStandardItem.statusTip()'''
        return QString()
    def toolTip(self):
        '''QString QStandardItem.toolTip()'''
        return QString()
    def icon(self):
        '''QIcon QStandardItem.icon()'''
        return QIcon()
    def text(self):
        '''QString QStandardItem.text()'''
        return QString()
    def setData(self, value, role = None):
        '''void QStandardItem.setData(QVariant value, int role = Qt.UserRole+1)'''
    def data(self, role = None):
        '''QVariant QStandardItem.data(int role = Qt.UserRole+1)'''
        return QVariant()


class QStaticText():
    """"""
    # Enum QStaticText.PerformanceHint
    ModerateCaching = 0
    AggressiveCaching = 0

    def __init__(self):
        '''void QStaticText.__init__()'''
    def __init__(self, text):
        '''void QStaticText.__init__(QString text)'''
    def __init__(self, other):
        '''void QStaticText.__init__(QStaticText other)'''
    def __ne__(self):
        '''QStaticText QStaticText.__ne__()'''
        return QStaticText()
    def __eq__(self):
        '''QStaticText QStaticText.__eq__()'''
        return QStaticText()
    def performanceHint(self):
        '''QStaticText.PerformanceHint QStaticText.performanceHint()'''
        return QStaticText.PerformanceHint()
    def setPerformanceHint(self, performanceHint):
        '''void QStaticText.setPerformanceHint(QStaticText.PerformanceHint performanceHint)'''
    def prepare(self, matrix = QTransform(), font = QFont()):
        '''void QStaticText.prepare(QTransform matrix = QTransform(), QFont font = QFont())'''
    def size(self):
        '''QSizeF QStaticText.size()'''
        return QSizeF()
    def textOption(self):
        '''QTextOption QStaticText.textOption()'''
        return QTextOption()
    def setTextOption(self, textOption):
        '''void QStaticText.setTextOption(QTextOption textOption)'''
    def textWidth(self):
        '''float QStaticText.textWidth()'''
        return float()
    def setTextWidth(self, textWidth):
        '''void QStaticText.setTextWidth(float textWidth)'''
    def textFormat(self):
        '''Qt.TextFormat QStaticText.textFormat()'''
        return Qt.TextFormat()
    def setTextFormat(self, textFormat):
        '''void QStaticText.setTextFormat(Qt.TextFormat textFormat)'''
    def text(self):
        '''QString QStaticText.text()'''
        return QString()
    def setText(self, text):
        '''void QStaticText.setText(QString text)'''


class QStatusBar(QWidget):
    """"""
    def __init__(self, parent = None):
        '''void QStatusBar.__init__(QWidget parent = None)'''
    def showEvent(self):
        '''QShowEvent QStatusBar.showEvent()'''
        return QShowEvent()
    def event(self):
        '''QEvent QStatusBar.event()'''
        return QEvent()
    def hideOrShow(self):
        '''void QStatusBar.hideOrShow()'''
    def reformat(self):
        '''void QStatusBar.reformat()'''
    def resizeEvent(self):
        '''QResizeEvent QStatusBar.resizeEvent()'''
        return QResizeEvent()
    def paintEvent(self):
        '''QPaintEvent QStatusBar.paintEvent()'''
        return QPaintEvent()
    messageChanged = pyqtSignal() # void messageChanged(const QStringamp;) - signal
    def clearMessage(self):
        '''void QStatusBar.clearMessage()'''
    def showMessage(self, message, msecs = 0):
        '''void QStatusBar.showMessage(QString message, int msecs = 0)'''
    def insertPermanentWidget(self, index, widget, stretch = 0):
        '''int QStatusBar.insertPermanentWidget(int index, QWidget widget, int stretch = 0)'''
        return int()
    def insertWidget(self, index, widget, stretch = 0):
        '''int QStatusBar.insertWidget(int index, QWidget widget, int stretch = 0)'''
        return int()
    def currentMessage(self):
        '''QString QStatusBar.currentMessage()'''
        return QString()
    def isSizeGripEnabled(self):
        '''bool QStatusBar.isSizeGripEnabled()'''
        return bool()
    def setSizeGripEnabled(self):
        '''bool QStatusBar.setSizeGripEnabled()'''
        return bool()
    def removeWidget(self, widget):
        '''void QStatusBar.removeWidget(QWidget widget)'''
    def addPermanentWidget(self, widget, stretch = 0):
        '''void QStatusBar.addPermanentWidget(QWidget widget, int stretch = 0)'''
    def addWidget(self, widget, stretch = 0):
        '''void QStatusBar.addWidget(QWidget widget, int stretch = 0)'''


class QStringListModel(QAbstractListModel):
    """"""
    def __init__(self, parent = None):
        '''void QStringListModel.__init__(QObject parent = None)'''
    def __init__(self, strings, parent = None):
        '''void QStringListModel.__init__(QStringList strings, QObject parent = None)'''
    def supportedDropActions(self):
        '''Qt.DropActions QStringListModel.supportedDropActions()'''
        return Qt.DropActions()
    def sort(self, column, order = None):
        '''void QStringListModel.sort(int column, Qt.SortOrder order = Qt.AscendingOrder)'''
    def setStringList(self, strings):
        '''void QStringListModel.setStringList(QStringList strings)'''
    def stringList(self):
        '''QStringList QStringListModel.stringList()'''
        return QStringList()
    def removeRows(self, row, count, parent = QModelIndex()):
        '''bool QStringListModel.removeRows(int row, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def insertRows(self, row, count, parent = QModelIndex()):
        '''bool QStringListModel.insertRows(int row, int count, QModelIndex parent = QModelIndex())'''
        return bool()
    def flags(self, index):
        '''Qt.ItemFlags QStringListModel.flags(QModelIndex index)'''
        return Qt.ItemFlags()
    def setData(self, index, value, role = None):
        '''bool QStringListModel.setData(QModelIndex index, QVariant value, int role = Qt.EditRole)'''
        return bool()
    def data(self, index, role):
        '''QVariant QStringListModel.data(QModelIndex index, int role)'''
        return QVariant()
    def rowCount(self, parent = QModelIndex()):
        '''int QStringListModel.rowCount(QModelIndex parent = QModelIndex())'''
        return int()


class QStyledItemDelegate(QAbstractItemDelegate):
    """"""
    def __init__(self, parent = None):
        '''void QStyledItemDelegate.__init__(QObject parent = None)'''
    def editorEvent(self, event, model, option, index):
        '''bool QStyledItemDelegate.editorEvent(QEvent event, QAbstractItemModel model, QStyleOptionViewItem option, QModelIndex index)'''
        return bool()
    def eventFilter(self, object, event):
        '''bool QStyledItemDelegate.eventFilter(QObject object, QEvent event)'''
        return bool()
    def initStyleOption(self, option, index):
        '''void QStyledItemDelegate.initStyleOption(QStyleOptionViewItem option, QModelIndex index)'''
    def displayText(self, value, locale):
        '''QString QStyledItemDelegate.displayText(QVariant value, QLocale locale)'''
        return QString()
    def setItemEditorFactory(self, factory):
        '''void QStyledItemDelegate.setItemEditorFactory(QItemEditorFactory factory)'''
    def itemEditorFactory(self):
        '''QItemEditorFactory QStyledItemDelegate.itemEditorFactory()'''
        return QItemEditorFactory()
    def updateEditorGeometry(self, editor, option, index):
        '''void QStyledItemDelegate.updateEditorGeometry(QWidget editor, QStyleOptionViewItem option, QModelIndex index)'''
    def setModelData(self, editor, model, index):
        '''void QStyledItemDelegate.setModelData(QWidget editor, QAbstractItemModel model, QModelIndex index)'''
    def setEditorData(self, editor, index):
        '''void QStyledItemDelegate.setEditorData(QWidget editor, QModelIndex index)'''
    def createEditor(self, parent, option, index):
        '''QWidget QStyledItemDelegate.createEditor(QWidget parent, QStyleOptionViewItem option, QModelIndex index)'''
        return QWidget()
    def sizeHint(self, option, index):
        '''QSize QStyledItemDelegate.sizeHint(QStyleOptionViewItem option, QModelIndex index)'''
        return QSize()
    def paint(self, painter, option, index):
        '''void QStyledItemDelegate.paint(QPainter painter, QStyleOptionViewItem option, QModelIndex index)'''


class QStyleFactory():
    """"""
    def __init__(self):
        '''void QStyleFactory.__init__()'''
    def __init__(self):
        '''QStyleFactory QStyleFactory.__init__()'''
        return QStyleFactory()
    def create(self):
        '''static QString QStyleFactory.create()'''
        return QString()
    def keys(self):
        '''static QStringList QStyleFactory.keys()'''
        return QStringList()


class QStyleOption():
    """"""
    # Enum QStyleOption.StyleOptionVersion
    Version = 0

    # Enum QStyleOption.StyleOptionType
    Type = 0

    # Enum QStyleOption.OptionType
    SO_Default = 0
    SO_FocusRect = 0
    SO_Button = 0
    SO_Tab = 0
    SO_MenuItem = 0
    SO_Frame = 0
    SO_ProgressBar = 0
    SO_ToolBox = 0
    SO_Header = 0
    SO_Q3DockWindow = 0
    SO_DockWidget = 0
    SO_Q3ListViewItem = 0
    SO_ViewItem = 0
    SO_TabWidgetFrame = 0
    SO_TabBarBase = 0
    SO_RubberBand = 0
    SO_ToolBar = 0
    SO_Complex = 0
    SO_Slider = 0
    SO_SpinBox = 0
    SO_ToolButton = 0
    SO_ComboBox = 0
    SO_Q3ListView = 0
    SO_TitleBar = 0
    SO_GroupBox = 0
    SO_ComplexCustomBase = 0
    SO_GraphicsItem = 0
    SO_SizeGrip = 0
    SO_CustomBase = 0

    direction = None # Qt.LayoutDirection - member
    fontMetrics = None # QFontMetrics - member
    palette = None # QPalette - member
    rect = None # QRect - member
    state = None # QStyle.State - member
    type = None # int - member
    version = None # int - member
    def __init__(self, version = None, type = None):
        '''void QStyleOption.__init__(int version = QStyleOption.Version, int type = QStyleOption.SO_Default)'''
    def __init__(self, other):
        '''void QStyleOption.__init__(QStyleOption other)'''
    def initFrom(self, w):
        '''void QStyleOption.initFrom(QWidget w)'''
    def init(self, w):
        '''void QStyleOption.init(QWidget w)'''


class QStyleOptionFocusRect(QStyleOption):
    """"""
    # Enum QStyleOptionFocusRect.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionFocusRect.StyleOptionType
    Type = 0

    backgroundColor = None # QColor - member
    def __init__(self):
        '''void QStyleOptionFocusRect.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionFocusRect.__init__(QStyleOptionFocusRect other)'''


class QStyleOptionFrame(QStyleOption):
    """"""
    # Enum QStyleOptionFrame.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionFrame.StyleOptionType
    Type = 0

    lineWidth = None # int - member
    midLineWidth = None # int - member
    def __init__(self):
        '''void QStyleOptionFrame.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionFrame.__init__(QStyleOptionFrame other)'''


class QStyleOptionFrameV2(QStyleOptionFrame):
    """"""
    # Enum QStyleOptionFrameV2.FrameFeature
    __kdevpythondocumentation_builtin_None = 0
    Flat = 0

    # Enum QStyleOptionFrameV2.StyleOptionVersion
    Version = 0

    features = None # QStyleOptionFrameV2.FrameFeatures - member
    def __init__(self):
        '''void QStyleOptionFrameV2.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionFrameV2.__init__(QStyleOptionFrameV2 other)'''
    def __init__(self, other):
        '''void QStyleOptionFrameV2.__init__(QStyleOptionFrame other)'''
    class FrameFeatures():
        """"""
        def __init__(self):
            '''QStyleOptionFrameV2.FrameFeatures QStyleOptionFrameV2.FrameFeatures.__init__()'''
            return QStyleOptionFrameV2.FrameFeatures()
        def __init__(self):
            '''int QStyleOptionFrameV2.FrameFeatures.__init__()'''
            return int()
        def __init__(self):
            '''void QStyleOptionFrameV2.FrameFeatures.__init__()'''
        def __bool__(self):
            '''int QStyleOptionFrameV2.FrameFeatures.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QStyleOptionFrameV2.FrameFeatures.__ne__(QStyleOptionFrameV2.FrameFeatures f)'''
            return bool()
        def __eq__(self, f):
            '''bool QStyleOptionFrameV2.FrameFeatures.__eq__(QStyleOptionFrameV2.FrameFeatures f)'''
            return bool()
        def __invert__(self):
            '''QStyleOptionFrameV2.FrameFeatures QStyleOptionFrameV2.FrameFeatures.__invert__()'''
            return QStyleOptionFrameV2.FrameFeatures()
        def __and__(self, mask):
            '''QStyleOptionFrameV2.FrameFeatures QStyleOptionFrameV2.FrameFeatures.__and__(int mask)'''
            return QStyleOptionFrameV2.FrameFeatures()
        def __xor__(self, f):
            '''QStyleOptionFrameV2.FrameFeatures QStyleOptionFrameV2.FrameFeatures.__xor__(QStyleOptionFrameV2.FrameFeatures f)'''
            return QStyleOptionFrameV2.FrameFeatures()
        def __xor__(self, f):
            '''QStyleOptionFrameV2.FrameFeatures QStyleOptionFrameV2.FrameFeatures.__xor__(int f)'''
            return QStyleOptionFrameV2.FrameFeatures()
        def __or__(self, f):
            '''QStyleOptionFrameV2.FrameFeatures QStyleOptionFrameV2.FrameFeatures.__or__(QStyleOptionFrameV2.FrameFeatures f)'''
            return QStyleOptionFrameV2.FrameFeatures()
        def __or__(self, f):
            '''QStyleOptionFrameV2.FrameFeatures QStyleOptionFrameV2.FrameFeatures.__or__(int f)'''
            return QStyleOptionFrameV2.FrameFeatures()
        def __int__(self):
            '''int QStyleOptionFrameV2.FrameFeatures.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QStyleOptionFrameV2.FrameFeatures QStyleOptionFrameV2.FrameFeatures.__ixor__(QStyleOptionFrameV2.FrameFeatures f)'''
            return QStyleOptionFrameV2.FrameFeatures()
        def __ior__(self, f):
            '''QStyleOptionFrameV2.FrameFeatures QStyleOptionFrameV2.FrameFeatures.__ior__(QStyleOptionFrameV2.FrameFeatures f)'''
            return QStyleOptionFrameV2.FrameFeatures()
        def __iand__(self, mask):
            '''QStyleOptionFrameV2.FrameFeatures QStyleOptionFrameV2.FrameFeatures.__iand__(int mask)'''
            return QStyleOptionFrameV2.FrameFeatures()


class QStyleOptionTabWidgetFrame(QStyleOption):
    """"""
    # Enum QStyleOptionTabWidgetFrame.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionTabWidgetFrame.StyleOptionType
    Type = 0

    leftCornerWidgetSize = None # QSize - member
    lineWidth = None # int - member
    midLineWidth = None # int - member
    rightCornerWidgetSize = None # QSize - member
    shape = None # QTabBar.Shape - member
    tabBarSize = None # QSize - member
    def __init__(self):
        '''void QStyleOptionTabWidgetFrame.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionTabWidgetFrame.__init__(QStyleOptionTabWidgetFrame other)'''


class QStyleOptionTabBarBase(QStyleOption):
    """"""
    # Enum QStyleOptionTabBarBase.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionTabBarBase.StyleOptionType
    Type = 0

    selectedTabRect = None # QRect - member
    shape = None # QTabBar.Shape - member
    tabBarRect = None # QRect - member
    def __init__(self):
        '''void QStyleOptionTabBarBase.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionTabBarBase.__init__(QStyleOptionTabBarBase other)'''


class QStyleOptionHeader(QStyleOption):
    """"""
    # Enum QStyleOptionHeader.SortIndicator
    __kdevpythondocumentation_builtin_None = 0
    SortUp = 0
    SortDown = 0

    # Enum QStyleOptionHeader.SelectedPosition
    NotAdjacent = 0
    NextIsSelected = 0
    PreviousIsSelected = 0
    NextAndPreviousAreSelected = 0

    # Enum QStyleOptionHeader.SectionPosition
    Beginning = 0
    Middle = 0
    End = 0
    OnlyOneSection = 0

    # Enum QStyleOptionHeader.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionHeader.StyleOptionType
    Type = 0

    icon = None # QIcon - member
    iconAlignment = None # Qt.Alignment - member
    orientation = None # Qt.Orientation - member
    position = None # QStyleOptionHeader.SectionPosition - member
    section = None # int - member
    selectedPosition = None # QStyleOptionHeader.SelectedPosition - member
    sortIndicator = None # QStyleOptionHeader.SortIndicator - member
    text = None # QString - member
    textAlignment = None # Qt.Alignment - member
    def __init__(self):
        '''void QStyleOptionHeader.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionHeader.__init__(QStyleOptionHeader other)'''


class QStyleOptionButton(QStyleOption):
    """"""
    # Enum QStyleOptionButton.ButtonFeature
    __kdevpythondocumentation_builtin_None = 0
    Flat = 0
    HasMenu = 0
    DefaultButton = 0
    AutoDefaultButton = 0
    CommandLinkButton = 0

    # Enum QStyleOptionButton.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionButton.StyleOptionType
    Type = 0

    features = None # QStyleOptionButton.ButtonFeatures - member
    icon = None # QIcon - member
    iconSize = None # QSize - member
    text = None # QString - member
    def __init__(self):
        '''void QStyleOptionButton.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionButton.__init__(QStyleOptionButton other)'''
    class ButtonFeatures():
        """"""
        def __init__(self):
            '''QStyleOptionButton.ButtonFeatures QStyleOptionButton.ButtonFeatures.__init__()'''
            return QStyleOptionButton.ButtonFeatures()
        def __init__(self):
            '''int QStyleOptionButton.ButtonFeatures.__init__()'''
            return int()
        def __init__(self):
            '''void QStyleOptionButton.ButtonFeatures.__init__()'''
        def __bool__(self):
            '''int QStyleOptionButton.ButtonFeatures.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QStyleOptionButton.ButtonFeatures.__ne__(QStyleOptionButton.ButtonFeatures f)'''
            return bool()
        def __eq__(self, f):
            '''bool QStyleOptionButton.ButtonFeatures.__eq__(QStyleOptionButton.ButtonFeatures f)'''
            return bool()
        def __invert__(self):
            '''QStyleOptionButton.ButtonFeatures QStyleOptionButton.ButtonFeatures.__invert__()'''
            return QStyleOptionButton.ButtonFeatures()
        def __and__(self, mask):
            '''QStyleOptionButton.ButtonFeatures QStyleOptionButton.ButtonFeatures.__and__(int mask)'''
            return QStyleOptionButton.ButtonFeatures()
        def __xor__(self, f):
            '''QStyleOptionButton.ButtonFeatures QStyleOptionButton.ButtonFeatures.__xor__(QStyleOptionButton.ButtonFeatures f)'''
            return QStyleOptionButton.ButtonFeatures()
        def __xor__(self, f):
            '''QStyleOptionButton.ButtonFeatures QStyleOptionButton.ButtonFeatures.__xor__(int f)'''
            return QStyleOptionButton.ButtonFeatures()
        def __or__(self, f):
            '''QStyleOptionButton.ButtonFeatures QStyleOptionButton.ButtonFeatures.__or__(QStyleOptionButton.ButtonFeatures f)'''
            return QStyleOptionButton.ButtonFeatures()
        def __or__(self, f):
            '''QStyleOptionButton.ButtonFeatures QStyleOptionButton.ButtonFeatures.__or__(int f)'''
            return QStyleOptionButton.ButtonFeatures()
        def __int__(self):
            '''int QStyleOptionButton.ButtonFeatures.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QStyleOptionButton.ButtonFeatures QStyleOptionButton.ButtonFeatures.__ixor__(QStyleOptionButton.ButtonFeatures f)'''
            return QStyleOptionButton.ButtonFeatures()
        def __ior__(self, f):
            '''QStyleOptionButton.ButtonFeatures QStyleOptionButton.ButtonFeatures.__ior__(QStyleOptionButton.ButtonFeatures f)'''
            return QStyleOptionButton.ButtonFeatures()
        def __iand__(self, mask):
            '''QStyleOptionButton.ButtonFeatures QStyleOptionButton.ButtonFeatures.__iand__(int mask)'''
            return QStyleOptionButton.ButtonFeatures()


class QStyleOptionTab(QStyleOption):
    """"""
    # Enum QStyleOptionTab.CornerWidget
    NoCornerWidgets = 0
    LeftCornerWidget = 0
    RightCornerWidget = 0

    # Enum QStyleOptionTab.SelectedPosition
    NotAdjacent = 0
    NextIsSelected = 0
    PreviousIsSelected = 0

    # Enum QStyleOptionTab.TabPosition
    Beginning = 0
    Middle = 0
    End = 0
    OnlyOneTab = 0

    # Enum QStyleOptionTab.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionTab.StyleOptionType
    Type = 0

    cornerWidgets = None # QStyleOptionTab.CornerWidgets - member
    icon = None # QIcon - member
    position = None # QStyleOptionTab.TabPosition - member
    row = None # int - member
    selectedPosition = None # QStyleOptionTab.SelectedPosition - member
    shape = None # QTabBar.Shape - member
    text = None # QString - member
    def __init__(self):
        '''void QStyleOptionTab.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionTab.__init__(QStyleOptionTab other)'''
    class CornerWidgets():
        """"""
        def __init__(self):
            '''QStyleOptionTab.CornerWidgets QStyleOptionTab.CornerWidgets.__init__()'''
            return QStyleOptionTab.CornerWidgets()
        def __init__(self):
            '''int QStyleOptionTab.CornerWidgets.__init__()'''
            return int()
        def __init__(self):
            '''void QStyleOptionTab.CornerWidgets.__init__()'''
        def __bool__(self):
            '''int QStyleOptionTab.CornerWidgets.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QStyleOptionTab.CornerWidgets.__ne__(QStyleOptionTab.CornerWidgets f)'''
            return bool()
        def __eq__(self, f):
            '''bool QStyleOptionTab.CornerWidgets.__eq__(QStyleOptionTab.CornerWidgets f)'''
            return bool()
        def __invert__(self):
            '''QStyleOptionTab.CornerWidgets QStyleOptionTab.CornerWidgets.__invert__()'''
            return QStyleOptionTab.CornerWidgets()
        def __and__(self, mask):
            '''QStyleOptionTab.CornerWidgets QStyleOptionTab.CornerWidgets.__and__(int mask)'''
            return QStyleOptionTab.CornerWidgets()
        def __xor__(self, f):
            '''QStyleOptionTab.CornerWidgets QStyleOptionTab.CornerWidgets.__xor__(QStyleOptionTab.CornerWidgets f)'''
            return QStyleOptionTab.CornerWidgets()
        def __xor__(self, f):
            '''QStyleOptionTab.CornerWidgets QStyleOptionTab.CornerWidgets.__xor__(int f)'''
            return QStyleOptionTab.CornerWidgets()
        def __or__(self, f):
            '''QStyleOptionTab.CornerWidgets QStyleOptionTab.CornerWidgets.__or__(QStyleOptionTab.CornerWidgets f)'''
            return QStyleOptionTab.CornerWidgets()
        def __or__(self, f):
            '''QStyleOptionTab.CornerWidgets QStyleOptionTab.CornerWidgets.__or__(int f)'''
            return QStyleOptionTab.CornerWidgets()
        def __int__(self):
            '''int QStyleOptionTab.CornerWidgets.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QStyleOptionTab.CornerWidgets QStyleOptionTab.CornerWidgets.__ixor__(QStyleOptionTab.CornerWidgets f)'''
            return QStyleOptionTab.CornerWidgets()
        def __ior__(self, f):
            '''QStyleOptionTab.CornerWidgets QStyleOptionTab.CornerWidgets.__ior__(QStyleOptionTab.CornerWidgets f)'''
            return QStyleOptionTab.CornerWidgets()
        def __iand__(self, mask):
            '''QStyleOptionTab.CornerWidgets QStyleOptionTab.CornerWidgets.__iand__(int mask)'''
            return QStyleOptionTab.CornerWidgets()


class QStyleOptionTabV2(QStyleOptionTab):
    """"""
    # Enum QStyleOptionTabV2.StyleOptionVersion
    Version = 0

    iconSize = None # QSize - member
    def __init__(self):
        '''void QStyleOptionTabV2.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionTabV2.__init__(QStyleOptionTabV2 other)'''
    def __init__(self, other):
        '''void QStyleOptionTabV2.__init__(QStyleOptionTab other)'''


class QStyleOptionProgressBar(QStyleOption):
    """"""
    # Enum QStyleOptionProgressBar.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionProgressBar.StyleOptionType
    Type = 0

    maximum = None # int - member
    minimum = None # int - member
    progress = None # int - member
    text = None # QString - member
    textAlignment = None # Qt.Alignment - member
    textVisible = None # bool - member
    def __init__(self):
        '''void QStyleOptionProgressBar.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionProgressBar.__init__(QStyleOptionProgressBar other)'''


class QStyleOptionProgressBarV2(QStyleOptionProgressBar):
    """"""
    # Enum QStyleOptionProgressBarV2.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionProgressBarV2.StyleOptionType
    Type = 0

    bottomToTop = None # bool - member
    invertedAppearance = None # bool - member
    orientation = None # Qt.Orientation - member
    def __init__(self):
        '''void QStyleOptionProgressBarV2.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionProgressBarV2.__init__(QStyleOptionProgressBar other)'''
    def __init__(self, other):
        '''void QStyleOptionProgressBarV2.__init__(QStyleOptionProgressBarV2 other)'''


class QStyleOptionMenuItem(QStyleOption):
    """"""
    # Enum QStyleOptionMenuItem.CheckType
    NotCheckable = 0
    Exclusive = 0
    NonExclusive = 0

    # Enum QStyleOptionMenuItem.MenuItemType
    Normal = 0
    DefaultItem = 0
    Separator = 0
    SubMenu = 0
    Scroller = 0
    TearOff = 0
    Margin = 0
    EmptyArea = 0

    # Enum QStyleOptionMenuItem.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionMenuItem.StyleOptionType
    Type = 0

    checkType = None # QStyleOptionMenuItem.CheckType - member
    checked = None # bool - member
    font = None # QFont - member
    icon = None # QIcon - member
    maxIconWidth = None # int - member
    menuHasCheckableItems = None # bool - member
    menuItemType = None # QStyleOptionMenuItem.MenuItemType - member
    menuRect = None # QRect - member
    tabWidth = None # int - member
    text = None # QString - member
    def __init__(self):
        '''void QStyleOptionMenuItem.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionMenuItem.__init__(QStyleOptionMenuItem other)'''


class QStyleOptionDockWidget(QStyleOption):
    """"""
    # Enum QStyleOptionDockWidget.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionDockWidget.StyleOptionType
    Type = 0

    closable = None # bool - member
    floatable = None # bool - member
    movable = None # bool - member
    title = None # QString - member
    def __init__(self):
        '''void QStyleOptionDockWidget.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionDockWidget.__init__(QStyleOptionDockWidget other)'''


class QStyleOptionViewItem(QStyleOption):
    """"""
    # Enum QStyleOptionViewItem.Position
    Left = 0
    Right = 0
    Top = 0
    Bottom = 0

    # Enum QStyleOptionViewItem.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionViewItem.StyleOptionType
    Type = 0

    decorationAlignment = None # Qt.Alignment - member
    decorationPosition = None # QStyleOptionViewItem.Position - member
    decorationSize = None # QSize - member
    displayAlignment = None # Qt.Alignment - member
    font = None # QFont - member
    showDecorationSelected = None # bool - member
    textElideMode = None # Qt.TextElideMode - member
    def __init__(self):
        '''void QStyleOptionViewItem.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionViewItem.__init__(QStyleOptionViewItem other)'''


class QStyleOptionToolBox(QStyleOption):
    """"""
    # Enum QStyleOptionToolBox.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionToolBox.StyleOptionType
    Type = 0

    icon = None # QIcon - member
    text = None # QString - member
    def __init__(self):
        '''void QStyleOptionToolBox.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionToolBox.__init__(QStyleOptionToolBox other)'''


class QStyleOptionRubberBand(QStyleOption):
    """"""
    # Enum QStyleOptionRubberBand.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionRubberBand.StyleOptionType
    Type = 0

    opaque = None # bool - member
    shape = None # QRubberBand.Shape - member
    def __init__(self):
        '''void QStyleOptionRubberBand.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionRubberBand.__init__(QStyleOptionRubberBand other)'''


class QStyleOptionComplex(QStyleOption):
    """"""
    # Enum QStyleOptionComplex.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionComplex.StyleOptionType
    Type = 0

    activeSubControls = None # QStyle.SubControls - member
    subControls = None # QStyle.SubControls - member
    def __init__(self, version = None, type = None):
        '''void QStyleOptionComplex.__init__(int version = QStyleOptionComplex.Version, int type = QStyleOption.SO_Complex)'''
    def __init__(self, other):
        '''void QStyleOptionComplex.__init__(QStyleOptionComplex other)'''


class QStyleOptionSlider(QStyleOptionComplex):
    """"""
    # Enum QStyleOptionSlider.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionSlider.StyleOptionType
    Type = 0

    dialWrapping = None # bool - member
    maximum = None # int - member
    minimum = None # int - member
    notchTarget = None # float - member
    orientation = None # Qt.Orientation - member
    pageStep = None # int - member
    singleStep = None # int - member
    sliderPosition = None # int - member
    sliderValue = None # int - member
    tickInterval = None # int - member
    tickPosition = None # QSlider.TickPosition - member
    upsideDown = None # bool - member
    def __init__(self):
        '''void QStyleOptionSlider.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionSlider.__init__(QStyleOptionSlider other)'''


class QStyleOptionSpinBox(QStyleOptionComplex):
    """"""
    # Enum QStyleOptionSpinBox.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionSpinBox.StyleOptionType
    Type = 0

    buttonSymbols = None # QAbstractSpinBox.ButtonSymbols - member
    frame = None # bool - member
    stepEnabled = None # QAbstractSpinBox.StepEnabled - member
    def __init__(self):
        '''void QStyleOptionSpinBox.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionSpinBox.__init__(QStyleOptionSpinBox other)'''


class QStyleOptionToolButton(QStyleOptionComplex):
    """"""
    # Enum QStyleOptionToolButton.ToolButtonFeature
    __kdevpythondocumentation_builtin_None = 0
    Arrow = 0
    Menu = 0
    PopupDelay = 0
    MenuButtonPopup = 0
    HasMenu = 0

    # Enum QStyleOptionToolButton.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionToolButton.StyleOptionType
    Type = 0

    arrowType = None # Qt.ArrowType - member
    features = None # QStyleOptionToolButton.ToolButtonFeatures - member
    font = None # QFont - member
    icon = None # QIcon - member
    iconSize = None # QSize - member
    pos = None # QPoint - member
    text = None # QString - member
    toolButtonStyle = None # Qt.ToolButtonStyle - member
    def __init__(self):
        '''void QStyleOptionToolButton.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionToolButton.__init__(QStyleOptionToolButton other)'''
    class ToolButtonFeatures():
        """"""
        def __init__(self):
            '''QStyleOptionToolButton.ToolButtonFeatures QStyleOptionToolButton.ToolButtonFeatures.__init__()'''
            return QStyleOptionToolButton.ToolButtonFeatures()
        def __init__(self):
            '''int QStyleOptionToolButton.ToolButtonFeatures.__init__()'''
            return int()
        def __init__(self):
            '''void QStyleOptionToolButton.ToolButtonFeatures.__init__()'''
        def __bool__(self):
            '''int QStyleOptionToolButton.ToolButtonFeatures.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QStyleOptionToolButton.ToolButtonFeatures.__ne__(QStyleOptionToolButton.ToolButtonFeatures f)'''
            return bool()
        def __eq__(self, f):
            '''bool QStyleOptionToolButton.ToolButtonFeatures.__eq__(QStyleOptionToolButton.ToolButtonFeatures f)'''
            return bool()
        def __invert__(self):
            '''QStyleOptionToolButton.ToolButtonFeatures QStyleOptionToolButton.ToolButtonFeatures.__invert__()'''
            return QStyleOptionToolButton.ToolButtonFeatures()
        def __and__(self, mask):
            '''QStyleOptionToolButton.ToolButtonFeatures QStyleOptionToolButton.ToolButtonFeatures.__and__(int mask)'''
            return QStyleOptionToolButton.ToolButtonFeatures()
        def __xor__(self, f):
            '''QStyleOptionToolButton.ToolButtonFeatures QStyleOptionToolButton.ToolButtonFeatures.__xor__(QStyleOptionToolButton.ToolButtonFeatures f)'''
            return QStyleOptionToolButton.ToolButtonFeatures()
        def __xor__(self, f):
            '''QStyleOptionToolButton.ToolButtonFeatures QStyleOptionToolButton.ToolButtonFeatures.__xor__(int f)'''
            return QStyleOptionToolButton.ToolButtonFeatures()
        def __or__(self, f):
            '''QStyleOptionToolButton.ToolButtonFeatures QStyleOptionToolButton.ToolButtonFeatures.__or__(QStyleOptionToolButton.ToolButtonFeatures f)'''
            return QStyleOptionToolButton.ToolButtonFeatures()
        def __or__(self, f):
            '''QStyleOptionToolButton.ToolButtonFeatures QStyleOptionToolButton.ToolButtonFeatures.__or__(int f)'''
            return QStyleOptionToolButton.ToolButtonFeatures()
        def __int__(self):
            '''int QStyleOptionToolButton.ToolButtonFeatures.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QStyleOptionToolButton.ToolButtonFeatures QStyleOptionToolButton.ToolButtonFeatures.__ixor__(QStyleOptionToolButton.ToolButtonFeatures f)'''
            return QStyleOptionToolButton.ToolButtonFeatures()
        def __ior__(self, f):
            '''QStyleOptionToolButton.ToolButtonFeatures QStyleOptionToolButton.ToolButtonFeatures.__ior__(QStyleOptionToolButton.ToolButtonFeatures f)'''
            return QStyleOptionToolButton.ToolButtonFeatures()
        def __iand__(self, mask):
            '''QStyleOptionToolButton.ToolButtonFeatures QStyleOptionToolButton.ToolButtonFeatures.__iand__(int mask)'''
            return QStyleOptionToolButton.ToolButtonFeatures()


class QStyleOptionComboBox(QStyleOptionComplex):
    """"""
    # Enum QStyleOptionComboBox.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionComboBox.StyleOptionType
    Type = 0

    currentIcon = None # QIcon - member
    currentText = None # QString - member
    editable = None # bool - member
    frame = None # bool - member
    iconSize = None # QSize - member
    popupRect = None # QRect - member
    def __init__(self):
        '''void QStyleOptionComboBox.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionComboBox.__init__(QStyleOptionComboBox other)'''


class QStyleOptionTitleBar(QStyleOptionComplex):
    """"""
    # Enum QStyleOptionTitleBar.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionTitleBar.StyleOptionType
    Type = 0

    icon = None # QIcon - member
    text = None # QString - member
    titleBarFlags = None # Qt.WindowFlags - member
    titleBarState = None # int - member
    def __init__(self):
        '''void QStyleOptionTitleBar.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionTitleBar.__init__(QStyleOptionTitleBar other)'''


class QStyleHintReturn():
    """"""
    # Enum QStyleHintReturn.StyleOptionVersion
    Version = 0

    # Enum QStyleHintReturn.StyleOptionType
    Type = 0

    # Enum QStyleHintReturn.HintReturnType
    SH_Default = 0
    SH_Mask = 0
    SH_Variant = 0

    type = None # int - member
    version = None # int - member
    def __init__(self, version = None, type = None):
        '''void QStyleHintReturn.__init__(int version = QStyleOption.Version, int type = QStyleHintReturn.SH_Default)'''
    def __init__(self):
        '''QStyleHintReturn QStyleHintReturn.__init__()'''
        return QStyleHintReturn()


class QStyleHintReturnMask(QStyleHintReturn):
    """"""
    # Enum QStyleHintReturnMask.StyleOptionVersion
    Version = 0

    # Enum QStyleHintReturnMask.StyleOptionType
    Type = 0

    region = None # QRegion - member
    def __init__(self):
        '''void QStyleHintReturnMask.__init__()'''
    def __init__(self):
        '''QStyleHintReturnMask QStyleHintReturnMask.__init__()'''
        return QStyleHintReturnMask()


class QStyleOptionToolBar(QStyleOption):
    """"""
    # Enum QStyleOptionToolBar.ToolBarFeature
    __kdevpythondocumentation_builtin_None = 0
    Movable = 0

    # Enum QStyleOptionToolBar.ToolBarPosition
    Beginning = 0
    Middle = 0
    End = 0
    OnlyOne = 0

    # Enum QStyleOptionToolBar.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionToolBar.StyleOptionType
    Type = 0

    features = None # QStyleOptionToolBar.ToolBarFeatures - member
    lineWidth = None # int - member
    midLineWidth = None # int - member
    positionOfLine = None # QStyleOptionToolBar.ToolBarPosition - member
    positionWithinLine = None # QStyleOptionToolBar.ToolBarPosition - member
    toolBarArea = None # Qt.ToolBarArea - member
    def __init__(self):
        '''void QStyleOptionToolBar.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionToolBar.__init__(QStyleOptionToolBar other)'''
    class ToolBarFeatures():
        """"""
        def __init__(self):
            '''QStyleOptionToolBar.ToolBarFeatures QStyleOptionToolBar.ToolBarFeatures.__init__()'''
            return QStyleOptionToolBar.ToolBarFeatures()
        def __init__(self):
            '''int QStyleOptionToolBar.ToolBarFeatures.__init__()'''
            return int()
        def __init__(self):
            '''void QStyleOptionToolBar.ToolBarFeatures.__init__()'''
        def __bool__(self):
            '''int QStyleOptionToolBar.ToolBarFeatures.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QStyleOptionToolBar.ToolBarFeatures.__ne__(QStyleOptionToolBar.ToolBarFeatures f)'''
            return bool()
        def __eq__(self, f):
            '''bool QStyleOptionToolBar.ToolBarFeatures.__eq__(QStyleOptionToolBar.ToolBarFeatures f)'''
            return bool()
        def __invert__(self):
            '''QStyleOptionToolBar.ToolBarFeatures QStyleOptionToolBar.ToolBarFeatures.__invert__()'''
            return QStyleOptionToolBar.ToolBarFeatures()
        def __and__(self, mask):
            '''QStyleOptionToolBar.ToolBarFeatures QStyleOptionToolBar.ToolBarFeatures.__and__(int mask)'''
            return QStyleOptionToolBar.ToolBarFeatures()
        def __xor__(self, f):
            '''QStyleOptionToolBar.ToolBarFeatures QStyleOptionToolBar.ToolBarFeatures.__xor__(QStyleOptionToolBar.ToolBarFeatures f)'''
            return QStyleOptionToolBar.ToolBarFeatures()
        def __xor__(self, f):
            '''QStyleOptionToolBar.ToolBarFeatures QStyleOptionToolBar.ToolBarFeatures.__xor__(int f)'''
            return QStyleOptionToolBar.ToolBarFeatures()
        def __or__(self, f):
            '''QStyleOptionToolBar.ToolBarFeatures QStyleOptionToolBar.ToolBarFeatures.__or__(QStyleOptionToolBar.ToolBarFeatures f)'''
            return QStyleOptionToolBar.ToolBarFeatures()
        def __or__(self, f):
            '''QStyleOptionToolBar.ToolBarFeatures QStyleOptionToolBar.ToolBarFeatures.__or__(int f)'''
            return QStyleOptionToolBar.ToolBarFeatures()
        def __int__(self):
            '''int QStyleOptionToolBar.ToolBarFeatures.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QStyleOptionToolBar.ToolBarFeatures QStyleOptionToolBar.ToolBarFeatures.__ixor__(QStyleOptionToolBar.ToolBarFeatures f)'''
            return QStyleOptionToolBar.ToolBarFeatures()
        def __ior__(self, f):
            '''QStyleOptionToolBar.ToolBarFeatures QStyleOptionToolBar.ToolBarFeatures.__ior__(QStyleOptionToolBar.ToolBarFeatures f)'''
            return QStyleOptionToolBar.ToolBarFeatures()
        def __iand__(self, mask):
            '''QStyleOptionToolBar.ToolBarFeatures QStyleOptionToolBar.ToolBarFeatures.__iand__(int mask)'''
            return QStyleOptionToolBar.ToolBarFeatures()


class QStyleOptionGroupBox(QStyleOptionComplex):
    """"""
    # Enum QStyleOptionGroupBox.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionGroupBox.StyleOptionType
    Type = 0

    features = None # QStyleOptionFrameV2.FrameFeatures - member
    lineWidth = None # int - member
    midLineWidth = None # int - member
    text = None # QString - member
    textAlignment = None # Qt.Alignment - member
    textColor = None # QColor - member
    def __init__(self):
        '''void QStyleOptionGroupBox.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionGroupBox.__init__(QStyleOptionGroupBox other)'''


class QStyleOptionViewItemV2(QStyleOptionViewItem):
    """"""
    # Enum QStyleOptionViewItemV2.ViewItemFeature
    __kdevpythondocumentation_builtin_None = 0
    WrapText = 0
    Alternate = 0
    HasCheckIndicator = 0
    HasDisplay = 0
    HasDecoration = 0

    # Enum QStyleOptionViewItemV2.StyleOptionVersion
    Version = 0

    features = None # QStyleOptionViewItemV2.ViewItemFeatures - member
    def __init__(self):
        '''void QStyleOptionViewItemV2.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionViewItemV2.__init__(QStyleOptionViewItemV2 other)'''
    def __init__(self, other):
        '''void QStyleOptionViewItemV2.__init__(QStyleOptionViewItem other)'''
    class ViewItemFeatures():
        """"""
        def __init__(self):
            '''QStyleOptionViewItemV2.ViewItemFeatures QStyleOptionViewItemV2.ViewItemFeatures.__init__()'''
            return QStyleOptionViewItemV2.ViewItemFeatures()
        def __init__(self):
            '''int QStyleOptionViewItemV2.ViewItemFeatures.__init__()'''
            return int()
        def __init__(self):
            '''void QStyleOptionViewItemV2.ViewItemFeatures.__init__()'''
        def __bool__(self):
            '''int QStyleOptionViewItemV2.ViewItemFeatures.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QStyleOptionViewItemV2.ViewItemFeatures.__ne__(QStyleOptionViewItemV2.ViewItemFeatures f)'''
            return bool()
        def __eq__(self, f):
            '''bool QStyleOptionViewItemV2.ViewItemFeatures.__eq__(QStyleOptionViewItemV2.ViewItemFeatures f)'''
            return bool()
        def __invert__(self):
            '''QStyleOptionViewItemV2.ViewItemFeatures QStyleOptionViewItemV2.ViewItemFeatures.__invert__()'''
            return QStyleOptionViewItemV2.ViewItemFeatures()
        def __and__(self, mask):
            '''QStyleOptionViewItemV2.ViewItemFeatures QStyleOptionViewItemV2.ViewItemFeatures.__and__(int mask)'''
            return QStyleOptionViewItemV2.ViewItemFeatures()
        def __xor__(self, f):
            '''QStyleOptionViewItemV2.ViewItemFeatures QStyleOptionViewItemV2.ViewItemFeatures.__xor__(QStyleOptionViewItemV2.ViewItemFeatures f)'''
            return QStyleOptionViewItemV2.ViewItemFeatures()
        def __xor__(self, f):
            '''QStyleOptionViewItemV2.ViewItemFeatures QStyleOptionViewItemV2.ViewItemFeatures.__xor__(int f)'''
            return QStyleOptionViewItemV2.ViewItemFeatures()
        def __or__(self, f):
            '''QStyleOptionViewItemV2.ViewItemFeatures QStyleOptionViewItemV2.ViewItemFeatures.__or__(QStyleOptionViewItemV2.ViewItemFeatures f)'''
            return QStyleOptionViewItemV2.ViewItemFeatures()
        def __or__(self, f):
            '''QStyleOptionViewItemV2.ViewItemFeatures QStyleOptionViewItemV2.ViewItemFeatures.__or__(int f)'''
            return QStyleOptionViewItemV2.ViewItemFeatures()
        def __int__(self):
            '''int QStyleOptionViewItemV2.ViewItemFeatures.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QStyleOptionViewItemV2.ViewItemFeatures QStyleOptionViewItemV2.ViewItemFeatures.__ixor__(QStyleOptionViewItemV2.ViewItemFeatures f)'''
            return QStyleOptionViewItemV2.ViewItemFeatures()
        def __ior__(self, f):
            '''QStyleOptionViewItemV2.ViewItemFeatures QStyleOptionViewItemV2.ViewItemFeatures.__ior__(QStyleOptionViewItemV2.ViewItemFeatures f)'''
            return QStyleOptionViewItemV2.ViewItemFeatures()
        def __iand__(self, mask):
            '''QStyleOptionViewItemV2.ViewItemFeatures QStyleOptionViewItemV2.ViewItemFeatures.__iand__(int mask)'''
            return QStyleOptionViewItemV2.ViewItemFeatures()


class QStyleOptionSizeGrip(QStyleOptionComplex):
    """"""
    # Enum QStyleOptionSizeGrip.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionSizeGrip.StyleOptionType
    Type = 0

    corner = None # Qt.Corner - member
    def __init__(self):
        '''void QStyleOptionSizeGrip.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionSizeGrip.__init__(QStyleOptionSizeGrip other)'''


class QStyleOptionGraphicsItem(QStyleOption):
    """"""
    # Enum QStyleOptionGraphicsItem.StyleOptionVersion
    Version = 0

    # Enum QStyleOptionGraphicsItem.StyleOptionType
    Type = 0

    exposedRect = None # QRectF - member
    levelOfDetail = None # float - member
    matrix = None # QMatrix - member
    def __init__(self):
        '''void QStyleOptionGraphicsItem.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionGraphicsItem.__init__(QStyleOptionGraphicsItem other)'''
    def levelOfDetailFromTransform(self, worldTransform):
        '''static float QStyleOptionGraphicsItem.levelOfDetailFromTransform(QTransform worldTransform)'''
        return float()


class QStyleOptionDockWidgetV2(QStyleOptionDockWidget):
    """"""
    # Enum QStyleOptionDockWidgetV2.StyleOptionVersion
    Version = 0

    verticalTitleBar = None # bool - member
    def __init__(self):
        '''void QStyleOptionDockWidgetV2.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionDockWidgetV2.__init__(QStyleOptionDockWidgetV2 other)'''
    def __init__(self, other):
        '''void QStyleOptionDockWidgetV2.__init__(QStyleOptionDockWidget other)'''


class QStyleOptionViewItemV3(QStyleOptionViewItemV2):
    """"""
    # Enum QStyleOptionViewItemV3.StyleOptionVersion
    Version = 0

    locale = None # QLocale - member
    widget = None # QWidget - member
    def __init__(self):
        '''void QStyleOptionViewItemV3.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionViewItemV3.__init__(QStyleOptionViewItemV3 other)'''
    def __init__(self, other):
        '''void QStyleOptionViewItemV3.__init__(QStyleOptionViewItem other)'''


class QStyleOptionToolBoxV2(QStyleOptionToolBox):
    """"""
    # Enum QStyleOptionToolBoxV2.SelectedPosition
    NotAdjacent = 0
    NextIsSelected = 0
    PreviousIsSelected = 0

    # Enum QStyleOptionToolBoxV2.TabPosition
    Beginning = 0
    Middle = 0
    End = 0
    OnlyOneTab = 0

    # Enum QStyleOptionToolBoxV2.StyleOptionVersion
    Version = 0

    position = None # QStyleOptionToolBoxV2.TabPosition - member
    selectedPosition = None # QStyleOptionToolBoxV2.SelectedPosition - member
    def __init__(self):
        '''void QStyleOptionToolBoxV2.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionToolBoxV2.__init__(QStyleOptionToolBoxV2 other)'''
    def __init__(self, other):
        '''void QStyleOptionToolBoxV2.__init__(QStyleOptionToolBox other)'''


class QStyleHintReturnVariant(QStyleHintReturn):
    """"""
    # Enum QStyleHintReturnVariant.StyleOptionVersion
    Version = 0

    # Enum QStyleHintReturnVariant.StyleOptionType
    Type = 0

    variant = None # QVariant - member
    def __init__(self):
        '''void QStyleHintReturnVariant.__init__()'''
    def __init__(self):
        '''QStyleHintReturnVariant QStyleHintReturnVariant.__init__()'''
        return QStyleHintReturnVariant()


class QStyleOptionViewItemV4(QStyleOptionViewItemV3):
    """"""
    # Enum QStyleOptionViewItemV4.ViewItemPosition
    Invalid = 0
    Beginning = 0
    Middle = 0
    End = 0
    OnlyOne = 0

    # Enum QStyleOptionViewItemV4.StyleOptionVersion
    Version = 0

    backgroundBrush = None # QBrush - member
    checkState = None # Qt.CheckState - member
    icon = None # QIcon - member
    index = None # QModelIndex - member
    text = None # QString - member
    viewItemPosition = None # QStyleOptionViewItemV4.ViewItemPosition - member
    def __init__(self):
        '''void QStyleOptionViewItemV4.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionViewItemV4.__init__(QStyleOptionViewItemV4 other)'''
    def __init__(self, other):
        '''void QStyleOptionViewItemV4.__init__(QStyleOptionViewItem other)'''


class QStyleOptionFrameV3(QStyleOptionFrameV2):
    """"""
    # Enum QStyleOptionFrameV3.StyleOptionVersion
    Version = 0

    frameShape = None # QFrame.Shape - member
    unused = None # int - member
    def __init__(self):
        '''void QStyleOptionFrameV3.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionFrameV3.__init__(QStyleOptionFrameV3 other)'''
    def __init__(self, other):
        '''void QStyleOptionFrameV3.__init__(QStyleOptionFrame other)'''


class QStyleOptionTabBarBaseV2(QStyleOptionTabBarBase):
    """"""
    # Enum QStyleOptionTabBarBaseV2.StyleOptionVersion
    Version = 0

    documentMode = None # bool - member
    def __init__(self):
        '''void QStyleOptionTabBarBaseV2.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionTabBarBaseV2.__init__(QStyleOptionTabBarBaseV2 other)'''
    def __init__(self, other):
        '''void QStyleOptionTabBarBaseV2.__init__(QStyleOptionTabBarBase other)'''


class QStyleOptionTabV3(QStyleOptionTabV2):
    """"""
    # Enum QStyleOptionTabV3.StyleOptionVersion
    Version = 0

    documentMode = None # bool - member
    leftButtonSize = None # QSize - member
    rightButtonSize = None # QSize - member
    def __init__(self):
        '''void QStyleOptionTabV3.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionTabV3.__init__(QStyleOptionTabV3 other)'''
    def __init__(self, other):
        '''void QStyleOptionTabV3.__init__(QStyleOptionTabV2 other)'''
    def __init__(self, other):
        '''void QStyleOptionTabV3.__init__(QStyleOptionTab other)'''


class QStyleOptionTabWidgetFrameV2(QStyleOptionTabWidgetFrame):
    """"""
    # Enum QStyleOptionTabWidgetFrameV2.StyleOptionVersion
    Version = 0

    selectedTabRect = None # QRect - member
    tabBarRect = None # QRect - member
    def __init__(self):
        '''void QStyleOptionTabWidgetFrameV2.__init__()'''
    def __init__(self, other):
        '''void QStyleOptionTabWidgetFrameV2.__init__(QStyleOptionTabWidgetFrameV2 other)'''
    def __init__(self, other):
        '''void QStyleOptionTabWidgetFrameV2.__init__(QStyleOptionTabWidgetFrame other)'''


class QStylePainter(QPainter):
    """"""
    def __init__(self):
        '''void QStylePainter.__init__()'''
    def __init__(self, w):
        '''void QStylePainter.__init__(QWidget w)'''
    def __init__(self, pd, w):
        '''void QStylePainter.__init__(QPaintDevice pd, QWidget w)'''
    def drawItemPixmap(self, r, flags, pixmap):
        '''void QStylePainter.drawItemPixmap(QRect r, int flags, QPixmap pixmap)'''
    def drawItemText(self, rect, flags, pal, enabled, text, textRole = None):
        '''void QStylePainter.drawItemText(QRect rect, int flags, QPalette pal, bool enabled, QString text, QPalette.ColorRole textRole = QPalette.NoRole)'''
    def drawComplexControl(self, cc, opt):
        '''void QStylePainter.drawComplexControl(QStyle.ComplexControl cc, QStyleOptionComplex opt)'''
    def drawControl(self, ce, opt):
        '''void QStylePainter.drawControl(QStyle.ControlElement ce, QStyleOption opt)'''
    def drawPrimitive(self, pe, opt):
        '''void QStylePainter.drawPrimitive(QStyle.PrimitiveElement pe, QStyleOption opt)'''
    def style(self):
        '''QStyle QStylePainter.style()'''
        return QStyle()
    def begin(self, w):
        '''bool QStylePainter.begin(QWidget w)'''
        return bool()
    def begin(self, pd, w):
        '''bool QStylePainter.begin(QPaintDevice pd, QWidget w)'''
        return bool()


class QSyntaxHighlighter(QObject):
    """"""
    def __init__(self, parent):
        '''void QSyntaxHighlighter.__init__(QTextEdit parent)'''
    def __init__(self, parent):
        '''void QSyntaxHighlighter.__init__(QTextDocument parent)'''
    def __init__(self, parent):
        '''void QSyntaxHighlighter.__init__(QObject parent)'''
    def currentBlock(self):
        '''QTextBlock QSyntaxHighlighter.currentBlock()'''
        return QTextBlock()
    def currentBlockUserData(self):
        '''QTextBlockUserData QSyntaxHighlighter.currentBlockUserData()'''
        return QTextBlockUserData()
    def setCurrentBlockUserData(self, data):
        '''void QSyntaxHighlighter.setCurrentBlockUserData(QTextBlockUserData data)'''
    def setCurrentBlockState(self, newState):
        '''void QSyntaxHighlighter.setCurrentBlockState(int newState)'''
    def currentBlockState(self):
        '''int QSyntaxHighlighter.currentBlockState()'''
        return int()
    def previousBlockState(self):
        '''int QSyntaxHighlighter.previousBlockState()'''
        return int()
    def format(self, pos):
        '''QTextCharFormat QSyntaxHighlighter.format(int pos)'''
        return QTextCharFormat()
    def setFormat(self, start, count, format):
        '''void QSyntaxHighlighter.setFormat(int start, int count, QTextCharFormat format)'''
    def setFormat(self, start, count, color):
        '''void QSyntaxHighlighter.setFormat(int start, int count, QColor color)'''
    def setFormat(self, start, count, font):
        '''void QSyntaxHighlighter.setFormat(int start, int count, QFont font)'''
    def highlightBlock(self, text):
        '''abstract void QSyntaxHighlighter.highlightBlock(QString text)'''
    def rehighlightBlock(self, block):
        '''void QSyntaxHighlighter.rehighlightBlock(QTextBlock block)'''
    def rehighlight(self):
        '''void QSyntaxHighlighter.rehighlight()'''
    def document(self):
        '''QTextDocument QSyntaxHighlighter.document()'''
        return QTextDocument()
    def setDocument(self, doc):
        '''void QSyntaxHighlighter.setDocument(QTextDocument doc)'''


class QSystemTrayIcon(QObject):
    """"""
    # Enum QSystemTrayIcon.MessageIcon
    NoIcon = 0
    Information = 0
    Warning = 0
    Critical = 0

    # Enum QSystemTrayIcon.ActivationReason
    Unknown = 0
    Context = 0
    DoubleClick = 0
    Trigger = 0
    MiddleClick = 0

    def __init__(self, parent = None):
        '''void QSystemTrayIcon.__init__(QObject parent = None)'''
    def __init__(self, icon, parent = None):
        '''void QSystemTrayIcon.__init__(QIcon icon, QObject parent = None)'''
    def event(self, event):
        '''bool QSystemTrayIcon.event(QEvent event)'''
        return bool()
    messageClicked = pyqtSignal() # void messageClicked() - signal
    activated = pyqtSignal() # void activated(QSystemTrayIcon::ActivationReason) - signal
    def show(self):
        '''void QSystemTrayIcon.show()'''
    def setVisible(self, visible):
        '''void QSystemTrayIcon.setVisible(bool visible)'''
    def hide(self):
        '''void QSystemTrayIcon.hide()'''
    def isVisible(self):
        '''bool QSystemTrayIcon.isVisible()'''
        return bool()
    def showMessage(self, title, msg, icon = None, msecs = 10000):
        '''void QSystemTrayIcon.showMessage(QString title, QString msg, QSystemTrayIcon.MessageIcon icon = QSystemTrayIcon.Information, int msecs = 10000)'''
    def supportsMessages(self):
        '''static bool QSystemTrayIcon.supportsMessages()'''
        return bool()
    def isSystemTrayAvailable(self):
        '''static bool QSystemTrayIcon.isSystemTrayAvailable()'''
        return bool()
    def setToolTip(self, tip):
        '''void QSystemTrayIcon.setToolTip(QString tip)'''
    def toolTip(self):
        '''QString QSystemTrayIcon.toolTip()'''
        return QString()
    def setIcon(self, icon):
        '''void QSystemTrayIcon.setIcon(QIcon icon)'''
    def icon(self):
        '''QIcon QSystemTrayIcon.icon()'''
        return QIcon()
    def geometry(self):
        '''QRect QSystemTrayIcon.geometry()'''
        return QRect()
    def contextMenu(self):
        '''QMenu QSystemTrayIcon.contextMenu()'''
        return QMenu()
    def setContextMenu(self, menu):
        '''void QSystemTrayIcon.setContextMenu(QMenu menu)'''


class QTabBar(QWidget):
    """"""
    # Enum QTabBar.SelectionBehavior
    SelectLeftTab = 0
    SelectRightTab = 0
    SelectPreviousTab = 0

    # Enum QTabBar.ButtonPosition
    LeftSide = 0
    RightSide = 0

    # Enum QTabBar.Shape
    RoundedNorth = 0
    RoundedSouth = 0
    RoundedWest = 0
    RoundedEast = 0
    TriangularNorth = 0
    TriangularSouth = 0
    TriangularWest = 0
    TriangularEast = 0

    def __init__(self, parent = None):
        '''void QTabBar.__init__(QWidget parent = None)'''
    def wheelEvent(self, event):
        '''void QTabBar.wheelEvent(QWheelEvent event)'''
    def hideEvent(self):
        '''QHideEvent QTabBar.hideEvent()'''
        return QHideEvent()
    tabMoved = pyqtSignal() # void tabMoved(int,int) - signal
    tabCloseRequested = pyqtSignal() # void tabCloseRequested(int) - signal
    def setDocumentMode(self, set):
        '''void QTabBar.setDocumentMode(bool set)'''
    def documentMode(self):
        '''bool QTabBar.documentMode()'''
        return bool()
    def setMovable(self, movable):
        '''void QTabBar.setMovable(bool movable)'''
    def isMovable(self):
        '''bool QTabBar.isMovable()'''
        return bool()
    def setExpanding(self, enabled):
        '''void QTabBar.setExpanding(bool enabled)'''
    def expanding(self):
        '''bool QTabBar.expanding()'''
        return bool()
    def setSelectionBehaviorOnRemove(self, behavior):
        '''void QTabBar.setSelectionBehaviorOnRemove(QTabBar.SelectionBehavior behavior)'''
    def selectionBehaviorOnRemove(self):
        '''QTabBar.SelectionBehavior QTabBar.selectionBehaviorOnRemove()'''
        return QTabBar.SelectionBehavior()
    def tabButton(self, index, position):
        '''QWidget QTabBar.tabButton(int index, QTabBar.ButtonPosition position)'''
        return QWidget()
    def setTabButton(self, index, position, widget):
        '''void QTabBar.setTabButton(int index, QTabBar.ButtonPosition position, QWidget widget)'''
    def setTabsClosable(self, closable):
        '''void QTabBar.setTabsClosable(bool closable)'''
    def tabsClosable(self):
        '''bool QTabBar.tabsClosable()'''
        return bool()
    def moveTab(self, from_, to):
        '''void QTabBar.moveTab(int from, int to)'''
    def changeEvent(self):
        '''QEvent QTabBar.changeEvent()'''
        return QEvent()
    def keyPressEvent(self):
        '''QKeyEvent QTabBar.keyPressEvent()'''
        return QKeyEvent()
    def mouseReleaseEvent(self):
        '''QMouseEvent QTabBar.mouseReleaseEvent()'''
        return QMouseEvent()
    def mouseMoveEvent(self):
        '''QMouseEvent QTabBar.mouseMoveEvent()'''
        return QMouseEvent()
    def mousePressEvent(self):
        '''QMouseEvent QTabBar.mousePressEvent()'''
        return QMouseEvent()
    def paintEvent(self):
        '''QPaintEvent QTabBar.paintEvent()'''
        return QPaintEvent()
    def showEvent(self):
        '''QShowEvent QTabBar.showEvent()'''
        return QShowEvent()
    def resizeEvent(self):
        '''QResizeEvent QTabBar.resizeEvent()'''
        return QResizeEvent()
    def event(self):
        '''QEvent QTabBar.event()'''
        return QEvent()
    def tabLayoutChange(self):
        '''void QTabBar.tabLayoutChange()'''
    def tabRemoved(self, index):
        '''void QTabBar.tabRemoved(int index)'''
    def tabInserted(self, index):
        '''void QTabBar.tabInserted(int index)'''
    def tabSizeHint(self, index):
        '''QSize QTabBar.tabSizeHint(int index)'''
        return QSize()
    def initStyleOption(self, option, tabIndex):
        '''void QTabBar.initStyleOption(QStyleOptionTab option, int tabIndex)'''
    currentChanged = pyqtSignal() # void currentChanged(int) - signal
    def setCurrentIndex(self, index):
        '''void QTabBar.setCurrentIndex(int index)'''
    def usesScrollButtons(self):
        '''bool QTabBar.usesScrollButtons()'''
        return bool()
    def setUsesScrollButtons(self, useButtons):
        '''void QTabBar.setUsesScrollButtons(bool useButtons)'''
    def setElideMode(self):
        '''Qt.TextElideMode QTabBar.setElideMode()'''
        return Qt.TextElideMode()
    def elideMode(self):
        '''Qt.TextElideMode QTabBar.elideMode()'''
        return Qt.TextElideMode()
    def setIconSize(self, size):
        '''void QTabBar.setIconSize(QSize size)'''
    def iconSize(self):
        '''QSize QTabBar.iconSize()'''
        return QSize()
    def drawBase(self):
        '''bool QTabBar.drawBase()'''
        return bool()
    def setDrawBase(self, drawTheBase):
        '''void QTabBar.setDrawBase(bool drawTheBase)'''
    def minimumSizeHint(self):
        '''QSize QTabBar.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QTabBar.sizeHint()'''
        return QSize()
    def __len__(self):
        '''None QTabBar.__len__()'''
        return None()
    def count(self):
        '''int QTabBar.count()'''
        return int()
    def currentIndex(self):
        '''int QTabBar.currentIndex()'''
        return int()
    def tabRect(self, index):
        '''QRect QTabBar.tabRect(int index)'''
        return QRect()
    def tabAt(self, pos):
        '''int QTabBar.tabAt(QPoint pos)'''
        return int()
    def tabData(self, index):
        '''QVariant QTabBar.tabData(int index)'''
        return QVariant()
    def setTabData(self, index, data):
        '''void QTabBar.setTabData(int index, QVariant data)'''
    def tabWhatsThis(self, index):
        '''QString QTabBar.tabWhatsThis(int index)'''
        return QString()
    def setTabWhatsThis(self, index, text):
        '''void QTabBar.setTabWhatsThis(int index, QString text)'''
    def tabToolTip(self, index):
        '''QString QTabBar.tabToolTip(int index)'''
        return QString()
    def setTabToolTip(self, index, tip):
        '''void QTabBar.setTabToolTip(int index, QString tip)'''
    def setTabIcon(self, index, icon):
        '''void QTabBar.setTabIcon(int index, QIcon icon)'''
    def tabIcon(self, index):
        '''QIcon QTabBar.tabIcon(int index)'''
        return QIcon()
    def setTabTextColor(self, index, color):
        '''void QTabBar.setTabTextColor(int index, QColor color)'''
    def tabTextColor(self, index):
        '''QColor QTabBar.tabTextColor(int index)'''
        return QColor()
    def setTabText(self, index, text):
        '''void QTabBar.setTabText(int index, QString text)'''
    def tabText(self, index):
        '''QString QTabBar.tabText(int index)'''
        return QString()
    def setTabEnabled(self, index):
        '''bool QTabBar.setTabEnabled(int index)'''
        return bool()
    def isTabEnabled(self, index):
        '''bool QTabBar.isTabEnabled(int index)'''
        return bool()
    def removeTab(self, index):
        '''void QTabBar.removeTab(int index)'''
    def insertTab(self, index, text):
        '''int QTabBar.insertTab(int index, QString text)'''
        return int()
    def insertTab(self, index, icon, text):
        '''int QTabBar.insertTab(int index, QIcon icon, QString text)'''
        return int()
    def addTab(self, text):
        '''int QTabBar.addTab(QString text)'''
        return int()
    def addTab(self, icon, text):
        '''int QTabBar.addTab(QIcon icon, QString text)'''
        return int()
    def setShape(self, shape):
        '''void QTabBar.setShape(QTabBar.Shape shape)'''
    def shape(self):
        '''QTabBar.Shape QTabBar.shape()'''
        return QTabBar.Shape()


class QTableView(QAbstractItemView):
    """"""
    def __init__(self, parent = None):
        '''void QTableView.__init__(QWidget parent = None)'''
    def currentChanged(self, current, previous):
        '''void QTableView.currentChanged(QModelIndex current, QModelIndex previous)'''
    def selectionChanged(self, selected, deselected):
        '''void QTableView.selectionChanged(QItemSelection selected, QItemSelection deselected)'''
    def clearSpans(self):
        '''void QTableView.clearSpans()'''
    def isCornerButtonEnabled(self):
        '''bool QTableView.isCornerButtonEnabled()'''
        return bool()
    def setCornerButtonEnabled(self, enable):
        '''void QTableView.setCornerButtonEnabled(bool enable)'''
    def wordWrap(self):
        '''bool QTableView.wordWrap()'''
        return bool()
    def setWordWrap(self, on):
        '''void QTableView.setWordWrap(bool on)'''
    def columnSpan(self, row, column):
        '''int QTableView.columnSpan(int row, int column)'''
        return int()
    def rowSpan(self, row, column):
        '''int QTableView.rowSpan(int row, int column)'''
        return int()
    def setSpan(self, row, column, rowSpan, columnSpan):
        '''void QTableView.setSpan(int row, int column, int rowSpan, int columnSpan)'''
    def isSortingEnabled(self):
        '''bool QTableView.isSortingEnabled()'''
        return bool()
    def setSortingEnabled(self, enable):
        '''void QTableView.setSortingEnabled(bool enable)'''
    def isIndexHidden(self, index):
        '''bool QTableView.isIndexHidden(QModelIndex index)'''
        return bool()
    def horizontalScrollbarAction(self, action):
        '''void QTableView.horizontalScrollbarAction(int action)'''
    def verticalScrollbarAction(self, action):
        '''void QTableView.verticalScrollbarAction(int action)'''
    def sizeHintForColumn(self, column):
        '''int QTableView.sizeHintForColumn(int column)'''
        return int()
    def sizeHintForRow(self, row):
        '''int QTableView.sizeHintForRow(int row)'''
        return int()
    def updateGeometries(self):
        '''void QTableView.updateGeometries()'''
    def selectedIndexes(self):
        '''list-of-QModelIndex QTableView.selectedIndexes()'''
        return [QModelIndex()]
    def visualRegionForSelection(self, selection):
        '''QRegion QTableView.visualRegionForSelection(QItemSelection selection)'''
        return QRegion()
    def setSelection(self, rect, command):
        '''void QTableView.setSelection(QRect rect, QItemSelectionModel.SelectionFlags command)'''
    def moveCursor(self, cursorAction, modifiers):
        '''QModelIndex QTableView.moveCursor(QAbstractItemView.CursorAction cursorAction, Qt.KeyboardModifiers modifiers)'''
        return QModelIndex()
    def verticalOffset(self):
        '''int QTableView.verticalOffset()'''
        return int()
    def horizontalOffset(self):
        '''int QTableView.horizontalOffset()'''
        return int()
    def timerEvent(self, event):
        '''void QTableView.timerEvent(QTimerEvent event)'''
    def paintEvent(self, e):
        '''void QTableView.paintEvent(QPaintEvent e)'''
    def viewOptions(self):
        '''QStyleOptionViewItem QTableView.viewOptions()'''
        return QStyleOptionViewItem()
    def scrollContentsBy(self, dx, dy):
        '''void QTableView.scrollContentsBy(int dx, int dy)'''
    def columnCountChanged(self, oldCount, newCount):
        '''void QTableView.columnCountChanged(int oldCount, int newCount)'''
    def rowCountChanged(self, oldCount, newCount):
        '''void QTableView.rowCountChanged(int oldCount, int newCount)'''
    def columnResized(self, column, oldWidth, newWidth):
        '''void QTableView.columnResized(int column, int oldWidth, int newWidth)'''
    def rowResized(self, row, oldHeight, newHeight):
        '''void QTableView.rowResized(int row, int oldHeight, int newHeight)'''
    def columnMoved(self, column, oldIndex, newIndex):
        '''void QTableView.columnMoved(int column, int oldIndex, int newIndex)'''
    def rowMoved(self, row, oldIndex, newIndex):
        '''void QTableView.rowMoved(int row, int oldIndex, int newIndex)'''
    def sortByColumn(self, column):
        '''void QTableView.sortByColumn(int column)'''
    def sortByColumn(self, column, order):
        '''void QTableView.sortByColumn(int column, Qt.SortOrder order)'''
    def resizeColumnsToContents(self):
        '''void QTableView.resizeColumnsToContents()'''
    def resizeColumnToContents(self, column):
        '''void QTableView.resizeColumnToContents(int column)'''
    def resizeRowsToContents(self):
        '''void QTableView.resizeRowsToContents()'''
    def resizeRowToContents(self, row):
        '''void QTableView.resizeRowToContents(int row)'''
    def showColumn(self, column):
        '''void QTableView.showColumn(int column)'''
    def showRow(self, row):
        '''void QTableView.showRow(int row)'''
    def hideColumn(self, column):
        '''void QTableView.hideColumn(int column)'''
    def hideRow(self, row):
        '''void QTableView.hideRow(int row)'''
    def selectColumn(self, column):
        '''void QTableView.selectColumn(int column)'''
    def selectRow(self, row):
        '''void QTableView.selectRow(int row)'''
    def indexAt(self, p):
        '''QModelIndex QTableView.indexAt(QPoint p)'''
        return QModelIndex()
    def scrollTo(self, index, hint = None):
        '''void QTableView.scrollTo(QModelIndex index, QAbstractItemView.ScrollHint hint = QAbstractItemView.EnsureVisible)'''
    def visualRect(self, index):
        '''QRect QTableView.visualRect(QModelIndex index)'''
        return QRect()
    def setGridStyle(self, style):
        '''void QTableView.setGridStyle(Qt.PenStyle style)'''
    def gridStyle(self):
        '''Qt.PenStyle QTableView.gridStyle()'''
        return Qt.PenStyle()
    def setShowGrid(self, show):
        '''void QTableView.setShowGrid(bool show)'''
    def showGrid(self):
        '''bool QTableView.showGrid()'''
        return bool()
    def setColumnHidden(self, column, hide):
        '''void QTableView.setColumnHidden(int column, bool hide)'''
    def isColumnHidden(self, column):
        '''bool QTableView.isColumnHidden(int column)'''
        return bool()
    def setRowHidden(self, row, hide):
        '''void QTableView.setRowHidden(int row, bool hide)'''
    def isRowHidden(self, row):
        '''bool QTableView.isRowHidden(int row)'''
        return bool()
    def columnAt(self, x):
        '''int QTableView.columnAt(int x)'''
        return int()
    def columnWidth(self, column):
        '''int QTableView.columnWidth(int column)'''
        return int()
    def setColumnWidth(self, column, width):
        '''void QTableView.setColumnWidth(int column, int width)'''
    def columnViewportPosition(self, column):
        '''int QTableView.columnViewportPosition(int column)'''
        return int()
    def rowAt(self, y):
        '''int QTableView.rowAt(int y)'''
        return int()
    def rowHeight(self, row):
        '''int QTableView.rowHeight(int row)'''
        return int()
    def setRowHeight(self, row, height):
        '''void QTableView.setRowHeight(int row, int height)'''
    def rowViewportPosition(self, row):
        '''int QTableView.rowViewportPosition(int row)'''
        return int()
    def setVerticalHeader(self, header):
        '''void QTableView.setVerticalHeader(QHeaderView header)'''
    def setHorizontalHeader(self, header):
        '''void QTableView.setHorizontalHeader(QHeaderView header)'''
    def verticalHeader(self):
        '''QHeaderView QTableView.verticalHeader()'''
        return QHeaderView()
    def horizontalHeader(self):
        '''QHeaderView QTableView.horizontalHeader()'''
        return QHeaderView()
    def setSelectionModel(self, selectionModel):
        '''void QTableView.setSelectionModel(QItemSelectionModel selectionModel)'''
    def setRootIndex(self, index):
        '''void QTableView.setRootIndex(QModelIndex index)'''
    def setModel(self, model):
        '''void QTableView.setModel(QAbstractItemModel model)'''


class QTableWidgetSelectionRange():
    """"""
    def __init__(self):
        '''void QTableWidgetSelectionRange.__init__()'''
    def __init__(self, top, left, bottom, right):
        '''void QTableWidgetSelectionRange.__init__(int top, int left, int bottom, int right)'''
    def __init__(self, other):
        '''void QTableWidgetSelectionRange.__init__(QTableWidgetSelectionRange other)'''
    def columnCount(self):
        '''int QTableWidgetSelectionRange.columnCount()'''
        return int()
    def rowCount(self):
        '''int QTableWidgetSelectionRange.rowCount()'''
        return int()
    def rightColumn(self):
        '''int QTableWidgetSelectionRange.rightColumn()'''
        return int()
    def leftColumn(self):
        '''int QTableWidgetSelectionRange.leftColumn()'''
        return int()
    def bottomRow(self):
        '''int QTableWidgetSelectionRange.bottomRow()'''
        return int()
    def topRow(self):
        '''int QTableWidgetSelectionRange.topRow()'''
        return int()


class QTableWidgetItem():
    """"""
    # Enum QTableWidgetItem.ItemType
    Type = 0
    UserType = 0

    def __init__(self, type = None):
        '''void QTableWidgetItem.__init__(int type = QTableWidgetItem.Type)'''
    def __init__(self, text, type = None):
        '''void QTableWidgetItem.__init__(QString text, int type = QTableWidgetItem.Type)'''
    def __init__(self, icon, text, type = None):
        '''void QTableWidgetItem.__init__(QIcon icon, QString text, int type = QTableWidgetItem.Type)'''
    def __init__(self, other):
        '''void QTableWidgetItem.__init__(QTableWidgetItem other)'''
    def __ge__(self, other):
        '''bool QTableWidgetItem.__ge__(QTableWidgetItem other)'''
        return bool()
    def isSelected(self):
        '''bool QTableWidgetItem.isSelected()'''
        return bool()
    def setSelected(self, aselect):
        '''void QTableWidgetItem.setSelected(bool aselect)'''
    def column(self):
        '''int QTableWidgetItem.column()'''
        return int()
    def row(self):
        '''int QTableWidgetItem.row()'''
        return int()
    def setForeground(self, brush):
        '''void QTableWidgetItem.setForeground(QBrush brush)'''
    def foreground(self):
        '''QBrush QTableWidgetItem.foreground()'''
        return QBrush()
    def setBackground(self, brush):
        '''void QTableWidgetItem.setBackground(QBrush brush)'''
    def background(self):
        '''QBrush QTableWidgetItem.background()'''
        return QBrush()
    def setSizeHint(self, size):
        '''void QTableWidgetItem.setSizeHint(QSize size)'''
    def sizeHint(self):
        '''QSize QTableWidgetItem.sizeHint()'''
        return QSize()
    def setFont(self, afont):
        '''void QTableWidgetItem.setFont(QFont afont)'''
    def setWhatsThis(self, awhatsThis):
        '''void QTableWidgetItem.setWhatsThis(QString awhatsThis)'''
    def setToolTip(self, atoolTip):
        '''void QTableWidgetItem.setToolTip(QString atoolTip)'''
    def setStatusTip(self, astatusTip):
        '''void QTableWidgetItem.setStatusTip(QString astatusTip)'''
    def setIcon(self, aicon):
        '''void QTableWidgetItem.setIcon(QIcon aicon)'''
    def setText(self, atext):
        '''void QTableWidgetItem.setText(QString atext)'''
    def setFlags(self, aflags):
        '''void QTableWidgetItem.setFlags(Qt.ItemFlags aflags)'''
    def type(self):
        '''int QTableWidgetItem.type()'''
        return int()
    def write(self, out):
        '''void QTableWidgetItem.write(QDataStream out)'''
    def read(self, in_):
        '''void QTableWidgetItem.read(QDataStream in)'''
    def __lt__(self, other):
        '''bool QTableWidgetItem.__lt__(QTableWidgetItem other)'''
        return bool()
    def setData(self, role, value):
        '''void QTableWidgetItem.setData(int role, QVariant value)'''
    def data(self, role):
        '''QVariant QTableWidgetItem.data(int role)'''
        return QVariant()
    def setCheckState(self, state):
        '''void QTableWidgetItem.setCheckState(Qt.CheckState state)'''
    def checkState(self):
        '''Qt.CheckState QTableWidgetItem.checkState()'''
        return Qt.CheckState()
    def setTextColor(self, color):
        '''void QTableWidgetItem.setTextColor(QColor color)'''
    def textColor(self):
        '''QColor QTableWidgetItem.textColor()'''
        return QColor()
    def setBackgroundColor(self, color):
        '''void QTableWidgetItem.setBackgroundColor(QColor color)'''
    def backgroundColor(self):
        '''QColor QTableWidgetItem.backgroundColor()'''
        return QColor()
    def setTextAlignment(self, alignment):
        '''void QTableWidgetItem.setTextAlignment(int alignment)'''
    def textAlignment(self):
        '''int QTableWidgetItem.textAlignment()'''
        return int()
    def font(self):
        '''QFont QTableWidgetItem.font()'''
        return QFont()
    def whatsThis(self):
        '''QString QTableWidgetItem.whatsThis()'''
        return QString()
    def toolTip(self):
        '''QString QTableWidgetItem.toolTip()'''
        return QString()
    def statusTip(self):
        '''QString QTableWidgetItem.statusTip()'''
        return QString()
    def icon(self):
        '''QIcon QTableWidgetItem.icon()'''
        return QIcon()
    def text(self):
        '''QString QTableWidgetItem.text()'''
        return QString()
    def flags(self):
        '''Qt.ItemFlags QTableWidgetItem.flags()'''
        return Qt.ItemFlags()
    def tableWidget(self):
        '''QTableWidget QTableWidgetItem.tableWidget()'''
        return QTableWidget()
    def clone(self):
        '''QTableWidgetItem QTableWidgetItem.clone()'''
        return QTableWidgetItem()


class QTableWidget(QTableView):
    """"""
    def __init__(self, parent = None):
        '''void QTableWidget.__init__(QWidget parent = None)'''
    def __init__(self, rows, columns, parent = None):
        '''void QTableWidget.__init__(int rows, int columns, QWidget parent = None)'''
    def dropEvent(self, event):
        '''void QTableWidget.dropEvent(QDropEvent event)'''
    def event(self, e):
        '''bool QTableWidget.event(QEvent e)'''
        return bool()
    def itemFromIndex(self, index):
        '''QTableWidgetItem QTableWidget.itemFromIndex(QModelIndex index)'''
        return QTableWidgetItem()
    def indexFromItem(self, item):
        '''QModelIndex QTableWidget.indexFromItem(QTableWidgetItem item)'''
        return QModelIndex()
    def items(self, data):
        '''list-of-QTableWidgetItem QTableWidget.items(QMimeData data)'''
        return [QTableWidgetItem()]
    def supportedDropActions(self):
        '''Qt.DropActions QTableWidget.supportedDropActions()'''
        return Qt.DropActions()
    def dropMimeData(self, row, column, data, action):
        '''bool QTableWidget.dropMimeData(int row, int column, QMimeData data, Qt.DropAction action)'''
        return bool()
    def mimeData(self, items):
        '''QMimeData QTableWidget.mimeData(list-of-QTableWidgetItem items)'''
        return QMimeData()
    def mimeTypes(self):
        '''QStringList QTableWidget.mimeTypes()'''
        return QStringList()
    currentCellChanged = pyqtSignal() # void currentCellChanged(int,int,int,int) - signal
    cellChanged = pyqtSignal() # void cellChanged(int,int) - signal
    cellEntered = pyqtSignal() # void cellEntered(int,int) - signal
    cellActivated = pyqtSignal() # void cellActivated(int,int) - signal
    cellDoubleClicked = pyqtSignal() # void cellDoubleClicked(int,int) - signal
    cellClicked = pyqtSignal() # void cellClicked(int,int) - signal
    cellPressed = pyqtSignal() # void cellPressed(int,int) - signal
    itemSelectionChanged = pyqtSignal() # void itemSelectionChanged() - signal
    currentItemChanged = pyqtSignal() # void currentItemChanged(QTableWidgetItem *,QTableWidgetItem *) - signal
    itemChanged = pyqtSignal() # void itemChanged(QTableWidgetItem *) - signal
    itemEntered = pyqtSignal() # void itemEntered(QTableWidgetItem *) - signal
    itemActivated = pyqtSignal() # void itemActivated(QTableWidgetItem *) - signal
    itemDoubleClicked = pyqtSignal() # void itemDoubleClicked(QTableWidgetItem *) - signal
    itemClicked = pyqtSignal() # void itemClicked(QTableWidgetItem *) - signal
    itemPressed = pyqtSignal() # void itemPressed(QTableWidgetItem *) - signal
    def clearContents(self):
        '''void QTableWidget.clearContents()'''
    def clear(self):
        '''void QTableWidget.clear()'''
    def removeColumn(self, column):
        '''void QTableWidget.removeColumn(int column)'''
    def removeRow(self, row):
        '''void QTableWidget.removeRow(int row)'''
    def insertColumn(self, column):
        '''void QTableWidget.insertColumn(int column)'''
    def insertRow(self, row):
        '''void QTableWidget.insertRow(int row)'''
    def scrollToItem(self, item, hint = None):
        '''void QTableWidget.scrollToItem(QTableWidgetItem item, QAbstractItemView.ScrollHint hint = QAbstractItemView.EnsureVisible)'''
    def setItemPrototype(self, item):
        '''void QTableWidget.setItemPrototype(QTableWidgetItem item)'''
    def itemPrototype(self):
        '''QTableWidgetItem QTableWidget.itemPrototype()'''
        return QTableWidgetItem()
    def visualItemRect(self, item):
        '''QRect QTableWidget.visualItemRect(QTableWidgetItem item)'''
        return QRect()
    def itemAt(self, p):
        '''QTableWidgetItem QTableWidget.itemAt(QPoint p)'''
        return QTableWidgetItem()
    def itemAt(self, ax, ay):
        '''QTableWidgetItem QTableWidget.itemAt(int ax, int ay)'''
        return QTableWidgetItem()
    def visualColumn(self, logicalColumn):
        '''int QTableWidget.visualColumn(int logicalColumn)'''
        return int()
    def visualRow(self, logicalRow):
        '''int QTableWidget.visualRow(int logicalRow)'''
        return int()
    def findItems(self, text, flags):
        '''list-of-QTableWidgetItem QTableWidget.findItems(QString text, Qt.MatchFlags flags)'''
        return [QTableWidgetItem()]
    def selectedItems(self):
        '''list-of-QTableWidgetItem QTableWidget.selectedItems()'''
        return [QTableWidgetItem()]
    def selectedRanges(self):
        '''list-of-QTableWidgetSelectionRange QTableWidget.selectedRanges()'''
        return [QTableWidgetSelectionRange()]
    def setRangeSelected(self, range, select):
        '''void QTableWidget.setRangeSelected(QTableWidgetSelectionRange range, bool select)'''
    def setItemSelected(self, item, select):
        '''void QTableWidget.setItemSelected(QTableWidgetItem item, bool select)'''
    def isItemSelected(self, item):
        '''bool QTableWidget.isItemSelected(QTableWidgetItem item)'''
        return bool()
    def removeCellWidget(self, arow, acolumn):
        '''void QTableWidget.removeCellWidget(int arow, int acolumn)'''
    def setCellWidget(self, row, column, widget):
        '''void QTableWidget.setCellWidget(int row, int column, QWidget widget)'''
    def cellWidget(self, row, column):
        '''QWidget QTableWidget.cellWidget(int row, int column)'''
        return QWidget()
    def closePersistentEditor(self, item):
        '''void QTableWidget.closePersistentEditor(QTableWidgetItem item)'''
    def openPersistentEditor(self, item):
        '''void QTableWidget.openPersistentEditor(QTableWidgetItem item)'''
    def editItem(self, item):
        '''void QTableWidget.editItem(QTableWidgetItem item)'''
    def isSortingEnabled(self):
        '''bool QTableWidget.isSortingEnabled()'''
        return bool()
    def setSortingEnabled(self, enable):
        '''void QTableWidget.setSortingEnabled(bool enable)'''
    def sortItems(self, column, order = None):
        '''void QTableWidget.sortItems(int column, Qt.SortOrder order = Qt.AscendingOrder)'''
    def setCurrentCell(self, row, column):
        '''void QTableWidget.setCurrentCell(int row, int column)'''
    def setCurrentCell(self, row, column, command):
        '''void QTableWidget.setCurrentCell(int row, int column, QItemSelectionModel.SelectionFlags command)'''
    def setCurrentItem(self, item):
        '''void QTableWidget.setCurrentItem(QTableWidgetItem item)'''
    def setCurrentItem(self, item, command):
        '''void QTableWidget.setCurrentItem(QTableWidgetItem item, QItemSelectionModel.SelectionFlags command)'''
    def currentItem(self):
        '''QTableWidgetItem QTableWidget.currentItem()'''
        return QTableWidgetItem()
    def currentColumn(self):
        '''int QTableWidget.currentColumn()'''
        return int()
    def currentRow(self):
        '''int QTableWidget.currentRow()'''
        return int()
    def setHorizontalHeaderLabels(self, labels):
        '''void QTableWidget.setHorizontalHeaderLabels(QStringList labels)'''
    def setVerticalHeaderLabels(self, labels):
        '''void QTableWidget.setVerticalHeaderLabels(QStringList labels)'''
    def takeHorizontalHeaderItem(self, column):
        '''QTableWidgetItem QTableWidget.takeHorizontalHeaderItem(int column)'''
        return QTableWidgetItem()
    def setHorizontalHeaderItem(self, column, item):
        '''void QTableWidget.setHorizontalHeaderItem(int column, QTableWidgetItem item)'''
    def horizontalHeaderItem(self, column):
        '''QTableWidgetItem QTableWidget.horizontalHeaderItem(int column)'''
        return QTableWidgetItem()
    def takeVerticalHeaderItem(self, row):
        '''QTableWidgetItem QTableWidget.takeVerticalHeaderItem(int row)'''
        return QTableWidgetItem()
    def setVerticalHeaderItem(self, row, item):
        '''void QTableWidget.setVerticalHeaderItem(int row, QTableWidgetItem item)'''
    def verticalHeaderItem(self, row):
        '''QTableWidgetItem QTableWidget.verticalHeaderItem(int row)'''
        return QTableWidgetItem()
    def takeItem(self, row, column):
        '''QTableWidgetItem QTableWidget.takeItem(int row, int column)'''
        return QTableWidgetItem()
    def setItem(self, row, column, item):
        '''void QTableWidget.setItem(int row, int column, QTableWidgetItem item)'''
    def item(self, row, column):
        '''QTableWidgetItem QTableWidget.item(int row, int column)'''
        return QTableWidgetItem()
    def column(self, item):
        '''int QTableWidget.column(QTableWidgetItem item)'''
        return int()
    def row(self, item):
        '''int QTableWidget.row(QTableWidgetItem item)'''
        return int()
    def columnCount(self):
        '''int QTableWidget.columnCount()'''
        return int()
    def setColumnCount(self, columns):
        '''void QTableWidget.setColumnCount(int columns)'''
    def rowCount(self):
        '''int QTableWidget.rowCount()'''
        return int()
    def setRowCount(self, rows):
        '''void QTableWidget.setRowCount(int rows)'''


class QTabWidget(QWidget):
    """"""
    # Enum QTabWidget.TabShape
    Rounded = 0
    Triangular = 0

    # Enum QTabWidget.TabPosition
    North = 0
    South = 0
    West = 0
    East = 0

    def __init__(self, parent = None):
        '''void QTabWidget.__init__(QWidget parent = None)'''
    def heightForWidth(self, width):
        '''int QTabWidget.heightForWidth(int width)'''
        return int()
    tabCloseRequested = pyqtSignal() # void tabCloseRequested(int) - signal
    def setDocumentMode(self, set):
        '''void QTabWidget.setDocumentMode(bool set)'''
    def documentMode(self):
        '''bool QTabWidget.documentMode()'''
        return bool()
    def setMovable(self, movable):
        '''void QTabWidget.setMovable(bool movable)'''
    def isMovable(self):
        '''bool QTabWidget.isMovable()'''
        return bool()
    def setTabsClosable(self, closeable):
        '''void QTabWidget.setTabsClosable(bool closeable)'''
    def tabsClosable(self):
        '''bool QTabWidget.tabsClosable()'''
        return bool()
    def setUsesScrollButtons(self, useButtons):
        '''void QTabWidget.setUsesScrollButtons(bool useButtons)'''
    def usesScrollButtons(self):
        '''bool QTabWidget.usesScrollButtons()'''
        return bool()
    def setIconSize(self, size):
        '''void QTabWidget.setIconSize(QSize size)'''
    def iconSize(self):
        '''QSize QTabWidget.iconSize()'''
        return QSize()
    def setElideMode(self):
        '''Qt.TextElideMode QTabWidget.setElideMode()'''
        return Qt.TextElideMode()
    def elideMode(self):
        '''Qt.TextElideMode QTabWidget.elideMode()'''
        return Qt.TextElideMode()
    def changeEvent(self):
        '''QEvent QTabWidget.changeEvent()'''
        return QEvent()
    def tabBar(self):
        '''QTabBar QTabWidget.tabBar()'''
        return QTabBar()
    def setTabBar(self):
        '''QTabBar QTabWidget.setTabBar()'''
        return QTabBar()
    def paintEvent(self):
        '''QPaintEvent QTabWidget.paintEvent()'''
        return QPaintEvent()
    def keyPressEvent(self):
        '''QKeyEvent QTabWidget.keyPressEvent()'''
        return QKeyEvent()
    def resizeEvent(self):
        '''QResizeEvent QTabWidget.resizeEvent()'''
        return QResizeEvent()
    def showEvent(self):
        '''QShowEvent QTabWidget.showEvent()'''
        return QShowEvent()
    def event(self):
        '''QEvent QTabWidget.event()'''
        return QEvent()
    def tabRemoved(self, index):
        '''void QTabWidget.tabRemoved(int index)'''
    def tabInserted(self, index):
        '''void QTabWidget.tabInserted(int index)'''
    def initStyleOption(self, option):
        '''void QTabWidget.initStyleOption(QStyleOptionTabWidgetFrame option)'''
    currentChanged = pyqtSignal() # void currentChanged(int) - signal
    def setCurrentWidget(self, widget):
        '''void QTabWidget.setCurrentWidget(QWidget widget)'''
    def setCurrentIndex(self, index):
        '''void QTabWidget.setCurrentIndex(int index)'''
    def cornerWidget(self, corner = None):
        '''QWidget QTabWidget.cornerWidget(Qt.Corner corner = Qt.TopRightCorner)'''
        return QWidget()
    def setCornerWidget(self, widget, corner = None):
        '''void QTabWidget.setCornerWidget(QWidget widget, Qt.Corner corner = Qt.TopRightCorner)'''
    def minimumSizeHint(self):
        '''QSize QTabWidget.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QTabWidget.sizeHint()'''
        return QSize()
    def setTabShape(self, s):
        '''void QTabWidget.setTabShape(QTabWidget.TabShape s)'''
    def tabShape(self):
        '''QTabWidget.TabShape QTabWidget.tabShape()'''
        return QTabWidget.TabShape()
    def setTabPosition(self):
        '''QTabWidget.TabPosition QTabWidget.setTabPosition()'''
        return QTabWidget.TabPosition()
    def tabPosition(self):
        '''QTabWidget.TabPosition QTabWidget.tabPosition()'''
        return QTabWidget.TabPosition()
    def __len__(self):
        '''None QTabWidget.__len__()'''
        return None()
    def count(self):
        '''int QTabWidget.count()'''
        return int()
    def indexOf(self, widget):
        '''int QTabWidget.indexOf(QWidget widget)'''
        return int()
    def widget(self, index):
        '''QWidget QTabWidget.widget(int index)'''
        return QWidget()
    def currentWidget(self):
        '''QWidget QTabWidget.currentWidget()'''
        return QWidget()
    def currentIndex(self):
        '''int QTabWidget.currentIndex()'''
        return int()
    def tabWhatsThis(self, index):
        '''QString QTabWidget.tabWhatsThis(int index)'''
        return QString()
    def setTabWhatsThis(self, index, text):
        '''void QTabWidget.setTabWhatsThis(int index, QString text)'''
    def tabToolTip(self, index):
        '''QString QTabWidget.tabToolTip(int index)'''
        return QString()
    def setTabToolTip(self, index, tip):
        '''void QTabWidget.setTabToolTip(int index, QString tip)'''
    def setTabIcon(self, index, icon):
        '''void QTabWidget.setTabIcon(int index, QIcon icon)'''
    def tabIcon(self, index):
        '''QIcon QTabWidget.tabIcon(int index)'''
        return QIcon()
    def setTabText(self, index):
        '''QString QTabWidget.setTabText(int index)'''
        return QString()
    def tabText(self, index):
        '''QString QTabWidget.tabText(int index)'''
        return QString()
    def setTabEnabled(self, index):
        '''bool QTabWidget.setTabEnabled(int index)'''
        return bool()
    def isTabEnabled(self, index):
        '''bool QTabWidget.isTabEnabled(int index)'''
        return bool()
    def removeTab(self, index):
        '''void QTabWidget.removeTab(int index)'''
    def insertTab(self, index, widget):
        '''QString QTabWidget.insertTab(int index, QWidget widget)'''
        return QString()
    def insertTab(self, index, widget, icon, label):
        '''int QTabWidget.insertTab(int index, QWidget widget, QIcon icon, QString label)'''
        return int()
    def addTab(self, widget):
        '''QString QTabWidget.addTab(QWidget widget)'''
        return QString()
    def addTab(self, widget, icon, label):
        '''int QTabWidget.addTab(QWidget widget, QIcon icon, QString label)'''
        return int()
    def clear(self):
        '''void QTabWidget.clear()'''


class QTextEdit(QAbstractScrollArea):
    """"""
    # Enum QTextEdit.AutoFormattingFlag
    AutoNone = 0
    AutoBulletList = 0
    AutoAll = 0

    # Enum QTextEdit.LineWrapMode
    NoWrap = 0
    WidgetWidth = 0
    FixedPixelWidth = 0
    FixedColumnWidth = 0

    def __init__(self, parent = None):
        '''void QTextEdit.__init__(QWidget parent = None)'''
    def __init__(self, text, parent = None):
        '''void QTextEdit.__init__(QString text, QWidget parent = None)'''
    def setTextBackgroundColor(self, c):
        '''void QTextEdit.setTextBackgroundColor(QColor c)'''
    def textBackgroundColor(self):
        '''QColor QTextEdit.textBackgroundColor()'''
        return QColor()
    def scrollContentsBy(self, dx, dy):
        '''void QTextEdit.scrollContentsBy(int dx, int dy)'''
    def inputMethodQuery(self, property):
        '''QVariant QTextEdit.inputMethodQuery(Qt.InputMethodQuery property)'''
        return QVariant()
    def inputMethodEvent(self):
        '''QInputMethodEvent QTextEdit.inputMethodEvent()'''
        return QInputMethodEvent()
    def insertFromMimeData(self, source):
        '''void QTextEdit.insertFromMimeData(QMimeData source)'''
    def canInsertFromMimeData(self, source):
        '''bool QTextEdit.canInsertFromMimeData(QMimeData source)'''
        return bool()
    def createMimeDataFromSelection(self):
        '''QMimeData QTextEdit.createMimeDataFromSelection()'''
        return QMimeData()
    def wheelEvent(self, e):
        '''void QTextEdit.wheelEvent(QWheelEvent e)'''
    def changeEvent(self, e):
        '''void QTextEdit.changeEvent(QEvent e)'''
    def showEvent(self):
        '''QShowEvent QTextEdit.showEvent()'''
        return QShowEvent()
    def focusOutEvent(self, e):
        '''void QTextEdit.focusOutEvent(QFocusEvent e)'''
    def focusInEvent(self, e):
        '''void QTextEdit.focusInEvent(QFocusEvent e)'''
    def dropEvent(self, e):
        '''void QTextEdit.dropEvent(QDropEvent e)'''
    def dragMoveEvent(self, e):
        '''void QTextEdit.dragMoveEvent(QDragMoveEvent e)'''
    def dragLeaveEvent(self, e):
        '''void QTextEdit.dragLeaveEvent(QDragLeaveEvent e)'''
    def dragEnterEvent(self, e):
        '''void QTextEdit.dragEnterEvent(QDragEnterEvent e)'''
    def contextMenuEvent(self, e):
        '''void QTextEdit.contextMenuEvent(QContextMenuEvent e)'''
    def focusNextPrevChild(self, next):
        '''bool QTextEdit.focusNextPrevChild(bool next)'''
        return bool()
    def mouseDoubleClickEvent(self, e):
        '''void QTextEdit.mouseDoubleClickEvent(QMouseEvent e)'''
    def mouseReleaseEvent(self, e):
        '''void QTextEdit.mouseReleaseEvent(QMouseEvent e)'''
    def mouseMoveEvent(self, e):
        '''void QTextEdit.mouseMoveEvent(QMouseEvent e)'''
    def mousePressEvent(self, e):
        '''void QTextEdit.mousePressEvent(QMouseEvent e)'''
    def paintEvent(self, e):
        '''void QTextEdit.paintEvent(QPaintEvent e)'''
    def resizeEvent(self):
        '''QResizeEvent QTextEdit.resizeEvent()'''
        return QResizeEvent()
    def keyReleaseEvent(self, e):
        '''void QTextEdit.keyReleaseEvent(QKeyEvent e)'''
    def keyPressEvent(self, e):
        '''void QTextEdit.keyPressEvent(QKeyEvent e)'''
    def timerEvent(self, e):
        '''void QTextEdit.timerEvent(QTimerEvent e)'''
    def event(self, e):
        '''bool QTextEdit.event(QEvent e)'''
        return bool()
    cursorPositionChanged = pyqtSignal() # void cursorPositionChanged() - signal
    selectionChanged = pyqtSignal() # void selectionChanged() - signal
    copyAvailable = pyqtSignal() # void copyAvailable(bool) - signal
    currentCharFormatChanged = pyqtSignal() # void currentCharFormatChanged(const QTextCharFormatamp;) - signal
    redoAvailable = pyqtSignal() # void redoAvailable(bool) - signal
    undoAvailable = pyqtSignal() # void undoAvailable(bool) - signal
    textChanged = pyqtSignal() # void textChanged() - signal
    def zoomOut(self, range = 1):
        '''void QTextEdit.zoomOut(int range = 1)'''
    def zoomIn(self, range = 1):
        '''void QTextEdit.zoomIn(int range = 1)'''
    def undo(self):
        '''void QTextEdit.undo()'''
    def redo(self):
        '''void QTextEdit.redo()'''
    def scrollToAnchor(self, name):
        '''void QTextEdit.scrollToAnchor(QString name)'''
    def insertHtml(self, text):
        '''void QTextEdit.insertHtml(QString text)'''
    def insertPlainText(self, text):
        '''void QTextEdit.insertPlainText(QString text)'''
    def selectAll(self):
        '''void QTextEdit.selectAll()'''
    def clear(self):
        '''void QTextEdit.clear()'''
    def paste(self):
        '''void QTextEdit.paste()'''
    def copy(self):
        '''void QTextEdit.copy()'''
    def cut(self):
        '''void QTextEdit.cut()'''
    def setHtml(self, text):
        '''void QTextEdit.setHtml(QString text)'''
    def setPlainText(self, text):
        '''void QTextEdit.setPlainText(QString text)'''
    def setAlignment(self, a):
        '''void QTextEdit.setAlignment(Qt.Alignment a)'''
    def setCurrentFont(self, f):
        '''void QTextEdit.setCurrentFont(QFont f)'''
    def setTextColor(self, c):
        '''void QTextEdit.setTextColor(QColor c)'''
    def setText(self, text):
        '''void QTextEdit.setText(QString text)'''
    def setFontItalic(self, b):
        '''void QTextEdit.setFontItalic(bool b)'''
    def setFontUnderline(self, b):
        '''void QTextEdit.setFontUnderline(bool b)'''
    def setFontWeight(self, w):
        '''void QTextEdit.setFontWeight(int w)'''
    def setFontFamily(self, fontFamily):
        '''void QTextEdit.setFontFamily(QString fontFamily)'''
    def setFontPointSize(self, s):
        '''void QTextEdit.setFontPointSize(float s)'''
    def print_(self, printer):
        '''void QTextEdit.print_(QPrinter printer)'''
    def moveCursor(self, operation, mode = None):
        '''void QTextEdit.moveCursor(QTextCursor.MoveOperation operation, QTextCursor.MoveMode mode = QTextCursor.MoveAnchor)'''
    def canPaste(self):
        '''bool QTextEdit.canPaste()'''
        return bool()
    def extraSelections(self):
        '''list-of-QTextEdit.ExtraSelection QTextEdit.extraSelections()'''
        return [QTextEdit.ExtraSelection()]
    def setExtraSelections(self, selections):
        '''void QTextEdit.setExtraSelections(list-of-QTextEdit.ExtraSelection selections)'''
    def cursorWidth(self):
        '''int QTextEdit.cursorWidth()'''
        return int()
    def setCursorWidth(self, width):
        '''void QTextEdit.setCursorWidth(int width)'''
    def textInteractionFlags(self):
        '''Qt.TextInteractionFlags QTextEdit.textInteractionFlags()'''
        return Qt.TextInteractionFlags()
    def setTextInteractionFlags(self, flags):
        '''void QTextEdit.setTextInteractionFlags(Qt.TextInteractionFlags flags)'''
    def setAcceptRichText(self, accept):
        '''void QTextEdit.setAcceptRichText(bool accept)'''
    def acceptRichText(self):
        '''bool QTextEdit.acceptRichText()'''
        return bool()
    def setTabStopWidth(self, width):
        '''void QTextEdit.setTabStopWidth(int width)'''
    def tabStopWidth(self):
        '''int QTextEdit.tabStopWidth()'''
        return int()
    def setOverwriteMode(self, overwrite):
        '''void QTextEdit.setOverwriteMode(bool overwrite)'''
    def overwriteMode(self):
        '''bool QTextEdit.overwriteMode()'''
        return bool()
    def anchorAt(self, pos):
        '''QString QTextEdit.anchorAt(QPoint pos)'''
        return QString()
    def cursorRect(self, cursor):
        '''QRect QTextEdit.cursorRect(QTextCursor cursor)'''
        return QRect()
    def cursorRect(self):
        '''QRect QTextEdit.cursorRect()'''
        return QRect()
    def cursorForPosition(self, pos):
        '''QTextCursor QTextEdit.cursorForPosition(QPoint pos)'''
        return QTextCursor()
    def createStandardContextMenu(self):
        '''QMenu QTextEdit.createStandardContextMenu()'''
        return QMenu()
    def createStandardContextMenu(self, position):
        '''QMenu QTextEdit.createStandardContextMenu(QPoint position)'''
        return QMenu()
    def loadResource(self, type, name):
        '''QVariant QTextEdit.loadResource(int type, QUrl name)'''
        return QVariant()
    def ensureCursorVisible(self):
        '''void QTextEdit.ensureCursorVisible()'''
    def append(self, text):
        '''void QTextEdit.append(QString text)'''
    def toHtml(self):
        '''QString QTextEdit.toHtml()'''
        return QString()
    def toPlainText(self):
        '''QString QTextEdit.toPlainText()'''
        return QString()
    def find(self, exp, options = 0):
        '''bool QTextEdit.find(QString exp, QTextDocument.FindFlags options = 0)'''
        return bool()
    def setWordWrapMode(self, policy):
        '''void QTextEdit.setWordWrapMode(QTextOption.WrapMode policy)'''
    def wordWrapMode(self):
        '''QTextOption.WrapMode QTextEdit.wordWrapMode()'''
        return QTextOption.WrapMode()
    def setLineWrapColumnOrWidth(self, w):
        '''void QTextEdit.setLineWrapColumnOrWidth(int w)'''
    def lineWrapColumnOrWidth(self):
        '''int QTextEdit.lineWrapColumnOrWidth()'''
        return int()
    def setLineWrapMode(self, mode):
        '''void QTextEdit.setLineWrapMode(QTextEdit.LineWrapMode mode)'''
    def lineWrapMode(self):
        '''QTextEdit.LineWrapMode QTextEdit.lineWrapMode()'''
        return QTextEdit.LineWrapMode()
    def setUndoRedoEnabled(self, enable):
        '''void QTextEdit.setUndoRedoEnabled(bool enable)'''
    def isUndoRedoEnabled(self):
        '''bool QTextEdit.isUndoRedoEnabled()'''
        return bool()
    def documentTitle(self):
        '''QString QTextEdit.documentTitle()'''
        return QString()
    def setDocumentTitle(self, title):
        '''void QTextEdit.setDocumentTitle(QString title)'''
    def setTabChangesFocus(self, b):
        '''void QTextEdit.setTabChangesFocus(bool b)'''
    def tabChangesFocus(self):
        '''bool QTextEdit.tabChangesFocus()'''
        return bool()
    def setAutoFormatting(self, features):
        '''void QTextEdit.setAutoFormatting(QTextEdit.AutoFormatting features)'''
    def autoFormatting(self):
        '''QTextEdit.AutoFormatting QTextEdit.autoFormatting()'''
        return QTextEdit.AutoFormatting()
    def currentCharFormat(self):
        '''QTextCharFormat QTextEdit.currentCharFormat()'''
        return QTextCharFormat()
    def setCurrentCharFormat(self, format):
        '''void QTextEdit.setCurrentCharFormat(QTextCharFormat format)'''
    def mergeCurrentCharFormat(self, modifier):
        '''void QTextEdit.mergeCurrentCharFormat(QTextCharFormat modifier)'''
    def alignment(self):
        '''Qt.Alignment QTextEdit.alignment()'''
        return Qt.Alignment()
    def currentFont(self):
        '''QFont QTextEdit.currentFont()'''
        return QFont()
    def textColor(self):
        '''QColor QTextEdit.textColor()'''
        return QColor()
    def fontItalic(self):
        '''bool QTextEdit.fontItalic()'''
        return bool()
    def fontUnderline(self):
        '''bool QTextEdit.fontUnderline()'''
        return bool()
    def fontWeight(self):
        '''int QTextEdit.fontWeight()'''
        return int()
    def fontFamily(self):
        '''QString QTextEdit.fontFamily()'''
        return QString()
    def fontPointSize(self):
        '''float QTextEdit.fontPointSize()'''
        return float()
    def setReadOnly(self, ro):
        '''void QTextEdit.setReadOnly(bool ro)'''
    def isReadOnly(self):
        '''bool QTextEdit.isReadOnly()'''
        return bool()
    def textCursor(self):
        '''QTextCursor QTextEdit.textCursor()'''
        return QTextCursor()
    def setTextCursor(self, cursor):
        '''void QTextEdit.setTextCursor(QTextCursor cursor)'''
    def document(self):
        '''QTextDocument QTextEdit.document()'''
        return QTextDocument()
    def setDocument(self, document):
        '''void QTextEdit.setDocument(QTextDocument document)'''
    class ExtraSelection():
        """"""
        cursor = None # QTextCursor - member
        format = None # QTextCharFormat - member
        def __init__(self):
            '''void QTextEdit.ExtraSelection.__init__()'''
        def __init__(self):
            '''QTextEdit.ExtraSelection QTextEdit.ExtraSelection.__init__()'''
            return QTextEdit.ExtraSelection()
    class AutoFormatting():
        """"""
        def __init__(self):
            '''QTextEdit.AutoFormatting QTextEdit.AutoFormatting.__init__()'''
            return QTextEdit.AutoFormatting()
        def __init__(self):
            '''int QTextEdit.AutoFormatting.__init__()'''
            return int()
        def __init__(self):
            '''void QTextEdit.AutoFormatting.__init__()'''
        def __bool__(self):
            '''int QTextEdit.AutoFormatting.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QTextEdit.AutoFormatting.__ne__(QTextEdit.AutoFormatting f)'''
            return bool()
        def __eq__(self, f):
            '''bool QTextEdit.AutoFormatting.__eq__(QTextEdit.AutoFormatting f)'''
            return bool()
        def __invert__(self):
            '''QTextEdit.AutoFormatting QTextEdit.AutoFormatting.__invert__()'''
            return QTextEdit.AutoFormatting()
        def __and__(self, mask):
            '''QTextEdit.AutoFormatting QTextEdit.AutoFormatting.__and__(int mask)'''
            return QTextEdit.AutoFormatting()
        def __xor__(self, f):
            '''QTextEdit.AutoFormatting QTextEdit.AutoFormatting.__xor__(QTextEdit.AutoFormatting f)'''
            return QTextEdit.AutoFormatting()
        def __xor__(self, f):
            '''QTextEdit.AutoFormatting QTextEdit.AutoFormatting.__xor__(int f)'''
            return QTextEdit.AutoFormatting()
        def __or__(self, f):
            '''QTextEdit.AutoFormatting QTextEdit.AutoFormatting.__or__(QTextEdit.AutoFormatting f)'''
            return QTextEdit.AutoFormatting()
        def __or__(self, f):
            '''QTextEdit.AutoFormatting QTextEdit.AutoFormatting.__or__(int f)'''
            return QTextEdit.AutoFormatting()
        def __int__(self):
            '''int QTextEdit.AutoFormatting.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QTextEdit.AutoFormatting QTextEdit.AutoFormatting.__ixor__(QTextEdit.AutoFormatting f)'''
            return QTextEdit.AutoFormatting()
        def __ior__(self, f):
            '''QTextEdit.AutoFormatting QTextEdit.AutoFormatting.__ior__(QTextEdit.AutoFormatting f)'''
            return QTextEdit.AutoFormatting()
        def __iand__(self, mask):
            '''QTextEdit.AutoFormatting QTextEdit.AutoFormatting.__iand__(int mask)'''
            return QTextEdit.AutoFormatting()


class QTextBrowser(QTextEdit):
    """"""
    def __init__(self, parent = None):
        '''void QTextBrowser.__init__(QWidget parent = None)'''
    historyChanged = pyqtSignal() # void historyChanged() - signal
    def forwardHistoryCount(self):
        '''int QTextBrowser.forwardHistoryCount()'''
        return int()
    def backwardHistoryCount(self):
        '''int QTextBrowser.backwardHistoryCount()'''
        return int()
    def historyUrl(self):
        '''int QTextBrowser.historyUrl()'''
        return int()
    def historyTitle(self):
        '''int QTextBrowser.historyTitle()'''
        return int()
    def setOpenLinks(self, open):
        '''void QTextBrowser.setOpenLinks(bool open)'''
    def openLinks(self):
        '''bool QTextBrowser.openLinks()'''
        return bool()
    def setOpenExternalLinks(self, open):
        '''void QTextBrowser.setOpenExternalLinks(bool open)'''
    def openExternalLinks(self):
        '''bool QTextBrowser.openExternalLinks()'''
        return bool()
    def clearHistory(self):
        '''void QTextBrowser.clearHistory()'''
    def isForwardAvailable(self):
        '''bool QTextBrowser.isForwardAvailable()'''
        return bool()
    def isBackwardAvailable(self):
        '''bool QTextBrowser.isBackwardAvailable()'''
        return bool()
    def paintEvent(self, e):
        '''void QTextBrowser.paintEvent(QPaintEvent e)'''
    def focusNextPrevChild(self, next):
        '''bool QTextBrowser.focusNextPrevChild(bool next)'''
        return bool()
    def focusOutEvent(self, ev):
        '''void QTextBrowser.focusOutEvent(QFocusEvent ev)'''
    def mouseReleaseEvent(self, ev):
        '''void QTextBrowser.mouseReleaseEvent(QMouseEvent ev)'''
    def mousePressEvent(self, ev):
        '''void QTextBrowser.mousePressEvent(QMouseEvent ev)'''
    def mouseMoveEvent(self, ev):
        '''void QTextBrowser.mouseMoveEvent(QMouseEvent ev)'''
    def keyPressEvent(self, ev):
        '''void QTextBrowser.keyPressEvent(QKeyEvent ev)'''
    def event(self, e):
        '''bool QTextBrowser.event(QEvent e)'''
        return bool()
    anchorClicked = pyqtSignal() # void anchorClicked(const QUrlamp;) - signal
    highlighted = pyqtSignal() # void highlighted(const QUrlamp;) - signal
    highlighted = pyqtSignal() # void highlighted(const QStringamp;) - signal
    sourceChanged = pyqtSignal() # void sourceChanged(const QUrlamp;) - signal
    forwardAvailable = pyqtSignal() # void forwardAvailable(bool) - signal
    backwardAvailable = pyqtSignal() # void backwardAvailable(bool) - signal
    def reload(self):
        '''void QTextBrowser.reload()'''
    def home(self):
        '''void QTextBrowser.home()'''
    def forward(self):
        '''void QTextBrowser.forward()'''
    def backward(self):
        '''void QTextBrowser.backward()'''
    def setSource(self, name):
        '''void QTextBrowser.setSource(QUrl name)'''
    def loadResource(self, type, name):
        '''QVariant QTextBrowser.loadResource(int type, QUrl name)'''
        return QVariant()
    def setSearchPaths(self, paths):
        '''void QTextBrowser.setSearchPaths(QStringList paths)'''
    def searchPaths(self):
        '''QStringList QTextBrowser.searchPaths()'''
        return QStringList()
    def source(self):
        '''QUrl QTextBrowser.source()'''
        return QUrl()


class QTextCursor():
    """"""
    # Enum QTextCursor.SelectionType
    WordUnderCursor = 0
    LineUnderCursor = 0
    BlockUnderCursor = 0
    Document = 0

    # Enum QTextCursor.MoveOperation
    NoMove = 0
    Start = 0
    Up = 0
    StartOfLine = 0
    StartOfBlock = 0
    StartOfWord = 0
    PreviousBlock = 0
    PreviousCharacter = 0
    PreviousWord = 0
    Left = 0
    WordLeft = 0
    End = 0
    Down = 0
    EndOfLine = 0
    EndOfWord = 0
    EndOfBlock = 0
    NextBlock = 0
    NextCharacter = 0
    NextWord = 0
    Right = 0
    WordRight = 0
    NextCell = 0
    PreviousCell = 0
    NextRow = 0
    PreviousRow = 0

    # Enum QTextCursor.MoveMode
    MoveAnchor = 0
    KeepAnchor = 0

    def __init__(self):
        '''void QTextCursor.__init__()'''
    def __init__(self, document):
        '''void QTextCursor.__init__(QTextDocument document)'''
    def __init__(self, frame):
        '''void QTextCursor.__init__(QTextFrame frame)'''
    def __init__(self, block):
        '''void QTextCursor.__init__(QTextBlock block)'''
    def __init__(self, cursor):
        '''void QTextCursor.__init__(QTextCursor cursor)'''
    def keepPositionOnInsert(self):
        '''bool QTextCursor.keepPositionOnInsert()'''
        return bool()
    def setKeepPositionOnInsert(self, b):
        '''void QTextCursor.setKeepPositionOnInsert(bool b)'''
    def verticalMovementX(self):
        '''int QTextCursor.verticalMovementX()'''
        return int()
    def setVerticalMovementX(self, x):
        '''void QTextCursor.setVerticalMovementX(int x)'''
    def positionInBlock(self):
        '''int QTextCursor.positionInBlock()'''
        return int()
    def document(self):
        '''QTextDocument QTextCursor.document()'''
        return QTextDocument()
    def setVisualNavigation(self, b):
        '''void QTextCursor.setVisualNavigation(bool b)'''
    def visualNavigation(self):
        '''bool QTextCursor.visualNavigation()'''
        return bool()
    def isCopyOf(self, other):
        '''bool QTextCursor.isCopyOf(QTextCursor other)'''
        return bool()
    def __gt__(self, rhs):
        '''bool QTextCursor.__gt__(QTextCursor rhs)'''
        return bool()
    def __ge__(self, rhs):
        '''bool QTextCursor.__ge__(QTextCursor rhs)'''
        return bool()
    def __eq__(self, rhs):
        '''bool QTextCursor.__eq__(QTextCursor rhs)'''
        return bool()
    def __le__(self, rhs):
        '''bool QTextCursor.__le__(QTextCursor rhs)'''
        return bool()
    def __lt__(self, rhs):
        '''bool QTextCursor.__lt__(QTextCursor rhs)'''
        return bool()
    def __ne__(self, rhs):
        '''bool QTextCursor.__ne__(QTextCursor rhs)'''
        return bool()
    def columnNumber(self):
        '''int QTextCursor.columnNumber()'''
        return int()
    def blockNumber(self):
        '''int QTextCursor.blockNumber()'''
        return int()
    def endEditBlock(self):
        '''void QTextCursor.endEditBlock()'''
    def joinPreviousEditBlock(self):
        '''void QTextCursor.joinPreviousEditBlock()'''
    def beginEditBlock(self):
        '''void QTextCursor.beginEditBlock()'''
    def insertImage(self, format):
        '''void QTextCursor.insertImage(QTextImageFormat format)'''
    def insertImage(self, format, alignment):
        '''void QTextCursor.insertImage(QTextImageFormat format, QTextFrameFormat.Position alignment)'''
    def insertImage(self, name):
        '''void QTextCursor.insertImage(QString name)'''
    def insertImage(self, image, name = QString()):
        '''void QTextCursor.insertImage(QImage image, QString name = QString())'''
    def insertHtml(self, html):
        '''void QTextCursor.insertHtml(QString html)'''
    def insertFragment(self, fragment):
        '''void QTextCursor.insertFragment(QTextDocumentFragment fragment)'''
    def currentFrame(self):
        '''QTextFrame QTextCursor.currentFrame()'''
        return QTextFrame()
    def insertFrame(self, format):
        '''QTextFrame QTextCursor.insertFrame(QTextFrameFormat format)'''
        return QTextFrame()
    def currentTable(self):
        '''QTextTable QTextCursor.currentTable()'''
        return QTextTable()
    def insertTable(self, rows, cols, format):
        '''QTextTable QTextCursor.insertTable(int rows, int cols, QTextTableFormat format)'''
        return QTextTable()
    def insertTable(self, rows, cols):
        '''QTextTable QTextCursor.insertTable(int rows, int cols)'''
        return QTextTable()
    def currentList(self):
        '''QTextList QTextCursor.currentList()'''
        return QTextList()
    def createList(self, format):
        '''QTextList QTextCursor.createList(QTextListFormat format)'''
        return QTextList()
    def createList(self, style):
        '''QTextList QTextCursor.createList(QTextListFormat.Style style)'''
        return QTextList()
    def insertList(self, format):
        '''QTextList QTextCursor.insertList(QTextListFormat format)'''
        return QTextList()
    def insertList(self, style):
        '''QTextList QTextCursor.insertList(QTextListFormat.Style style)'''
        return QTextList()
    def insertBlock(self):
        '''void QTextCursor.insertBlock()'''
    def insertBlock(self, format):
        '''void QTextCursor.insertBlock(QTextBlockFormat format)'''
    def insertBlock(self, format, charFormat):
        '''void QTextCursor.insertBlock(QTextBlockFormat format, QTextCharFormat charFormat)'''
    def atEnd(self):
        '''bool QTextCursor.atEnd()'''
        return bool()
    def atStart(self):
        '''bool QTextCursor.atStart()'''
        return bool()
    def atBlockEnd(self):
        '''bool QTextCursor.atBlockEnd()'''
        return bool()
    def atBlockStart(self):
        '''bool QTextCursor.atBlockStart()'''
        return bool()
    def mergeBlockCharFormat(self, modifier):
        '''void QTextCursor.mergeBlockCharFormat(QTextCharFormat modifier)'''
    def setBlockCharFormat(self, format):
        '''void QTextCursor.setBlockCharFormat(QTextCharFormat format)'''
    def blockCharFormat(self):
        '''QTextCharFormat QTextCursor.blockCharFormat()'''
        return QTextCharFormat()
    def mergeBlockFormat(self, modifier):
        '''void QTextCursor.mergeBlockFormat(QTextBlockFormat modifier)'''
    def setBlockFormat(self, format):
        '''void QTextCursor.setBlockFormat(QTextBlockFormat format)'''
    def blockFormat(self):
        '''QTextBlockFormat QTextCursor.blockFormat()'''
        return QTextBlockFormat()
    def mergeCharFormat(self, modifier):
        '''void QTextCursor.mergeCharFormat(QTextCharFormat modifier)'''
    def setCharFormat(self, format):
        '''void QTextCursor.setCharFormat(QTextCharFormat format)'''
    def charFormat(self):
        '''QTextCharFormat QTextCursor.charFormat()'''
        return QTextCharFormat()
    def block(self):
        '''QTextBlock QTextCursor.block()'''
        return QTextBlock()
    def selectedTableCells(self, firstRow, numRows, firstColumn, numColumns):
        '''void QTextCursor.selectedTableCells(int firstRow, int numRows, int firstColumn, int numColumns)'''
    def selection(self):
        '''QTextDocumentFragment QTextCursor.selection()'''
        return QTextDocumentFragment()
    def selectedText(self):
        '''QString QTextCursor.selectedText()'''
        return QString()
    def selectionEnd(self):
        '''int QTextCursor.selectionEnd()'''
        return int()
    def selectionStart(self):
        '''int QTextCursor.selectionStart()'''
        return int()
    def clearSelection(self):
        '''void QTextCursor.clearSelection()'''
    def removeSelectedText(self):
        '''void QTextCursor.removeSelectedText()'''
    def hasComplexSelection(self):
        '''bool QTextCursor.hasComplexSelection()'''
        return bool()
    def hasSelection(self):
        '''bool QTextCursor.hasSelection()'''
        return bool()
    def select(self, selection):
        '''void QTextCursor.select(QTextCursor.SelectionType selection)'''
    def deletePreviousChar(self):
        '''void QTextCursor.deletePreviousChar()'''
    def deleteChar(self):
        '''void QTextCursor.deleteChar()'''
    def movePosition(self, op, mode = None, n = 1):
        '''bool QTextCursor.movePosition(QTextCursor.MoveOperation op, QTextCursor.MoveMode mode = QTextCursor.MoveAnchor, int n = 1)'''
        return bool()
    def insertText(self, text):
        '''void QTextCursor.insertText(QString text)'''
    def insertText(self, text, format):
        '''void QTextCursor.insertText(QString text, QTextCharFormat format)'''
    def anchor(self):
        '''int QTextCursor.anchor()'''
        return int()
    def position(self):
        '''int QTextCursor.position()'''
        return int()
    def setPosition(self, pos, mode = None):
        '''void QTextCursor.setPosition(int pos, QTextCursor.MoveMode mode = QTextCursor.MoveAnchor)'''
    def isNull(self):
        '''bool QTextCursor.isNull()'''
        return bool()


class Qt():
    """"""
    # Enum Qt.WhiteSpaceMode
    WhiteSpaceNormal = 0
    WhiteSpacePre = 0
    WhiteSpaceNoWrap = 0
    WhiteSpaceModeUndefined = 0

    # Enum Qt.HitTestAccuracy
    ExactHit = 0
    FuzzyHit = 0

    def convertFromPlainText(self, plain, mode = None):
        '''static QString Qt.convertFromPlainText(QString plain, Qt.WhiteSpaceMode mode = Qt.WhiteSpacePre)'''
        return QString()
    def escape(self, plain):
        '''static QString Qt.escape(QString plain)'''
        return QString()
    def mightBeRichText(self):
        '''static QString Qt.mightBeRichText()'''
        return QString()


class QTextDocument(QObject):
    """"""
    # Enum QTextDocument.Stacks
    UndoStack = 0
    RedoStack = 0
    UndoAndRedoStacks = 0

    # Enum QTextDocument.ResourceType
    HtmlResource = 0
    ImageResource = 0
    StyleSheetResource = 0
    UserResource = 0

    # Enum QTextDocument.FindFlag
    FindBackward = 0
    FindCaseSensitively = 0
    FindWholeWords = 0

    # Enum QTextDocument.MetaInformation
    DocumentTitle = 0
    DocumentUrl = 0

    def __init__(self, parent = None):
        '''void QTextDocument.__init__(QObject parent = None)'''
    def __init__(self, text, parent = None):
        '''void QTextDocument.__init__(QString text, QObject parent = None)'''
    def setDefaultCursorMoveStyle(self, style):
        '''void QTextDocument.setDefaultCursorMoveStyle(Qt.CursorMoveStyle style)'''
    def defaultCursorMoveStyle(self):
        '''Qt.CursorMoveStyle QTextDocument.defaultCursorMoveStyle()'''
        return Qt.CursorMoveStyle()
    def clearUndoRedoStacks(self, stacks = None):
        '''void QTextDocument.clearUndoRedoStacks(QTextDocument.Stacks stacks = QTextDocument.UndoAndRedoStacks)'''
    def availableRedoSteps(self):
        '''int QTextDocument.availableRedoSteps()'''
        return int()
    def availableUndoSteps(self):
        '''int QTextDocument.availableUndoSteps()'''
        return int()
    def characterCount(self):
        '''int QTextDocument.characterCount()'''
        return int()
    def lineCount(self):
        '''int QTextDocument.lineCount()'''
        return int()
    def setDocumentMargin(self, margin):
        '''void QTextDocument.setDocumentMargin(float margin)'''
    def documentMargin(self):
        '''float QTextDocument.documentMargin()'''
        return float()
    def characterAt(self, pos):
        '''QChar QTextDocument.characterAt(int pos)'''
        return QChar()
    documentLayoutChanged = pyqtSignal() # void documentLayoutChanged() - signal
    undoCommandAdded = pyqtSignal() # void undoCommandAdded() - signal
    def setIndentWidth(self, width):
        '''void QTextDocument.setIndentWidth(float width)'''
    def indentWidth(self):
        '''float QTextDocument.indentWidth()'''
        return float()
    def lastBlock(self):
        '''QTextBlock QTextDocument.lastBlock()'''
        return QTextBlock()
    def firstBlock(self):
        '''QTextBlock QTextDocument.firstBlock()'''
        return QTextBlock()
    def findBlockByLineNumber(self, blockNumber):
        '''QTextBlock QTextDocument.findBlockByLineNumber(int blockNumber)'''
        return QTextBlock()
    def findBlockByNumber(self, blockNumber):
        '''QTextBlock QTextDocument.findBlockByNumber(int blockNumber)'''
        return QTextBlock()
    def revision(self):
        '''int QTextDocument.revision()'''
        return int()
    def setDefaultTextOption(self, option):
        '''void QTextDocument.setDefaultTextOption(QTextOption option)'''
    def defaultTextOption(self):
        '''QTextOption QTextDocument.defaultTextOption()'''
        return QTextOption()
    def setMaximumBlockCount(self, maximum):
        '''void QTextDocument.setMaximumBlockCount(int maximum)'''
    def maximumBlockCount(self):
        '''int QTextDocument.maximumBlockCount()'''
        return int()
    def defaultStyleSheet(self):
        '''QString QTextDocument.defaultStyleSheet()'''
        return QString()
    def setDefaultStyleSheet(self, sheet):
        '''void QTextDocument.setDefaultStyleSheet(QString sheet)'''
    def blockCount(self):
        '''int QTextDocument.blockCount()'''
        return int()
    def size(self):
        '''QSizeF QTextDocument.size()'''
        return QSizeF()
    def adjustSize(self):
        '''void QTextDocument.adjustSize()'''
    def idealWidth(self):
        '''float QTextDocument.idealWidth()'''
        return float()
    def textWidth(self):
        '''float QTextDocument.textWidth()'''
        return float()
    def setTextWidth(self, width):
        '''void QTextDocument.setTextWidth(float width)'''
    def drawContents(self, p, rect = QRectF()):
        '''void QTextDocument.drawContents(QPainter p, QRectF rect = QRectF())'''
    def loadResource(self, type, name):
        '''QVariant QTextDocument.loadResource(int type, QUrl name)'''
        return QVariant()
    def createObject(self, f):
        '''QTextObject QTextDocument.createObject(QTextFormat f)'''
        return QTextObject()
    def setModified(self, on = True):
        '''void QTextDocument.setModified(bool on = True)'''
    def redo(self):
        '''void QTextDocument.redo()'''
    def redo(self, cursor):
        '''void QTextDocument.redo(QTextCursor cursor)'''
    def undo(self):
        '''void QTextDocument.undo()'''
    def undo(self, cursor):
        '''void QTextDocument.undo(QTextCursor cursor)'''
    undoAvailable = pyqtSignal() # void undoAvailable(bool) - signal
    redoAvailable = pyqtSignal() # void redoAvailable(bool) - signal
    modificationChanged = pyqtSignal() # void modificationChanged(bool) - signal
    cursorPositionChanged = pyqtSignal() # void cursorPositionChanged(const QTextCursoramp;) - signal
    contentsChanged = pyqtSignal() # void contentsChanged() - signal
    contentsChange = pyqtSignal() # void contentsChange(int,int,int) - signal
    blockCountChanged = pyqtSignal() # void blockCountChanged(int) - signal
    def useDesignMetrics(self):
        '''bool QTextDocument.useDesignMetrics()'''
        return bool()
    def setUseDesignMetrics(self, b):
        '''void QTextDocument.setUseDesignMetrics(bool b)'''
    def markContentsDirty(self, from_, length):
        '''void QTextDocument.markContentsDirty(int from, int length)'''
    def allFormats(self):
        '''list-of-QTextFormat QTextDocument.allFormats()'''
        return [QTextFormat()]
    def addResource(self, type, name, resource):
        '''void QTextDocument.addResource(int type, QUrl name, QVariant resource)'''
    def resource(self, type, name):
        '''QVariant QTextDocument.resource(int type, QUrl name)'''
        return QVariant()
    def print_(self, printer):
        '''void QTextDocument.print_(QPrinter printer)'''
    def isModified(self):
        '''bool QTextDocument.isModified()'''
        return bool()
    def pageCount(self):
        '''int QTextDocument.pageCount()'''
        return int()
    def defaultFont(self):
        '''QFont QTextDocument.defaultFont()'''
        return QFont()
    def setDefaultFont(self, font):
        '''void QTextDocument.setDefaultFont(QFont font)'''
    def pageSize(self):
        '''QSizeF QTextDocument.pageSize()'''
        return QSizeF()
    def setPageSize(self, size):
        '''void QTextDocument.setPageSize(QSizeF size)'''
    def end(self):
        '''QTextBlock QTextDocument.end()'''
        return QTextBlock()
    def begin(self):
        '''QTextBlock QTextDocument.begin()'''
        return QTextBlock()
    def findBlock(self, pos):
        '''QTextBlock QTextDocument.findBlock(int pos)'''
        return QTextBlock()
    def objectForFormat(self):
        '''QTextFormat QTextDocument.objectForFormat()'''
        return QTextFormat()
    def object(self, objectIndex):
        '''QTextObject QTextDocument.object(int objectIndex)'''
        return QTextObject()
    def rootFrame(self):
        '''QTextFrame QTextDocument.rootFrame()'''
        return QTextFrame()
    def find(self, subString, position = 0, options = 0):
        '''QTextCursor QTextDocument.find(QString subString, int position = 0, QTextDocument.FindFlags options = 0)'''
        return QTextCursor()
    def find(self, expr, position = 0, options = 0):
        '''QTextCursor QTextDocument.find(QRegExp expr, int position = 0, QTextDocument.FindFlags options = 0)'''
        return QTextCursor()
    def find(self, subString, cursor, options = 0):
        '''QTextCursor QTextDocument.find(QString subString, QTextCursor cursor, QTextDocument.FindFlags options = 0)'''
        return QTextCursor()
    def find(self, expr, cursor, options = 0):
        '''QTextCursor QTextDocument.find(QRegExp expr, QTextCursor cursor, QTextDocument.FindFlags options = 0)'''
        return QTextCursor()
    def setPlainText(self, text):
        '''void QTextDocument.setPlainText(QString text)'''
    def toPlainText(self):
        '''QString QTextDocument.toPlainText()'''
        return QString()
    def setHtml(self, html):
        '''void QTextDocument.setHtml(QString html)'''
    def toHtml(self, encoding = QByteArray()):
        '''QString QTextDocument.toHtml(QByteArray encoding = QByteArray())'''
        return QString()
    def metaInformation(self, info):
        '''QString QTextDocument.metaInformation(QTextDocument.MetaInformation info)'''
        return QString()
    def setMetaInformation(self, info):
        '''QString QTextDocument.setMetaInformation(QTextDocument.MetaInformation info)'''
        return QString()
    def documentLayout(self):
        '''QAbstractTextDocumentLayout QTextDocument.documentLayout()'''
        return QAbstractTextDocumentLayout()
    def setDocumentLayout(self, layout):
        '''void QTextDocument.setDocumentLayout(QAbstractTextDocumentLayout layout)'''
    def isRedoAvailable(self):
        '''bool QTextDocument.isRedoAvailable()'''
        return bool()
    def isUndoAvailable(self):
        '''bool QTextDocument.isUndoAvailable()'''
        return bool()
    def isUndoRedoEnabled(self):
        '''bool QTextDocument.isUndoRedoEnabled()'''
        return bool()
    def setUndoRedoEnabled(self, enable):
        '''void QTextDocument.setUndoRedoEnabled(bool enable)'''
    def clear(self):
        '''void QTextDocument.clear()'''
    def isEmpty(self):
        '''bool QTextDocument.isEmpty()'''
        return bool()
    def clone(self, parent = None):
        '''QTextDocument QTextDocument.clone(QObject parent = None)'''
        return QTextDocument()
    class FindFlags():
        """"""
        def __init__(self):
            '''QTextDocument.FindFlags QTextDocument.FindFlags.__init__()'''
            return QTextDocument.FindFlags()
        def __init__(self):
            '''int QTextDocument.FindFlags.__init__()'''
            return int()
        def __init__(self):
            '''void QTextDocument.FindFlags.__init__()'''
        def __bool__(self):
            '''int QTextDocument.FindFlags.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QTextDocument.FindFlags.__ne__(QTextDocument.FindFlags f)'''
            return bool()
        def __eq__(self, f):
            '''bool QTextDocument.FindFlags.__eq__(QTextDocument.FindFlags f)'''
            return bool()
        def __invert__(self):
            '''QTextDocument.FindFlags QTextDocument.FindFlags.__invert__()'''
            return QTextDocument.FindFlags()
        def __and__(self, mask):
            '''QTextDocument.FindFlags QTextDocument.FindFlags.__and__(int mask)'''
            return QTextDocument.FindFlags()
        def __xor__(self, f):
            '''QTextDocument.FindFlags QTextDocument.FindFlags.__xor__(QTextDocument.FindFlags f)'''
            return QTextDocument.FindFlags()
        def __xor__(self, f):
            '''QTextDocument.FindFlags QTextDocument.FindFlags.__xor__(int f)'''
            return QTextDocument.FindFlags()
        def __or__(self, f):
            '''QTextDocument.FindFlags QTextDocument.FindFlags.__or__(QTextDocument.FindFlags f)'''
            return QTextDocument.FindFlags()
        def __or__(self, f):
            '''QTextDocument.FindFlags QTextDocument.FindFlags.__or__(int f)'''
            return QTextDocument.FindFlags()
        def __int__(self):
            '''int QTextDocument.FindFlags.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QTextDocument.FindFlags QTextDocument.FindFlags.__ixor__(QTextDocument.FindFlags f)'''
            return QTextDocument.FindFlags()
        def __ior__(self, f):
            '''QTextDocument.FindFlags QTextDocument.FindFlags.__ior__(QTextDocument.FindFlags f)'''
            return QTextDocument.FindFlags()
        def __iand__(self, mask):
            '''QTextDocument.FindFlags QTextDocument.FindFlags.__iand__(int mask)'''
            return QTextDocument.FindFlags()


class QTextDocumentFragment():
    """"""
    def __init__(self):
        '''void QTextDocumentFragment.__init__()'''
    def __init__(self, document):
        '''void QTextDocumentFragment.__init__(QTextDocument document)'''
    def __init__(self, range):
        '''void QTextDocumentFragment.__init__(QTextCursor range)'''
    def __init__(self, rhs):
        '''void QTextDocumentFragment.__init__(QTextDocumentFragment rhs)'''
    def fromHtml(self, html):
        '''static QTextDocumentFragment QTextDocumentFragment.fromHtml(QString html)'''
        return QTextDocumentFragment()
    def fromHtml(self, html, resourceProvider):
        '''static QTextDocumentFragment QTextDocumentFragment.fromHtml(QString html, QTextDocument resourceProvider)'''
        return QTextDocumentFragment()
    def fromPlainText(self, plainText):
        '''static QTextDocumentFragment QTextDocumentFragment.fromPlainText(QString plainText)'''
        return QTextDocumentFragment()
    def toHtml(self):
        '''QString QTextDocumentFragment.toHtml()'''
        return QString()
    def toHtml(self, encoding):
        '''QString QTextDocumentFragment.toHtml(QByteArray encoding)'''
        return QString()
    def toPlainText(self):
        '''QString QTextDocumentFragment.toPlainText()'''
        return QString()
    def isEmpty(self):
        '''bool QTextDocumentFragment.isEmpty()'''
        return bool()


class QTextDocumentWriter():
    """"""
    def __init__(self):
        '''void QTextDocumentWriter.__init__()'''
    def __init__(self, device, format):
        '''void QTextDocumentWriter.__init__(QIODevice device, QByteArray format)'''
    def __init__(self, fileName, format = QByteArray()):
        '''void QTextDocumentWriter.__init__(QString fileName, QByteArray format = QByteArray())'''
    def supportedDocumentFormats(self):
        '''static list-of-QByteArray QTextDocumentWriter.supportedDocumentFormats()'''
        return [QByteArray()]
    def codec(self):
        '''QTextCodec QTextDocumentWriter.codec()'''
        return QTextCodec()
    def setCodec(self, codec):
        '''void QTextDocumentWriter.setCodec(QTextCodec codec)'''
    def write(self, document):
        '''bool QTextDocumentWriter.write(QTextDocument document)'''
        return bool()
    def write(self, fragment):
        '''bool QTextDocumentWriter.write(QTextDocumentFragment fragment)'''
        return bool()
    def fileName(self):
        '''QString QTextDocumentWriter.fileName()'''
        return QString()
    def setFileName(self, fileName):
        '''void QTextDocumentWriter.setFileName(QString fileName)'''
    def device(self):
        '''QIODevice QTextDocumentWriter.device()'''
        return QIODevice()
    def setDevice(self, device):
        '''void QTextDocumentWriter.setDevice(QIODevice device)'''
    def format(self):
        '''QByteArray QTextDocumentWriter.format()'''
        return QByteArray()
    def setFormat(self, format):
        '''void QTextDocumentWriter.setFormat(QByteArray format)'''


class QTextLength():
    """"""
    # Enum QTextLength.Type
    VariableLength = 0
    FixedLength = 0
    PercentageLength = 0

    def __init__(self):
        '''void QTextLength.__init__()'''
    def __init__(self, atype, avalue):
        '''void QTextLength.__init__(QTextLength.Type atype, float avalue)'''
    def __init__(self, variant):
        '''void QTextLength.__init__(QVariant variant)'''
    def __init__(self):
        '''QTextLength QTextLength.__init__()'''
        return QTextLength()
    def __ne__(self, other):
        '''bool QTextLength.__ne__(QTextLength other)'''
        return bool()
    def __eq__(self, other):
        '''bool QTextLength.__eq__(QTextLength other)'''
        return bool()
    def rawValue(self):
        '''float QTextLength.rawValue()'''
        return float()
    def value(self, maximumLength):
        '''float QTextLength.value(float maximumLength)'''
        return float()
    def type(self):
        '''QTextLength.Type QTextLength.type()'''
        return QTextLength.Type()


class QTextFormat():
    """"""
    # Enum QTextFormat.Property
    ObjectIndex = 0
    CssFloat = 0
    LayoutDirection = 0
    OutlinePen = 0
    BackgroundBrush = 0
    ForegroundBrush = 0
    BlockAlignment = 0
    BlockTopMargin = 0
    BlockBottomMargin = 0
    BlockLeftMargin = 0
    BlockRightMargin = 0
    TextIndent = 0
    BlockIndent = 0
    BlockNonBreakableLines = 0
    BlockTrailingHorizontalRulerWidth = 0
    FontFamily = 0
    FontPointSize = 0
    FontSizeAdjustment = 0
    FontSizeIncrement = 0
    FontWeight = 0
    FontItalic = 0
    FontUnderline = 0
    FontOverline = 0
    FontStrikeOut = 0
    FontFixedPitch = 0
    FontPixelSize = 0
    TextUnderlineColor = 0
    TextVerticalAlignment = 0
    TextOutline = 0
    IsAnchor = 0
    AnchorHref = 0
    AnchorName = 0
    ObjectType = 0
    ListStyle = 0
    ListIndent = 0
    FrameBorder = 0
    FrameMargin = 0
    FramePadding = 0
    FrameWidth = 0
    FrameHeight = 0
    TableColumns = 0
    TableColumnWidthConstraints = 0
    TableCellSpacing = 0
    TableCellPadding = 0
    TableCellRowSpan = 0
    TableCellColumnSpan = 0
    ImageName = 0
    ImageWidth = 0
    ImageHeight = 0
    TextUnderlineStyle = 0
    TableHeaderRowCount = 0
    FullWidthSelection = 0
    PageBreakPolicy = 0
    TextToolTip = 0
    FrameTopMargin = 0
    FrameBottomMargin = 0
    FrameLeftMargin = 0
    FrameRightMargin = 0
    FrameBorderBrush = 0
    FrameBorderStyle = 0
    BackgroundImageUrl = 0
    TabPositions = 0
    FirstFontProperty = 0
    FontCapitalization = 0
    FontLetterSpacing = 0
    FontWordSpacing = 0
    LastFontProperty = 0
    TableCellTopPadding = 0
    TableCellBottomPadding = 0
    TableCellLeftPadding = 0
    TableCellRightPadding = 0
    FontStyleHint = 0
    FontStyleStrategy = 0
    FontKerning = 0
    LineHeight = 0
    LineHeightType = 0
    FontHintingPreference = 0
    ListNumberPrefix = 0
    ListNumberSuffix = 0
    UserProperty = 0

    # Enum QTextFormat.PageBreakFlag
    PageBreak_Auto = 0
    PageBreak_AlwaysBefore = 0
    PageBreak_AlwaysAfter = 0

    # Enum QTextFormat.ObjectTypes
    NoObject = 0
    ImageObject = 0
    TableObject = 0
    TableCellObject = 0
    UserObject = 0

    # Enum QTextFormat.FormatType
    InvalidFormat = 0
    BlockFormat = 0
    CharFormat = 0
    ListFormat = 0
    TableFormat = 0
    FrameFormat = 0
    UserFormat = 0

    def __init__(self):
        '''void QTextFormat.__init__()'''
    def __init__(self, type):
        '''void QTextFormat.__init__(int type)'''
    def __init__(self, rhs):
        '''void QTextFormat.__init__(QTextFormat rhs)'''
    def __init__(self, variant):
        '''void QTextFormat.__init__(QVariant variant)'''
    def toTableCellFormat(self):
        '''QTextTableCellFormat QTextFormat.toTableCellFormat()'''
        return QTextTableCellFormat()
    def isTableCellFormat(self):
        '''bool QTextFormat.isTableCellFormat()'''
        return bool()
    def propertyCount(self):
        '''int QTextFormat.propertyCount()'''
        return int()
    def setObjectType(self, atype):
        '''void QTextFormat.setObjectType(int atype)'''
    def clearForeground(self):
        '''void QTextFormat.clearForeground()'''
    def foreground(self):
        '''QBrush QTextFormat.foreground()'''
        return QBrush()
    def setForeground(self, brush):
        '''void QTextFormat.setForeground(QBrush brush)'''
    def clearBackground(self):
        '''void QTextFormat.clearBackground()'''
    def background(self):
        '''QBrush QTextFormat.background()'''
        return QBrush()
    def setBackground(self, brush):
        '''void QTextFormat.setBackground(QBrush brush)'''
    def layoutDirection(self):
        '''Qt.LayoutDirection QTextFormat.layoutDirection()'''
        return Qt.LayoutDirection()
    def setLayoutDirection(self, direction):
        '''void QTextFormat.setLayoutDirection(Qt.LayoutDirection direction)'''
    def __ne__(self, rhs):
        '''bool QTextFormat.__ne__(QTextFormat rhs)'''
        return bool()
    def __eq__(self, rhs):
        '''bool QTextFormat.__eq__(QTextFormat rhs)'''
        return bool()
    def toImageFormat(self):
        '''QTextImageFormat QTextFormat.toImageFormat()'''
        return QTextImageFormat()
    def toFrameFormat(self):
        '''QTextFrameFormat QTextFormat.toFrameFormat()'''
        return QTextFrameFormat()
    def toTableFormat(self):
        '''QTextTableFormat QTextFormat.toTableFormat()'''
        return QTextTableFormat()
    def toListFormat(self):
        '''QTextListFormat QTextFormat.toListFormat()'''
        return QTextListFormat()
    def toCharFormat(self):
        '''QTextCharFormat QTextFormat.toCharFormat()'''
        return QTextCharFormat()
    def toBlockFormat(self):
        '''QTextBlockFormat QTextFormat.toBlockFormat()'''
        return QTextBlockFormat()
    def isTableFormat(self):
        '''bool QTextFormat.isTableFormat()'''
        return bool()
    def isImageFormat(self):
        '''bool QTextFormat.isImageFormat()'''
        return bool()
    def isFrameFormat(self):
        '''bool QTextFormat.isFrameFormat()'''
        return bool()
    def isListFormat(self):
        '''bool QTextFormat.isListFormat()'''
        return bool()
    def isBlockFormat(self):
        '''bool QTextFormat.isBlockFormat()'''
        return bool()
    def isCharFormat(self):
        '''bool QTextFormat.isCharFormat()'''
        return bool()
    def objectType(self):
        '''int QTextFormat.objectType()'''
        return int()
    def properties(self):
        '''dict-of-int-QVariant QTextFormat.properties()'''
        return dict-of-int-QVariant()
    def lengthVectorProperty(self, propertyId):
        '''list-of-QTextLength QTextFormat.lengthVectorProperty(int propertyId)'''
        return [QTextLength()]
    def lengthProperty(self, propertyId):
        '''QTextLength QTextFormat.lengthProperty(int propertyId)'''
        return QTextLength()
    def brushProperty(self, propertyId):
        '''QBrush QTextFormat.brushProperty(int propertyId)'''
        return QBrush()
    def penProperty(self, propertyId):
        '''QPen QTextFormat.penProperty(int propertyId)'''
        return QPen()
    def colorProperty(self, propertyId):
        '''QColor QTextFormat.colorProperty(int propertyId)'''
        return QColor()
    def stringProperty(self, propertyId):
        '''QString QTextFormat.stringProperty(int propertyId)'''
        return QString()
    def doubleProperty(self, propertyId):
        '''float QTextFormat.doubleProperty(int propertyId)'''
        return float()
    def intProperty(self, propertyId):
        '''int QTextFormat.intProperty(int propertyId)'''
        return int()
    def boolProperty(self, propertyId):
        '''bool QTextFormat.boolProperty(int propertyId)'''
        return bool()
    def hasProperty(self, propertyId):
        '''bool QTextFormat.hasProperty(int propertyId)'''
        return bool()
    def clearProperty(self, propertyId):
        '''void QTextFormat.clearProperty(int propertyId)'''
    def setProperty(self, propertyId, value):
        '''void QTextFormat.setProperty(int propertyId, QVariant value)'''
    def setProperty(self, propertyId, lengths):
        '''void QTextFormat.setProperty(int propertyId, list-of-QTextLength lengths)'''
    def property(self, propertyId):
        '''QVariant QTextFormat.property(int propertyId)'''
        return QVariant()
    def setObjectIndex(self, object):
        '''void QTextFormat.setObjectIndex(int object)'''
    def objectIndex(self):
        '''int QTextFormat.objectIndex()'''
        return int()
    def type(self):
        '''int QTextFormat.type()'''
        return int()
    def isValid(self):
        '''bool QTextFormat.isValid()'''
        return bool()
    def merge(self, other):
        '''void QTextFormat.merge(QTextFormat other)'''
    class PageBreakFlags():
        """"""
        def __init__(self):
            '''QTextFormat.PageBreakFlags QTextFormat.PageBreakFlags.__init__()'''
            return QTextFormat.PageBreakFlags()
        def __init__(self):
            '''int QTextFormat.PageBreakFlags.__init__()'''
            return int()
        def __init__(self):
            '''void QTextFormat.PageBreakFlags.__init__()'''
        def __bool__(self):
            '''int QTextFormat.PageBreakFlags.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QTextFormat.PageBreakFlags.__ne__(QTextFormat.PageBreakFlags f)'''
            return bool()
        def __eq__(self, f):
            '''bool QTextFormat.PageBreakFlags.__eq__(QTextFormat.PageBreakFlags f)'''
            return bool()
        def __invert__(self):
            '''QTextFormat.PageBreakFlags QTextFormat.PageBreakFlags.__invert__()'''
            return QTextFormat.PageBreakFlags()
        def __and__(self, mask):
            '''QTextFormat.PageBreakFlags QTextFormat.PageBreakFlags.__and__(int mask)'''
            return QTextFormat.PageBreakFlags()
        def __xor__(self, f):
            '''QTextFormat.PageBreakFlags QTextFormat.PageBreakFlags.__xor__(QTextFormat.PageBreakFlags f)'''
            return QTextFormat.PageBreakFlags()
        def __xor__(self, f):
            '''QTextFormat.PageBreakFlags QTextFormat.PageBreakFlags.__xor__(int f)'''
            return QTextFormat.PageBreakFlags()
        def __or__(self, f):
            '''QTextFormat.PageBreakFlags QTextFormat.PageBreakFlags.__or__(QTextFormat.PageBreakFlags f)'''
            return QTextFormat.PageBreakFlags()
        def __or__(self, f):
            '''QTextFormat.PageBreakFlags QTextFormat.PageBreakFlags.__or__(int f)'''
            return QTextFormat.PageBreakFlags()
        def __int__(self):
            '''int QTextFormat.PageBreakFlags.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QTextFormat.PageBreakFlags QTextFormat.PageBreakFlags.__ixor__(QTextFormat.PageBreakFlags f)'''
            return QTextFormat.PageBreakFlags()
        def __ior__(self, f):
            '''QTextFormat.PageBreakFlags QTextFormat.PageBreakFlags.__ior__(QTextFormat.PageBreakFlags f)'''
            return QTextFormat.PageBreakFlags()
        def __iand__(self, mask):
            '''QTextFormat.PageBreakFlags QTextFormat.PageBreakFlags.__iand__(int mask)'''
            return QTextFormat.PageBreakFlags()


class QTextCharFormat(QTextFormat):
    """"""
    # Enum QTextCharFormat.UnderlineStyle
    NoUnderline = 0
    SingleUnderline = 0
    DashUnderline = 0
    DotLine = 0
    DashDotLine = 0
    DashDotDotLine = 0
    WaveUnderline = 0
    SpellCheckUnderline = 0

    # Enum QTextCharFormat.VerticalAlignment
    AlignNormal = 0
    AlignSuperScript = 0
    AlignSubScript = 0
    AlignMiddle = 0
    AlignTop = 0
    AlignBottom = 0
    AlignBaseline = 0

    def __init__(self):
        '''void QTextCharFormat.__init__()'''
    def __init__(self):
        '''QTextCharFormat QTextCharFormat.__init__()'''
        return QTextCharFormat()
    def fontHintingPreference(self):
        '''QFont.HintingPreference QTextCharFormat.fontHintingPreference()'''
        return QFont.HintingPreference()
    def setFontHintingPreference(self, hintingPreference):
        '''void QTextCharFormat.setFontHintingPreference(QFont.HintingPreference hintingPreference)'''
    def fontKerning(self):
        '''bool QTextCharFormat.fontKerning()'''
        return bool()
    def setFontKerning(self, enable):
        '''void QTextCharFormat.setFontKerning(bool enable)'''
    def fontStyleStrategy(self):
        '''QFont.StyleStrategy QTextCharFormat.fontStyleStrategy()'''
        return QFont.StyleStrategy()
    def fontStyleHint(self):
        '''QFont.StyleHint QTextCharFormat.fontStyleHint()'''
        return QFont.StyleHint()
    def setFontStyleStrategy(self, strategy):
        '''void QTextCharFormat.setFontStyleStrategy(QFont.StyleStrategy strategy)'''
    def setFontStyleHint(self, hint, strategy = None):
        '''void QTextCharFormat.setFontStyleHint(QFont.StyleHint hint, QFont.StyleStrategy strategy = QFont.PreferDefault)'''
    def fontWordSpacing(self):
        '''float QTextCharFormat.fontWordSpacing()'''
        return float()
    def setFontWordSpacing(self, spacing):
        '''void QTextCharFormat.setFontWordSpacing(float spacing)'''
    def fontLetterSpacing(self):
        '''float QTextCharFormat.fontLetterSpacing()'''
        return float()
    def setFontLetterSpacing(self, spacing):
        '''void QTextCharFormat.setFontLetterSpacing(float spacing)'''
    def fontCapitalization(self):
        '''QFont.Capitalization QTextCharFormat.fontCapitalization()'''
        return QFont.Capitalization()
    def setFontCapitalization(self, capitalization):
        '''void QTextCharFormat.setFontCapitalization(QFont.Capitalization capitalization)'''
    def anchorNames(self):
        '''QStringList QTextCharFormat.anchorNames()'''
        return QStringList()
    def setAnchorNames(self, names):
        '''void QTextCharFormat.setAnchorNames(QStringList names)'''
    def toolTip(self):
        '''QString QTextCharFormat.toolTip()'''
        return QString()
    def setToolTip(self, tip):
        '''void QTextCharFormat.setToolTip(QString tip)'''
    def underlineStyle(self):
        '''QTextCharFormat.UnderlineStyle QTextCharFormat.underlineStyle()'''
        return QTextCharFormat.UnderlineStyle()
    def setUnderlineStyle(self, style):
        '''void QTextCharFormat.setUnderlineStyle(QTextCharFormat.UnderlineStyle style)'''
    def textOutline(self):
        '''QPen QTextCharFormat.textOutline()'''
        return QPen()
    def setTextOutline(self, pen):
        '''void QTextCharFormat.setTextOutline(QPen pen)'''
    def setTableCellColumnSpan(self, atableCellColumnSpan):
        '''void QTextCharFormat.setTableCellColumnSpan(int atableCellColumnSpan)'''
    def setTableCellRowSpan(self, atableCellRowSpan):
        '''void QTextCharFormat.setTableCellRowSpan(int atableCellRowSpan)'''
    def tableCellColumnSpan(self):
        '''int QTextCharFormat.tableCellColumnSpan()'''
        return int()
    def tableCellRowSpan(self):
        '''int QTextCharFormat.tableCellRowSpan()'''
        return int()
    def anchorName(self):
        '''QString QTextCharFormat.anchorName()'''
        return QString()
    def setAnchorName(self, name):
        '''void QTextCharFormat.setAnchorName(QString name)'''
    def anchorHref(self):
        '''QString QTextCharFormat.anchorHref()'''
        return QString()
    def setAnchorHref(self, value):
        '''void QTextCharFormat.setAnchorHref(QString value)'''
    def isAnchor(self):
        '''bool QTextCharFormat.isAnchor()'''
        return bool()
    def setAnchor(self, anchor):
        '''void QTextCharFormat.setAnchor(bool anchor)'''
    def verticalAlignment(self):
        '''QTextCharFormat.VerticalAlignment QTextCharFormat.verticalAlignment()'''
        return QTextCharFormat.VerticalAlignment()
    def setVerticalAlignment(self, alignment):
        '''void QTextCharFormat.setVerticalAlignment(QTextCharFormat.VerticalAlignment alignment)'''
    def fontFixedPitch(self):
        '''bool QTextCharFormat.fontFixedPitch()'''
        return bool()
    def setFontFixedPitch(self, fixedPitch):
        '''void QTextCharFormat.setFontFixedPitch(bool fixedPitch)'''
    def underlineColor(self):
        '''QColor QTextCharFormat.underlineColor()'''
        return QColor()
    def setUnderlineColor(self, color):
        '''void QTextCharFormat.setUnderlineColor(QColor color)'''
    def fontStrikeOut(self):
        '''bool QTextCharFormat.fontStrikeOut()'''
        return bool()
    def setFontStrikeOut(self, strikeOut):
        '''void QTextCharFormat.setFontStrikeOut(bool strikeOut)'''
    def fontOverline(self):
        '''bool QTextCharFormat.fontOverline()'''
        return bool()
    def setFontOverline(self, overline):
        '''void QTextCharFormat.setFontOverline(bool overline)'''
    def fontUnderline(self):
        '''bool QTextCharFormat.fontUnderline()'''
        return bool()
    def setFontUnderline(self, underline):
        '''void QTextCharFormat.setFontUnderline(bool underline)'''
    def fontItalic(self):
        '''bool QTextCharFormat.fontItalic()'''
        return bool()
    def setFontItalic(self, italic):
        '''void QTextCharFormat.setFontItalic(bool italic)'''
    def fontWeight(self):
        '''int QTextCharFormat.fontWeight()'''
        return int()
    def setFontWeight(self, weight):
        '''void QTextCharFormat.setFontWeight(int weight)'''
    def fontPointSize(self):
        '''float QTextCharFormat.fontPointSize()'''
        return float()
    def setFontPointSize(self, size):
        '''void QTextCharFormat.setFontPointSize(float size)'''
    def fontFamily(self):
        '''QString QTextCharFormat.fontFamily()'''
        return QString()
    def setFontFamily(self, family):
        '''void QTextCharFormat.setFontFamily(QString family)'''
    def font(self):
        '''QFont QTextCharFormat.font()'''
        return QFont()
    def setFont(self, font):
        '''void QTextCharFormat.setFont(QFont font)'''
    def isValid(self):
        '''bool QTextCharFormat.isValid()'''
        return bool()


class QTextBlockFormat(QTextFormat):
    """"""
    # Enum QTextBlockFormat.LineHeightTypes
    SingleHeight = 0
    ProportionalHeight = 0
    FixedHeight = 0
    MinimumHeight = 0
    LineDistanceHeight = 0

    def __init__(self):
        '''void QTextBlockFormat.__init__()'''
    def __init__(self):
        '''QTextBlockFormat QTextBlockFormat.__init__()'''
        return QTextBlockFormat()
    def lineHeightType(self):
        '''int QTextBlockFormat.lineHeightType()'''
        return int()
    def lineHeight(self, scriptLineHeight, scaling):
        '''float QTextBlockFormat.lineHeight(float scriptLineHeight, float scaling)'''
        return float()
    def lineHeight(self):
        '''float QTextBlockFormat.lineHeight()'''
        return float()
    def setLineHeight(self, height, heightType):
        '''void QTextBlockFormat.setLineHeight(float height, int heightType)'''
    def tabPositions(self):
        '''list-of-QTextOption.Tab QTextBlockFormat.tabPositions()'''
        return [QTextOption.Tab()]
    def setTabPositions(self, tabs):
        '''void QTextBlockFormat.setTabPositions(list-of-QTextOption.Tab tabs)'''
    def pageBreakPolicy(self):
        '''QTextFormat.PageBreakFlags QTextBlockFormat.pageBreakPolicy()'''
        return QTextFormat.PageBreakFlags()
    def setPageBreakPolicy(self, flags):
        '''void QTextBlockFormat.setPageBreakPolicy(QTextFormat.PageBreakFlags flags)'''
    def setIndent(self, aindent):
        '''void QTextBlockFormat.setIndent(int aindent)'''
    def setAlignment(self, aalignment):
        '''void QTextBlockFormat.setAlignment(Qt.Alignment aalignment)'''
    def nonBreakableLines(self):
        '''bool QTextBlockFormat.nonBreakableLines()'''
        return bool()
    def setNonBreakableLines(self, b):
        '''void QTextBlockFormat.setNonBreakableLines(bool b)'''
    def indent(self):
        '''int QTextBlockFormat.indent()'''
        return int()
    def textIndent(self):
        '''float QTextBlockFormat.textIndent()'''
        return float()
    def setTextIndent(self, margin):
        '''void QTextBlockFormat.setTextIndent(float margin)'''
    def rightMargin(self):
        '''float QTextBlockFormat.rightMargin()'''
        return float()
    def setRightMargin(self, margin):
        '''void QTextBlockFormat.setRightMargin(float margin)'''
    def leftMargin(self):
        '''float QTextBlockFormat.leftMargin()'''
        return float()
    def setLeftMargin(self, margin):
        '''void QTextBlockFormat.setLeftMargin(float margin)'''
    def bottomMargin(self):
        '''float QTextBlockFormat.bottomMargin()'''
        return float()
    def setBottomMargin(self, margin):
        '''void QTextBlockFormat.setBottomMargin(float margin)'''
    def topMargin(self):
        '''float QTextBlockFormat.topMargin()'''
        return float()
    def setTopMargin(self, margin):
        '''void QTextBlockFormat.setTopMargin(float margin)'''
    def alignment(self):
        '''Qt.Alignment QTextBlockFormat.alignment()'''
        return Qt.Alignment()
    def isValid(self):
        '''bool QTextBlockFormat.isValid()'''
        return bool()


class QTextListFormat(QTextFormat):
    """"""
    # Enum QTextListFormat.Style
    ListDisc = 0
    ListCircle = 0
    ListSquare = 0
    ListDecimal = 0
    ListLowerAlpha = 0
    ListUpperAlpha = 0
    ListLowerRoman = 0
    ListUpperRoman = 0

    def __init__(self):
        '''void QTextListFormat.__init__()'''
    def __init__(self):
        '''QTextListFormat QTextListFormat.__init__()'''
        return QTextListFormat()
    def setNumberSuffix(self, ns):
        '''void QTextListFormat.setNumberSuffix(QString ns)'''
    def setNumberPrefix(self, np):
        '''void QTextListFormat.setNumberPrefix(QString np)'''
    def numberSuffix(self):
        '''QString QTextListFormat.numberSuffix()'''
        return QString()
    def numberPrefix(self):
        '''QString QTextListFormat.numberPrefix()'''
        return QString()
    def setIndent(self, aindent):
        '''void QTextListFormat.setIndent(int aindent)'''
    def setStyle(self, astyle):
        '''void QTextListFormat.setStyle(QTextListFormat.Style astyle)'''
    def indent(self):
        '''int QTextListFormat.indent()'''
        return int()
    def style(self):
        '''QTextListFormat.Style QTextListFormat.style()'''
        return QTextListFormat.Style()
    def isValid(self):
        '''bool QTextListFormat.isValid()'''
        return bool()


class QTextImageFormat(QTextCharFormat):
    """"""
    def __init__(self):
        '''void QTextImageFormat.__init__()'''
    def __init__(self):
        '''QTextImageFormat QTextImageFormat.__init__()'''
        return QTextImageFormat()
    def setHeight(self, aheight):
        '''void QTextImageFormat.setHeight(float aheight)'''
    def setWidth(self, awidth):
        '''void QTextImageFormat.setWidth(float awidth)'''
    def setName(self, aname):
        '''void QTextImageFormat.setName(QString aname)'''
    def height(self):
        '''float QTextImageFormat.height()'''
        return float()
    def width(self):
        '''float QTextImageFormat.width()'''
        return float()
    def name(self):
        '''QString QTextImageFormat.name()'''
        return QString()
    def isValid(self):
        '''bool QTextImageFormat.isValid()'''
        return bool()


class QTextFrameFormat(QTextFormat):
    """"""
    # Enum QTextFrameFormat.BorderStyle
    BorderStyle_None = 0
    BorderStyle_Dotted = 0
    BorderStyle_Dashed = 0
    BorderStyle_Solid = 0
    BorderStyle_Double = 0
    BorderStyle_DotDash = 0
    BorderStyle_DotDotDash = 0
    BorderStyle_Groove = 0
    BorderStyle_Ridge = 0
    BorderStyle_Inset = 0
    BorderStyle_Outset = 0

    # Enum QTextFrameFormat.Position
    InFlow = 0
    FloatLeft = 0
    FloatRight = 0

    def __init__(self):
        '''void QTextFrameFormat.__init__()'''
    def __init__(self):
        '''QTextFrameFormat QTextFrameFormat.__init__()'''
        return QTextFrameFormat()
    def setRightMargin(self, amargin):
        '''void QTextFrameFormat.setRightMargin(float amargin)'''
    def setLeftMargin(self, amargin):
        '''void QTextFrameFormat.setLeftMargin(float amargin)'''
    def setBottomMargin(self, amargin):
        '''void QTextFrameFormat.setBottomMargin(float amargin)'''
    def setTopMargin(self, amargin):
        '''void QTextFrameFormat.setTopMargin(float amargin)'''
    def rightMargin(self):
        '''float QTextFrameFormat.rightMargin()'''
        return float()
    def leftMargin(self):
        '''float QTextFrameFormat.leftMargin()'''
        return float()
    def bottomMargin(self):
        '''float QTextFrameFormat.bottomMargin()'''
        return float()
    def topMargin(self):
        '''float QTextFrameFormat.topMargin()'''
        return float()
    def borderStyle(self):
        '''QTextFrameFormat.BorderStyle QTextFrameFormat.borderStyle()'''
        return QTextFrameFormat.BorderStyle()
    def setBorderStyle(self, style):
        '''void QTextFrameFormat.setBorderStyle(QTextFrameFormat.BorderStyle style)'''
    def borderBrush(self):
        '''QBrush QTextFrameFormat.borderBrush()'''
        return QBrush()
    def setBorderBrush(self, brush):
        '''void QTextFrameFormat.setBorderBrush(QBrush brush)'''
    def pageBreakPolicy(self):
        '''QTextFormat.PageBreakFlags QTextFrameFormat.pageBreakPolicy()'''
        return QTextFormat.PageBreakFlags()
    def setPageBreakPolicy(self, flags):
        '''void QTextFrameFormat.setPageBreakPolicy(QTextFormat.PageBreakFlags flags)'''
    def setHeight(self, aheight):
        '''void QTextFrameFormat.setHeight(float aheight)'''
    def setHeight(self, aheight):
        '''void QTextFrameFormat.setHeight(QTextLength aheight)'''
    def setPadding(self, apadding):
        '''void QTextFrameFormat.setPadding(float apadding)'''
    def setMargin(self, amargin):
        '''void QTextFrameFormat.setMargin(float amargin)'''
    def setBorder(self, aborder):
        '''void QTextFrameFormat.setBorder(float aborder)'''
    def height(self):
        '''QTextLength QTextFrameFormat.height()'''
        return QTextLength()
    def width(self):
        '''QTextLength QTextFrameFormat.width()'''
        return QTextLength()
    def setWidth(self, length):
        '''void QTextFrameFormat.setWidth(QTextLength length)'''
    def setWidth(self, awidth):
        '''void QTextFrameFormat.setWidth(float awidth)'''
    def padding(self):
        '''float QTextFrameFormat.padding()'''
        return float()
    def margin(self):
        '''float QTextFrameFormat.margin()'''
        return float()
    def border(self):
        '''float QTextFrameFormat.border()'''
        return float()
    def position(self):
        '''QTextFrameFormat.Position QTextFrameFormat.position()'''
        return QTextFrameFormat.Position()
    def setPosition(self, f):
        '''void QTextFrameFormat.setPosition(QTextFrameFormat.Position f)'''
    def isValid(self):
        '''bool QTextFrameFormat.isValid()'''
        return bool()


class QTextTableFormat(QTextFrameFormat):
    """"""
    def __init__(self):
        '''void QTextTableFormat.__init__()'''
    def __init__(self):
        '''QTextTableFormat QTextTableFormat.__init__()'''
        return QTextTableFormat()
    def headerRowCount(self):
        '''int QTextTableFormat.headerRowCount()'''
        return int()
    def setHeaderRowCount(self, count):
        '''void QTextTableFormat.setHeaderRowCount(int count)'''
    def setAlignment(self, aalignment):
        '''void QTextTableFormat.setAlignment(Qt.Alignment aalignment)'''
    def setCellPadding(self, apadding):
        '''void QTextTableFormat.setCellPadding(float apadding)'''
    def setColumns(self, acolumns):
        '''void QTextTableFormat.setColumns(int acolumns)'''
    def alignment(self):
        '''Qt.Alignment QTextTableFormat.alignment()'''
        return Qt.Alignment()
    def cellPadding(self):
        '''float QTextTableFormat.cellPadding()'''
        return float()
    def setCellSpacing(self, spacing):
        '''void QTextTableFormat.setCellSpacing(float spacing)'''
    def cellSpacing(self):
        '''float QTextTableFormat.cellSpacing()'''
        return float()
    def clearColumnWidthConstraints(self):
        '''void QTextTableFormat.clearColumnWidthConstraints()'''
    def columnWidthConstraints(self):
        '''list-of-QTextLength QTextTableFormat.columnWidthConstraints()'''
        return [QTextLength()]
    def setColumnWidthConstraints(self, constraints):
        '''void QTextTableFormat.setColumnWidthConstraints(list-of-QTextLength constraints)'''
    def columns(self):
        '''int QTextTableFormat.columns()'''
        return int()
    def isValid(self):
        '''bool QTextTableFormat.isValid()'''
        return bool()


class QTextTableCellFormat(QTextCharFormat):
    """"""
    def __init__(self):
        '''void QTextTableCellFormat.__init__()'''
    def __init__(self):
        '''QTextTableCellFormat QTextTableCellFormat.__init__()'''
        return QTextTableCellFormat()
    def setPadding(self, padding):
        '''void QTextTableCellFormat.setPadding(float padding)'''
    def rightPadding(self):
        '''float QTextTableCellFormat.rightPadding()'''
        return float()
    def setRightPadding(self, padding):
        '''void QTextTableCellFormat.setRightPadding(float padding)'''
    def leftPadding(self):
        '''float QTextTableCellFormat.leftPadding()'''
        return float()
    def setLeftPadding(self, padding):
        '''void QTextTableCellFormat.setLeftPadding(float padding)'''
    def bottomPadding(self):
        '''float QTextTableCellFormat.bottomPadding()'''
        return float()
    def setBottomPadding(self, padding):
        '''void QTextTableCellFormat.setBottomPadding(float padding)'''
    def topPadding(self):
        '''float QTextTableCellFormat.topPadding()'''
        return float()
    def setTopPadding(self, padding):
        '''void QTextTableCellFormat.setTopPadding(float padding)'''
    def isValid(self):
        '''bool QTextTableCellFormat.isValid()'''
        return bool()


class QTextInlineObject():
    """"""
    def __init__(self):
        '''void QTextInlineObject.__init__()'''
    def __init__(self):
        '''QTextInlineObject QTextInlineObject.__init__()'''
        return QTextInlineObject()
    def format(self):
        '''QTextFormat QTextInlineObject.format()'''
        return QTextFormat()
    def formatIndex(self):
        '''int QTextInlineObject.formatIndex()'''
        return int()
    def textPosition(self):
        '''int QTextInlineObject.textPosition()'''
        return int()
    def setDescent(self, d):
        '''void QTextInlineObject.setDescent(float d)'''
    def setAscent(self, a):
        '''void QTextInlineObject.setAscent(float a)'''
    def setWidth(self, w):
        '''void QTextInlineObject.setWidth(float w)'''
    def textDirection(self):
        '''Qt.LayoutDirection QTextInlineObject.textDirection()'''
        return Qt.LayoutDirection()
    def height(self):
        '''float QTextInlineObject.height()'''
        return float()
    def descent(self):
        '''float QTextInlineObject.descent()'''
        return float()
    def ascent(self):
        '''float QTextInlineObject.ascent()'''
        return float()
    def width(self):
        '''float QTextInlineObject.width()'''
        return float()
    def rect(self):
        '''QRectF QTextInlineObject.rect()'''
        return QRectF()
    def isValid(self):
        '''bool QTextInlineObject.isValid()'''
        return bool()


class QTextLayout():
    """"""
    # Enum QTextLayout.CursorMode
    SkipCharacters = 0
    SkipWords = 0

    def __init__(self):
        '''void QTextLayout.__init__()'''
    def __init__(self, text):
        '''void QTextLayout.__init__(QString text)'''
    def __init__(self, text, font, paintDevice = None):
        '''void QTextLayout.__init__(QString text, QFont font, QPaintDevice paintDevice = None)'''
    def __init__(self, b):
        '''void QTextLayout.__init__(QTextBlock b)'''
    def glyphRuns(self):
        '''list-of-QGlyphRun QTextLayout.glyphRuns()'''
        return [QGlyphRun()]
    def rightCursorPosition(self, oldPos):
        '''int QTextLayout.rightCursorPosition(int oldPos)'''
        return int()
    def leftCursorPosition(self, oldPos):
        '''int QTextLayout.leftCursorPosition(int oldPos)'''
        return int()
    def cursorMoveStyle(self):
        '''Qt.CursorMoveStyle QTextLayout.cursorMoveStyle()'''
        return Qt.CursorMoveStyle()
    def setCursorMoveStyle(self, style):
        '''void QTextLayout.setCursorMoveStyle(Qt.CursorMoveStyle style)'''
    def clearLayout(self):
        '''void QTextLayout.clearLayout()'''
    def maximumWidth(self):
        '''float QTextLayout.maximumWidth()'''
        return float()
    def minimumWidth(self):
        '''float QTextLayout.minimumWidth()'''
        return float()
    def boundingRect(self):
        '''QRectF QTextLayout.boundingRect()'''
        return QRectF()
    def setPosition(self, p):
        '''void QTextLayout.setPosition(QPointF p)'''
    def position(self):
        '''QPointF QTextLayout.position()'''
        return QPointF()
    def drawCursor(self, p, pos, cursorPosition):
        '''void QTextLayout.drawCursor(QPainter p, QPointF pos, int cursorPosition)'''
    def drawCursor(self, p, pos, cursorPosition, width):
        '''void QTextLayout.drawCursor(QPainter p, QPointF pos, int cursorPosition, int width)'''
    def draw(self, p, pos, selections = None, clip = QRectF()):
        '''void QTextLayout.draw(QPainter p, QPointF pos, list-of-QTextLayout.FormatRange selections = list-of-QTextLayout.FormatRange, QRectF clip = QRectF())'''
    def previousCursorPosition(self, oldPos, mode = None):
        '''int QTextLayout.previousCursorPosition(int oldPos, QTextLayout.CursorMode mode = QTextLayout.SkipCharacters)'''
        return int()
    def nextCursorPosition(self, oldPos, mode = None):
        '''int QTextLayout.nextCursorPosition(int oldPos, QTextLayout.CursorMode mode = QTextLayout.SkipCharacters)'''
        return int()
    def isValidCursorPosition(self, pos):
        '''bool QTextLayout.isValidCursorPosition(int pos)'''
        return bool()
    def lineForTextPosition(self, pos):
        '''QTextLine QTextLayout.lineForTextPosition(int pos)'''
        return QTextLine()
    def lineAt(self, i):
        '''QTextLine QTextLayout.lineAt(int i)'''
        return QTextLine()
    def lineCount(self):
        '''int QTextLayout.lineCount()'''
        return int()
    def createLine(self):
        '''QTextLine QTextLayout.createLine()'''
        return QTextLine()
    def endLayout(self):
        '''void QTextLayout.endLayout()'''
    def beginLayout(self):
        '''void QTextLayout.beginLayout()'''
    def cacheEnabled(self):
        '''bool QTextLayout.cacheEnabled()'''
        return bool()
    def setCacheEnabled(self, enable):
        '''void QTextLayout.setCacheEnabled(bool enable)'''
    def clearAdditionalFormats(self):
        '''void QTextLayout.clearAdditionalFormats()'''
    def additionalFormats(self):
        '''list-of-QTextLayout.FormatRange QTextLayout.additionalFormats()'''
        return [QTextLayout.FormatRange()]
    def setAdditionalFormats(self, overrides):
        '''void QTextLayout.setAdditionalFormats(list-of-QTextLayout.FormatRange overrides)'''
    def preeditAreaText(self):
        '''QString QTextLayout.preeditAreaText()'''
        return QString()
    def preeditAreaPosition(self):
        '''int QTextLayout.preeditAreaPosition()'''
        return int()
    def setPreeditArea(self, position, text):
        '''void QTextLayout.setPreeditArea(int position, QString text)'''
    def textOption(self):
        '''QTextOption QTextLayout.textOption()'''
        return QTextOption()
    def setTextOption(self, option):
        '''void QTextLayout.setTextOption(QTextOption option)'''
    def text(self):
        '''QString QTextLayout.text()'''
        return QString()
    def setText(self, string):
        '''void QTextLayout.setText(QString string)'''
    def font(self):
        '''QFont QTextLayout.font()'''
        return QFont()
    def setFont(self, f):
        '''void QTextLayout.setFont(QFont f)'''
    class FormatRange():
        """"""
        format = None # QTextCharFormat - member
        length = None # int - member
        start = None # int - member
        def __init__(self):
            '''void QTextLayout.FormatRange.__init__()'''
        def __init__(self):
            '''QTextLayout.FormatRange QTextLayout.FormatRange.__init__()'''
            return QTextLayout.FormatRange()


class QTextLine():
    """"""
    # Enum QTextLine.CursorPosition
    CursorBetweenCharacters = 0
    CursorOnCharacter = 0

    # Enum QTextLine.Edge
    Leading = 0
    Trailing = 0

    def __init__(self):
        '''void QTextLine.__init__()'''
    def __init__(self):
        '''QTextLine QTextLine.__init__()'''
        return QTextLine()
    def horizontalAdvance(self):
        '''float QTextLine.horizontalAdvance()'''
        return float()
    def leadingIncluded(self):
        '''bool QTextLine.leadingIncluded()'''
        return bool()
    def setLeadingIncluded(self, included):
        '''void QTextLine.setLeadingIncluded(bool included)'''
    def leading(self):
        '''float QTextLine.leading()'''
        return float()
    def position(self):
        '''QPointF QTextLine.position()'''
        return QPointF()
    def draw(self, painter, position, selection = None):
        '''void QTextLine.draw(QPainter painter, QPointF position, QTextLayout.FormatRange selection = None)'''
    def lineNumber(self):
        '''int QTextLine.lineNumber()'''
        return int()
    def textLength(self):
        '''int QTextLine.textLength()'''
        return int()
    def textStart(self):
        '''int QTextLine.textStart()'''
        return int()
    def setPosition(self, pos):
        '''void QTextLine.setPosition(QPointF pos)'''
    def setNumColumns(self, columns):
        '''void QTextLine.setNumColumns(int columns)'''
    def setNumColumns(self, columns, alignmentWidth):
        '''void QTextLine.setNumColumns(int columns, float alignmentWidth)'''
    def setLineWidth(self, width):
        '''void QTextLine.setLineWidth(float width)'''
    def xToCursor(self, x, edge = None):
        '''int QTextLine.xToCursor(float x, QTextLine.CursorPosition edge = QTextLine.CursorBetweenCharacters)'''
        return int()
    def cursorToX(self, cursorPos, edge = None):
        '''float QTextLine.cursorToX(int cursorPos, QTextLine.Edge edge = QTextLine.Leading)'''
        return float()
    def naturalTextRect(self):
        '''QRectF QTextLine.naturalTextRect()'''
        return QRectF()
    def naturalTextWidth(self):
        '''float QTextLine.naturalTextWidth()'''
        return float()
    def height(self):
        '''float QTextLine.height()'''
        return float()
    def descent(self):
        '''float QTextLine.descent()'''
        return float()
    def ascent(self):
        '''float QTextLine.ascent()'''
        return float()
    def width(self):
        '''float QTextLine.width()'''
        return float()
    def y(self):
        '''float QTextLine.y()'''
        return float()
    def x(self):
        '''float QTextLine.x()'''
        return float()
    def rect(self):
        '''QRectF QTextLine.rect()'''
        return QRectF()
    def isValid(self):
        '''bool QTextLine.isValid()'''
        return bool()


class QTextObject(QObject):
    """"""
    def __init__(self, doc):
        '''void QTextObject.__init__(QTextDocument doc)'''
    def objectIndex(self):
        '''int QTextObject.objectIndex()'''
        return int()
    def document(self):
        '''QTextDocument QTextObject.document()'''
        return QTextDocument()
    def formatIndex(self):
        '''int QTextObject.formatIndex()'''
        return int()
    def format(self):
        '''QTextFormat QTextObject.format()'''
        return QTextFormat()
    def setFormat(self, format):
        '''void QTextObject.setFormat(QTextFormat format)'''


class QTextBlockGroup(QTextObject):
    """"""
    def __init__(self, doc):
        '''void QTextBlockGroup.__init__(QTextDocument doc)'''
    def blockList(self):
        '''list-of-QTextBlock QTextBlockGroup.blockList()'''
        return [QTextBlock()]
    def blockFormatChanged(self, block):
        '''void QTextBlockGroup.blockFormatChanged(QTextBlock block)'''
    def blockRemoved(self, block):
        '''void QTextBlockGroup.blockRemoved(QTextBlock block)'''
    def blockInserted(self, block):
        '''void QTextBlockGroup.blockInserted(QTextBlock block)'''


class QTextList(QTextBlockGroup):
    """"""
    def __init__(self, doc):
        '''void QTextList.__init__(QTextDocument doc)'''
    def setFormat(self, aformat):
        '''void QTextList.setFormat(QTextListFormat aformat)'''
    def format(self):
        '''QTextListFormat QTextList.format()'''
        return QTextListFormat()
    def add(self, block):
        '''void QTextList.add(QTextBlock block)'''
    def remove(self):
        '''QTextBlock QTextList.remove()'''
        return QTextBlock()
    def removeItem(self, i):
        '''void QTextList.removeItem(int i)'''
    def itemText(self):
        '''QTextBlock QTextList.itemText()'''
        return QTextBlock()
    def itemNumber(self):
        '''QTextBlock QTextList.itemNumber()'''
        return QTextBlock()
    def item(self, i):
        '''QTextBlock QTextList.item(int i)'''
        return QTextBlock()
    def isEmpty(self):
        '''bool QTextList.isEmpty()'''
        return bool()
    def __len__(self):
        '''None QTextList.__len__()'''
        return None()
    def count(self):
        '''int QTextList.count()'''
        return int()


class QTextFrame(QTextObject):
    """"""
    def __init__(self, doc):
        '''void QTextFrame.__init__(QTextDocument doc)'''
    def setFrameFormat(self, aformat):
        '''void QTextFrame.setFrameFormat(QTextFrameFormat aformat)'''
    def end(self):
        '''QTextFrame.iterator QTextFrame.end()'''
        return QTextFrame.iterator()
    def begin(self):
        '''QTextFrame.iterator QTextFrame.begin()'''
        return QTextFrame.iterator()
    def parentFrame(self):
        '''QTextFrame QTextFrame.parentFrame()'''
        return QTextFrame()
    def childFrames(self):
        '''list-of-QTextFrame QTextFrame.childFrames()'''
        return [QTextFrame()]
    def lastPosition(self):
        '''int QTextFrame.lastPosition()'''
        return int()
    def firstPosition(self):
        '''int QTextFrame.firstPosition()'''
        return int()
    def lastCursorPosition(self):
        '''QTextCursor QTextFrame.lastCursorPosition()'''
        return QTextCursor()
    def firstCursorPosition(self):
        '''QTextCursor QTextFrame.firstCursorPosition()'''
        return QTextCursor()
    def frameFormat(self):
        '''QTextFrameFormat QTextFrame.frameFormat()'''
        return QTextFrameFormat()
    class iterator():
        """"""
        def __init__(self):
            '''void QTextFrame.iterator.__init__()'''
        def __init__(self, o):
            '''void QTextFrame.iterator.__init__(QTextFrame.iterator o)'''
        def __isub__(self):
            '''int QTextFrame.iterator.__isub__()'''
            return int()
        def __iadd__(self):
            '''int QTextFrame.iterator.__iadd__()'''
            return int()
        def __ne__(self, o):
            '''bool QTextFrame.iterator.__ne__(QTextFrame.iterator o)'''
            return bool()
        def __eq__(self, o):
            '''bool QTextFrame.iterator.__eq__(QTextFrame.iterator o)'''
            return bool()
        def atEnd(self):
            '''bool QTextFrame.iterator.atEnd()'''
            return bool()
        def currentBlock(self):
            '''QTextBlock QTextFrame.iterator.currentBlock()'''
            return QTextBlock()
        def currentFrame(self):
            '''QTextFrame QTextFrame.iterator.currentFrame()'''
            return QTextFrame()
        def parentFrame(self):
            '''QTextFrame QTextFrame.iterator.parentFrame()'''
            return QTextFrame()


class QTextBlock():
    """"""
    def __init__(self):
        '''void QTextBlock.__init__()'''
    def __init__(self, o):
        '''void QTextBlock.__init__(QTextBlock o)'''
    def __ge__(self, o):
        '''bool QTextBlock.__ge__(QTextBlock o)'''
        return bool()
    def textDirection(self):
        '''Qt.LayoutDirection QTextBlock.textDirection()'''
        return Qt.LayoutDirection()
    def lineCount(self):
        '''int QTextBlock.lineCount()'''
        return int()
    def setLineCount(self, count):
        '''void QTextBlock.setLineCount(int count)'''
    def firstLineNumber(self):
        '''int QTextBlock.firstLineNumber()'''
        return int()
    def blockNumber(self):
        '''int QTextBlock.blockNumber()'''
        return int()
    def setVisible(self, visible):
        '''void QTextBlock.setVisible(bool visible)'''
    def isVisible(self):
        '''bool QTextBlock.isVisible()'''
        return bool()
    def setRevision(self, rev):
        '''void QTextBlock.setRevision(int rev)'''
    def revision(self):
        '''int QTextBlock.revision()'''
        return int()
    def clearLayout(self):
        '''void QTextBlock.clearLayout()'''
    def setUserState(self, state):
        '''void QTextBlock.setUserState(int state)'''
    def userState(self):
        '''int QTextBlock.userState()'''
        return int()
    def setUserData(self, data):
        '''void QTextBlock.setUserData(QTextBlockUserData data)'''
    def userData(self):
        '''QTextBlockUserData QTextBlock.userData()'''
        return QTextBlockUserData()
    def previous(self):
        '''QTextBlock QTextBlock.previous()'''
        return QTextBlock()
    def next(self):
        '''QTextBlock QTextBlock.next()'''
        return QTextBlock()
    def end(self):
        '''QTextBlock.iterator QTextBlock.end()'''
        return QTextBlock.iterator()
    def begin(self):
        '''QTextBlock.iterator QTextBlock.begin()'''
        return QTextBlock.iterator()
    def textList(self):
        '''QTextList QTextBlock.textList()'''
        return QTextList()
    def document(self):
        '''QTextDocument QTextBlock.document()'''
        return QTextDocument()
    def text(self):
        '''QString QTextBlock.text()'''
        return QString()
    def charFormatIndex(self):
        '''int QTextBlock.charFormatIndex()'''
        return int()
    def charFormat(self):
        '''QTextCharFormat QTextBlock.charFormat()'''
        return QTextCharFormat()
    def blockFormatIndex(self):
        '''int QTextBlock.blockFormatIndex()'''
        return int()
    def blockFormat(self):
        '''QTextBlockFormat QTextBlock.blockFormat()'''
        return QTextBlockFormat()
    def layout(self):
        '''QTextLayout QTextBlock.layout()'''
        return QTextLayout()
    def contains(self, position):
        '''bool QTextBlock.contains(int position)'''
        return bool()
    def length(self):
        '''int QTextBlock.length()'''
        return int()
    def position(self):
        '''int QTextBlock.position()'''
        return int()
    def __lt__(self, o):
        '''bool QTextBlock.__lt__(QTextBlock o)'''
        return bool()
    def __ne__(self, o):
        '''bool QTextBlock.__ne__(QTextBlock o)'''
        return bool()
    def __eq__(self, o):
        '''bool QTextBlock.__eq__(QTextBlock o)'''
        return bool()
    def isValid(self):
        '''bool QTextBlock.isValid()'''
        return bool()
    class iterator():
        """"""
        def __init__(self):
            '''void QTextBlock.iterator.__init__()'''
        def __init__(self, o):
            '''void QTextBlock.iterator.__init__(QTextBlock.iterator o)'''
        def __isub__(self):
            '''int QTextBlock.iterator.__isub__()'''
            return int()
        def __iadd__(self):
            '''int QTextBlock.iterator.__iadd__()'''
            return int()
        def __ne__(self, o):
            '''bool QTextBlock.iterator.__ne__(QTextBlock.iterator o)'''
            return bool()
        def __eq__(self, o):
            '''bool QTextBlock.iterator.__eq__(QTextBlock.iterator o)'''
            return bool()
        def atEnd(self):
            '''bool QTextBlock.iterator.atEnd()'''
            return bool()
        def fragment(self):
            '''QTextFragment QTextBlock.iterator.fragment()'''
            return QTextFragment()


class QTextFragment():
    """"""
    def __init__(self):
        '''void QTextFragment.__init__()'''
    def __init__(self, o):
        '''void QTextFragment.__init__(QTextFragment o)'''
    def __ge__(self, o):
        '''bool QTextFragment.__ge__(QTextFragment o)'''
        return bool()
    def glyphRuns(self):
        '''list-of-QGlyphRun QTextFragment.glyphRuns()'''
        return [QGlyphRun()]
    def text(self):
        '''QString QTextFragment.text()'''
        return QString()
    def charFormatIndex(self):
        '''int QTextFragment.charFormatIndex()'''
        return int()
    def charFormat(self):
        '''QTextCharFormat QTextFragment.charFormat()'''
        return QTextCharFormat()
    def contains(self, position):
        '''bool QTextFragment.contains(int position)'''
        return bool()
    def length(self):
        '''int QTextFragment.length()'''
        return int()
    def position(self):
        '''int QTextFragment.position()'''
        return int()
    def __lt__(self, o):
        '''bool QTextFragment.__lt__(QTextFragment o)'''
        return bool()
    def __ne__(self, o):
        '''bool QTextFragment.__ne__(QTextFragment o)'''
        return bool()
    def __eq__(self, o):
        '''bool QTextFragment.__eq__(QTextFragment o)'''
        return bool()
    def isValid(self):
        '''bool QTextFragment.isValid()'''
        return bool()


class QTextBlockUserData():
    """"""
    def __init__(self):
        '''void QTextBlockUserData.__init__()'''
    def __init__(self):
        '''QTextBlockUserData QTextBlockUserData.__init__()'''
        return QTextBlockUserData()


class QTextOption():
    """"""
    # Enum QTextOption.TabType
    LeftTab = 0
    RightTab = 0
    CenterTab = 0
    DelimiterTab = 0

    # Enum QTextOption.Flag
    IncludeTrailingSpaces = 0
    ShowTabsAndSpaces = 0
    ShowLineAndParagraphSeparators = 0
    AddSpaceForLineAndParagraphSeparators = 0
    SuppressColors = 0

    # Enum QTextOption.WrapMode
    NoWrap = 0
    WordWrap = 0
    ManualWrap = 0
    WrapAnywhere = 0
    WrapAtWordBoundaryOrAnywhere = 0

    def __init__(self):
        '''void QTextOption.__init__()'''
    def __init__(self, alignment):
        '''void QTextOption.__init__(Qt.Alignment alignment)'''
    def __init__(self, o):
        '''void QTextOption.__init__(QTextOption o)'''
    def tabs(self):
        '''list-of-QTextOption.Tab QTextOption.tabs()'''
        return [QTextOption.Tab()]
    def setTabs(self, tabStops):
        '''void QTextOption.setTabs(list-of-QTextOption.Tab tabStops)'''
    def setTabStop(self, atabStop):
        '''void QTextOption.setTabStop(float atabStop)'''
    def setFlags(self, aflags):
        '''void QTextOption.setFlags(QTextOption.Flags aflags)'''
    def setAlignment(self, aalignment):
        '''void QTextOption.setAlignment(Qt.Alignment aalignment)'''
    def useDesignMetrics(self):
        '''bool QTextOption.useDesignMetrics()'''
        return bool()
    def setUseDesignMetrics(self, b):
        '''void QTextOption.setUseDesignMetrics(bool b)'''
    def tabArray(self):
        '''list-of-float QTextOption.tabArray()'''
        return [float()]
    def setTabArray(self, tabStops):
        '''void QTextOption.setTabArray(list-of-float tabStops)'''
    def tabStop(self):
        '''float QTextOption.tabStop()'''
        return float()
    def flags(self):
        '''QTextOption.Flags QTextOption.flags()'''
        return QTextOption.Flags()
    def wrapMode(self):
        '''QTextOption.WrapMode QTextOption.wrapMode()'''
        return QTextOption.WrapMode()
    def setWrapMode(self, wrap):
        '''void QTextOption.setWrapMode(QTextOption.WrapMode wrap)'''
    def textDirection(self):
        '''Qt.LayoutDirection QTextOption.textDirection()'''
        return Qt.LayoutDirection()
    def setTextDirection(self, aDirection):
        '''void QTextOption.setTextDirection(Qt.LayoutDirection aDirection)'''
    def alignment(self):
        '''Qt.Alignment QTextOption.alignment()'''
        return Qt.Alignment()
    class Tab():
        """"""
        delimiter = None # QChar - member
        position = None # float - member
        type = None # QTextOption.TabType - member
        def __init__(self):
            '''void QTextOption.Tab.__init__()'''
        def __init__(self, pos, tabType, delim = QChar()):
            '''void QTextOption.Tab.__init__(float pos, QTextOption.TabType tabType, QChar delim = QChar())'''
        def __init__(self):
            '''QTextOption.Tab QTextOption.Tab.__init__()'''
            return QTextOption.Tab()
        def __ne__(self, other):
            '''bool QTextOption.Tab.__ne__(QTextOption.Tab other)'''
            return bool()
        def __eq__(self, other):
            '''bool QTextOption.Tab.__eq__(QTextOption.Tab other)'''
            return bool()
    class Flags():
        """"""
        def __init__(self):
            '''QTextOption.Flags QTextOption.Flags.__init__()'''
            return QTextOption.Flags()
        def __init__(self):
            '''int QTextOption.Flags.__init__()'''
            return int()
        def __init__(self):
            '''void QTextOption.Flags.__init__()'''
        def __bool__(self):
            '''int QTextOption.Flags.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QTextOption.Flags.__ne__(QTextOption.Flags f)'''
            return bool()
        def __eq__(self, f):
            '''bool QTextOption.Flags.__eq__(QTextOption.Flags f)'''
            return bool()
        def __invert__(self):
            '''QTextOption.Flags QTextOption.Flags.__invert__()'''
            return QTextOption.Flags()
        def __and__(self, mask):
            '''QTextOption.Flags QTextOption.Flags.__and__(int mask)'''
            return QTextOption.Flags()
        def __xor__(self, f):
            '''QTextOption.Flags QTextOption.Flags.__xor__(QTextOption.Flags f)'''
            return QTextOption.Flags()
        def __xor__(self, f):
            '''QTextOption.Flags QTextOption.Flags.__xor__(int f)'''
            return QTextOption.Flags()
        def __or__(self, f):
            '''QTextOption.Flags QTextOption.Flags.__or__(QTextOption.Flags f)'''
            return QTextOption.Flags()
        def __or__(self, f):
            '''QTextOption.Flags QTextOption.Flags.__or__(int f)'''
            return QTextOption.Flags()
        def __int__(self):
            '''int QTextOption.Flags.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QTextOption.Flags QTextOption.Flags.__ixor__(QTextOption.Flags f)'''
            return QTextOption.Flags()
        def __ior__(self, f):
            '''QTextOption.Flags QTextOption.Flags.__ior__(QTextOption.Flags f)'''
            return QTextOption.Flags()
        def __iand__(self, mask):
            '''QTextOption.Flags QTextOption.Flags.__iand__(int mask)'''
            return QTextOption.Flags()


class QTextTableCell():
    """"""
    def __init__(self):
        '''void QTextTableCell.__init__()'''
    def __init__(self, o):
        '''void QTextTableCell.__init__(QTextTableCell o)'''
    def __ne__(self, other):
        '''bool QTextTableCell.__ne__(QTextTableCell other)'''
        return bool()
    def __eq__(self, other):
        '''bool QTextTableCell.__eq__(QTextTableCell other)'''
        return bool()
    def tableCellFormatIndex(self):
        '''int QTextTableCell.tableCellFormatIndex()'''
        return int()
    def lastCursorPosition(self):
        '''QTextCursor QTextTableCell.lastCursorPosition()'''
        return QTextCursor()
    def firstCursorPosition(self):
        '''QTextCursor QTextTableCell.firstCursorPosition()'''
        return QTextCursor()
    def isValid(self):
        '''bool QTextTableCell.isValid()'''
        return bool()
    def columnSpan(self):
        '''int QTextTableCell.columnSpan()'''
        return int()
    def rowSpan(self):
        '''int QTextTableCell.rowSpan()'''
        return int()
    def column(self):
        '''int QTextTableCell.column()'''
        return int()
    def row(self):
        '''int QTextTableCell.row()'''
        return int()
    def setFormat(self, format):
        '''void QTextTableCell.setFormat(QTextCharFormat format)'''
    def format(self):
        '''QTextCharFormat QTextTableCell.format()'''
        return QTextCharFormat()


class QTextTable(QTextFrame):
    """"""
    def __init__(self, doc):
        '''void QTextTable.__init__(QTextDocument doc)'''
    def appendColumns(self, count):
        '''void QTextTable.appendColumns(int count)'''
    def appendRows(self, count):
        '''void QTextTable.appendRows(int count)'''
    def setFormat(self, aformat):
        '''void QTextTable.setFormat(QTextTableFormat aformat)'''
    def format(self):
        '''QTextTableFormat QTextTable.format()'''
        return QTextTableFormat()
    def rowEnd(self, c):
        '''QTextCursor QTextTable.rowEnd(QTextCursor c)'''
        return QTextCursor()
    def rowStart(self, c):
        '''QTextCursor QTextTable.rowStart(QTextCursor c)'''
        return QTextCursor()
    def cellAt(self, row, col):
        '''QTextTableCell QTextTable.cellAt(int row, int col)'''
        return QTextTableCell()
    def cellAt(self, position):
        '''QTextTableCell QTextTable.cellAt(int position)'''
        return QTextTableCell()
    def cellAt(self, c):
        '''QTextTableCell QTextTable.cellAt(QTextCursor c)'''
        return QTextTableCell()
    def columns(self):
        '''int QTextTable.columns()'''
        return int()
    def rows(self):
        '''int QTextTable.rows()'''
        return int()
    def splitCell(self, row, col, numRows, numCols):
        '''void QTextTable.splitCell(int row, int col, int numRows, int numCols)'''
    def mergeCells(self, row, col, numRows, numCols):
        '''void QTextTable.mergeCells(int row, int col, int numRows, int numCols)'''
    def mergeCells(self, cursor):
        '''void QTextTable.mergeCells(QTextCursor cursor)'''
    def removeColumns(self, pos, num):
        '''void QTextTable.removeColumns(int pos, int num)'''
    def removeRows(self, pos, num):
        '''void QTextTable.removeRows(int pos, int num)'''
    def insertColumns(self, pos, num):
        '''void QTextTable.insertColumns(int pos, int num)'''
    def insertRows(self, pos, num):
        '''void QTextTable.insertRows(int pos, int num)'''
    def resize(self, rows, cols):
        '''void QTextTable.resize(int rows, int cols)'''


class QToolBar(QWidget):
    """"""
    def __init__(self, title, parent = None):
        '''void QToolBar.__init__(QString title, QWidget parent = None)'''
    def __init__(self, parent = None):
        '''void QToolBar.__init__(QWidget parent = None)'''
    def isFloating(self):
        '''bool QToolBar.isFloating()'''
        return bool()
    def setFloatable(self, floatable):
        '''void QToolBar.setFloatable(bool floatable)'''
    def isFloatable(self):
        '''bool QToolBar.isFloatable()'''
        return bool()
    def event(self, event):
        '''bool QToolBar.event(QEvent event)'''
        return bool()
    def resizeEvent(self, event):
        '''void QToolBar.resizeEvent(QResizeEvent event)'''
    def paintEvent(self, event):
        '''void QToolBar.paintEvent(QPaintEvent event)'''
    def childEvent(self, event):
        '''void QToolBar.childEvent(QChildEvent event)'''
    def changeEvent(self, event):
        '''void QToolBar.changeEvent(QEvent event)'''
    def actionEvent(self, event):
        '''void QToolBar.actionEvent(QActionEvent event)'''
    def initStyleOption(self, option):
        '''void QToolBar.initStyleOption(QStyleOptionToolBar option)'''
    visibilityChanged = pyqtSignal() # void visibilityChanged(bool) - signal
    topLevelChanged = pyqtSignal() # void topLevelChanged(bool) - signal
    toolButtonStyleChanged = pyqtSignal() # void toolButtonStyleChanged(Qt::ToolButtonStyle) - signal
    iconSizeChanged = pyqtSignal() # void iconSizeChanged(const QSizeamp;) - signal
    orientationChanged = pyqtSignal() # void orientationChanged(Qt::Orientation) - signal
    allowedAreasChanged = pyqtSignal() # void allowedAreasChanged(Qt::ToolBarAreas) - signal
    movableChanged = pyqtSignal() # void movableChanged(bool) - signal
    actionTriggered = pyqtSignal() # void actionTriggered(QAction *) - signal
    def setToolButtonStyle(self, toolButtonStyle):
        '''void QToolBar.setToolButtonStyle(Qt.ToolButtonStyle toolButtonStyle)'''
    def setIconSize(self, iconSize):
        '''void QToolBar.setIconSize(QSize iconSize)'''
    def widgetForAction(self, action):
        '''QWidget QToolBar.widgetForAction(QAction action)'''
        return QWidget()
    def toolButtonStyle(self):
        '''Qt.ToolButtonStyle QToolBar.toolButtonStyle()'''
        return Qt.ToolButtonStyle()
    def iconSize(self):
        '''QSize QToolBar.iconSize()'''
        return QSize()
    def toggleViewAction(self):
        '''QAction QToolBar.toggleViewAction()'''
        return QAction()
    def actionAt(self, p):
        '''QAction QToolBar.actionAt(QPoint p)'''
        return QAction()
    def actionAt(self, ax, ay):
        '''QAction QToolBar.actionAt(int ax, int ay)'''
        return QAction()
    def actionGeometry(self, action):
        '''QRect QToolBar.actionGeometry(QAction action)'''
        return QRect()
    def insertWidget(self, before, widget):
        '''QAction QToolBar.insertWidget(QAction before, QWidget widget)'''
        return QAction()
    def addWidget(self, widget):
        '''QAction QToolBar.addWidget(QWidget widget)'''
        return QAction()
    def insertSeparator(self, before):
        '''QAction QToolBar.insertSeparator(QAction before)'''
        return QAction()
    def addSeparator(self):
        '''QAction QToolBar.addSeparator()'''
        return QAction()
    def addAction(self, action):
        '''void QToolBar.addAction(QAction action)'''
    def addAction(self, text):
        '''QAction QToolBar.addAction(QString text)'''
        return QAction()
    def addAction(self, icon, text):
        '''QAction QToolBar.addAction(QIcon icon, QString text)'''
        return QAction()
    def addAction(self, text, receiver, member):
        '''QAction QToolBar.addAction(QString text, QObject receiver, SLOT() member)'''
        return QAction()
    def addAction(self, text, receiver):
        '''QAction QToolBar.addAction(QString text, callable receiver)'''
        return QAction()
    def addAction(self, icon, text, receiver, member):
        '''QAction QToolBar.addAction(QIcon icon, QString text, QObject receiver, SLOT() member)'''
        return QAction()
    def addAction(self, icon, text, receiver):
        '''QAction QToolBar.addAction(QIcon icon, QString text, callable receiver)'''
        return QAction()
    def clear(self):
        '''void QToolBar.clear()'''
    def orientation(self):
        '''Qt.Orientation QToolBar.orientation()'''
        return Qt.Orientation()
    def setOrientation(self, orientation):
        '''void QToolBar.setOrientation(Qt.Orientation orientation)'''
    def isAreaAllowed(self, area):
        '''bool QToolBar.isAreaAllowed(Qt.ToolBarArea area)'''
        return bool()
    def allowedAreas(self):
        '''Qt.ToolBarAreas QToolBar.allowedAreas()'''
        return Qt.ToolBarAreas()
    def setAllowedAreas(self, areas):
        '''void QToolBar.setAllowedAreas(Qt.ToolBarAreas areas)'''
    def isMovable(self):
        '''bool QToolBar.isMovable()'''
        return bool()
    def setMovable(self, movable):
        '''void QToolBar.setMovable(bool movable)'''


class QToolBox(QFrame):
    """"""
    def __init__(self, parent = None, flags = 0):
        '''void QToolBox.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    def changeEvent(self):
        '''QEvent QToolBox.changeEvent()'''
        return QEvent()
    def showEvent(self, e):
        '''void QToolBox.showEvent(QShowEvent e)'''
    def event(self, e):
        '''bool QToolBox.event(QEvent e)'''
        return bool()
    def itemRemoved(self, index):
        '''void QToolBox.itemRemoved(int index)'''
    def itemInserted(self, index):
        '''void QToolBox.itemInserted(int index)'''
    currentChanged = pyqtSignal() # void currentChanged(int) - signal
    def setCurrentWidget(self, widget):
        '''void QToolBox.setCurrentWidget(QWidget widget)'''
    def setCurrentIndex(self, index):
        '''void QToolBox.setCurrentIndex(int index)'''
    def __len__(self):
        '''None QToolBox.__len__()'''
        return None()
    def count(self):
        '''int QToolBox.count()'''
        return int()
    def indexOf(self, widget):
        '''int QToolBox.indexOf(QWidget widget)'''
        return int()
    def widget(self, index):
        '''QWidget QToolBox.widget(int index)'''
        return QWidget()
    def currentWidget(self):
        '''QWidget QToolBox.currentWidget()'''
        return QWidget()
    def currentIndex(self):
        '''int QToolBox.currentIndex()'''
        return int()
    def itemToolTip(self, index):
        '''QString QToolBox.itemToolTip(int index)'''
        return QString()
    def setItemToolTip(self, index, toolTip):
        '''void QToolBox.setItemToolTip(int index, QString toolTip)'''
    def itemIcon(self, index):
        '''QIcon QToolBox.itemIcon(int index)'''
        return QIcon()
    def setItemIcon(self, index, icon):
        '''void QToolBox.setItemIcon(int index, QIcon icon)'''
    def itemText(self, index):
        '''QString QToolBox.itemText(int index)'''
        return QString()
    def setItemText(self, index, text):
        '''void QToolBox.setItemText(int index, QString text)'''
    def isItemEnabled(self, index):
        '''bool QToolBox.isItemEnabled(int index)'''
        return bool()
    def setItemEnabled(self, index, enabled):
        '''void QToolBox.setItemEnabled(int index, bool enabled)'''
    def removeItem(self, index):
        '''void QToolBox.removeItem(int index)'''
    def insertItem(self, index, item, text):
        '''int QToolBox.insertItem(int index, QWidget item, QString text)'''
        return int()
    def insertItem(self, index, widget, icon, text):
        '''int QToolBox.insertItem(int index, QWidget widget, QIcon icon, QString text)'''
        return int()
    def addItem(self, item, text):
        '''int QToolBox.addItem(QWidget item, QString text)'''
        return int()
    def addItem(self, item, iconSet, text):
        '''int QToolBox.addItem(QWidget item, QIcon iconSet, QString text)'''
        return int()


class QToolButton(QAbstractButton):
    """"""
    # Enum QToolButton.ToolButtonPopupMode
    DelayedPopup = 0
    MenuButtonPopup = 0
    InstantPopup = 0

    def __init__(self, parent = None):
        '''void QToolButton.__init__(QWidget parent = None)'''
    def hitButton(self, pos):
        '''bool QToolButton.hitButton(QPoint pos)'''
        return bool()
    def nextCheckState(self):
        '''void QToolButton.nextCheckState()'''
    def mouseReleaseEvent(self):
        '''QMouseEvent QToolButton.mouseReleaseEvent()'''
        return QMouseEvent()
    def changeEvent(self):
        '''QEvent QToolButton.changeEvent()'''
        return QEvent()
    def timerEvent(self):
        '''QTimerEvent QToolButton.timerEvent()'''
        return QTimerEvent()
    def leaveEvent(self):
        '''QEvent QToolButton.leaveEvent()'''
        return QEvent()
    def enterEvent(self):
        '''QEvent QToolButton.enterEvent()'''
        return QEvent()
    def actionEvent(self):
        '''QActionEvent QToolButton.actionEvent()'''
        return QActionEvent()
    def paintEvent(self):
        '''QPaintEvent QToolButton.paintEvent()'''
        return QPaintEvent()
    def mousePressEvent(self):
        '''QMouseEvent QToolButton.mousePressEvent()'''
        return QMouseEvent()
    def event(self, e):
        '''bool QToolButton.event(QEvent e)'''
        return bool()
    def initStyleOption(self, option):
        '''void QToolButton.initStyleOption(QStyleOptionToolButton option)'''
    triggered = pyqtSignal() # void triggered(QAction *) - signal
    def setDefaultAction(self):
        '''QAction QToolButton.setDefaultAction()'''
        return QAction()
    def setToolButtonStyle(self, style):
        '''void QToolButton.setToolButtonStyle(Qt.ToolButtonStyle style)'''
    def showMenu(self):
        '''void QToolButton.showMenu()'''
    def autoRaise(self):
        '''bool QToolButton.autoRaise()'''
        return bool()
    def setAutoRaise(self, enable):
        '''void QToolButton.setAutoRaise(bool enable)'''
    def defaultAction(self):
        '''QAction QToolButton.defaultAction()'''
        return QAction()
    def popupMode(self):
        '''QToolButton.ToolButtonPopupMode QToolButton.popupMode()'''
        return QToolButton.ToolButtonPopupMode()
    def setPopupMode(self, mode):
        '''void QToolButton.setPopupMode(QToolButton.ToolButtonPopupMode mode)'''
    def menu(self):
        '''QMenu QToolButton.menu()'''
        return QMenu()
    def setMenu(self, menu):
        '''void QToolButton.setMenu(QMenu menu)'''
    def setArrowType(self, type):
        '''void QToolButton.setArrowType(Qt.ArrowType type)'''
    def arrowType(self):
        '''Qt.ArrowType QToolButton.arrowType()'''
        return Qt.ArrowType()
    def toolButtonStyle(self):
        '''Qt.ToolButtonStyle QToolButton.toolButtonStyle()'''
        return Qt.ToolButtonStyle()
    def minimumSizeHint(self):
        '''QSize QToolButton.minimumSizeHint()'''
        return QSize()
    def sizeHint(self):
        '''QSize QToolButton.sizeHint()'''
        return QSize()


class QToolTip():
    """"""
    def __init__(self):
        '''QToolTip QToolTip.__init__()'''
        return QToolTip()
    def text(self):
        '''static QString QToolTip.text()'''
        return QString()
    def isVisible(self):
        '''static bool QToolTip.isVisible()'''
        return bool()
    def setFont(self):
        '''static QFont QToolTip.setFont()'''
        return QFont()
    def font(self):
        '''static QFont QToolTip.font()'''
        return QFont()
    def setPalette(self):
        '''static QPalette QToolTip.setPalette()'''
        return QPalette()
    def hideText(self):
        '''static void QToolTip.hideText()'''
    def palette(self):
        '''static QPalette QToolTip.palette()'''
        return QPalette()
    def showText(self, pos, text, widget = None):
        '''static void QToolTip.showText(QPoint pos, QString text, QWidget widget = None)'''
    def showText(self, pos, text, w, rect):
        '''static void QToolTip.showText(QPoint pos, QString text, QWidget w, QRect rect)'''


class QTransform():
    """"""
    # Enum QTransform.TransformationType
    TxNone = 0
    TxTranslate = 0
    TxScale = 0
    TxRotate = 0
    TxShear = 0
    TxProject = 0

    def __init__(self):
        '''void QTransform.__init__()'''
    def __init__(self, m11, m12, m13, m21, m22, m23, m31, m32, m33 = 1):
        '''void QTransform.__init__(float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33 = 1)'''
    def __init__(self, h11, h12, h13, h21, h22, h23):
        '''void QTransform.__init__(float h11, float h12, float h13, float h21, float h22, float h23)'''
    def __init__(self, mtx):
        '''void QTransform.__init__(QMatrix mtx)'''
    def __init__(self):
        '''QTransform QTransform.__init__()'''
        return QTransform()
    def __div__(self, n):
        '''QTransform QTransform.__div__(float n)'''
        return QTransform()
    def __add__(self, n):
        '''QTransform QTransform.__add__(float n)'''
        return QTransform()
    def __sub__(self, n):
        '''QTransform QTransform.__sub__(float n)'''
        return QTransform()
    def __isub__(self, num):
        '''QTransform QTransform.__isub__(float num)'''
        return QTransform()
    def __iadd__(self, num):
        '''QTransform QTransform.__iadd__(float num)'''
        return QTransform()
    def __idiv__(self, div):
        '''QTransform QTransform.__idiv__(float div)'''
        return QTransform()
    def fromScale(self, dx, dy):
        '''static QTransform QTransform.fromScale(float dx, float dy)'''
        return QTransform()
    def fromTranslate(self, dx, dy):
        '''static QTransform QTransform.fromTranslate(float dx, float dy)'''
        return QTransform()
    def dy(self):
        '''float QTransform.dy()'''
        return float()
    def dx(self):
        '''float QTransform.dx()'''
        return float()
    def m33(self):
        '''float QTransform.m33()'''
        return float()
    def m32(self):
        '''float QTransform.m32()'''
        return float()
    def m31(self):
        '''float QTransform.m31()'''
        return float()
    def m23(self):
        '''float QTransform.m23()'''
        return float()
    def m22(self):
        '''float QTransform.m22()'''
        return float()
    def m21(self):
        '''float QTransform.m21()'''
        return float()
    def m13(self):
        '''float QTransform.m13()'''
        return float()
    def m12(self):
        '''float QTransform.m12()'''
        return float()
    def m11(self):
        '''float QTransform.m11()'''
        return float()
    def det(self):
        '''float QTransform.det()'''
        return float()
    def determinant(self):
        '''float QTransform.determinant()'''
        return float()
    def isTranslating(self):
        '''bool QTransform.isTranslating()'''
        return bool()
    def isRotating(self):
        '''bool QTransform.isRotating()'''
        return bool()
    def isScaling(self):
        '''bool QTransform.isScaling()'''
        return bool()
    def isInvertible(self):
        '''bool QTransform.isInvertible()'''
        return bool()
    def isIdentity(self):
        '''bool QTransform.isIdentity()'''
        return bool()
    def isAffine(self):
        '''bool QTransform.isAffine()'''
        return bool()
    def toAffine(self):
        '''QMatrix QTransform.toAffine()'''
        return QMatrix()
    def mapRect(self):
        '''QRect QTransform.mapRect()'''
        return QRect()
    def mapRect(self):
        '''QRectF QTransform.mapRect()'''
        return QRectF()
    def mapToPolygon(self, r):
        '''QPolygon QTransform.mapToPolygon(QRect r)'''
        return QPolygon()
    def map(self, x, y, tx, ty):
        '''void QTransform.map(int x, int y, int tx, int ty)'''
    def map(self, x, y, tx, ty):
        '''void QTransform.map(float x, float y, float tx, float ty)'''
    def map(self, p):
        '''QPoint QTransform.map(QPoint p)'''
        return QPoint()
    def map(self, p):
        '''QPointF QTransform.map(QPointF p)'''
        return QPointF()
    def map(self, l):
        '''QLine QTransform.map(QLine l)'''
        return QLine()
    def map(self, l):
        '''QLineF QTransform.map(QLineF l)'''
        return QLineF()
    def map(self, a):
        '''QPolygonF QTransform.map(QPolygonF a)'''
        return QPolygonF()
    def map(self, a):
        '''QPolygon QTransform.map(QPolygon a)'''
        return QPolygon()
    def map(self, r):
        '''QRegion QTransform.map(QRegion r)'''
        return QRegion()
    def map(self, p):
        '''QPainterPath QTransform.map(QPainterPath p)'''
        return QPainterPath()
    def reset(self):
        '''void QTransform.reset()'''
    def __mul__(self, o):
        '''QTransform QTransform.__mul__(QTransform o)'''
        return QTransform()
    def __mul__(self, n):
        '''QTransform QTransform.__mul__(float n)'''
        return QTransform()
    def __imul__(self):
        '''QTransform QTransform.__imul__()'''
        return QTransform()
    def __imul__(self, num):
        '''QTransform QTransform.__imul__(float num)'''
        return QTransform()
    def __ne__(self):
        '''QTransform QTransform.__ne__()'''
        return QTransform()
    def __eq__(self):
        '''QTransform QTransform.__eq__()'''
        return QTransform()
    def quadToQuad(self, one, two, result):
        '''static bool QTransform.quadToQuad(QPolygonF one, QPolygonF two, QTransform result)'''
        return bool()
    def quadToSquare(self, quad, result):
        '''static bool QTransform.quadToSquare(QPolygonF quad, QTransform result)'''
        return bool()
    def squareToQuad(self, square, result):
        '''static bool QTransform.squareToQuad(QPolygonF square, QTransform result)'''
        return bool()
    def rotateRadians(self, angle, axis = None):
        '''QTransform QTransform.rotateRadians(float angle, Qt.Axis axis = Qt.ZAxis)'''
        return QTransform()
    def rotate(self, angle, axis = None):
        '''QTransform QTransform.rotate(float angle, Qt.Axis axis = Qt.ZAxis)'''
        return QTransform()
    def shear(self, sh, sv):
        '''QTransform QTransform.shear(float sh, float sv)'''
        return QTransform()
    def scale(self, sx, sy):
        '''QTransform QTransform.scale(float sx, float sy)'''
        return QTransform()
    def translate(self, dx, dy):
        '''QTransform QTransform.translate(float dx, float dy)'''
        return QTransform()
    def transposed(self):
        '''QTransform QTransform.transposed()'''
        return QTransform()
    def adjoint(self):
        '''QTransform QTransform.adjoint()'''
        return QTransform()
    def inverted(self, invertible):
        '''QTransform QTransform.inverted(bool invertible)'''
        return QTransform()
    def setMatrix(self, m11, m12, m13, m21, m22, m23, m31, m32, m33):
        '''void QTransform.setMatrix(float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33)'''
    def type(self):
        '''QTransform.TransformationType QTransform.type()'''
        return QTransform.TransformationType()


class QTreeView(QAbstractItemView):
    """"""
    def __init__(self, parent = None):
        '''void QTreeView.__init__(QWidget parent = None)'''
    def setHeaderHidden(self, hide):
        '''void QTreeView.setHeaderHidden(bool hide)'''
    def isHeaderHidden(self):
        '''bool QTreeView.isHeaderHidden()'''
        return bool()
    def setExpandsOnDoubleClick(self, enable):
        '''void QTreeView.setExpandsOnDoubleClick(bool enable)'''
    def expandsOnDoubleClick(self):
        '''bool QTreeView.expandsOnDoubleClick()'''
        return bool()
    def currentChanged(self, current, previous):
        '''void QTreeView.currentChanged(QModelIndex current, QModelIndex previous)'''
    def selectionChanged(self, selected, deselected):
        '''void QTreeView.selectionChanged(QItemSelection selected, QItemSelection deselected)'''
    def rowHeight(self, index):
        '''int QTreeView.rowHeight(QModelIndex index)'''
        return int()
    def viewportEvent(self, event):
        '''bool QTreeView.viewportEvent(QEvent event)'''
        return bool()
    def dragMoveEvent(self, event):
        '''void QTreeView.dragMoveEvent(QDragMoveEvent event)'''
    def expandToDepth(self, depth):
        '''void QTreeView.expandToDepth(int depth)'''
    def wordWrap(self):
        '''bool QTreeView.wordWrap()'''
        return bool()
    def setWordWrap(self, on):
        '''void QTreeView.setWordWrap(bool on)'''
    def setFirstColumnSpanned(self, row, parent, span):
        '''void QTreeView.setFirstColumnSpanned(int row, QModelIndex parent, bool span)'''
    def isFirstColumnSpanned(self, row, parent):
        '''bool QTreeView.isFirstColumnSpanned(int row, QModelIndex parent)'''
        return bool()
    def setAutoExpandDelay(self, delay):
        '''void QTreeView.setAutoExpandDelay(int delay)'''
    def autoExpandDelay(self):
        '''int QTreeView.autoExpandDelay()'''
        return int()
    def allColumnsShowFocus(self):
        '''bool QTreeView.allColumnsShowFocus()'''
        return bool()
    def setAllColumnsShowFocus(self, enable):
        '''void QTreeView.setAllColumnsShowFocus(bool enable)'''
    def isAnimated(self):
        '''bool QTreeView.isAnimated()'''
        return bool()
    def setAnimated(self, enable):
        '''void QTreeView.setAnimated(bool enable)'''
    def isSortingEnabled(self):
        '''bool QTreeView.isSortingEnabled()'''
        return bool()
    def setSortingEnabled(self, enable):
        '''void QTreeView.setSortingEnabled(bool enable)'''
    def setColumnWidth(self, column, width):
        '''void QTreeView.setColumnWidth(int column, int width)'''
    def isIndexHidden(self, index):
        '''bool QTreeView.isIndexHidden(QModelIndex index)'''
        return bool()
    def horizontalScrollbarAction(self, action):
        '''void QTreeView.horizontalScrollbarAction(int action)'''
    def indexRowSizeHint(self, index):
        '''int QTreeView.indexRowSizeHint(QModelIndex index)'''
        return int()
    def sizeHintForColumn(self, column):
        '''int QTreeView.sizeHintForColumn(int column)'''
        return int()
    def updateGeometries(self):
        '''void QTreeView.updateGeometries()'''
    def keyPressEvent(self, event):
        '''void QTreeView.keyPressEvent(QKeyEvent event)'''
    def mouseDoubleClickEvent(self, e):
        '''void QTreeView.mouseDoubleClickEvent(QMouseEvent e)'''
    def mouseMoveEvent(self, event):
        '''void QTreeView.mouseMoveEvent(QMouseEvent event)'''
    def mousePressEvent(self, e):
        '''void QTreeView.mousePressEvent(QMouseEvent e)'''
    def drawTree(self, painter, region):
        '''void QTreeView.drawTree(QPainter painter, QRegion region)'''
    def drawBranches(self, painter, rect, index):
        '''void QTreeView.drawBranches(QPainter painter, QRect rect, QModelIndex index)'''
    def drawRow(self, painter, options, index):
        '''void QTreeView.drawRow(QPainter painter, QStyleOptionViewItem options, QModelIndex index)'''
    def mouseReleaseEvent(self, event):
        '''void QTreeView.mouseReleaseEvent(QMouseEvent event)'''
    def timerEvent(self, event):
        '''void QTreeView.timerEvent(QTimerEvent event)'''
    def paintEvent(self, e):
        '''void QTreeView.paintEvent(QPaintEvent e)'''
    def selectedIndexes(self):
        '''list-of-QModelIndex QTreeView.selectedIndexes()'''
        return [QModelIndex()]
    def visualRegionForSelection(self, selection):
        '''QRegion QTreeView.visualRegionForSelection(QItemSelection selection)'''
        return QRegion()
    def setSelection(self, rect, command):
        '''void QTreeView.setSelection(QRect rect, QItemSelectionModel.SelectionFlags command)'''
    def verticalOffset(self):
        '''int QTreeView.verticalOffset()'''
        return int()
    def horizontalOffset(self):
        '''int QTreeView.horizontalOffset()'''
        return int()
    def moveCursor(self, cursorAction, modifiers):
        '''QModelIndex QTreeView.moveCursor(QAbstractItemView.CursorAction cursorAction, Qt.KeyboardModifiers modifiers)'''
        return QModelIndex()
    def rowsAboutToBeRemoved(self, parent, start, end):
        '''void QTreeView.rowsAboutToBeRemoved(QModelIndex parent, int start, int end)'''
    def rowsInserted(self, parent, start, end):
        '''void QTreeView.rowsInserted(QModelIndex parent, int start, int end)'''
    def scrollContentsBy(self, dx, dy):
        '''void QTreeView.scrollContentsBy(int dx, int dy)'''
    def rowsRemoved(self, parent, first, last):
        '''void QTreeView.rowsRemoved(QModelIndex parent, int first, int last)'''
    def reexpand(self):
        '''void QTreeView.reexpand()'''
    def columnMoved(self):
        '''void QTreeView.columnMoved()'''
    def columnCountChanged(self, oldCount, newCount):
        '''void QTreeView.columnCountChanged(int oldCount, int newCount)'''
    def columnResized(self, column, oldSize, newSize):
        '''void QTreeView.columnResized(int column, int oldSize, int newSize)'''
    def selectAll(self):
        '''void QTreeView.selectAll()'''
    def sortByColumn(self, column):
        '''void QTreeView.sortByColumn(int column)'''
    def sortByColumn(self, column, order):
        '''void QTreeView.sortByColumn(int column, Qt.SortOrder order)'''
    def resizeColumnToContents(self, column):
        '''void QTreeView.resizeColumnToContents(int column)'''
    def collapseAll(self):
        '''void QTreeView.collapseAll()'''
    def collapse(self, index):
        '''void QTreeView.collapse(QModelIndex index)'''
    def expandAll(self):
        '''void QTreeView.expandAll()'''
    def expand(self, index):
        '''void QTreeView.expand(QModelIndex index)'''
    def showColumn(self, column):
        '''void QTreeView.showColumn(int column)'''
    def hideColumn(self, column):
        '''void QTreeView.hideColumn(int column)'''
    def dataChanged(self, topLeft, bottomRight):
        '''void QTreeView.dataChanged(QModelIndex topLeft, QModelIndex bottomRight)'''
    collapsed = pyqtSignal() # void collapsed(const QModelIndexamp;) - signal
    expanded = pyqtSignal() # void expanded(const QModelIndexamp;) - signal
    def reset(self):
        '''void QTreeView.reset()'''
    def indexBelow(self, index):
        '''QModelIndex QTreeView.indexBelow(QModelIndex index)'''
        return QModelIndex()
    def indexAbove(self, index):
        '''QModelIndex QTreeView.indexAbove(QModelIndex index)'''
        return QModelIndex()
    def indexAt(self, p):
        '''QModelIndex QTreeView.indexAt(QPoint p)'''
        return QModelIndex()
    def scrollTo(self, index, hint = None):
        '''void QTreeView.scrollTo(QModelIndex index, QAbstractItemView.ScrollHint hint = QAbstractItemView.EnsureVisible)'''
    def visualRect(self, index):
        '''QRect QTreeView.visualRect(QModelIndex index)'''
        return QRect()
    def keyboardSearch(self, search):
        '''void QTreeView.keyboardSearch(QString search)'''
    def setExpanded(self, index, expand):
        '''void QTreeView.setExpanded(QModelIndex index, bool expand)'''
    def isExpanded(self, index):
        '''bool QTreeView.isExpanded(QModelIndex index)'''
        return bool()
    def setRowHidden(self, row, parent, hide):
        '''void QTreeView.setRowHidden(int row, QModelIndex parent, bool hide)'''
    def isRowHidden(self, row, parent):
        '''bool QTreeView.isRowHidden(int row, QModelIndex parent)'''
        return bool()
    def setColumnHidden(self, column, hide):
        '''void QTreeView.setColumnHidden(int column, bool hide)'''
    def isColumnHidden(self, column):
        '''bool QTreeView.isColumnHidden(int column)'''
        return bool()
    def columnAt(self, x):
        '''int QTreeView.columnAt(int x)'''
        return int()
    def columnWidth(self, column):
        '''int QTreeView.columnWidth(int column)'''
        return int()
    def columnViewportPosition(self, column):
        '''int QTreeView.columnViewportPosition(int column)'''
        return int()
    def setItemsExpandable(self, enable):
        '''void QTreeView.setItemsExpandable(bool enable)'''
    def itemsExpandable(self):
        '''bool QTreeView.itemsExpandable()'''
        return bool()
    def setUniformRowHeights(self, uniform):
        '''void QTreeView.setUniformRowHeights(bool uniform)'''
    def uniformRowHeights(self):
        '''bool QTreeView.uniformRowHeights()'''
        return bool()
    def setRootIsDecorated(self, show):
        '''void QTreeView.setRootIsDecorated(bool show)'''
    def rootIsDecorated(self):
        '''bool QTreeView.rootIsDecorated()'''
        return bool()
    def setIndentation(self, i):
        '''void QTreeView.setIndentation(int i)'''
    def indentation(self):
        '''int QTreeView.indentation()'''
        return int()
    def setHeader(self, header):
        '''void QTreeView.setHeader(QHeaderView header)'''
    def header(self):
        '''QHeaderView QTreeView.header()'''
        return QHeaderView()
    def setSelectionModel(self, selectionModel):
        '''void QTreeView.setSelectionModel(QItemSelectionModel selectionModel)'''
    def setRootIndex(self, index):
        '''void QTreeView.setRootIndex(QModelIndex index)'''
    def setModel(self, model):
        '''void QTreeView.setModel(QAbstractItemModel model)'''


class QTreeWidgetItem():
    """"""
    # Enum QTreeWidgetItem.ChildIndicatorPolicy
    ShowIndicator = 0
    DontShowIndicator = 0
    DontShowIndicatorWhenChildless = 0

    # Enum QTreeWidgetItem.ItemType
    Type = 0
    UserType = 0

    def __init__(self, type = None):
        '''void QTreeWidgetItem.__init__(int type = QTreeWidgetItem.Type)'''
    def __init__(self, strings, type = None):
        '''void QTreeWidgetItem.__init__(QStringList strings, int type = QTreeWidgetItem.Type)'''
    def __init__(self, parent, type = None):
        '''void QTreeWidgetItem.__init__(QTreeWidget parent, int type = QTreeWidgetItem.Type)'''
    def __init__(self, parent, strings, type = None):
        '''void QTreeWidgetItem.__init__(QTreeWidget parent, QStringList strings, int type = QTreeWidgetItem.Type)'''
    def __init__(self, parent, preceding, type = None):
        '''void QTreeWidgetItem.__init__(QTreeWidget parent, QTreeWidgetItem preceding, int type = QTreeWidgetItem.Type)'''
    def __init__(self, parent, type = None):
        '''void QTreeWidgetItem.__init__(QTreeWidgetItem parent, int type = QTreeWidgetItem.Type)'''
    def __init__(self, parent, strings, type = None):
        '''void QTreeWidgetItem.__init__(QTreeWidgetItem parent, QStringList strings, int type = QTreeWidgetItem.Type)'''
    def __init__(self, parent, preceding, type = None):
        '''void QTreeWidgetItem.__init__(QTreeWidgetItem parent, QTreeWidgetItem preceding, int type = QTreeWidgetItem.Type)'''
    def __init__(self, other):
        '''void QTreeWidgetItem.__init__(QTreeWidgetItem other)'''
    def __ge__(self, other):
        '''bool QTreeWidgetItem.__ge__(QTreeWidgetItem other)'''
        return bool()
    def emitDataChanged(self):
        '''void QTreeWidgetItem.emitDataChanged()'''
    def isDisabled(self):
        '''bool QTreeWidgetItem.isDisabled()'''
        return bool()
    def setDisabled(self, disabled):
        '''void QTreeWidgetItem.setDisabled(bool disabled)'''
    def isFirstColumnSpanned(self):
        '''bool QTreeWidgetItem.isFirstColumnSpanned()'''
        return bool()
    def setFirstColumnSpanned(self, aspan):
        '''void QTreeWidgetItem.setFirstColumnSpanned(bool aspan)'''
    def removeChild(self, child):
        '''void QTreeWidgetItem.removeChild(QTreeWidgetItem child)'''
    def childIndicatorPolicy(self):
        '''QTreeWidgetItem.ChildIndicatorPolicy QTreeWidgetItem.childIndicatorPolicy()'''
        return QTreeWidgetItem.ChildIndicatorPolicy()
    def setChildIndicatorPolicy(self, policy):
        '''void QTreeWidgetItem.setChildIndicatorPolicy(QTreeWidgetItem.ChildIndicatorPolicy policy)'''
    def isExpanded(self):
        '''bool QTreeWidgetItem.isExpanded()'''
        return bool()
    def setExpanded(self, aexpand):
        '''void QTreeWidgetItem.setExpanded(bool aexpand)'''
    def isHidden(self):
        '''bool QTreeWidgetItem.isHidden()'''
        return bool()
    def setHidden(self, ahide):
        '''void QTreeWidgetItem.setHidden(bool ahide)'''
    def isSelected(self):
        '''bool QTreeWidgetItem.isSelected()'''
        return bool()
    def setSelected(self, aselect):
        '''void QTreeWidgetItem.setSelected(bool aselect)'''
    def sortChildren(self, column, order):
        '''void QTreeWidgetItem.sortChildren(int column, Qt.SortOrder order)'''
    def setForeground(self, column, brush):
        '''void QTreeWidgetItem.setForeground(int column, QBrush brush)'''
    def foreground(self, column):
        '''QBrush QTreeWidgetItem.foreground(int column)'''
        return QBrush()
    def setBackground(self, column, brush):
        '''void QTreeWidgetItem.setBackground(int column, QBrush brush)'''
    def background(self, column):
        '''QBrush QTreeWidgetItem.background(int column)'''
        return QBrush()
    def takeChildren(self):
        '''list-of-QTreeWidgetItem QTreeWidgetItem.takeChildren()'''
        return [QTreeWidgetItem()]
    def insertChildren(self, index, children):
        '''void QTreeWidgetItem.insertChildren(int index, list-of-QTreeWidgetItem children)'''
    def addChildren(self, children):
        '''void QTreeWidgetItem.addChildren(list-of-QTreeWidgetItem children)'''
    def setSizeHint(self, column, size):
        '''void QTreeWidgetItem.setSizeHint(int column, QSize size)'''
    def sizeHint(self, column):
        '''QSize QTreeWidgetItem.sizeHint(int column)'''
        return QSize()
    def indexOfChild(self, achild):
        '''int QTreeWidgetItem.indexOfChild(QTreeWidgetItem achild)'''
        return int()
    def setFont(self, column, afont):
        '''void QTreeWidgetItem.setFont(int column, QFont afont)'''
    def setWhatsThis(self, column, awhatsThis):
        '''void QTreeWidgetItem.setWhatsThis(int column, QString awhatsThis)'''
    def setToolTip(self, column, atoolTip):
        '''void QTreeWidgetItem.setToolTip(int column, QString atoolTip)'''
    def setStatusTip(self, column, astatusTip):
        '''void QTreeWidgetItem.setStatusTip(int column, QString astatusTip)'''
    def setIcon(self, column, aicon):
        '''void QTreeWidgetItem.setIcon(int column, QIcon aicon)'''
    def setText(self, column, atext):
        '''void QTreeWidgetItem.setText(int column, QString atext)'''
    def setFlags(self, aflags):
        '''void QTreeWidgetItem.setFlags(Qt.ItemFlags aflags)'''
    def type(self):
        '''int QTreeWidgetItem.type()'''
        return int()
    def takeChild(self, index):
        '''QTreeWidgetItem QTreeWidgetItem.takeChild(int index)'''
        return QTreeWidgetItem()
    def insertChild(self, index, child):
        '''void QTreeWidgetItem.insertChild(int index, QTreeWidgetItem child)'''
    def addChild(self, child):
        '''void QTreeWidgetItem.addChild(QTreeWidgetItem child)'''
    def columnCount(self):
        '''int QTreeWidgetItem.columnCount()'''
        return int()
    def childCount(self):
        '''int QTreeWidgetItem.childCount()'''
        return int()
    def child(self, index):
        '''QTreeWidgetItem QTreeWidgetItem.child(int index)'''
        return QTreeWidgetItem()
    def parent(self):
        '''QTreeWidgetItem QTreeWidgetItem.parent()'''
        return QTreeWidgetItem()
    def write(self, out):
        '''void QTreeWidgetItem.write(QDataStream out)'''
    def read(self, in_):
        '''void QTreeWidgetItem.read(QDataStream in)'''
    def __lt__(self, other):
        '''bool QTreeWidgetItem.__lt__(QTreeWidgetItem other)'''
        return bool()
    def setData(self, column, role, value):
        '''void QTreeWidgetItem.setData(int column, int role, QVariant value)'''
    def data(self, column, role):
        '''QVariant QTreeWidgetItem.data(int column, int role)'''
        return QVariant()
    def setCheckState(self, column, state):
        '''void QTreeWidgetItem.setCheckState(int column, Qt.CheckState state)'''
    def checkState(self, column):
        '''Qt.CheckState QTreeWidgetItem.checkState(int column)'''
        return Qt.CheckState()
    def setTextColor(self, column, color):
        '''void QTreeWidgetItem.setTextColor(int column, QColor color)'''
    def textColor(self, column):
        '''QColor QTreeWidgetItem.textColor(int column)'''
        return QColor()
    def setBackgroundColor(self, column, color):
        '''void QTreeWidgetItem.setBackgroundColor(int column, QColor color)'''
    def backgroundColor(self, column):
        '''QColor QTreeWidgetItem.backgroundColor(int column)'''
        return QColor()
    def setTextAlignment(self, column, alignment):
        '''void QTreeWidgetItem.setTextAlignment(int column, int alignment)'''
    def textAlignment(self, column):
        '''int QTreeWidgetItem.textAlignment(int column)'''
        return int()
    def font(self, column):
        '''QFont QTreeWidgetItem.font(int column)'''
        return QFont()
    def whatsThis(self, column):
        '''QString QTreeWidgetItem.whatsThis(int column)'''
        return QString()
    def toolTip(self, column):
        '''QString QTreeWidgetItem.toolTip(int column)'''
        return QString()
    def statusTip(self, column):
        '''QString QTreeWidgetItem.statusTip(int column)'''
        return QString()
    def icon(self, column):
        '''QIcon QTreeWidgetItem.icon(int column)'''
        return QIcon()
    def text(self, column):
        '''QString QTreeWidgetItem.text(int column)'''
        return QString()
    def flags(self):
        '''Qt.ItemFlags QTreeWidgetItem.flags()'''
        return Qt.ItemFlags()
    def treeWidget(self):
        '''QTreeWidget QTreeWidgetItem.treeWidget()'''
        return QTreeWidget()
    def clone(self):
        '''QTreeWidgetItem QTreeWidgetItem.clone()'''
        return QTreeWidgetItem()


class QTreeWidget(QTreeView):
    """"""
    def __init__(self, parent = None):
        '''void QTreeWidget.__init__(QWidget parent = None)'''
    def setSelectionModel(self, selectionModel):
        '''void QTreeWidget.setSelectionModel(QItemSelectionModel selectionModel)'''
    def removeItemWidget(self, item, column):
        '''void QTreeWidget.removeItemWidget(QTreeWidgetItem item, int column)'''
    def itemBelow(self, item):
        '''QTreeWidgetItem QTreeWidget.itemBelow(QTreeWidgetItem item)'''
        return QTreeWidgetItem()
    def itemAbove(self, item):
        '''QTreeWidgetItem QTreeWidget.itemAbove(QTreeWidgetItem item)'''
        return QTreeWidgetItem()
    def setFirstItemColumnSpanned(self, item, span):
        '''void QTreeWidget.setFirstItemColumnSpanned(QTreeWidgetItem item, bool span)'''
    def isFirstItemColumnSpanned(self, item):
        '''bool QTreeWidget.isFirstItemColumnSpanned(QTreeWidgetItem item)'''
        return bool()
    def setHeaderLabel(self, alabel):
        '''void QTreeWidget.setHeaderLabel(QString alabel)'''
    def invisibleRootItem(self):
        '''QTreeWidgetItem QTreeWidget.invisibleRootItem()'''
        return QTreeWidgetItem()
    def dropEvent(self, event):
        '''void QTreeWidget.dropEvent(QDropEvent event)'''
    def event(self, e):
        '''bool QTreeWidget.event(QEvent e)'''
        return bool()
    def itemFromIndex(self, index):
        '''QTreeWidgetItem QTreeWidget.itemFromIndex(QModelIndex index)'''
        return QTreeWidgetItem()
    def indexFromItem(self, item, column = 0):
        '''QModelIndex QTreeWidget.indexFromItem(QTreeWidgetItem item, int column = 0)'''
        return QModelIndex()
    def items(self, data):
        '''list-of-QTreeWidgetItem QTreeWidget.items(QMimeData data)'''
        return [QTreeWidgetItem()]
    def supportedDropActions(self):
        '''Qt.DropActions QTreeWidget.supportedDropActions()'''
        return Qt.DropActions()
    def dropMimeData(self, parent, index, data, action):
        '''bool QTreeWidget.dropMimeData(QTreeWidgetItem parent, int index, QMimeData data, Qt.DropAction action)'''
        return bool()
    def mimeData(self, items):
        '''QMimeData QTreeWidget.mimeData(list-of-QTreeWidgetItem items)'''
        return QMimeData()
    def mimeTypes(self):
        '''QStringList QTreeWidget.mimeTypes()'''
        return QStringList()
    itemSelectionChanged = pyqtSignal() # void itemSelectionChanged() - signal
    currentItemChanged = pyqtSignal() # void currentItemChanged(QTreeWidgetItem *,QTreeWidgetItem *) - signal
    itemCollapsed = pyqtSignal() # void itemCollapsed(QTreeWidgetItem *) - signal
    itemExpanded = pyqtSignal() # void itemExpanded(QTreeWidgetItem *) - signal
    itemChanged = pyqtSignal() # void itemChanged(QTreeWidgetItem *,int) - signal
    itemEntered = pyqtSignal() # void itemEntered(QTreeWidgetItem *,int) - signal
    itemActivated = pyqtSignal() # void itemActivated(QTreeWidgetItem *,int) - signal
    itemDoubleClicked = pyqtSignal() # void itemDoubleClicked(QTreeWidgetItem *,int) - signal
    itemClicked = pyqtSignal() # void itemClicked(QTreeWidgetItem *,int) - signal
    itemPressed = pyqtSignal() # void itemPressed(QTreeWidgetItem *,int) - signal
    def clear(self):
        '''void QTreeWidget.clear()'''
    def collapseItem(self, item):
        '''void QTreeWidget.collapseItem(QTreeWidgetItem item)'''
    def expandItem(self, item):
        '''void QTreeWidget.expandItem(QTreeWidgetItem item)'''
    def scrollToItem(self, item, hint = None):
        '''void QTreeWidget.scrollToItem(QTreeWidgetItem item, QAbstractItemView.ScrollHint hint = QAbstractItemView.EnsureVisible)'''
    def setItemExpanded(self, item, expand):
        '''void QTreeWidget.setItemExpanded(QTreeWidgetItem item, bool expand)'''
    def isItemExpanded(self, item):
        '''bool QTreeWidget.isItemExpanded(QTreeWidgetItem item)'''
        return bool()
    def setItemHidden(self, item, hide):
        '''void QTreeWidget.setItemHidden(QTreeWidgetItem item, bool hide)'''
    def isItemHidden(self, item):
        '''bool QTreeWidget.isItemHidden(QTreeWidgetItem item)'''
        return bool()
    def findItems(self, text, flags, column = 0):
        '''list-of-QTreeWidgetItem QTreeWidget.findItems(QString text, Qt.MatchFlags flags, int column = 0)'''
        return [QTreeWidgetItem()]
    def selectedItems(self):
        '''list-of-QTreeWidgetItem QTreeWidget.selectedItems()'''
        return [QTreeWidgetItem()]
    def setItemSelected(self, item, select):
        '''void QTreeWidget.setItemSelected(QTreeWidgetItem item, bool select)'''
    def isItemSelected(self, item):
        '''bool QTreeWidget.isItemSelected(QTreeWidgetItem item)'''
        return bool()
    def setItemWidget(self, item, column, widget):
        '''void QTreeWidget.setItemWidget(QTreeWidgetItem item, int column, QWidget widget)'''
    def itemWidget(self, item, column):
        '''QWidget QTreeWidget.itemWidget(QTreeWidgetItem item, int column)'''
        return QWidget()
    def closePersistentEditor(self, item, column = 0):
        '''void QTreeWidget.closePersistentEditor(QTreeWidgetItem item, int column = 0)'''
    def openPersistentEditor(self, item, column = 0):
        '''void QTreeWidget.openPersistentEditor(QTreeWidgetItem item, int column = 0)'''
    def editItem(self, item, column = 0):
        '''void QTreeWidget.editItem(QTreeWidgetItem item, int column = 0)'''
    def isSortingEnabled(self):
        '''bool QTreeWidget.isSortingEnabled()'''
        return bool()
    def setSortingEnabled(self, enable):
        '''void QTreeWidget.setSortingEnabled(bool enable)'''
    def sortItems(self, column, order):
        '''void QTreeWidget.sortItems(int column, Qt.SortOrder order)'''
    def sortColumn(self):
        '''int QTreeWidget.sortColumn()'''
        return int()
    def visualItemRect(self, item):
        '''QRect QTreeWidget.visualItemRect(QTreeWidgetItem item)'''
        return QRect()
    def itemAt(self, p):
        '''QTreeWidgetItem QTreeWidget.itemAt(QPoint p)'''
        return QTreeWidgetItem()
    def itemAt(self, ax, ay):
        '''QTreeWidgetItem QTreeWidget.itemAt(int ax, int ay)'''
        return QTreeWidgetItem()
    def setCurrentItem(self, item):
        '''void QTreeWidget.setCurrentItem(QTreeWidgetItem item)'''
    def setCurrentItem(self, item, column):
        '''void QTreeWidget.setCurrentItem(QTreeWidgetItem item, int column)'''
    def setCurrentItem(self, item, column, command):
        '''void QTreeWidget.setCurrentItem(QTreeWidgetItem item, int column, QItemSelectionModel.SelectionFlags command)'''
    def currentColumn(self):
        '''int QTreeWidget.currentColumn()'''
        return int()
    def currentItem(self):
        '''QTreeWidgetItem QTreeWidget.currentItem()'''
        return QTreeWidgetItem()
    def setHeaderLabels(self, labels):
        '''void QTreeWidget.setHeaderLabels(QStringList labels)'''
    def setHeaderItem(self, item):
        '''void QTreeWidget.setHeaderItem(QTreeWidgetItem item)'''
    def headerItem(self):
        '''QTreeWidgetItem QTreeWidget.headerItem()'''
        return QTreeWidgetItem()
    def addTopLevelItems(self, items):
        '''void QTreeWidget.addTopLevelItems(list-of-QTreeWidgetItem items)'''
    def insertTopLevelItems(self, index, items):
        '''void QTreeWidget.insertTopLevelItems(int index, list-of-QTreeWidgetItem items)'''
    def indexOfTopLevelItem(self, item):
        '''int QTreeWidget.indexOfTopLevelItem(QTreeWidgetItem item)'''
        return int()
    def takeTopLevelItem(self, index):
        '''QTreeWidgetItem QTreeWidget.takeTopLevelItem(int index)'''
        return QTreeWidgetItem()
    def addTopLevelItem(self, item):
        '''void QTreeWidget.addTopLevelItem(QTreeWidgetItem item)'''
    def insertTopLevelItem(self, index, item):
        '''void QTreeWidget.insertTopLevelItem(int index, QTreeWidgetItem item)'''
    def topLevelItemCount(self):
        '''int QTreeWidget.topLevelItemCount()'''
        return int()
    def topLevelItem(self, index):
        '''QTreeWidgetItem QTreeWidget.topLevelItem(int index)'''
        return QTreeWidgetItem()
    def setColumnCount(self, columns):
        '''void QTreeWidget.setColumnCount(int columns)'''
    def columnCount(self):
        '''int QTreeWidget.columnCount()'''
        return int()


class QTreeWidgetItemIterator():
    """"""
    # Enum QTreeWidgetItemIterator.IteratorFlag
    All = 0
    Hidden = 0
    NotHidden = 0
    Selected = 0
    Unselected = 0
    Selectable = 0
    NotSelectable = 0
    DragEnabled = 0
    DragDisabled = 0
    DropEnabled = 0
    DropDisabled = 0
    HasChildren = 0
    NoChildren = 0
    Checked = 0
    NotChecked = 0
    Enabled = 0
    Disabled = 0
    Editable = 0
    NotEditable = 0
    UserFlag = 0

    def __init__(self, it):
        '''void QTreeWidgetItemIterator.__init__(QTreeWidgetItemIterator it)'''
    def __init__(self, widget, flags = None):
        '''void QTreeWidgetItemIterator.__init__(QTreeWidget widget, QTreeWidgetItemIterator.IteratorFlags flags = QTreeWidgetItemIterator.All)'''
    def __init__(self, item, flags = None):
        '''void QTreeWidgetItemIterator.__init__(QTreeWidgetItem item, QTreeWidgetItemIterator.IteratorFlags flags = QTreeWidgetItemIterator.All)'''
    def __isub__(self, n):
        '''QTreeWidgetItemIterator QTreeWidgetItemIterator.__isub__(int n)'''
        return QTreeWidgetItemIterator()
    def __iadd__(self, n):
        '''QTreeWidgetItemIterator QTreeWidgetItemIterator.__iadd__(int n)'''
        return QTreeWidgetItemIterator()
    def value(self):
        '''QTreeWidgetItem QTreeWidgetItemIterator.value()'''
        return QTreeWidgetItem()
    class IteratorFlags():
        """"""
        def __init__(self):
            '''QTreeWidgetItemIterator.IteratorFlags QTreeWidgetItemIterator.IteratorFlags.__init__()'''
            return QTreeWidgetItemIterator.IteratorFlags()
        def __init__(self):
            '''int QTreeWidgetItemIterator.IteratorFlags.__init__()'''
            return int()
        def __init__(self):
            '''void QTreeWidgetItemIterator.IteratorFlags.__init__()'''
        def __bool__(self):
            '''int QTreeWidgetItemIterator.IteratorFlags.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QTreeWidgetItemIterator.IteratorFlags.__ne__(QTreeWidgetItemIterator.IteratorFlags f)'''
            return bool()
        def __eq__(self, f):
            '''bool QTreeWidgetItemIterator.IteratorFlags.__eq__(QTreeWidgetItemIterator.IteratorFlags f)'''
            return bool()
        def __invert__(self):
            '''QTreeWidgetItemIterator.IteratorFlags QTreeWidgetItemIterator.IteratorFlags.__invert__()'''
            return QTreeWidgetItemIterator.IteratorFlags()
        def __and__(self, mask):
            '''QTreeWidgetItemIterator.IteratorFlags QTreeWidgetItemIterator.IteratorFlags.__and__(int mask)'''
            return QTreeWidgetItemIterator.IteratorFlags()
        def __xor__(self, f):
            '''QTreeWidgetItemIterator.IteratorFlags QTreeWidgetItemIterator.IteratorFlags.__xor__(QTreeWidgetItemIterator.IteratorFlags f)'''
            return QTreeWidgetItemIterator.IteratorFlags()
        def __xor__(self, f):
            '''QTreeWidgetItemIterator.IteratorFlags QTreeWidgetItemIterator.IteratorFlags.__xor__(int f)'''
            return QTreeWidgetItemIterator.IteratorFlags()
        def __or__(self, f):
            '''QTreeWidgetItemIterator.IteratorFlags QTreeWidgetItemIterator.IteratorFlags.__or__(QTreeWidgetItemIterator.IteratorFlags f)'''
            return QTreeWidgetItemIterator.IteratorFlags()
        def __or__(self, f):
            '''QTreeWidgetItemIterator.IteratorFlags QTreeWidgetItemIterator.IteratorFlags.__or__(int f)'''
            return QTreeWidgetItemIterator.IteratorFlags()
        def __int__(self):
            '''int QTreeWidgetItemIterator.IteratorFlags.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QTreeWidgetItemIterator.IteratorFlags QTreeWidgetItemIterator.IteratorFlags.__ixor__(QTreeWidgetItemIterator.IteratorFlags f)'''
            return QTreeWidgetItemIterator.IteratorFlags()
        def __ior__(self, f):
            '''QTreeWidgetItemIterator.IteratorFlags QTreeWidgetItemIterator.IteratorFlags.__ior__(QTreeWidgetItemIterator.IteratorFlags f)'''
            return QTreeWidgetItemIterator.IteratorFlags()
        def __iand__(self, mask):
            '''QTreeWidgetItemIterator.IteratorFlags QTreeWidgetItemIterator.IteratorFlags.__iand__(int mask)'''
            return QTreeWidgetItemIterator.IteratorFlags()


class QUndoGroup(QObject):
    """"""
    def __init__(self, parent = None):
        '''void QUndoGroup.__init__(QObject parent = None)'''
    undoTextChanged = pyqtSignal() # void undoTextChanged(const QStringamp;) - signal
    redoTextChanged = pyqtSignal() # void redoTextChanged(const QStringamp;) - signal
    indexChanged = pyqtSignal() # void indexChanged(int) - signal
    cleanChanged = pyqtSignal() # void cleanChanged(bool) - signal
    canUndoChanged = pyqtSignal() # void canUndoChanged(bool) - signal
    canRedoChanged = pyqtSignal() # void canRedoChanged(bool) - signal
    activeStackChanged = pyqtSignal() # void activeStackChanged(QUndoStack *) - signal
    def undo(self):
        '''void QUndoGroup.undo()'''
    def setActiveStack(self, stack):
        '''void QUndoGroup.setActiveStack(QUndoStack stack)'''
    def redo(self):
        '''void QUndoGroup.redo()'''
    def isClean(self):
        '''bool QUndoGroup.isClean()'''
        return bool()
    def redoText(self):
        '''QString QUndoGroup.redoText()'''
        return QString()
    def undoText(self):
        '''QString QUndoGroup.undoText()'''
        return QString()
    def canRedo(self):
        '''bool QUndoGroup.canRedo()'''
        return bool()
    def canUndo(self):
        '''bool QUndoGroup.canUndo()'''
        return bool()
    def createUndoAction(self, parent, prefix = QString()):
        '''QAction QUndoGroup.createUndoAction(QObject parent, QString prefix = QString())'''
        return QAction()
    def createRedoAction(self, parent, prefix = QString()):
        '''QAction QUndoGroup.createRedoAction(QObject parent, QString prefix = QString())'''
        return QAction()
    def activeStack(self):
        '''QUndoStack QUndoGroup.activeStack()'''
        return QUndoStack()
    def stacks(self):
        '''list-of-QUndoStack QUndoGroup.stacks()'''
        return [QUndoStack()]
    def removeStack(self, stack):
        '''void QUndoGroup.removeStack(QUndoStack stack)'''
    def addStack(self, stack):
        '''void QUndoGroup.addStack(QUndoStack stack)'''


class QUndoCommand():
    """"""
    def __init__(self, parent = None):
        '''void QUndoCommand.__init__(QUndoCommand parent = None)'''
    def __init__(self, text, parent = None):
        '''void QUndoCommand.__init__(QString text, QUndoCommand parent = None)'''
    def actionText(self):
        '''QString QUndoCommand.actionText()'''
        return QString()
    def child(self, index):
        '''QUndoCommand QUndoCommand.child(int index)'''
        return QUndoCommand()
    def childCount(self):
        '''int QUndoCommand.childCount()'''
        return int()
    def undo(self):
        '''void QUndoCommand.undo()'''
    def text(self):
        '''QString QUndoCommand.text()'''
        return QString()
    def setText(self, text):
        '''void QUndoCommand.setText(QString text)'''
    def redo(self):
        '''void QUndoCommand.redo()'''
    def mergeWith(self, other):
        '''bool QUndoCommand.mergeWith(QUndoCommand other)'''
        return bool()
    def id(self):
        '''int QUndoCommand.id()'''
        return int()


class QUndoStack(QObject):
    """"""
    def __init__(self, parent = None):
        '''void QUndoStack.__init__(QObject parent = None)'''
    def command(self, index):
        '''QUndoCommand QUndoStack.command(int index)'''
        return QUndoCommand()
    def undoLimit(self):
        '''int QUndoStack.undoLimit()'''
        return int()
    def setUndoLimit(self, limit):
        '''void QUndoStack.setUndoLimit(int limit)'''
    undoTextChanged = pyqtSignal() # void undoTextChanged(const QStringamp;) - signal
    redoTextChanged = pyqtSignal() # void redoTextChanged(const QStringamp;) - signal
    indexChanged = pyqtSignal() # void indexChanged(int) - signal
    cleanChanged = pyqtSignal() # void cleanChanged(bool) - signal
    canUndoChanged = pyqtSignal() # void canUndoChanged(bool) - signal
    canRedoChanged = pyqtSignal() # void canRedoChanged(bool) - signal
    def undo(self):
        '''void QUndoStack.undo()'''
    def setIndex(self, idx):
        '''void QUndoStack.setIndex(int idx)'''
    def setClean(self):
        '''void QUndoStack.setClean()'''
    def setActive(self, active = True):
        '''void QUndoStack.setActive(bool active = True)'''
    def redo(self):
        '''void QUndoStack.redo()'''
    def endMacro(self):
        '''void QUndoStack.endMacro()'''
    def beginMacro(self, text):
        '''void QUndoStack.beginMacro(QString text)'''
    def cleanIndex(self):
        '''int QUndoStack.cleanIndex()'''
        return int()
    def isClean(self):
        '''bool QUndoStack.isClean()'''
        return bool()
    def isActive(self):
        '''bool QUndoStack.isActive()'''
        return bool()
    def createRedoAction(self, parent, prefix = QString()):
        '''QAction QUndoStack.createRedoAction(QObject parent, QString prefix = QString())'''
        return QAction()
    def createUndoAction(self, parent, prefix = QString()):
        '''QAction QUndoStack.createUndoAction(QObject parent, QString prefix = QString())'''
        return QAction()
    def text(self, idx):
        '''QString QUndoStack.text(int idx)'''
        return QString()
    def index(self):
        '''int QUndoStack.index()'''
        return int()
    def __len__(self):
        '''None QUndoStack.__len__()'''
        return None()
    def count(self):
        '''int QUndoStack.count()'''
        return int()
    def redoText(self):
        '''QString QUndoStack.redoText()'''
        return QString()
    def undoText(self):
        '''QString QUndoStack.undoText()'''
        return QString()
    def canRedo(self):
        '''bool QUndoStack.canRedo()'''
        return bool()
    def canUndo(self):
        '''bool QUndoStack.canUndo()'''
        return bool()
    def push(self, cmd):
        '''void QUndoStack.push(QUndoCommand cmd)'''
    def clear(self):
        '''void QUndoStack.clear()'''


class QUndoView(QListView):
    """"""
    def __init__(self, parent = None):
        '''void QUndoView.__init__(QWidget parent = None)'''
    def __init__(self, stack, parent = None):
        '''void QUndoView.__init__(QUndoStack stack, QWidget parent = None)'''
    def __init__(self, group, parent = None):
        '''void QUndoView.__init__(QUndoGroup group, QWidget parent = None)'''
    def setGroup(self, group):
        '''void QUndoView.setGroup(QUndoGroup group)'''
    def setStack(self, stack):
        '''void QUndoView.setStack(QUndoStack stack)'''
    def cleanIcon(self):
        '''QIcon QUndoView.cleanIcon()'''
        return QIcon()
    def setCleanIcon(self, icon):
        '''void QUndoView.setCleanIcon(QIcon icon)'''
    def emptyLabel(self):
        '''QString QUndoView.emptyLabel()'''
        return QString()
    def setEmptyLabel(self, label):
        '''void QUndoView.setEmptyLabel(QString label)'''
    def group(self):
        '''QUndoGroup QUndoView.group()'''
        return QUndoGroup()
    def stack(self):
        '''QUndoStack QUndoView.stack()'''
        return QUndoStack()


class QValidator(QObject):
    """"""
    # Enum QValidator.State
    Invalid = 0
    Intermediate = 0
    Acceptable = 0

    def __init__(self, parent = None):
        '''void QValidator.__init__(QObject parent = None)'''
    def locale(self):
        '''QLocale QValidator.locale()'''
        return QLocale()
    def setLocale(self, locale):
        '''void QValidator.setLocale(QLocale locale)'''
    def fixup(self, input):
        '''void QValidator.fixup(QString input)'''
    def fixup(self):
        '''QString QValidator.fixup()'''
        return QString()
    def validate(self):
        '''abstract int QValidator.validate()'''
        return int()
    def validate(self):
        '''abstract int QValidator.validate()'''
        return int()


class QIntValidator(QValidator):
    """"""
    def __init__(self, parent = None):
        '''void QIntValidator.__init__(QObject parent = None)'''
    def __init__(self, bottom, top, parent = None):
        '''void QIntValidator.__init__(int bottom, int top, QObject parent = None)'''
    def top(self):
        '''int QIntValidator.top()'''
        return int()
    def bottom(self):
        '''int QIntValidator.bottom()'''
        return int()
    def setRange(self, bottom, top):
        '''void QIntValidator.setRange(int bottom, int top)'''
    def setTop(self):
        '''int QIntValidator.setTop()'''
        return int()
    def setBottom(self):
        '''int QIntValidator.setBottom()'''
        return int()
    def fixup(self, input):
        '''void QIntValidator.fixup(QString input)'''
    def fixup(self, input):
        '''void QIntValidator.fixup(QString input)'''
    def validate(self):
        '''int QIntValidator.validate()'''
        return int()
    def validate(self):
        '''int QIntValidator.validate()'''
        return int()


class QDoubleValidator(QValidator):
    """"""
    # Enum QDoubleValidator.Notation
    StandardNotation = 0
    ScientificNotation = 0

    def __init__(self, parent = None):
        '''void QDoubleValidator.__init__(QObject parent = None)'''
    def __init__(self, bottom, top, decimals, parent = None):
        '''void QDoubleValidator.__init__(float bottom, float top, int decimals, QObject parent = None)'''
    def notation(self):
        '''QDoubleValidator.Notation QDoubleValidator.notation()'''
        return QDoubleValidator.Notation()
    def setNotation(self):
        '''QDoubleValidator.Notation QDoubleValidator.setNotation()'''
        return QDoubleValidator.Notation()
    def decimals(self):
        '''int QDoubleValidator.decimals()'''
        return int()
    def top(self):
        '''float QDoubleValidator.top()'''
        return float()
    def bottom(self):
        '''float QDoubleValidator.bottom()'''
        return float()
    def setDecimals(self):
        '''int QDoubleValidator.setDecimals()'''
        return int()
    def setTop(self):
        '''float QDoubleValidator.setTop()'''
        return float()
    def setBottom(self):
        '''float QDoubleValidator.setBottom()'''
        return float()
    def setRange(self, minimum, maximum, decimals = 0):
        '''void QDoubleValidator.setRange(float minimum, float maximum, int decimals = 0)'''
    def validate(self):
        '''int QDoubleValidator.validate()'''
        return int()
    def validate(self):
        '''int QDoubleValidator.validate()'''
        return int()


class QRegExpValidator(QValidator):
    """"""
    def __init__(self, parent = None):
        '''void QRegExpValidator.__init__(QObject parent = None)'''
    def __init__(self, rx, parent = None):
        '''void QRegExpValidator.__init__(QRegExp rx, QObject parent = None)'''
    def regExp(self):
        '''QRegExp QRegExpValidator.regExp()'''
        return QRegExp()
    def setRegExp(self, rx):
        '''void QRegExpValidator.setRegExp(QRegExp rx)'''
    def validate(self, input, pos):
        '''QValidator.State QRegExpValidator.validate(QString input, int pos)'''
        return QValidator.State()
    def validate(self, input, pos):
        '''QValidator.State QRegExpValidator.validate(QString input, int pos)'''
        return QValidator.State()


class QVector2D():
    """"""
    def __init__(self):
        '''void QVector2D.__init__()'''
    def __init__(self, xpos, ypos):
        '''void QVector2D.__init__(float xpos, float ypos)'''
    def __init__(self, point):
        '''void QVector2D.__init__(QPoint point)'''
    def __init__(self, point):
        '''void QVector2D.__init__(QPointF point)'''
    def __init__(self, vector):
        '''void QVector2D.__init__(QVector3D vector)'''
    def __init__(self, vector):
        '''void QVector2D.__init__(QVector4D vector)'''
    def __init__(self):
        '''QVector2D QVector2D.__init__()'''
        return QVector2D()
    def __eq__(self, v2):
        '''bool QVector2D.__eq__(QVector2D v2)'''
        return bool()
    def __mul__(self, vector):
        '''QVector2D QVector2D.__mul__(QVector2D vector)'''
        return QVector2D()
    def __mul__(self, factor):
        '''QVector2D QVector2D.__mul__(float factor)'''
        return QVector2D()
    def __mul__(self, v2):
        '''QVector2D QVector2D.__mul__(QVector2D v2)'''
        return QVector2D()
    def __div__(self, divisor):
        '''QVector2D QVector2D.__div__(float divisor)'''
        return QVector2D()
    def __add__(self, v2):
        '''QVector2D QVector2D.__add__(QVector2D v2)'''
        return QVector2D()
    def __sub__(self, v2):
        '''QVector2D QVector2D.__sub__(QVector2D v2)'''
        return QVector2D()
    def __neg__(self):
        '''QVector2D QVector2D.__neg__()'''
        return QVector2D()
    def __ne__(self, v2):
        '''bool QVector2D.__ne__(QVector2D v2)'''
        return bool()
    def toPointF(self):
        '''QPointF QVector2D.toPointF()'''
        return QPointF()
    def toPoint(self):
        '''QPoint QVector2D.toPoint()'''
        return QPoint()
    def __idiv__(self, divisor):
        '''QVector2D QVector2D.__idiv__(float divisor)'''
        return QVector2D()
    def __imul__(self, factor):
        '''QVector2D QVector2D.__imul__(float factor)'''
        return QVector2D()
    def __imul__(self, vector):
        '''QVector2D QVector2D.__imul__(QVector2D vector)'''
        return QVector2D()
    def __isub__(self, vector):
        '''QVector2D QVector2D.__isub__(QVector2D vector)'''
        return QVector2D()
    def __iadd__(self, vector):
        '''QVector2D QVector2D.__iadd__(QVector2D vector)'''
        return QVector2D()
    def setY(self, aY):
        '''void QVector2D.setY(float aY)'''
    def setX(self, aX):
        '''void QVector2D.setX(float aX)'''
    def y(self):
        '''float QVector2D.y()'''
        return float()
    def x(self):
        '''float QVector2D.x()'''
        return float()
    def isNull(self):
        '''bool QVector2D.isNull()'''
        return bool()
    def toVector4D(self):
        '''QVector4D QVector2D.toVector4D()'''
        return QVector4D()
    def toVector3D(self):
        '''QVector3D QVector2D.toVector3D()'''
        return QVector3D()
    def dotProduct(self, v1, v2):
        '''static float QVector2D.dotProduct(QVector2D v1, QVector2D v2)'''
        return float()
    def normalize(self):
        '''void QVector2D.normalize()'''
    def normalized(self):
        '''QVector2D QVector2D.normalized()'''
        return QVector2D()
    def lengthSquared(self):
        '''float QVector2D.lengthSquared()'''
        return float()
    def length(self):
        '''float QVector2D.length()'''
        return float()
    def __repr__(self):
        '''str QVector2D.__repr__()'''
        return str()


class QVector3D():
    """"""
    def __init__(self):
        '''void QVector3D.__init__()'''
    def __init__(self, xpos, ypos, zpos):
        '''void QVector3D.__init__(float xpos, float ypos, float zpos)'''
    def __init__(self, point):
        '''void QVector3D.__init__(QPoint point)'''
    def __init__(self, point):
        '''void QVector3D.__init__(QPointF point)'''
    def __init__(self, vector):
        '''void QVector3D.__init__(QVector2D vector)'''
    def __init__(self, vector, zpos):
        '''void QVector3D.__init__(QVector2D vector, float zpos)'''
    def __init__(self, vector):
        '''void QVector3D.__init__(QVector4D vector)'''
    def __init__(self):
        '''QVector3D QVector3D.__init__()'''
        return QVector3D()
    def __eq__(self, v2):
        '''bool QVector3D.__eq__(QVector3D v2)'''
        return bool()
    def __mul__(self, matrix):
        '''QVector3D QVector3D.__mul__(QMatrix4x4 matrix)'''
        return QVector3D()
    def __mul__(self, vector):
        '''QVector3D QVector3D.__mul__(QVector3D vector)'''
        return QVector3D()
    def __mul__(self, factor):
        '''QVector3D QVector3D.__mul__(float factor)'''
        return QVector3D()
    def __mul__(self, v2):
        '''QVector3D QVector3D.__mul__(QVector3D v2)'''
        return QVector3D()
    def __div__(self, divisor):
        '''QVector3D QVector3D.__div__(float divisor)'''
        return QVector3D()
    def __add__(self, v2):
        '''QVector3D QVector3D.__add__(QVector3D v2)'''
        return QVector3D()
    def __sub__(self, v2):
        '''QVector3D QVector3D.__sub__(QVector3D v2)'''
        return QVector3D()
    def __neg__(self):
        '''QVector3D QVector3D.__neg__()'''
        return QVector3D()
    def __ne__(self, v2):
        '''bool QVector3D.__ne__(QVector3D v2)'''
        return bool()
    def toPointF(self):
        '''QPointF QVector3D.toPointF()'''
        return QPointF()
    def toPoint(self):
        '''QPoint QVector3D.toPoint()'''
        return QPoint()
    def __idiv__(self, divisor):
        '''QVector3D QVector3D.__idiv__(float divisor)'''
        return QVector3D()
    def __imul__(self, factor):
        '''QVector3D QVector3D.__imul__(float factor)'''
        return QVector3D()
    def __imul__(self, vector):
        '''QVector3D QVector3D.__imul__(QVector3D vector)'''
        return QVector3D()
    def __isub__(self, vector):
        '''QVector3D QVector3D.__isub__(QVector3D vector)'''
        return QVector3D()
    def __iadd__(self, vector):
        '''QVector3D QVector3D.__iadd__(QVector3D vector)'''
        return QVector3D()
    def setZ(self, aZ):
        '''void QVector3D.setZ(float aZ)'''
    def setY(self, aY):
        '''void QVector3D.setY(float aY)'''
    def setX(self, aX):
        '''void QVector3D.setX(float aX)'''
    def z(self):
        '''float QVector3D.z()'''
        return float()
    def y(self):
        '''float QVector3D.y()'''
        return float()
    def x(self):
        '''float QVector3D.x()'''
        return float()
    def isNull(self):
        '''bool QVector3D.isNull()'''
        return bool()
    def toVector4D(self):
        '''QVector4D QVector3D.toVector4D()'''
        return QVector4D()
    def toVector2D(self):
        '''QVector2D QVector3D.toVector2D()'''
        return QVector2D()
    def distanceToLine(self, point, direction):
        '''float QVector3D.distanceToLine(QVector3D point, QVector3D direction)'''
        return float()
    def distanceToPlane(self, plane, normal):
        '''float QVector3D.distanceToPlane(QVector3D plane, QVector3D normal)'''
        return float()
    def distanceToPlane(self, plane1, plane2, plane3):
        '''float QVector3D.distanceToPlane(QVector3D plane1, QVector3D plane2, QVector3D plane3)'''
        return float()
    def normal(self, v1, v2):
        '''static QVector3D QVector3D.normal(QVector3D v1, QVector3D v2)'''
        return QVector3D()
    def normal(self, v1, v2, v3):
        '''static QVector3D QVector3D.normal(QVector3D v1, QVector3D v2, QVector3D v3)'''
        return QVector3D()
    def crossProduct(self, v1, v2):
        '''static QVector3D QVector3D.crossProduct(QVector3D v1, QVector3D v2)'''
        return QVector3D()
    def dotProduct(self, v1, v2):
        '''static float QVector3D.dotProduct(QVector3D v1, QVector3D v2)'''
        return float()
    def normalize(self):
        '''void QVector3D.normalize()'''
    def normalized(self):
        '''QVector3D QVector3D.normalized()'''
        return QVector3D()
    def lengthSquared(self):
        '''float QVector3D.lengthSquared()'''
        return float()
    def length(self):
        '''float QVector3D.length()'''
        return float()
    def __repr__(self):
        '''str QVector3D.__repr__()'''
        return str()


class QVector4D():
    """"""
    def __init__(self):
        '''void QVector4D.__init__()'''
    def __init__(self, xpos, ypos, zpos, wpos):
        '''void QVector4D.__init__(float xpos, float ypos, float zpos, float wpos)'''
    def __init__(self, point):
        '''void QVector4D.__init__(QPoint point)'''
    def __init__(self, point):
        '''void QVector4D.__init__(QPointF point)'''
    def __init__(self, vector):
        '''void QVector4D.__init__(QVector2D vector)'''
    def __init__(self, vector, zpos, wpos):
        '''void QVector4D.__init__(QVector2D vector, float zpos, float wpos)'''
    def __init__(self, vector):
        '''void QVector4D.__init__(QVector3D vector)'''
    def __init__(self, vector, wpos):
        '''void QVector4D.__init__(QVector3D vector, float wpos)'''
    def __init__(self):
        '''QVector4D QVector4D.__init__()'''
        return QVector4D()
    def __eq__(self, v2):
        '''bool QVector4D.__eq__(QVector4D v2)'''
        return bool()
    def __mul__(self, matrix):
        '''QVector4D QVector4D.__mul__(QMatrix4x4 matrix)'''
        return QVector4D()
    def __mul__(self, vector):
        '''QVector4D QVector4D.__mul__(QVector4D vector)'''
        return QVector4D()
    def __mul__(self, factor):
        '''QVector4D QVector4D.__mul__(float factor)'''
        return QVector4D()
    def __mul__(self, v2):
        '''QVector4D QVector4D.__mul__(QVector4D v2)'''
        return QVector4D()
    def __div__(self, divisor):
        '''QVector4D QVector4D.__div__(float divisor)'''
        return QVector4D()
    def __add__(self, v2):
        '''QVector4D QVector4D.__add__(QVector4D v2)'''
        return QVector4D()
    def __sub__(self, v2):
        '''QVector4D QVector4D.__sub__(QVector4D v2)'''
        return QVector4D()
    def __neg__(self):
        '''QVector4D QVector4D.__neg__()'''
        return QVector4D()
    def __ne__(self, v2):
        '''bool QVector4D.__ne__(QVector4D v2)'''
        return bool()
    def toPointF(self):
        '''QPointF QVector4D.toPointF()'''
        return QPointF()
    def toPoint(self):
        '''QPoint QVector4D.toPoint()'''
        return QPoint()
    def __idiv__(self, divisor):
        '''QVector4D QVector4D.__idiv__(float divisor)'''
        return QVector4D()
    def __imul__(self, factor):
        '''QVector4D QVector4D.__imul__(float factor)'''
        return QVector4D()
    def __imul__(self, vector):
        '''QVector4D QVector4D.__imul__(QVector4D vector)'''
        return QVector4D()
    def __isub__(self, vector):
        '''QVector4D QVector4D.__isub__(QVector4D vector)'''
        return QVector4D()
    def __iadd__(self, vector):
        '''QVector4D QVector4D.__iadd__(QVector4D vector)'''
        return QVector4D()
    def setW(self, aW):
        '''void QVector4D.setW(float aW)'''
    def setZ(self, aZ):
        '''void QVector4D.setZ(float aZ)'''
    def setY(self, aY):
        '''void QVector4D.setY(float aY)'''
    def setX(self, aX):
        '''void QVector4D.setX(float aX)'''
    def w(self):
        '''float QVector4D.w()'''
        return float()
    def z(self):
        '''float QVector4D.z()'''
        return float()
    def y(self):
        '''float QVector4D.y()'''
        return float()
    def x(self):
        '''float QVector4D.x()'''
        return float()
    def isNull(self):
        '''bool QVector4D.isNull()'''
        return bool()
    def toVector3DAffine(self):
        '''QVector3D QVector4D.toVector3DAffine()'''
        return QVector3D()
    def toVector3D(self):
        '''QVector3D QVector4D.toVector3D()'''
        return QVector3D()
    def toVector2DAffine(self):
        '''QVector2D QVector4D.toVector2DAffine()'''
        return QVector2D()
    def toVector2D(self):
        '''QVector2D QVector4D.toVector2D()'''
        return QVector2D()
    def dotProduct(self, v1, v2):
        '''static float QVector4D.dotProduct(QVector4D v1, QVector4D v2)'''
        return float()
    def normalize(self):
        '''void QVector4D.normalize()'''
    def normalized(self):
        '''QVector4D QVector4D.normalized()'''
        return QVector4D()
    def lengthSquared(self):
        '''float QVector4D.lengthSquared()'''
        return float()
    def length(self):
        '''float QVector4D.length()'''
        return float()
    def __repr__(self):
        '''str QVector4D.__repr__()'''
        return str()


class QWhatsThis():
    """"""
    def __init__(self):
        '''QWhatsThis QWhatsThis.__init__()'''
        return QWhatsThis()
    def createAction(self, parent = None):
        '''static QAction QWhatsThis.createAction(QObject parent = None)'''
        return QAction()
    def hideText(self):
        '''static void QWhatsThis.hideText()'''
    def showText(self, pos, text, widget = None):
        '''static void QWhatsThis.showText(QPoint pos, QString text, QWidget widget = None)'''
    def leaveWhatsThisMode(self):
        '''static void QWhatsThis.leaveWhatsThisMode()'''
    def inWhatsThisMode(self):
        '''static bool QWhatsThis.inWhatsThisMode()'''
        return bool()
    def enterWhatsThisMode(self):
        '''static void QWhatsThis.enterWhatsThisMode()'''


class QWidgetAction(QAction):
    """"""
    def __init__(self, parent):
        '''void QWidgetAction.__init__(QObject parent)'''
    def createdWidgets(self):
        '''list-of-QWidget QWidgetAction.createdWidgets()'''
        return [QWidget()]
    def deleteWidget(self, widget):
        '''void QWidgetAction.deleteWidget(QWidget widget)'''
    def createWidget(self, parent):
        '''QWidget QWidgetAction.createWidget(QWidget parent)'''
        return QWidget()
    def eventFilter(self):
        '''QEvent QWidgetAction.eventFilter()'''
        return QEvent()
    def event(self):
        '''QEvent QWidgetAction.event()'''
        return QEvent()
    def releaseWidget(self, widget):
        '''void QWidgetAction.releaseWidget(QWidget widget)'''
    def requestWidget(self, parent):
        '''QWidget QWidgetAction.requestWidget(QWidget parent)'''
        return QWidget()
    def defaultWidget(self):
        '''QWidget QWidgetAction.defaultWidget()'''
        return QWidget()
    def setDefaultWidget(self, w):
        '''void QWidgetAction.setDefaultWidget(QWidget w)'''


class QWizard(QDialog):
    """"""
    # Enum QWizard.WizardOption
    IndependentPages = 0
    IgnoreSubTitles = 0
    ExtendedWatermarkPixmap = 0
    NoDefaultButton = 0
    NoBackButtonOnStartPage = 0
    NoBackButtonOnLastPage = 0
    DisabledBackButtonOnLastPage = 0
    HaveNextButtonOnLastPage = 0
    HaveFinishButtonOnEarlyPages = 0
    NoCancelButton = 0
    CancelButtonOnLeft = 0
    HaveHelpButton = 0
    HelpButtonOnRight = 0
    HaveCustomButton1 = 0
    HaveCustomButton2 = 0
    HaveCustomButton3 = 0

    # Enum QWizard.WizardStyle
    ClassicStyle = 0
    ModernStyle = 0
    MacStyle = 0
    AeroStyle = 0

    # Enum QWizard.WizardPixmap
    WatermarkPixmap = 0
    LogoPixmap = 0
    BannerPixmap = 0
    BackgroundPixmap = 0

    # Enum QWizard.WizardButton
    BackButton = 0
    NextButton = 0
    CommitButton = 0
    FinishButton = 0
    CancelButton = 0
    HelpButton = 0
    CustomButton1 = 0
    CustomButton2 = 0
    CustomButton3 = 0
    Stretch = 0

    def __init__(self, parent = None, flags = 0):
        '''void QWizard.__init__(QWidget parent = None, Qt.WindowFlags flags = 0)'''
    pageRemoved = pyqtSignal() # void pageRemoved(int) - signal
    pageAdded = pyqtSignal() # void pageAdded(int) - signal
    def sideWidget(self):
        '''QWidget QWizard.sideWidget()'''
        return QWidget()
    def setSideWidget(self, widget):
        '''void QWizard.setSideWidget(QWidget widget)'''
    def pageIds(self):
        '''list-of-int QWizard.pageIds()'''
        return [int()]
    def removePage(self, id):
        '''void QWizard.removePage(int id)'''
    def cleanupPage(self, id):
        '''void QWizard.cleanupPage(int id)'''
    def initializePage(self, id):
        '''void QWizard.initializePage(int id)'''
    def done(self, result):
        '''void QWizard.done(int result)'''
    def paintEvent(self, event):
        '''void QWizard.paintEvent(QPaintEvent event)'''
    def resizeEvent(self, event):
        '''void QWizard.resizeEvent(QResizeEvent event)'''
    def event(self, event):
        '''bool QWizard.event(QEvent event)'''
        return bool()
    def restart(self):
        '''void QWizard.restart()'''
    def next(self):
        '''void QWizard.next()'''
    def back(self):
        '''void QWizard.back()'''
    customButtonClicked = pyqtSignal() # void customButtonClicked(int) - signal
    helpRequested = pyqtSignal() # void helpRequested() - signal
    currentIdChanged = pyqtSignal() # void currentIdChanged(int) - signal
    def sizeHint(self):
        '''QSize QWizard.sizeHint()'''
        return QSize()
    def setVisible(self, visible):
        '''void QWizard.setVisible(bool visible)'''
    def setDefaultProperty(self, className, property, changedSignal):
        '''void QWizard.setDefaultProperty(str className, str property, str changedSignal)'''
    def pixmap(self, which):
        '''QPixmap QWizard.pixmap(QWizard.WizardPixmap which)'''
        return QPixmap()
    def setPixmap(self, which, pixmap):
        '''void QWizard.setPixmap(QWizard.WizardPixmap which, QPixmap pixmap)'''
    def subTitleFormat(self):
        '''Qt.TextFormat QWizard.subTitleFormat()'''
        return Qt.TextFormat()
    def setSubTitleFormat(self, format):
        '''void QWizard.setSubTitleFormat(Qt.TextFormat format)'''
    def titleFormat(self):
        '''Qt.TextFormat QWizard.titleFormat()'''
        return Qt.TextFormat()
    def setTitleFormat(self, format):
        '''void QWizard.setTitleFormat(Qt.TextFormat format)'''
    def button(self, which):
        '''QAbstractButton QWizard.button(QWizard.WizardButton which)'''
        return QAbstractButton()
    def setButton(self, which, button):
        '''void QWizard.setButton(QWizard.WizardButton which, QAbstractButton button)'''
    def setButtonLayout(self, layout):
        '''void QWizard.setButtonLayout(list-of-QWizard.WizardButton layout)'''
    def buttonText(self, which):
        '''QString QWizard.buttonText(QWizard.WizardButton which)'''
        return QString()
    def setButtonText(self, which, text):
        '''void QWizard.setButtonText(QWizard.WizardButton which, QString text)'''
    def options(self):
        '''QWizard.WizardOptions QWizard.options()'''
        return QWizard.WizardOptions()
    def setOptions(self, options):
        '''void QWizard.setOptions(QWizard.WizardOptions options)'''
    def testOption(self, option):
        '''bool QWizard.testOption(QWizard.WizardOption option)'''
        return bool()
    def setOption(self, option, on = True):
        '''void QWizard.setOption(QWizard.WizardOption option, bool on = True)'''
    def wizardStyle(self):
        '''QWizard.WizardStyle QWizard.wizardStyle()'''
        return QWizard.WizardStyle()
    def setWizardStyle(self, style):
        '''void QWizard.setWizardStyle(QWizard.WizardStyle style)'''
    def field(self, name):
        '''QVariant QWizard.field(QString name)'''
        return QVariant()
    def setField(self, name, value):
        '''void QWizard.setField(QString name, QVariant value)'''
    def nextId(self):
        '''int QWizard.nextId()'''
        return int()
    def validateCurrentPage(self):
        '''bool QWizard.validateCurrentPage()'''
        return bool()
    def currentId(self):
        '''int QWizard.currentId()'''
        return int()
    def currentPage(self):
        '''QWizardPage QWizard.currentPage()'''
        return QWizardPage()
    def startId(self):
        '''int QWizard.startId()'''
        return int()
    def setStartId(self, id):
        '''void QWizard.setStartId(int id)'''
    def visitedPages(self):
        '''list-of-int QWizard.visitedPages()'''
        return [int()]
    def hasVisitedPage(self, id):
        '''bool QWizard.hasVisitedPage(int id)'''
        return bool()
    def page(self, id):
        '''QWizardPage QWizard.page(int id)'''
        return QWizardPage()
    def setPage(self, id, page):
        '''void QWizard.setPage(int id, QWizardPage page)'''
    def addPage(self, page):
        '''int QWizard.addPage(QWizardPage page)'''
        return int()
    class WizardOptions():
        """"""
        def __init__(self):
            '''QWizard.WizardOptions QWizard.WizardOptions.__init__()'''
            return QWizard.WizardOptions()
        def __init__(self):
            '''int QWizard.WizardOptions.__init__()'''
            return int()
        def __init__(self):
            '''void QWizard.WizardOptions.__init__()'''
        def __bool__(self):
            '''int QWizard.WizardOptions.__bool__()'''
            return int()
        def __ne__(self, f):
            '''bool QWizard.WizardOptions.__ne__(QWizard.WizardOptions f)'''
            return bool()
        def __eq__(self, f):
            '''bool QWizard.WizardOptions.__eq__(QWizard.WizardOptions f)'''
            return bool()
        def __invert__(self):
            '''QWizard.WizardOptions QWizard.WizardOptions.__invert__()'''
            return QWizard.WizardOptions()
        def __and__(self, mask):
            '''QWizard.WizardOptions QWizard.WizardOptions.__and__(int mask)'''
            return QWizard.WizardOptions()
        def __xor__(self, f):
            '''QWizard.WizardOptions QWizard.WizardOptions.__xor__(QWizard.WizardOptions f)'''
            return QWizard.WizardOptions()
        def __xor__(self, f):
            '''QWizard.WizardOptions QWizard.WizardOptions.__xor__(int f)'''
            return QWizard.WizardOptions()
        def __or__(self, f):
            '''QWizard.WizardOptions QWizard.WizardOptions.__or__(QWizard.WizardOptions f)'''
            return QWizard.WizardOptions()
        def __or__(self, f):
            '''QWizard.WizardOptions QWizard.WizardOptions.__or__(int f)'''
            return QWizard.WizardOptions()
        def __int__(self):
            '''int QWizard.WizardOptions.__int__()'''
            return int()
        def __ixor__(self, f):
            '''QWizard.WizardOptions QWizard.WizardOptions.__ixor__(QWizard.WizardOptions f)'''
            return QWizard.WizardOptions()
        def __ior__(self, f):
            '''QWizard.WizardOptions QWizard.WizardOptions.__ior__(QWizard.WizardOptions f)'''
            return QWizard.WizardOptions()
        def __iand__(self, mask):
            '''QWizard.WizardOptions QWizard.WizardOptions.__iand__(int mask)'''
            return QWizard.WizardOptions()


class QWizardPage(QWidget):
    """"""
    def __init__(self, parent = None):
        '''void QWizardPage.__init__(QWidget parent = None)'''
    def wizard(self):
        '''QWizard QWizardPage.wizard()'''
        return QWizard()
    def registerField(self, name, widget, property = None, changedSignal = 0):
        '''void QWizardPage.registerField(QString name, QWidget widget, str property = None, signal changedSignal = 0)'''
    def registerField(self, name, widget, property = None, changedSignal = 0):
        '''void QWizardPage.registerField(QString name, QWidget widget, str property = None, SIGNAL() changedSignal = 0)'''
    def field(self, name):
        '''QVariant QWizardPage.field(QString name)'''
        return QVariant()
    def setField(self, name, value):
        '''void QWizardPage.setField(QString name, QVariant value)'''
    completeChanged = pyqtSignal() # void completeChanged() - signal
    def nextId(self):
        '''int QWizardPage.nextId()'''
        return int()
    def isComplete(self):
        '''bool QWizardPage.isComplete()'''
        return bool()
    def validatePage(self):
        '''bool QWizardPage.validatePage()'''
        return bool()
    def cleanupPage(self):
        '''void QWizardPage.cleanupPage()'''
    def initializePage(self):
        '''void QWizardPage.initializePage()'''
    def buttonText(self, which):
        '''QString QWizardPage.buttonText(QWizard.WizardButton which)'''
        return QString()
    def setButtonText(self, which, text):
        '''void QWizardPage.setButtonText(QWizard.WizardButton which, QString text)'''
    def isCommitPage(self):
        '''bool QWizardPage.isCommitPage()'''
        return bool()
    def setCommitPage(self, commitPage):
        '''void QWizardPage.setCommitPage(bool commitPage)'''
    def isFinalPage(self):
        '''bool QWizardPage.isFinalPage()'''
        return bool()
    def setFinalPage(self, finalPage):
        '''void QWizardPage.setFinalPage(bool finalPage)'''
    def pixmap(self, which):
        '''QPixmap QWizardPage.pixmap(QWizard.WizardPixmap which)'''
        return QPixmap()
    def setPixmap(self, which, pixmap):
        '''void QWizardPage.setPixmap(QWizard.WizardPixmap which, QPixmap pixmap)'''
    def subTitle(self):
        '''QString QWizardPage.subTitle()'''
        return QString()
    def setSubTitle(self, subTitle):
        '''void QWizardPage.setSubTitle(QString subTitle)'''
    def title(self):
        '''QString QWizardPage.title()'''
        return QString()
    def setTitle(self, title):
        '''void QWizardPage.setTitle(QString title)'''


class QWorkspace(QWidget):
    """"""
    # Enum QWorkspace.WindowOrder
    CreationOrder = 0
    StackingOrder = 0

    def __init__(self, parent = None):
        '''void QWorkspace.__init__(QWidget parent = None)'''
    def wheelEvent(self, e):
        '''void QWorkspace.wheelEvent(QWheelEvent e)'''
    def hideEvent(self, e):
        '''void QWorkspace.hideEvent(QHideEvent e)'''
    def showEvent(self, e):
        '''void QWorkspace.showEvent(QShowEvent e)'''
    def eventFilter(self):
        '''QEvent QWorkspace.eventFilter()'''
        return QEvent()
    def resizeEvent(self):
        '''QResizeEvent QWorkspace.resizeEvent()'''
        return QResizeEvent()
    def childEvent(self):
        '''QChildEvent QWorkspace.childEvent()'''
        return QChildEvent()
    def changeEvent(self):
        '''QEvent QWorkspace.changeEvent()'''
        return QEvent()
    def paintEvent(self, e):
        '''void QWorkspace.paintEvent(QPaintEvent e)'''
    def event(self, e):
        '''bool QWorkspace.event(QEvent e)'''
        return bool()
    def activatePreviousWindow(self):
        '''void QWorkspace.activatePreviousWindow()'''
    def activateNextWindow(self):
        '''void QWorkspace.activateNextWindow()'''
    def closeAllWindows(self):
        '''void QWorkspace.closeAllWindows()'''
    def closeActiveWindow(self):
        '''void QWorkspace.closeActiveWindow()'''
    def arrangeIcons(self):
        '''void QWorkspace.arrangeIcons()'''
    def tile(self):
        '''void QWorkspace.tile()'''
    def cascade(self):
        '''void QWorkspace.cascade()'''
    def setActiveWindow(self, w):
        '''void QWorkspace.setActiveWindow(QWidget w)'''
    windowActivated = pyqtSignal() # void windowActivated(QWidget *) - signal
    def background(self):
        '''QBrush QWorkspace.background()'''
        return QBrush()
    def setBackground(self, background):
        '''void QWorkspace.setBackground(QBrush background)'''
    def setScrollBarsEnabled(self, enable):
        '''void QWorkspace.setScrollBarsEnabled(bool enable)'''
    def scrollBarsEnabled(self):
        '''bool QWorkspace.scrollBarsEnabled()'''
        return bool()
    def sizeHint(self):
        '''QSize QWorkspace.sizeHint()'''
        return QSize()
    def addWindow(self, w, flags = 0):
        '''QWidget QWorkspace.addWindow(QWidget w, Qt.WindowFlags flags = 0)'''
        return QWidget()
    def windowList(self, order = None):
        '''list-of-QWidget QWorkspace.windowList(QWorkspace.WindowOrder order = QWorkspace.CreationOrder)'''
        return [QWidget()]
    def activeWindow(self):
        '''QWidget QWorkspace.activeWindow()'''
        return QWidget()


class QX11EmbedWidget(QWidget):
    """"""
    # Enum QX11EmbedWidget.Error
    Unknown = 0
    Internal = 0
    InvalidWindowID = 0

    def __init__(self, parent = None):
        '''void QX11EmbedWidget.__init__(QWidget parent = None)'''
    def resizeEvent(self):
        '''QResizeEvent QX11EmbedWidget.resizeEvent()'''
        return QResizeEvent()
    def event(self):
        '''QEvent QX11EmbedWidget.event()'''
        return QEvent()
    def eventFilter(self):
        '''QEvent QX11EmbedWidget.eventFilter()'''
        return QEvent()
    embedded = pyqtSignal() # void embedded() - signal
    containerClosed = pyqtSignal() # void containerClosed() - signal
    def error(self):
        '''QX11EmbedWidget.Error QX11EmbedWidget.error()'''
        return QX11EmbedWidget.Error()
    error = pyqtSignal() # void error(QX11EmbedWidget::Error) - signal
    def containerWinId(self):
        '''int QX11EmbedWidget.containerWinId()'''
        return int()
    def embedInto(self, id):
        '''void QX11EmbedWidget.embedInto(int id)'''


class QX11EmbedContainer(QWidget):
    """"""
    # Enum QX11EmbedContainer.Error
    Unknown = 0
    Internal = 0
    InvalidWindowID = 0

    def __init__(self, parent = None):
        '''void QX11EmbedContainer.__init__(QWidget parent = None)'''
    def event(self):
        '''QEvent QX11EmbedContainer.event()'''
        return QEvent()
    def hideEvent(self):
        '''QHideEvent QX11EmbedContainer.hideEvent()'''
        return QHideEvent()
    def showEvent(self):
        '''QShowEvent QX11EmbedContainer.showEvent()'''
        return QShowEvent()
    def resizeEvent(self):
        '''QResizeEvent QX11EmbedContainer.resizeEvent()'''
        return QResizeEvent()
    def paintEvent(self, e):
        '''void QX11EmbedContainer.paintEvent(QPaintEvent e)'''
    def eventFilter(self):
        '''QEvent QX11EmbedContainer.eventFilter()'''
        return QEvent()
    clientIsEmbedded = pyqtSignal() # void clientIsEmbedded() - signal
    clientClosed = pyqtSignal() # void clientClosed() - signal
    def minimumSizeHint(self):
        '''QSize QX11EmbedContainer.minimumSizeHint()'''
        return QSize()
    def error(self):
        '''QX11EmbedContainer.Error QX11EmbedContainer.error()'''
        return QX11EmbedContainer.Error()
    error = pyqtSignal() # void error(QX11EmbedContainer::Error) - signal
    def embedClient(self, id):
        '''void QX11EmbedContainer.embedClient(int id)'''
    def discardClient(self):
        '''void QX11EmbedContainer.discardClient()'''
    def clientWinId(self):
        '''int QX11EmbedContainer.clientWinId()'''
        return int()


class QX11Info():
    """"""
    def __init__(self):
        '''void QX11Info.__init__()'''
    def __init__(self, other):
        '''void QX11Info.__init__(QX11Info other)'''
    def isCompositingManagerRunning(self):
        '''static bool QX11Info.isCompositingManagerRunning()'''
        return bool()
    def setAppUserTime(self, time):
        '''static void QX11Info.setAppUserTime(int time)'''
    def setAppTime(self, time):
        '''static void QX11Info.setAppTime(int time)'''
    def appUserTime(self):
        '''static int QX11Info.appUserTime()'''
        return int()
    def appTime(self):
        '''static int QX11Info.appTime()'''
        return int()
    def setAppDpiY(self, screen, dpi):
        '''static void QX11Info.setAppDpiY(int screen, int dpi)'''
    def setAppDpiX(self, screen, dpi):
        '''static void QX11Info.setAppDpiX(int screen, int dpi)'''
    def appDpiY(self, screen = None):
        '''static int QX11Info.appDpiY(int screen = -1)'''
        return int()
    def appDpiX(self, screen = None):
        '''static int QX11Info.appDpiX(int screen = -1)'''
        return int()
    def appDefaultVisual(self, screen = None):
        '''static bool QX11Info.appDefaultVisual(int screen = -1)'''
        return bool()
    def appDefaultColormap(self, screen = None):
        '''static bool QX11Info.appDefaultColormap(int screen = -1)'''
        return bool()
    def appRootWindow(self, screen = None):
        '''static int QX11Info.appRootWindow(int screen = -1)'''
        return int()
    def appVisual(self, screen = None):
        '''static sip.voidptr QX11Info.appVisual(int screen = -1)'''
        return sip.voidptr()
    def appColormap(self, screen = None):
        '''static int QX11Info.appColormap(int screen = -1)'''
        return int()
    def appCells(self, screen = None):
        '''static int QX11Info.appCells(int screen = -1)'''
        return int()
    def appDepth(self, screen = None):
        '''static int QX11Info.appDepth(int screen = -1)'''
        return int()
    def appScreen(self):
        '''static int QX11Info.appScreen()'''
        return int()
    def defaultVisual(self):
        '''bool QX11Info.defaultVisual()'''
        return bool()
    def visual(self):
        '''sip.voidptr QX11Info.visual()'''
        return sip.voidptr()
    def defaultColormap(self):
        '''bool QX11Info.defaultColormap()'''
        return bool()
    def colormap(self):
        '''int QX11Info.colormap()'''
        return int()
    def cells(self):
        '''int QX11Info.cells()'''
        return int()
    def depth(self):
        '''int QX11Info.depth()'''
        return int()
    def screen(self):
        '''int QX11Info.screen()'''
        return int()
    def appClass(self):
        '''static str QX11Info.appClass()'''
        return str()
    def display(self):
        '''static Display QX11Info.display()'''
        return Display()


class QPyTextObject(QObject, QTextObjectInterface):
    """"""
    def __init__(self, parent = None):
        '''void QPyTextObject.__init__(QObject parent = None)'''


class QPointF():
    """"""
    def __init__(self):
        '''QPainterPath.Element QPointF.__init__()'''
        return QPainterPath.Element()


class QString():
    """"""
    def __init__(self):
        '''QKeySequence QString.__init__()'''
        return QKeySequence()


qApp = None # QApplication member

def qIsGray(rgb):
    '''static bool qIsGray(int rgb)'''
    return bool()

def qGray(r, g, b):
    '''static int qGray(int r, int g, int b)'''
    return int()

def qGray(rgb):
    '''static int qGray(int rgb)'''
    return int()

def qRgba(r, g, b, a):
    '''static int qRgba(int r, int g, int b, int a)'''
    return int()

def qRgb(r, g, b):
    '''static int qRgb(int r, int g, int b)'''
    return int()

def qAlpha(rgb):
    '''static int qAlpha(int rgb)'''
    return int()

def qBlue(rgb):
    '''static int qBlue(int rgb)'''
    return int()

def qGreen(rgb):
    '''static int qGreen(int rgb)'''
    return int()

def qRed(rgb):
    '''static int qRed(int rgb)'''
    return int()

def qFuzzyCompare(m1, m2):
    '''static bool qFuzzyCompare(QMatrix m1, QMatrix m2)'''
    return bool()

def qFuzzyCompare(m1, m2):
    '''static bool qFuzzyCompare(QMatrix4x4 m1, QMatrix4x4 m2)'''
    return bool()

def qFuzzyCompare(q1, q2):
    '''static bool qFuzzyCompare(QQuaternion q1, QQuaternion q2)'''
    return bool()

def qFuzzyCompare(t1, t2):
    '''static bool qFuzzyCompare(QTransform t1, QTransform t2)'''
    return bool()

def qFuzzyCompare(v1, v2):
    '''static bool qFuzzyCompare(QVector2D v1, QVector2D v2)'''
    return bool()

def qFuzzyCompare(v1, v2):
    '''static bool qFuzzyCompare(QVector3D v1, QVector3D v2)'''
    return bool()

def qFuzzyCompare(v1, v2):
    '''static bool qFuzzyCompare(QVector4D v1, QVector4D v2)'''
    return bool()

def qDrawBorderPixmap(painter, target, margins, pixmap):
    '''static void qDrawBorderPixmap(QPainter painter, QRect target, QMargins margins, QPixmap pixmap)'''


def qDrawPlainRect(p, x, y, w, h, lineWidth = 1, fill = None):
    '''static QColor qDrawPlainRect(QPainter p, int x, int y, int w, int h, int lineWidth = 1, QBrush fill = None)'''
    return QColor()

def qDrawPlainRect(p, r, lineWidth = 1, fill = None):
    '''static QColor qDrawPlainRect(QPainter p, QRect r, int lineWidth = 1, QBrush fill = None)'''
    return QColor()

def qDrawWinPanel(p, x, y, w, h, pal, sunken = False, fill = None):
    '''static void qDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken = False, QBrush fill = None)'''


def qDrawWinPanel(p, r, pal, sunken = False, fill = None):
    '''static void qDrawWinPanel(QPainter p, QRect r, QPalette pal, bool sunken = False, QBrush fill = None)'''


def qDrawWinButton(p, x, y, w, h, pal, sunken = False, fill = None):
    '''static void qDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken = False, QBrush fill = None)'''


def qDrawWinButton(p, r, pal, sunken = False, fill = None):
    '''static void qDrawWinButton(QPainter p, QRect r, QPalette pal, bool sunken = False, QBrush fill = None)'''


def qDrawShadePanel(p, x, y, w, h, pal, sunken = False, lineWidth = 1, fill = None):
    '''static void qDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken = False, int lineWidth = 1, QBrush fill = None)'''


def qDrawShadePanel(p, r, pal, sunken = False, lineWidth = 1, fill = None):
    '''static void qDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken = False, int lineWidth = 1, QBrush fill = None)'''


def qDrawShadeRect(p, x, y, w, h, pal, sunken = False, lineWidth = 1, midLineWidth = 0, fill = None):
    '''static void qDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken = False, int lineWidth = 1, int midLineWidth = 0, QBrush fill = None)'''


def qDrawShadeRect(p, r, pal, sunken = False, lineWidth = 1, midLineWidth = 0, fill = None):
    '''static void qDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken = False, int lineWidth = 1, int midLineWidth = 0, QBrush fill = None)'''


def qDrawShadeLine(p, x1, y1, x2, y2, pal, sunken = True, lineWidth = 1, midLineWidth = 0):
    '''static void qDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken = True, int lineWidth = 1, int midLineWidth = 0)'''


def qDrawShadeLine(p, p1, p2, pal, sunken = True, lineWidth = 1, midLineWidth = 0):
    '''static void qDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken = True, int lineWidth = 1, int midLineWidth = 0)'''


def qSwap(value1, value2):
    '''static void qSwap(QBitmap value1, QBitmap value2)'''


def qSwap(value1, value2):
    '''static void qSwap(QBrush value1, QBrush value2)'''


def qSwap(value1, value2):
    '''static void qSwap(QIcon value1, QIcon value2)'''


def qSwap(value1, value2):
    '''static void qSwap(QImage value1, QImage value2)'''


def qSwap(value1, value2):
    '''static void qSwap(QKeySequence value1, QKeySequence value2)'''


def qSwap(value1, value2):
    '''static void qSwap(QPen value1, QPen value2)'''


def qSwap(value1, value2):
    '''static void qSwap(QPicture value1, QPicture value2)'''


def qSwap(value1, value2):
    '''static void qSwap(QPixmap value1, QPixmap value2)'''


def qt_x11_wait_for_window_manager(widget):
    '''static void qt_x11_wait_for_window_manager(QWidget widget)'''


